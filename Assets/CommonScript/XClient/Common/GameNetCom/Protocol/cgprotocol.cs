//  This file is generated by orm_tools. Do not modify manually, or all changes will be lost.


using System;
using System.Collections.Generic;
using System.Text;
using ORM;


namespace cgpol 
{

	public class TCONST
	{
		public const int ORM_MAX_TRANSFER_DATA_LEN = (int)32768;    //  数据中转最大长度
	}
	//  GATEWAY错误码
	public enum GATEWAY_ERR{
		    ERR_GATEWAY_OK=0,    //OK,无错误
		    ERR_GATEWAY_UNKOWN=1,    //未知错误
		    ERR_GATEWAY_SYS_NOTREADY=2,    //未准备好
		    ERR_GATEWAY_PACK_ERR=3,    //打包错误
		    ERR_GATEWAY_UNPACK_ERR=4,    //解包错误
		    ERR_GATEWAY_ORM_ERR=5,    //ORM错误
		    ERR_GATEWAY_SYS_BUSY=6,    //系统忙
		    ERR_GATEWAY_SYS_ABNORMAL=7,    //系统异常
		    ERR_GATEWAY_KICK_NO_HEARTBEAT=20,    //没有心跳回复
		    ERR_GATEWAY_KICK_MAX_PACKET=21,    //超过最大数据包限制，恶意客户端
		    ERR_GATEWAY_FULL=40,    //网关连接的客户端数量已达上限
		    ERR_GATEWAY_INVAILD_ENTRY=41,    //尝试给没有入口权限的应用服发消息
		    ERR_GATEWAY_SEND_TO_APP_FAIL=42,    //发给目标应用服失败
		    ERR_GATEWAY_REFUSE_SERVICE=43,    //网关拒绝服务，需连接其它网关
		    ERR_GATEWAY_NOT_EXIST_CLIENTID=60,    //CLIENTID不存在
		    ERR_GATEWAY_MODIFY_ENTRY_INVAILD_TYPE=61,    //非法的入口权限修改类型
		    ERR_GATEWAY_MODIFY_ENTRY_ADD_EXIST_ENTRY=62,    //该App类型已有入口权限，无法新增同类型的其它AppID为入口
		    ERR_GATEWAY_MODIFY_ENTRY_SET_NOT_EXIST_ENTRY=63,    //该App类型没有入口权限，无法修改
		    ERR_GATEWAY_SEND_TO_GATEWAY_FAIL=64,    //发送消息给网关失败
	}; 

	public class EnumPrint {
	static public string EnumPrint_GATEWAY_ERR(GATEWAY_ERR enType){
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_OK) return "OK,无错误";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_UNKOWN) return "未知错误";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_SYS_NOTREADY) return "未准备好";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_PACK_ERR) return "打包错误";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_UNPACK_ERR) return "解包错误";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_ORM_ERR) return "ORM错误";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_SYS_BUSY) return "系统忙";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_SYS_ABNORMAL) return "系统异常";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_KICK_NO_HEARTBEAT) return "没有心跳回复";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_KICK_MAX_PACKET) return "超过最大数据包限制，恶意客户端";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_FULL) return "网关连接的客户端数量已达上限";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_INVAILD_ENTRY) return "尝试给没有入口权限的应用服发消息";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_SEND_TO_APP_FAIL) return "发给目标应用服失败";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_REFUSE_SERVICE) return "网关拒绝服务，需连接其它网关";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_NOT_EXIST_CLIENTID) return "CLIENTID不存在";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_MODIFY_ENTRY_INVAILD_TYPE) return "非法的入口权限修改类型";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_MODIFY_ENTRY_ADD_EXIST_ENTRY) return "该App类型已有入口权限，无法新增同类型的其它AppID为入口";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_MODIFY_ENTRY_SET_NOT_EXIST_ENTRY) return "该App类型没有入口权限，无法修改";
		        if (enType == GATEWAY_ERR.ERR_GATEWAY_SEND_TO_GATEWAY_FAIL) return "发送消息给网关失败";
				return "";
	} 

	}   // EnumPrint



// 心跳检查请求，网关->客户端
public class TMSG_GATEWAY_HEART_CHECK_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private uint dwAvgLatency;   //平均网络延时


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_dwAvgLatency() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_dwAvgLatency() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_dwAvgLatency() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_dwAvgLatency(uint _dwAvgLatency){set_has_dwAvgLatency(); dwAvgLatency=_dwAvgLatency;}
	public uint get_dwAvgLatency(){if (has_dwAvgLatency()) {return dwAvgLatency;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_dwAvgLatency()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(dwAvgLatency);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_dwAvgLatency()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(dwAvgLatency);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_dwAvgLatency();
				dwAvgLatency = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 心跳检查回复，客户端->网关
public class TMSG_GATEWAY_HEART_CHECK_RSP
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 连接结果通知
public class TMSG_GATEWAY_CONNECT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private uint dwError;   //错误码。为ERR_GATEWAY_FULL时表示网关连接已达上限，需要换一个网关尝试连接


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_dwError() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_dwError() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_dwError() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_dwError(uint _dwError){set_has_dwError(); dwError=_dwError;}
	public uint get_dwError(){if (has_dwError()) {return dwError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_dwError();
				dwError = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 踢人通知
public class TMSG_GATEWAY_KICK_CLIENT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private uint dwReason;   //踢人原因。参考GatewayErrCode.xml


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_dwReason() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_dwReason() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_dwReason() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_dwReason(uint _dwReason){set_has_dwReason(); dwReason=_dwReason;}
	public uint get_dwReason(){if (has_dwReason()) {return dwReason;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_dwReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(dwReason);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_dwReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(dwReason);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_dwReason();
				dwReason = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端发消息给网关
public class TMSG_GATEWAY_SEND_DATA_C2G_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iDstType;   //传输消息的目标App类型
	private uint dwBufferLen;   //buffer长度
	private byte[] arrBuffer = new byte[(int)TCONST.ORM_MAX_TRANSFER_DATA_LEN];   //buffer

	public const int countof_arrBuffer = (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN;

	public const int MAX_PACKEDSIZE = 32807;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDstType() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iDstType() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iDstType() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iDstType(int _iDstType){set_has_iDstType(); iDstType=_iDstType;}
	public int get_iDstType(){if (has_iDstType()) {return iDstType;} return 0;}

	public bool has_dwBufferLen() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_dwBufferLen() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_dwBufferLen() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_dwBufferLen(uint _dwBufferLen){set_has_dwBufferLen(); dwBufferLen=_dwBufferLen;}
	public uint get_dwBufferLen(){if (has_dwBufferLen()) {return dwBufferLen;} return 0;}

	public bool has_arrBuffer() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_arrBuffer() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_arrBuffer() {__orm_has_bits[0] &= ~(0x2000u);}
	public byte[] set_arrBuffer(){set_has_arrBuffer(); return arrBuffer;}
	public byte[] get_arrBuffer(){return arrBuffer;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDstType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iDstType);
		};
		if (has_dwBufferLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwBufferLen);
		};
		if (has_arrBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_dwBufferLen();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) && (__orm_iLoopVar < dwBufferLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrBuffer[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDstType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iDstType);
		};
		if (has_dwBufferLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwBufferLen);
		};
		if (has_arrBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_dwBufferLen();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) {
				oPacker.PushFieldName("dwBufferLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) && (__orm_iLoopVar < dwBufferLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrBuffer[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_iDstType();
				iDstType = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_dwBufferLen();
				dwBufferLen = oPacker.ReadVarintUINT32();
			}break;
			case 13: {
				set_has_arrBuffer();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				dwBufferLen=dwBufferLen<__orm_iArrCount ? dwBufferLen:(uint)__orm_iArrCount;
				dwBufferLen=dwBufferLen<(uint)TCONST.ORM_MAX_TRANSFER_DATA_LEN ? dwBufferLen:(uint)TCONST.ORM_MAX_TRANSFER_DATA_LEN;
				if (dwBufferLen > (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < dwBufferLen; ++__orm_iLoopVar) {
					arrBuffer[__orm_iLoopVar] = oPacker.ReadUINT8();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端发消息给网关的回复
public class TMSG_GATEWAY_SEND_DATA_C2G_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iDstType;   //传输消息的目标App类型
	private uint dwError;   //错误码


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDstType() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iDstType() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iDstType() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iDstType(int _iDstType){set_has_iDstType(); iDstType=_iDstType;}
	public int get_iDstType(){if (has_iDstType()) {return iDstType;} return 0;}

	public bool has_dwError() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_dwError() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_dwError() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_dwError(uint _dwError){set_has_dwError(); dwError=_dwError;}
	public uint get_dwError(){if (has_dwError()) {return dwError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDstType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iDstType);
		};
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDstType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iDstType);
		};
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_iDstType();
				iDstType = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_dwError();
				dwError = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端接收网关的消息
public class TMSG_GATEWAY_RECV_DATA_G2C_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte bStart;   //数据开始包
	private sbyte bEnd;   //数据结束包
	private uint dwBufferLen;   //buffer长度
	private byte[] arrBuffer = new byte[(int)TCONST.ORM_MAX_TRANSFER_DATA_LEN];   //buffer

	public const int countof_arrBuffer = (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN;

	public const int MAX_PACKEDSIZE = 32809;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_bStart() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_bStart() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_bStart() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_bStart(sbyte _bStart){set_has_bStart(); bStart=_bStart;}
	public sbyte get_bStart(){if (has_bStart()) {return bStart;} return 0;}

	public bool has_bEnd() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_bEnd() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_bEnd() {__orm_has_bits[0] &= ~(0x200u);}
	public void set_bEnd(sbyte _bEnd){set_has_bEnd(); bEnd=_bEnd;}
	public sbyte get_bEnd(){if (has_bEnd()) {return bEnd;} return 0;}

	public bool has_dwBufferLen() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_dwBufferLen() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_dwBufferLen() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_dwBufferLen(uint _dwBufferLen){set_has_dwBufferLen(); dwBufferLen=_dwBufferLen;}
	public uint get_dwBufferLen(){if (has_dwBufferLen()) {return dwBufferLen;} return 0;}

	public bool has_arrBuffer() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_arrBuffer() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_arrBuffer() {__orm_has_bits[0] &= ~(0x1000u);}
	public byte[] set_arrBuffer(){set_has_arrBuffer(); return arrBuffer;}
	public byte[] get_arrBuffer(){return arrBuffer;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,2));  // f id
			oPacker.WriteINT8(bStart);
		};
		if (has_bEnd()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,2));  // f id
			oPacker.WriteINT8(bEnd);
		};
		if (has_dwBufferLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(dwBufferLen);
		};
		if (has_arrBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_dwBufferLen();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) && (__orm_iLoopVar < dwBufferLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrBuffer[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,2));  // f id
			oPacker.WriteINT8(bStart);
		};
		if (has_bEnd()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,2));  // f id
			oPacker.WriteINT8(bEnd);
		};
		if (has_dwBufferLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(dwBufferLen);
		};
		if (has_arrBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_dwBufferLen();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) {
				oPacker.PushFieldName("dwBufferLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) && (__orm_iLoopVar < dwBufferLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrBuffer[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 8: {
				set_has_bStart();
				bStart = oPacker.ReadINT8();
			}break;
			case 9: {
				set_has_bEnd();
				bEnd = oPacker.ReadINT8();
			}break;
			case 11: {
				set_has_dwBufferLen();
				dwBufferLen = oPacker.ReadVarintUINT32();
			}break;
			case 12: {
				set_has_arrBuffer();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				dwBufferLen=dwBufferLen<__orm_iArrCount ? dwBufferLen:(uint)__orm_iArrCount;
				dwBufferLen=dwBufferLen<(uint)TCONST.ORM_MAX_TRANSFER_DATA_LEN ? dwBufferLen:(uint)TCONST.ORM_MAX_TRANSFER_DATA_LEN;
				if (dwBufferLen > (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < dwBufferLen; ++__orm_iLoopVar) {
					arrBuffer[__orm_iLoopVar] = oPacker.ReadUINT8();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 网关转发消息给应用服
public class TMSG_GATEWAY_TRANSFER_DATA_G2A_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long n64ClientID;   //ClientID
	private uint dwBufferLen;   //buffer长度
	private byte[] arrBuffer = new byte[(int)TCONST.ORM_MAX_TRANSFER_DATA_LEN];   //buffer

	public const int countof_arrBuffer = (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN;

	public const int MAX_PACKEDSIZE = 32812;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_n64ClientID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_n64ClientID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_n64ClientID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_n64ClientID(long _n64ClientID){set_has_n64ClientID(); n64ClientID=_n64ClientID;}
	public long get_n64ClientID(){if (has_n64ClientID()) {return n64ClientID;} return 0;}

	public bool has_dwBufferLen() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_dwBufferLen() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_dwBufferLen() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_dwBufferLen(uint _dwBufferLen){set_has_dwBufferLen(); dwBufferLen=_dwBufferLen;}
	public uint get_dwBufferLen(){if (has_dwBufferLen()) {return dwBufferLen;} return 0;}

	public bool has_arrBuffer() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_arrBuffer() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_arrBuffer() {__orm_has_bits[0] &= ~(0x2000u);}
	public byte[] set_arrBuffer(){set_has_arrBuffer(); return arrBuffer;}
	public byte[] get_arrBuffer(){return arrBuffer;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_dwBufferLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwBufferLen);
		};
		if (has_arrBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_dwBufferLen();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) && (__orm_iLoopVar < dwBufferLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrBuffer[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_dwBufferLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwBufferLen);
		};
		if (has_arrBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_dwBufferLen();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) {
				oPacker.PushFieldName("dwBufferLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) && (__orm_iLoopVar < dwBufferLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrBuffer[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_n64ClientID();
				n64ClientID = oPacker.ReadVarintINT64();
			}break;
			case 12: {
				set_has_dwBufferLen();
				dwBufferLen = oPacker.ReadVarintUINT32();
			}break;
			case 13: {
				set_has_arrBuffer();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				dwBufferLen=dwBufferLen<__orm_iArrCount ? dwBufferLen:(uint)__orm_iArrCount;
				dwBufferLen=dwBufferLen<(uint)TCONST.ORM_MAX_TRANSFER_DATA_LEN ? dwBufferLen:(uint)TCONST.ORM_MAX_TRANSFER_DATA_LEN;
				if (dwBufferLen > (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < dwBufferLen; ++__orm_iLoopVar) {
					arrBuffer[__orm_iLoopVar] = oPacker.ReadUINT8();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 应用服转发消息给网关
public class TMSG_GATEWAY_TRANSFER_DATA_A2G_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iClientNum;   //
	private long[] arrClientID = new long[(int)128];   //ClientID
	private sbyte bStart;   //数据开始包
	private sbyte bEnd;   //数据结束包
	private uint dwBufferLen;   //buffer长度
	private byte[] arrBuffer = new byte[(int)TCONST.ORM_MAX_TRANSFER_DATA_LEN];   //buffer

	public const int countof_arrClientID = (int)128;
	public const int countof_arrBuffer = (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN;

	public const int MAX_PACKEDSIZE = 34113;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iClientNum() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iClientNum() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iClientNum() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iClientNum(int _iClientNum){set_has_iClientNum(); iClientNum=_iClientNum;}
	public int get_iClientNum(){if (has_iClientNum()) {return iClientNum;} return 0;}

	public bool has_arrClientID() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_arrClientID() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_arrClientID() {__orm_has_bits[0] &= ~(0x40u);}
	public long[] set_arrClientID(){set_has_arrClientID(); return arrClientID;}
	public long[] get_arrClientID(){return arrClientID;}

	public bool has_bStart() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_bStart() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_bStart() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_bStart(sbyte _bStart){set_has_bStart(); bStart=_bStart;}
	public sbyte get_bStart(){if (has_bStart()) {return bStart;} return 0;}

	public bool has_bEnd() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_bEnd() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_bEnd() {__orm_has_bits[0] &= ~(0x200u);}
	public void set_bEnd(sbyte _bEnd){set_has_bEnd(); bEnd=_bEnd;}
	public sbyte get_bEnd(){if (has_bEnd()) {return bEnd;} return 0;}

	public bool has_dwBufferLen() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_dwBufferLen() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_dwBufferLen() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_dwBufferLen(uint _dwBufferLen){set_has_dwBufferLen(); dwBufferLen=_dwBufferLen;}
	public uint get_dwBufferLen(){if (has_dwBufferLen()) {return dwBufferLen;} return 0;}

	public bool has_arrBuffer() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_arrBuffer() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_arrBuffer() {__orm_has_bits[0] &= ~(0x2000u);}
	public byte[] set_arrBuffer(){set_has_arrBuffer(); return arrBuffer;}
	public byte[] get_arrBuffer(){return arrBuffer;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iClientNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iClientNum);
		};
		if (has_arrClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iClientNum();
			if (__orm_ReferVar > (int)128) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)128) && (__orm_iLoopVar < iClientNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrClientID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,2));  // f id
			oPacker.WriteINT8(bStart);
		};
		if (has_bEnd()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,2));  // f id
			oPacker.WriteINT8(bEnd);
		};
		if (has_dwBufferLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwBufferLen);
		};
		if (has_arrBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_dwBufferLen();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) && (__orm_iLoopVar < dwBufferLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrBuffer[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iClientNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iClientNum);
		};
		if (has_arrClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iClientNum();
			if (__orm_ReferVar > (int)128) {
				oPacker.PushFieldName("iClientNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)128) && (__orm_iLoopVar < iClientNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrClientID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,2));  // f id
			oPacker.WriteINT8(bStart);
		};
		if (has_bEnd()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,2));  // f id
			oPacker.WriteINT8(bEnd);
		};
		if (has_dwBufferLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwBufferLen);
		};
		if (has_arrBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_dwBufferLen();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) {
				oPacker.PushFieldName("dwBufferLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) && (__orm_iLoopVar < dwBufferLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrBuffer[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 5: {
				set_has_iClientNum();
				iClientNum = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_arrClientID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iClientNum=iClientNum<__orm_iArrCount ? iClientNum:(int)__orm_iArrCount;
				iClientNum=iClientNum<(int)128 ? iClientNum:(int)128;
				if (iClientNum > (int)128) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iClientNum; ++__orm_iLoopVar) {
					arrClientID[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			case 8: {
				set_has_bStart();
				bStart = oPacker.ReadINT8();
			}break;
			case 9: {
				set_has_bEnd();
				bEnd = oPacker.ReadINT8();
			}break;
			case 12: {
				set_has_dwBufferLen();
				dwBufferLen = oPacker.ReadVarintUINT32();
			}break;
			case 13: {
				set_has_arrBuffer();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				dwBufferLen=dwBufferLen<__orm_iArrCount ? dwBufferLen:(uint)__orm_iArrCount;
				dwBufferLen=dwBufferLen<(uint)TCONST.ORM_MAX_TRANSFER_DATA_LEN ? dwBufferLen:(uint)TCONST.ORM_MAX_TRANSFER_DATA_LEN;
				if (dwBufferLen > (int)TCONST.ORM_MAX_TRANSFER_DATA_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < dwBufferLen; ++__orm_iLoopVar) {
					arrBuffer[__orm_iLoopVar] = oPacker.ReadUINT8();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 断开客户端连接请求
public class TMSG_GATEWAY_DISCONNECT_CLIENT_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long n64ClientID;   //ClientID
	private uint dwReason;   //断线原因


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_n64ClientID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_n64ClientID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_n64ClientID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_n64ClientID(long _n64ClientID){set_has_n64ClientID(); n64ClientID=_n64ClientID;}
	public long get_n64ClientID(){if (has_n64ClientID()) {return n64ClientID;} return 0;}

	public bool has_dwReason() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_dwReason() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_dwReason() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_dwReason(uint _dwReason){set_has_dwReason(); dwReason=_dwReason;}
	public uint get_dwReason(){if (has_dwReason()) {return dwReason;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_dwReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwReason);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_dwReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwReason);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_n64ClientID();
				n64ClientID = oPacker.ReadVarintINT64();
			}break;
			case 12: {
				set_has_dwReason();
				dwReason = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端断开连接通知
public class TMSG_GATEWAY_DISCONNECT_CLIENT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long n64ClientID;   //ClientID
	private uint dwError;   //错误码.


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_n64ClientID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_n64ClientID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_n64ClientID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_n64ClientID(long _n64ClientID){set_has_n64ClientID(); n64ClientID=_n64ClientID;}
	public long get_n64ClientID(){if (has_n64ClientID()) {return n64ClientID;} return 0;}

	public bool has_dwError() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_dwError() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_dwError() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_dwError(uint _dwError){set_has_dwError(); dwError=_dwError;}
	public uint get_dwError(){if (has_dwError()) {return dwError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_n64ClientID();
				n64ClientID = oPacker.ReadVarintINT64();
			}break;
			case 12: {
				set_has_dwError();
				dwError = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 修改客户端入口权限请求
public class TMSG_GATEWAY_MODIFY_ENTRY_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long n64ClientID;   //ClientID
	private byte enType;   //修改类型，参考En_ModifyEntryType
	private int iAppType;   //App类型
	private uint dwAppID;   //AppID


	public const int MAX_PACKEDSIZE = 46;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_n64ClientID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_n64ClientID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_n64ClientID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_n64ClientID(long _n64ClientID){set_has_n64ClientID(); n64ClientID=_n64ClientID;}
	public long get_n64ClientID(){if (has_n64ClientID()) {return n64ClientID;} return 0;}

	public bool has_enType() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_enType() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_enType() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_enType(byte _enType){set_has_enType(); enType=_enType;}
	public byte get_enType(){if (has_enType()) {return enType;} return 0;}

	public bool has_iAppType() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_iAppType() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_iAppType() {__orm_has_bits[0] &= ~(0x2000u);}
	public void set_iAppType(int _iAppType){set_has_iAppType(); iAppType=_iAppType;}
	public int get_iAppType(){if (has_iAppType()) {return iAppType;} return 0;}

	public bool has_dwAppID() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_dwAppID() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_dwAppID() {__orm_has_bits[0] &= ~(0x4000u);}
	public void set_dwAppID(uint _dwAppID){set_has_dwAppID(); dwAppID=_dwAppID;}
	public uint get_dwAppID(){if (has_dwAppID()) {return dwAppID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_enType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,2));  // f id
			oPacker.WriteUINT8(enType);
		};
		if (has_iAppType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(iAppType);
		};
		if (has_dwAppID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintUINT32(dwAppID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_enType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,2));  // f id
			oPacker.WriteUINT8(enType);
		};
		if (has_iAppType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(iAppType);
		};
		if (has_dwAppID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintUINT32(dwAppID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_n64ClientID();
				n64ClientID = oPacker.ReadVarintINT64();
			}break;
			case 12: {
				set_has_enType();
				enType = oPacker.ReadUINT8();
			}break;
			case 13: {
				set_has_iAppType();
				iAppType = oPacker.ReadVarintINT32();
			}break;
			case 14: {
				set_has_dwAppID();
				dwAppID = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 修改客户端入口权限回复
public class TMSG_GATEWAY_MODIFY_ENTRY_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private long n64ClientID;   //ClientID
	private int iAppType;   //App类型
	private uint dwAppID;   //AppID
	private uint dwError;   //错误码


	public const int MAX_PACKEDSIZE = 50;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_n64ClientID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_n64ClientID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_n64ClientID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_n64ClientID(long _n64ClientID){set_has_n64ClientID(); n64ClientID=_n64ClientID;}
	public long get_n64ClientID(){if (has_n64ClientID()) {return n64ClientID;} return 0;}

	public bool has_iAppType() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iAppType() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iAppType() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iAppType(int _iAppType){set_has_iAppType(); iAppType=_iAppType;}
	public int get_iAppType(){if (has_iAppType()) {return iAppType;} return 0;}

	public bool has_dwAppID() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_dwAppID() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_dwAppID() {__orm_has_bits[0] &= ~(0x2000u);}
	public void set_dwAppID(uint _dwAppID){set_has_dwAppID(); dwAppID=_dwAppID;}
	public uint get_dwAppID(){if (has_dwAppID()) {return dwAppID;} return 0;}

	public bool has_dwError() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_dwError() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_dwError() {__orm_has_bits[0] &= ~(0x4000u);}
	public void set_dwError(uint _dwError){set_has_dwError(); dwError=_dwError;}
	public uint get_dwError(){if (has_dwError()) {return dwError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_iAppType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iAppType);
		};
		if (has_dwAppID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintUINT32(dwAppID);
		};
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_iAppType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iAppType);
		};
		if (has_dwAppID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintUINT32(dwAppID);
		};
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_n64ClientID();
				n64ClientID = oPacker.ReadVarintINT64();
			}break;
			case 12: {
				set_has_iAppType();
				iAppType = oPacker.ReadVarintINT32();
			}break;
			case 13: {
				set_has_dwAppID();
				dwAppID = oPacker.ReadVarintUINT32();
			}break;
			case 14: {
				set_has_dwError();
				dwError = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 注册客户端状态关注请求（客户端断线会即时通知应用服）
public class TMSG_GATEWAY_REGISTER_CLIENT_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long n64ClientID;   //ClientID
	private uint dwAppID;   //关注客户端的应用服ID


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_n64ClientID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_n64ClientID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_n64ClientID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_n64ClientID(long _n64ClientID){set_has_n64ClientID(); n64ClientID=_n64ClientID;}
	public long get_n64ClientID(){if (has_n64ClientID()) {return n64ClientID;} return 0;}

	public bool has_dwAppID() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_dwAppID() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_dwAppID() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_dwAppID(uint _dwAppID){set_has_dwAppID(); dwAppID=_dwAppID;}
	public uint get_dwAppID(){if (has_dwAppID()) {return dwAppID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_dwAppID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwAppID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_dwAppID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwAppID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_n64ClientID();
				n64ClientID = oPacker.ReadVarintINT64();
			}break;
			case 12: {
				set_has_dwAppID();
				dwAppID = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 注册客户端状态关注回复
public class TMSG_GATEWAY_REGISTER_CLIENT_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private long n64ClientID;   //ClientID
	private uint dwError;   //错误码


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_n64ClientID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_n64ClientID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_n64ClientID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_n64ClientID(long _n64ClientID){set_has_n64ClientID(); n64ClientID=_n64ClientID;}
	public long get_n64ClientID(){if (has_n64ClientID()) {return n64ClientID;} return 0;}

	public bool has_dwError() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_dwError() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_dwError() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_dwError(uint _dwError){set_has_dwError(); dwError=_dwError;}
	public uint get_dwError(){if (has_dwError()) {return dwError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_n64ClientID();
				n64ClientID = oPacker.ReadVarintINT64();
			}break;
			case 12: {
				set_has_dwError();
				dwError = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 取消客户端状态关注请求
public class TMSG_GATEWAY_UNREGISTER_CLIENT_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long n64ClientID;   //ClientID
	private uint dwAppID;   //取消关注的应用服ID


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_n64ClientID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_n64ClientID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_n64ClientID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_n64ClientID(long _n64ClientID){set_has_n64ClientID(); n64ClientID=_n64ClientID;}
	public long get_n64ClientID(){if (has_n64ClientID()) {return n64ClientID;} return 0;}

	public bool has_dwAppID() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_dwAppID() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_dwAppID() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_dwAppID(uint _dwAppID){set_has_dwAppID(); dwAppID=_dwAppID;}
	public uint get_dwAppID(){if (has_dwAppID()) {return dwAppID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_dwAppID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwAppID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_dwAppID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(dwAppID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_n64ClientID();
				n64ClientID = oPacker.ReadVarintINT64();
			}break;
			case 12: {
				set_has_dwAppID();
				dwAppID = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 取消客户端状态关注回复
public class TMSG_GATEWAY_UNREGISTER_CLIENT_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private long n64ClientID;   //ClientID


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_n64ClientID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_n64ClientID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_n64ClientID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_n64ClientID(long _n64ClientID){set_has_n64ClientID(); n64ClientID=_n64ClientID;}
	public long get_n64ClientID(){if (has_n64ClientID()) {return n64ClientID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_n64ClientID();
				n64ClientID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 检查状态请求
public class TMSG_GATEWAY_CHECK_STATUS_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long n64ClientID;   //ClientID


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_n64ClientID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_n64ClientID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_n64ClientID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_n64ClientID(long _n64ClientID){set_has_n64ClientID(); n64ClientID=_n64ClientID;}
	public long get_n64ClientID(){if (has_n64ClientID()) {return n64ClientID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_n64ClientID();
				n64ClientID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 检查状态回复
public class TMSG_GATEWAY_CHECK_STATUS_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private long n64ClientID;   //ClientID
	private byte bDisconnect;   //是否断线


	public const int MAX_PACKEDSIZE = 26;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_n64ClientID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_n64ClientID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_n64ClientID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_n64ClientID(long _n64ClientID){set_has_n64ClientID(); n64ClientID=_n64ClientID;}
	public long get_n64ClientID(){if (has_n64ClientID()) {return n64ClientID;} return 0;}

	public bool has_bDisconnect() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_bDisconnect() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_bDisconnect() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_bDisconnect(byte _bDisconnect){set_has_bDisconnect(); bDisconnect=_bDisconnect;}
	public byte get_bDisconnect(){if (has_bDisconnect()) {return bDisconnect;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_bDisconnect()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,2));  // f id
			oPacker.WriteUINT8(bDisconnect);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
		if (has_bDisconnect()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,2));  // f id
			oPacker.WriteUINT8(bDisconnect);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_n64ClientID();
				n64ClientID = oPacker.ReadVarintINT64();
			}break;
			case 12: {
				set_has_bDisconnect();
				bDisconnect = oPacker.ReadUINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端连接通知
public class TMSG_GATEWAY_CLIENT_CONNECT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long n64ClientID;   //ClientID


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_n64ClientID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_n64ClientID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_n64ClientID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_n64ClientID(long _n64ClientID){set_has_n64ClientID(); n64ClientID=_n64ClientID;}
	public long get_n64ClientID(){if (has_n64ClientID()) {return n64ClientID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_n64ClientID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(n64ClientID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_n64ClientID();
				n64ClientID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 注册网关状态关注请求
public class TMSG_GATEWAY_REGISTER_GATEWAY_REQ
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 注册网关状态关注回复
public class TMSG_GATEWAY_REGISTER_GATEWAY_RSP
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 取消网关状态关注请求
public class TMSG_GATEWAY_UNREGISTER_GATEWAY_REQ
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 取消网关状态关注回复
public class TMSG_GATEWAY_UNREGISTER_GATEWAY_RSP
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 检查网关状态请求
public class TMSG_GATEWAY_CHECK_GATEWAY_STATE_REQ
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 检查网关状态回复
public class TMSG_GATEWAY_CHECK_GATEWAY_STATE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private byte bCanAcceptClient;   //是否允许客户端连接


	public const int MAX_PACKEDSIZE = 11;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_bCanAcceptClient() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_bCanAcceptClient() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_bCanAcceptClient() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_bCanAcceptClient(byte _bCanAcceptClient){set_has_bCanAcceptClient(); bCanAcceptClient=_bCanAcceptClient;}
	public byte get_bCanAcceptClient(){if (has_bCanAcceptClient()) {return bCanAcceptClient;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bCanAcceptClient()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,2));  // f id
			oPacker.WriteUINT8(bCanAcceptClient);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bCanAcceptClient()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,2));  // f id
			oPacker.WriteUINT8(bCanAcceptClient);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 12: {
				set_has_bCanAcceptClient();
				bCanAcceptClient = oPacker.ReadUINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 网关状态变更通知
public class TMSG_GATEWAY_STATE_CHANGE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private byte bCanAcceptClient;   //是否允许客户端连接


	public const int MAX_PACKEDSIZE = 11;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_bCanAcceptClient() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_bCanAcceptClient() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_bCanAcceptClient() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_bCanAcceptClient(byte _bCanAcceptClient){set_has_bCanAcceptClient(); bCanAcceptClient=_bCanAcceptClient;}
	public byte get_bCanAcceptClient(){if (has_bCanAcceptClient()) {return bCanAcceptClient;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bCanAcceptClient()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,2));  // f id
			oPacker.WriteUINT8(bCanAcceptClient);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bCanAcceptClient()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,2));  // f id
			oPacker.WriteUINT8(bCanAcceptClient);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 12: {
				set_has_bCanAcceptClient();
				bCanAcceptClient = oPacker.ReadUINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 消息包头
public class TMsgHead
{
	private uint[] __orm_has_bits = new uint[1];
	private uint iMsgID;   //消息id


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iMsgID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iMsgID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iMsgID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iMsgID(uint _iMsgID){set_has_iMsgID(); iMsgID=_iMsgID;}
	public uint get_iMsgID(){if (has_iMsgID()) {return iMsgID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMsgID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(iMsgID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMsgID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(iMsgID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_iMsgID();
				iMsgID = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
public class TCGMessage {
	public const int MAX_PACKEDSIZE = 32824;
	//   Message Define
	public const uint MSG_GATEWAY_HEART_CHECK_REQ = 10;   // (10+0) 10  心跳检查请求，网关->客户端
	public const uint MSG_GATEWAY_HEART_CHECK_RSP = 11;   // (10+1) 11  心跳检查回复，客户端->网关
	public const uint MSG_GATEWAY_CONNECT_NTF = 12;   // (10+2) 12  连接结果通知
	public const uint MSG_GATEWAY_KICK_CLIENT_NTF = 13;   // (10+3) 13  踢人通知
	public const uint MSG_GATEWAY_SEND_DATA_C2G_REQ = 14;   // (10+4) 14  客户端发消息给服务器
	public const uint MSG_GATEWAY_RECV_DATA_G2C_NTF = 15;   // (10+5) 15  客户端接收网关的消息
	public const uint MSG_GATEWAY_SEND_DATA_C2G_RSP = 16;   // (10+6) 16  客户端发消息给服务器的回复


	//  Msg header
    public TMsgHead stHead;   


	//  Msg id array
	private static int[] s_arrMsgID = new int[7] { 10, 11, 12, 13, 14, 15, 16, };


	public TMSG_GATEWAY_HEART_CHECK_REQ stTMSG_GATEWAY_HEART_CHECK_REQ;   // MSG_GATEWAY_HEART_CHECK_REQ   心跳检查请求，网关->客户端
	public TMSG_GATEWAY_HEART_CHECK_RSP stTMSG_GATEWAY_HEART_CHECK_RSP;   // MSG_GATEWAY_HEART_CHECK_RSP   心跳检查回复，客户端->网关
	public TMSG_GATEWAY_CONNECT_NTF stTMSG_GATEWAY_CONNECT_NTF;   // MSG_GATEWAY_CONNECT_NTF   连接结果通知
	public TMSG_GATEWAY_KICK_CLIENT_NTF stTMSG_GATEWAY_KICK_CLIENT_NTF;   // MSG_GATEWAY_KICK_CLIENT_NTF   踢人通知
	public TMSG_GATEWAY_SEND_DATA_C2G_REQ stTMSG_GATEWAY_SEND_DATA_C2G_REQ;   // MSG_GATEWAY_SEND_DATA_C2G_REQ   客户端发消息给服务器
	public TMSG_GATEWAY_RECV_DATA_G2C_NTF stTMSG_GATEWAY_RECV_DATA_G2C_NTF;   // MSG_GATEWAY_RECV_DATA_G2C_NTF   客户端接收网关的消息
	public TMSG_GATEWAY_SEND_DATA_C2G_RSP stTMSG_GATEWAY_SEND_DATA_C2G_RSP;   // MSG_GATEWAY_SEND_DATA_C2G_RSP   客户端发消息给服务器的回复


	public void Pack(CORM_packaux oPacker) {
    stHead.Pack(oPacker);
    switch(stHead.get_iMsgID()){
		case MSG_GATEWAY_HEART_CHECK_REQ: { stTMSG_GATEWAY_HEART_CHECK_REQ.Pack(oPacker); } break;
		case MSG_GATEWAY_HEART_CHECK_RSP: { stTMSG_GATEWAY_HEART_CHECK_RSP.Pack(oPacker); } break;
		case MSG_GATEWAY_CONNECT_NTF: { stTMSG_GATEWAY_CONNECT_NTF.Pack(oPacker); } break;
		case MSG_GATEWAY_KICK_CLIENT_NTF: { stTMSG_GATEWAY_KICK_CLIENT_NTF.Pack(oPacker); } break;
		case MSG_GATEWAY_SEND_DATA_C2G_REQ: { stTMSG_GATEWAY_SEND_DATA_C2G_REQ.Pack(oPacker); } break;
		case MSG_GATEWAY_RECV_DATA_G2C_NTF: { stTMSG_GATEWAY_RECV_DATA_G2C_NTF.Pack(oPacker); } break;
		case MSG_GATEWAY_SEND_DATA_C2G_RSP: { stTMSG_GATEWAY_SEND_DATA_C2G_RSP.Pack(oPacker); } break;
		    default:throw new CPackDataException(CPackDataException.EN_EXCEPTION.UNDEFINE_MSGID);
		    } //switch;   

	}   //  Pack()

	public void Pack_WithTrace(CORM_packaux oPacker) {
    stHead.Pack(oPacker);
    switch(stHead.get_iMsgID()){
		case MSG_GATEWAY_HEART_CHECK_REQ: { oPacker.PushFieldName("stTMSG_GATEWAY_HEART_CHECK_REQ"); stTMSG_GATEWAY_HEART_CHECK_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_GATEWAY_HEART_CHECK_RSP: { oPacker.PushFieldName("stTMSG_GATEWAY_HEART_CHECK_RSP"); stTMSG_GATEWAY_HEART_CHECK_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_GATEWAY_CONNECT_NTF: { oPacker.PushFieldName("stTMSG_GATEWAY_CONNECT_NTF"); stTMSG_GATEWAY_CONNECT_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_GATEWAY_KICK_CLIENT_NTF: { oPacker.PushFieldName("stTMSG_GATEWAY_KICK_CLIENT_NTF"); stTMSG_GATEWAY_KICK_CLIENT_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_GATEWAY_SEND_DATA_C2G_REQ: { oPacker.PushFieldName("stTMSG_GATEWAY_SEND_DATA_C2G_REQ"); stTMSG_GATEWAY_SEND_DATA_C2G_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_GATEWAY_RECV_DATA_G2C_NTF: { oPacker.PushFieldName("stTMSG_GATEWAY_RECV_DATA_G2C_NTF"); stTMSG_GATEWAY_RECV_DATA_G2C_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_GATEWAY_SEND_DATA_C2G_RSP: { oPacker.PushFieldName("stTMSG_GATEWAY_SEND_DATA_C2G_RSP"); stTMSG_GATEWAY_SEND_DATA_C2G_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		    default:throw new CPackDataException(CPackDataException.EN_EXCEPTION.UNDEFINE_MSGID);
		    } //switch;   

	}   //  Pack()

	public void Unpack(CORM_packaux oPacker) {
		if (stHead == null) { stHead = new TMsgHead(); }
		stHead.Unpack(oPacker);
		switch(stHead.get_iMsgID()){
		        case MSG_GATEWAY_HEART_CHECK_REQ: { if (stTMSG_GATEWAY_HEART_CHECK_REQ == null) { stTMSG_GATEWAY_HEART_CHECK_REQ = new TMSG_GATEWAY_HEART_CHECK_REQ(); } stTMSG_GATEWAY_HEART_CHECK_REQ.Unpack(oPacker); } break;
		        case MSG_GATEWAY_HEART_CHECK_RSP: { if (stTMSG_GATEWAY_HEART_CHECK_RSP == null) { stTMSG_GATEWAY_HEART_CHECK_RSP = new TMSG_GATEWAY_HEART_CHECK_RSP(); } stTMSG_GATEWAY_HEART_CHECK_RSP.Unpack(oPacker); } break;
		        case MSG_GATEWAY_CONNECT_NTF: { if (stTMSG_GATEWAY_CONNECT_NTF == null) { stTMSG_GATEWAY_CONNECT_NTF = new TMSG_GATEWAY_CONNECT_NTF(); } stTMSG_GATEWAY_CONNECT_NTF.Unpack(oPacker); } break;
		        case MSG_GATEWAY_KICK_CLIENT_NTF: { if (stTMSG_GATEWAY_KICK_CLIENT_NTF == null) { stTMSG_GATEWAY_KICK_CLIENT_NTF = new TMSG_GATEWAY_KICK_CLIENT_NTF(); } stTMSG_GATEWAY_KICK_CLIENT_NTF.Unpack(oPacker); } break;
		        case MSG_GATEWAY_SEND_DATA_C2G_REQ: { if (stTMSG_GATEWAY_SEND_DATA_C2G_REQ == null) { stTMSG_GATEWAY_SEND_DATA_C2G_REQ = new TMSG_GATEWAY_SEND_DATA_C2G_REQ(); } stTMSG_GATEWAY_SEND_DATA_C2G_REQ.Unpack(oPacker); } break;
		        case MSG_GATEWAY_RECV_DATA_G2C_NTF: { if (stTMSG_GATEWAY_RECV_DATA_G2C_NTF == null) { stTMSG_GATEWAY_RECV_DATA_G2C_NTF = new TMSG_GATEWAY_RECV_DATA_G2C_NTF(); } stTMSG_GATEWAY_RECV_DATA_G2C_NTF.Unpack(oPacker); } break;
		        case MSG_GATEWAY_SEND_DATA_C2G_RSP: { if (stTMSG_GATEWAY_SEND_DATA_C2G_RSP == null) { stTMSG_GATEWAY_SEND_DATA_C2G_RSP = new TMSG_GATEWAY_SEND_DATA_C2G_RSP(); } stTMSG_GATEWAY_SEND_DATA_C2G_RSP.Unpack(oPacker); } break;
		default:throw new CPackDataException(CPackDataException.EN_EXCEPTION.UNDEFINE_MSGID);
	    } //switch;
	}   //  Unpack()

	public bool Init(uint _iMsgID) {
		if (stHead == null) { stHead = new TMsgHead(); }
		stHead.set_iMsgID(_iMsgID);
		switch(_iMsgID){
		        case MSG_GATEWAY_HEART_CHECK_REQ: { if (stTMSG_GATEWAY_HEART_CHECK_REQ == null) { stTMSG_GATEWAY_HEART_CHECK_REQ = new TMSG_GATEWAY_HEART_CHECK_REQ(); } else { stTMSG_GATEWAY_HEART_CHECK_REQ.init(); } } break;
		        case MSG_GATEWAY_HEART_CHECK_RSP: { if (stTMSG_GATEWAY_HEART_CHECK_RSP == null) { stTMSG_GATEWAY_HEART_CHECK_RSP = new TMSG_GATEWAY_HEART_CHECK_RSP(); } else { stTMSG_GATEWAY_HEART_CHECK_RSP.init(); } } break;
		        case MSG_GATEWAY_CONNECT_NTF: { if (stTMSG_GATEWAY_CONNECT_NTF == null) { stTMSG_GATEWAY_CONNECT_NTF = new TMSG_GATEWAY_CONNECT_NTF(); } else { stTMSG_GATEWAY_CONNECT_NTF.init(); } } break;
		        case MSG_GATEWAY_KICK_CLIENT_NTF: { if (stTMSG_GATEWAY_KICK_CLIENT_NTF == null) { stTMSG_GATEWAY_KICK_CLIENT_NTF = new TMSG_GATEWAY_KICK_CLIENT_NTF(); } else { stTMSG_GATEWAY_KICK_CLIENT_NTF.init(); } } break;
		        case MSG_GATEWAY_SEND_DATA_C2G_REQ: { if (stTMSG_GATEWAY_SEND_DATA_C2G_REQ == null) { stTMSG_GATEWAY_SEND_DATA_C2G_REQ = new TMSG_GATEWAY_SEND_DATA_C2G_REQ(); } else { stTMSG_GATEWAY_SEND_DATA_C2G_REQ.init(); } } break;
		        case MSG_GATEWAY_RECV_DATA_G2C_NTF: { if (stTMSG_GATEWAY_RECV_DATA_G2C_NTF == null) { stTMSG_GATEWAY_RECV_DATA_G2C_NTF = new TMSG_GATEWAY_RECV_DATA_G2C_NTF(); } else { stTMSG_GATEWAY_RECV_DATA_G2C_NTF.init(); } } break;
		        case MSG_GATEWAY_SEND_DATA_C2G_RSP: { if (stTMSG_GATEWAY_SEND_DATA_C2G_RSP == null) { stTMSG_GATEWAY_SEND_DATA_C2G_RSP = new TMSG_GATEWAY_SEND_DATA_C2G_RSP(); } else { stTMSG_GATEWAY_SEND_DATA_C2G_RSP.init(); } } break;
		default:return false;
	    } //switch;
	    return true;
	}   //  Unpack()

	public static bool ExistsMsg(int _iMsgID)
	{
		int nCur = 0, nStart = 0, nEnd = 7 - 1, nDiff = 0;
		while (nStart <= nEnd)
		{
			nCur = (nStart + nEnd) >> 1;
			nDiff = s_arrMsgID[nCur] - _iMsgID;
			if (nDiff == 0) { return true; }
			if (nDiff < 0) { nStart = nCur + 1; } else { nEnd = nCur - 1; }
		}
		return false;
	}

}   // msg group:  TCGMessage


}  //  namespace cgpol
