//  This file is generated by orm_tools. Do not modify manually, or all changes will be lost.


using System;
using System.Collections.Generic;
using System.Text;
using ORM;


namespace minigame 
{

	public class TCONST
	{
		public const int ORM_MAX_DOMAIN_NAME_LEN = (int)32;    //  域名长度
		public const int ORM_MAX_PERSON_NAME_LEN = (int)32;    //  角色名长度
		public const int ORM_MAX_USER_NAME_LEN = (int)256;    //  用户名长度
		public const int ORM_MAX_MACADDR_LEN = (int)128;    //  MAC地址最大长度
		public const int ORM_ALS_TOKEN_LEN = (int)1024;    //  token长度
		public const int ORM_MAX_VERIFYCODE_LEN = (int)65;    //  验证码长庢
		public const int ORM_MAX_PASSWORD_LEN = (int)65;    //  密码最大长度
		public const int ORM_MAX_IP_LEN = (int)32;    //  IP最大长度
		public const int ORM_MAX_CLIENT_VERSION_LEN = (int)10;    //  客户端版本号最大长度
		public const int ORM_MAX_SESSION_LEN = (int)2048;    //  
		public const int ORM_MAX_VERSION_LEN = (int)32;    //  版本号最大长度
		public const int ORM_MAX_CLIENT_KEY_LEN = (int)128;    //  版本号最大长度
		public const int ORM_MAX_CLIENT_FREE_DATA0_COUNT = (int)64;    //  数据0区域长度
	}
	public class EnumPrint {
	}   // EnumPrint



// 空结构, 有些消息不需要带现场, 可以统一指向这个结构
public class TNullStruct
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 消息包头
public class TMsgHead
{
	private uint[] __orm_has_bits = new uint[1];
	private uint iMsgID;   //消息id
	private int iSyncFlag;   //同步标记


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iMsgID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iMsgID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iMsgID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iMsgID(uint _iMsgID){set_has_iMsgID(); iMsgID=_iMsgID;}
	public uint get_iMsgID(){if (has_iMsgID()) {return iMsgID;} return 0;}

	public bool has_iSyncFlag() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iSyncFlag() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iSyncFlag() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iSyncFlag(int _iSyncFlag){set_has_iSyncFlag(); iSyncFlag=_iSyncFlag;}
	public int get_iSyncFlag(){if (has_iSyncFlag()) {return iSyncFlag;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMsgID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(iMsgID);
		};
		if (has_iSyncFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iSyncFlag);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMsgID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(iMsgID);
		};
		if (has_iSyncFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iSyncFlag);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_iMsgID();
				iMsgID = oPacker.ReadVarintUINT32();
			}break;
			case 12: {
				set_has_iSyncFlag();
				iSyncFlag = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端登陆大厅额外数据
public class TLoginExtraContext
{
	private uint[] __orm_has_bits = new uint[1];
	private byte bWillBeDelete;   //这个是旧结构, 稍后可能被删除
	private byte byLanguage;   //语言
	private string szAdid;   //客户端标记
	private string szVerifyCode;   //验证码，用于维护时GM进入游戏
	private string szMacAddr;   //网卡地址
	private string szVersion;   //版本号


	public const int MAX_PACKEDSIZE = 294;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_bWillBeDelete() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_bWillBeDelete() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_bWillBeDelete() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_bWillBeDelete(byte _bWillBeDelete){set_has_bWillBeDelete(); bWillBeDelete=_bWillBeDelete;}
	public byte get_bWillBeDelete(){if (has_bWillBeDelete()) {return bWillBeDelete;} return 0;}

	public bool has_byLanguage() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_byLanguage() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_byLanguage() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_byLanguage(byte _byLanguage){set_has_byLanguage(); byLanguage=_byLanguage;}
	public byte get_byLanguage(){if (has_byLanguage()) {return byLanguage;} return 0;}

	public bool has_szAdid() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_szAdid() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_szAdid() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_szAdid(string _szAdid){set_has_szAdid(); szAdid=_szAdid;}
	public string get_szAdid(){if (has_szAdid()) {return szAdid;} return "";}

	public bool has_szVerifyCode() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_szVerifyCode() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_szVerifyCode() {__orm_has_bits[0] &= ~(0x2000u);}
	public void set_szVerifyCode(string _szVerifyCode){set_has_szVerifyCode(); szVerifyCode=_szVerifyCode;}
	public string get_szVerifyCode(){if (has_szVerifyCode()) {return szVerifyCode;} return "";}

	public bool has_szMacAddr() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_szMacAddr() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_szMacAddr() {__orm_has_bits[0] &= ~(0x4000u);}
	public void set_szMacAddr(string _szMacAddr){set_has_szMacAddr(); szMacAddr=_szMacAddr;}
	public string get_szMacAddr(){if (has_szMacAddr()) {return szMacAddr;} return "";}

	public bool has_szVersion() {return (__orm_has_bits[0] & 0x10000u) != 0;}
	public void set_has_szVersion() {__orm_has_bits[0] |= 0x10000u;}
	public void clear_has_szVersion() {__orm_has_bits[0] &= ~(0x10000u);}
	public void set_szVersion(string _szVersion){set_has_szVersion(); szVersion=_szVersion;}
	public string get_szVersion(){if (has_szVersion()) {return szVersion;} return "1.0.2";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bWillBeDelete()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(bWillBeDelete);
		};
		if (has_byLanguage()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,2));  // f id
			oPacker.WriteUINT8(byLanguage);
		};
		if (has_szAdid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,3));  // f id
			oPacker.WriteSTRING(szAdid);
		};
		if (has_szVerifyCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,3));  // f id
			oPacker.WriteSTRING(szVerifyCode);
		};
		if (has_szMacAddr()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,3));  // f id
			oPacker.WriteSTRING(szMacAddr);
		};
		if (has_szVersion()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,3));  // f id
			oPacker.WriteSTRING(szVersion);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bWillBeDelete()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(bWillBeDelete);
		};
		if (has_byLanguage()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,2));  // f id
			oPacker.WriteUINT8(byLanguage);
		};
		if (has_szAdid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,3));  // f id
			oPacker.WriteSTRING(szAdid);
		};
		if (has_szVerifyCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,3));  // f id
			oPacker.WriteSTRING(szVerifyCode);
		};
		if (has_szMacAddr()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,3));  // f id
			oPacker.WriteSTRING(szMacAddr);
		};
		if (has_szVersion()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,3));  // f id
			oPacker.WriteSTRING(szVersion);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_bWillBeDelete();
				bWillBeDelete = oPacker.ReadUINT8();
			}break;
			case 11: {
				set_has_byLanguage();
				byLanguage = oPacker.ReadUINT8();
			}break;
			case 12: {
				set_has_szAdid();
				szAdid = oPacker.ReadSTRING();
			}break;
			case 13: {
				set_has_szVerifyCode();
				szVerifyCode = oPacker.ReadSTRING();
			}break;
			case 14: {
				set_has_szMacAddr();
				szMacAddr = oPacker.ReadSTRING();
			}break;
			case 16: {
				set_has_szVersion();
				szVersion = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 32位key val
public class TK32V32
{
	private uint[] __orm_has_bits = new uint[1];
	private int iKey;   //属性id
	private int iVal;   //属性值


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iKey() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iKey() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iKey() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iKey(int _iKey){set_has_iKey(); iKey=_iKey;}
	public int get_iKey(){if (has_iKey()) {return iKey;} return 0;}

	public bool has_iVal() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iVal() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iVal() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iVal(int _iVal){set_has_iVal(); iVal=_iVal;}
	public int get_iVal(){if (has_iVal()) {return iVal;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iKey);
		};
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iVal);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iKey);
		};
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iVal);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iKey();
				iKey = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iVal();
				iVal = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// key val
public class TK32V64
{
	private uint[] __orm_has_bits = new uint[1];
	private int iKey;   //属性id
	private long iVal;   //属性值


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iKey() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iKey() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iKey() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iKey(int _iKey){set_has_iKey(); iKey=_iKey;}
	public int get_iKey(){if (has_iKey()) {return iKey;} return 0;}

	public bool has_iVal() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iVal() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iVal() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iVal(long _iVal){set_has_iVal(); iVal=_iVal;}
	public long get_iVal(){if (has_iVal()) {return iVal;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iKey);
		};
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iVal);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iKey);
		};
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iVal);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iKey();
				iKey = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iVal();
				iVal = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// key val
public class TK64V32
{
	private uint[] __orm_has_bits = new uint[1];
	private long iKey;   //属性id
	private int iVal;   //属性值


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iKey() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iKey() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iKey() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iKey(long _iKey){set_has_iKey(); iKey=_iKey;}
	public long get_iKey(){if (has_iKey()) {return iKey;} return 0;}

	public bool has_iVal() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iVal() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iVal() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iVal(int _iVal){set_has_iVal(); iVal=_iVal;}
	public int get_iVal(){if (has_iVal()) {return iVal;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iKey);
		};
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iVal);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iKey);
		};
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iVal);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iKey();
				iKey = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iVal();
				iVal = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TAutoLoginSession
{
	private uint[] __orm_has_bits = new uint[1];
	private short iLen;   //
	private sbyte[] arrData = new sbyte[(int)TCONST.ORM_ALS_TOKEN_LEN];   //
	private string strToken;   //

	public const int countof_arrData = (int)TCONST.ORM_ALS_TOKEN_LEN;

	public const int MAX_PACKEDSIZE = 1126;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iLen() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLen() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLen() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLen(short _iLen){set_has_iLen(); iLen=_iLen;}
	public short get_iLen(){if (has_iLen()) {return iLen;} return 0;}

	public bool has_arrData() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrData() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrData() {__orm_has_bits[0] &= ~(0x20u);}
	public sbyte[] set_arrData(){set_has_arrData(); return arrData;}
	public sbyte[] get_arrData(){return arrData;}

	public bool has_strToken() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_strToken() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_strToken() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_strToken(string _strToken){set_has_strToken(); strToken=_strToken;}
	public string get_strToken(){if (has_strToken()) {return strToken;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT16(iLen);
		};
		if (has_arrData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)TCONST.ORM_ALS_TOKEN_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_ALS_TOKEN_LEN) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
		    oPacker.WriteINT8(arrData[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_strToken()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(strToken);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT16(iLen);
		};
		if (has_arrData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)TCONST.ORM_ALS_TOKEN_LEN) {
				oPacker.PushFieldName("iLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_ALS_TOKEN_LEN) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
		    oPacker.WriteINT8(arrData[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_strToken()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(strToken);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLen();
				iLen = oPacker.ReadVarintINT16();
			}break;
			case 5: {
				set_has_arrData();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iLen=iLen<__orm_iArrCount ? iLen:(short)__orm_iArrCount;
				iLen=iLen<(short)TCONST.ORM_ALS_TOKEN_LEN ? iLen:(short)TCONST.ORM_ALS_TOKEN_LEN;
				if (iLen > (int)TCONST.ORM_ALS_TOKEN_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iLen; ++__orm_iLoopVar) {
					arrData[__orm_iLoopVar] = oPacker.ReadINT8();
				};
			}break;
			case 6: {
				set_has_strToken();
				strToken = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TVector3
{
	private uint[] __orm_has_bits = new uint[1];
	private float x;   //
	private float y;   //
	private float z;   //


	public const int MAX_PACKEDSIZE = 35;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_x() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_x() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_x() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_x(float _x){set_has_x(); x=_x;}
	public float get_x(){if (has_x()) {return x;} return 0;}

	public bool has_y() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_y() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_y() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_y(float _y){set_has_y(); y=_y;}
	public float get_y(){if (has_y()) {return y;} return 0;}

	public bool has_z() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_z() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_z() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_z(float _z){set_has_z(); z=_z;}
	public float get_z(){if (has_z()) {return z;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_x()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteFLOAT(x);
		};
		if (has_y()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteFLOAT(y);
		};
		if (has_z()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteFLOAT(z);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_x()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteFLOAT(x);
		};
		if (has_y()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteFLOAT(y);
		};
		if (has_z()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteFLOAT(z);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_x();
				x = oPacker.ReadFLOAT();
			}break;
			case 2: {
				set_has_y();
				y = oPacker.ReadFLOAT();
			}break;
			case 3: {
				set_has_z();
				z = oPacker.ReadFLOAT();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// kv列表
public class TKVList
{
	private uint[] __orm_has_bits = new uint[1];
	private int iCount;   //数量
	private TK32V32[] arrKV = new TK32V32[(int)32];   //kv数组
	public TKVList() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)32; ++__orm_iLoopVar) {
			arrKV[__orm_iLoopVar] = new TK32V32();
		}
	}

	public const int countof_arrKV = (int)32;

	public const int MAX_PACKEDSIZE = 829;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)32; ++__orm_iLoopVar){arrKV[__orm_iLoopVar].init();}
	}
	public bool has_iCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iCount(int _iCount){set_has_iCount(); iCount=_iCount;}
	public int get_iCount(){if (has_iCount()) {return iCount;} return 0;}

	public bool has_arrKV() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrKV() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrKV() {__orm_has_bits[0] &= ~(0x4u);}
	public TK32V32[] set_arrKV(){set_has_arrKV(); return arrKV;}
	public TK32V32[] get_arrKV(){return arrKV;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrKV()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				arrKV[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrKV()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)32) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrKV[{0}]", __orm_iLoopVar);
				arrKV[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iCount();
				iCount = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrKV();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(int)__orm_iArrCount;
				iCount=iCount<(int)32 ? iCount:(int)32;
				if (iCount > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrKV[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// kv属性块
public class TKVBlock
{
	private uint[] __orm_has_bits = new uint[1];
	private int iId;   //id
	private TKVList stList = new TKVList();   //一个kv列表


	public const int MAX_PACKEDSIZE = 853;

	public void init() {
		__orm_has_bits[0]=0;
		stList.init();
	}
	public bool has_iId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iId(int _iId){set_has_iId(); iId=_iId;}
	public int get_iId(){if (has_iId()) {return iId;} return 0;}

	public bool has_stList() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stList() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stList() {__orm_has_bits[0] &= ~(0x4u);}
	public TKVList set_stList(){set_has_stList(); return stList;}
	public TKVList get_stList(){return stList;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iId);
		};
		if (has_stList()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stList.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iId);
		};
		if (has_stList()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stList");
			stList.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iId();
				iId = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_stList();
				stList.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端自主存储管理的数据
public class TClientFreeData
{
	private uint[] __orm_has_bits = new uint[1];
	private uint iVer;   //版本号
	private uint iDataCount0;   //数据长度0
	private int[] arrData0 = new int[(int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT];   //整形数据

	public const int countof_arrData0 = (int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT;

	public const int MAX_PACKEDSIZE = 359;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iVer() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iVer() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iVer() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iVer(uint _iVer){set_has_iVer(); iVer=_iVer;}
	public uint get_iVer(){if (has_iVer()) {return iVer;} return 0;}

	public bool has_iDataCount0() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iDataCount0() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iDataCount0() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iDataCount0(uint _iDataCount0){set_has_iDataCount0(); iDataCount0=_iDataCount0;}
	public uint get_iDataCount0(){if (has_iDataCount0()) {return iDataCount0;} return 0;}

	public bool has_arrData0() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrData0() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrData0() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrData0(){set_has_arrData0(); return arrData0;}
	public int[] get_arrData0(){return arrData0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(iVer);
		};
		if (has_iDataCount0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintUINT32(iDataCount0);
		};
		if (has_arrData0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDataCount0();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT) && (__orm_iLoopVar < iDataCount0); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrData0[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(iVer);
		};
		if (has_iDataCount0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintUINT32(iDataCount0);
		};
		if (has_arrData0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDataCount0();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT) {
				oPacker.PushFieldName("iDataCount0={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT) && (__orm_iLoopVar < iDataCount0); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrData0[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iVer();
				iVer = oPacker.ReadVarintUINT32();
			}break;
			case 2: {
				set_has_iDataCount0();
				iDataCount0 = oPacker.ReadVarintUINT32();
			}break;
			case 3: {
				set_has_arrData0();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iDataCount0=iDataCount0<__orm_iArrCount ? iDataCount0:(uint)__orm_iArrCount;
				iDataCount0=iDataCount0<(uint)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT ? iDataCount0:(uint)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT;
				if (iDataCount0 > (int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iDataCount0; ++__orm_iLoopVar) {
					arrData0[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 测试协议
public class TMSG_TEST_MESSAGE
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
public class TGameMessage {
	public const int MAX_PACKEDSIZE = 30;
	//   Message Define
	public const uint MSG_TEST_MESSAGE = 1;   // (0+1) 1  


	//  Msg header
    public TMsgHead stHead;   


	//  Msg id array
	private static int[] s_arrMsgID = new int[1] { 1, };


	public TMSG_TEST_MESSAGE stTMSG_TEST_MESSAGE;   // MSG_TEST_MESSAGE   


	public void Pack(CORM_packaux oPacker) {
    stHead.Pack(oPacker);
    switch(stHead.get_iMsgID()){
		case MSG_TEST_MESSAGE: { stTMSG_TEST_MESSAGE.Pack(oPacker); } break;
		    default:throw new CPackDataException(CPackDataException.EN_EXCEPTION.UNDEFINE_MSGID);
		    } //switch;   

	}   //  Pack()

	public void Pack_WithTrace(CORM_packaux oPacker) {
    stHead.Pack(oPacker);
    switch(stHead.get_iMsgID()){
		case MSG_TEST_MESSAGE: { oPacker.PushFieldName("stTMSG_TEST_MESSAGE"); stTMSG_TEST_MESSAGE.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		    default:throw new CPackDataException(CPackDataException.EN_EXCEPTION.UNDEFINE_MSGID);
		    } //switch;   

	}   //  Pack()

	public void Unpack(CORM_packaux oPacker) {
		if (stHead == null) { stHead = new TMsgHead(); }
		stHead.Unpack(oPacker);
		switch(stHead.get_iMsgID()){
		        case MSG_TEST_MESSAGE: { if (stTMSG_TEST_MESSAGE == null) { stTMSG_TEST_MESSAGE = new TMSG_TEST_MESSAGE(); } stTMSG_TEST_MESSAGE.Unpack(oPacker); } break;
		default:throw new CPackDataException(CPackDataException.EN_EXCEPTION.UNDEFINE_MSGID);
	    } //switch;
	}   //  Unpack()

	public bool Init(uint _iMsgID) {
		if (stHead == null) { stHead = new TMsgHead(); }
		stHead.set_iMsgID(_iMsgID);
		switch(_iMsgID){
		        case MSG_TEST_MESSAGE: { if (stTMSG_TEST_MESSAGE == null) { stTMSG_TEST_MESSAGE = new TMSG_TEST_MESSAGE(); } else { stTMSG_TEST_MESSAGE.init(); } } break;
		default:return false;
	    } //switch;
	    return true;
	}   //  Unpack()

	public static bool ExistsMsg(int _iMsgID)
	{
		int nCur = 0, nStart = 0, nEnd = 1 - 1, nDiff = 0;
		while (nStart <= nEnd)
		{
			nCur = (nStart + nEnd) >> 1;
			nDiff = s_arrMsgID[nCur] - _iMsgID;
			if (nDiff == 0) { return true; }
			if (nDiff < 0) { nStart = nCur + 1; } else { nEnd = nCur - 1; }
		}
		return false;
	}

}   // msg group:  TGameMessage


}  //  namespace minigame
