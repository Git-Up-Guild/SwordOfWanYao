//  This file is generated by orm_tools. Do not modify manually, or all changes will be lost.


using System;
using System.Collections.Generic;
using System.Text;
using ORM;


namespace gamepol 
{

	public class TCONST
	{
		public const int ORM_MAX_DOMAIN_NAME_LEN = (int)32;    //  域名长度
		public const int ORM_MAX_PERSON_NAME_LEN = (int)32;    //  角色名长度
		public const int ORM_MAX_USER_NAME_LEN = (int)256;    //  用户名长度
		public const int ORM_MAX_MACADDR_LEN = (int)128;    //  MAC地址最大长度
		public const int ORM_ALS_TOKEN_LEN = (int)1024;    //  token长度
		public const int ORM_MAX_VERIFYCODE_LEN = (int)65;    //  验证码长庢
		public const int ORM_MAX_PASSWORD_LEN = (int)65;    //  密码最大长度
		public const int ORM_MAX_IP_LEN = (int)32;    //  IP最大长度
		public const int ORM_MAX_CLIENT_VERSION_LEN = (int)10;    //  客户端版本号最大长度
		public const int ORM_MAX_SESSION_LEN = (int)2048;    //  
		public const int ORM_MAX_VERSION_LEN = (int)32;    //  版本号最大长度
		public const int ORM_MAX_CLIENT_KEY_LEN = (int)128;    //  版本号最大长度
		public const int ORM_MAX_CLIENT_FREE_DATA0_COUNT = (int)64;    //  数据0区域长度
		public const int UPDATE_ITEM_COUNT_MAX = (int)2000;    //  物品更新最大数量
		public const int ORM_LUA_PARAM_LEN = (int)128;    //  lua参数长度
		public const int ORM_LUA_FUNC_LEN = (int)128;    //  lua函数长度
		public const int ORM_LUA_SCRIPT_LEN = (int)8192;    //  lua脚本长度
		public const int ORM_LUA_PARAM_COUNT_MAX = (int)32;    //  lua参数列表最大长度
		public const int ORM_SHOW_PRIZE_GOODS_COUNT_MAX = (int)50;    //  奖励展示最大物品数量
		public const int ORM_LEECHDOM_USE_COUNT_PER_COUNT = (int)200;    //  每次使用物品的上限
		public const int ORM_LEECHDOM_USE_SELECT_COUNT = (int)32;    //  宝箱选择的奖励数量
		public const int ORM_FATECHART_ROW_NUM = (int)6;    //  命盘行数
		public const int ORM_MAX_EQUIP_NUM = (int)48;    //  最大装备数
		public const int ORM_MAX_SEEDING_NUM = (int)100;    //  最大胚子数
		public const int ORM_MAX_DISCIPLE_NUM = (int)100;    //  最大弟子数
		public const int ORM_MAX_INDIVIDUAL_NUM = (int)31;    //  个体值最大点数
		public const int ORM_DISCIPLE_NAME_LEN = (int)32;    //  弟子名字最大字符数
		public const int ORM_MAX_COMPOSE_MAT_NUM = (int)5;    //  合成最大材料数
		public const int ORM_MAX_DISCIPLE_ABILITY_NUM = (int)16;    //  最大词条数
		public const int ORM_MAX_SEEDING_STARLEVEL = (int)24;    //  胚子最大星级
		public const int ORM_MAX_SEEDING_PROP_NUM = (int)8;    //  胚子最多属性数
		public const int ORM_MAX_SEEDING_SKILL_NUM = (int)8;    //  胚子最多技能数
		public const int ORM_SECTFORM_FORM_SIZE = (int)6;    //  宗门大阵，每个阵的大小
		public const int ORM_SECTFORM_NUM_MAX = (int)16;    //  宗门大阵，最大阵数
		public const int ORM_MAX_ANTIQUE_LEVEL = (int)10;    //  古宝最大星级
		public const int WANDERING_PARTNER_MAX = (int)4;    //  游历伙伴最大人数
		public const int WANDERING_ATTRIBUTE_MAX = (int)6;    //  六维
		public const int WANDERING_INITIAL_PASSIVE_NUM = (int)2;    //  初始被动数量
		public const int WANDERING_EVENT_ACTION_MAX = (int)11;    //  事件行动数量
		public const int WANDERING_EVENT_LOG_MAX = (int)50;    //  事件log数量
		public const int WANDERING_EVENT_PASS_BACK_LEN = (int)64;    //  透传参数字符串长度
		public const int WANDERING_EVENT_OVER_STAGE_ID = (int)999999;    //  关卡结束事件id
		public const int WANDERING_EVENT_PACk_DB_MAX = (int)500;    //  事件打包进db最大数量
		public const int WANDERING_GOOD_COUNT_MAX = (int)32;    //  游历物品最大数量
		public const int WANDERING_FORTUNEWHEEL_REWARD_MAX = (int)16;    //  游历转盘最大奖励数量
		public const int WANDERING_SELECT_ABILITY_MAX = (int)10;    //  词条选择最大数量
		public const int WANDERING_EVENT_TEMP_DATA_INFO_MAX = (int)16;    //  事件临时数据最大长度
		public const int ORM_PERIODPRIZE_ITEM_NUM = (int)32;    //  时长奖励
		public const int ORM_GUIDE_COUNT_MAX = (int)32;    //  引导状态数组最大值
		public const sbyte ORM_GUIDE_FINISHFLAGARR_LEN = (sbyte)5;    //  引导存储完成标数组的最大长度，可存数组长度*32个引导完成标志
		public const int GUIDE_MAX_CLIENT_FREE_BUFF_LEN = (int)4096;    //  客户端自由存储的数据 4*1024
		public const int ORM_MAX_MAIL_PARAM_NUM = (int)20;    //  邮件附件参数个数
		public const int ORM_MAX_MAIL_INVALID_RID = (int)-1;    //  无效的邮件rid
		public const int ORM_MAX_MAIL_COUNT = (int)50;    //  个人最大邮件数量
		public const int ORM_MAX_MAIL_SUMMARY_COUNT = (int)32;    //  单次请求的最大邮件摘要数量
		public const int ORM_MAX_DEL_MAIL_COUNT = (int)255;    //  单次删除的最大邮件数量
		public const int ORM_MAX_REGION_COUNT = (int)10;    //  游戏世界筛选区间最大个数
		public const int ORM_MAIL_CONTANT_VERSION = (int)1;    //  邮件内容版本号, 如果在db读回来的邮件低于此版本号,会遭到抛弃
		public const int ORM_MAX_MAIL_TITLE_LEN = (int)64;    //  邮件标题最大长度
		public const int ORM_MAX_MAIL_CONTENT_LEN = (int)400;    //  邮件正文最大长度
		public const int ORM_LOOTBOX_NUM = (int)2;    //  宝箱数量
		public const int ORM_LOOTBOX_GUARANTEE_NUM_MAX = (int)3;    //  最大保底规则数量
		public const int ORM_LOOTBOX_OPEN_NUM_MAX = (int)10;    //  最大一次开盒数量
		public const int ORM_MAX_BATCH_CREATE_ENTITY_NUM = (int)100;    //  批量创建实体的最大数目, 广播时用
		public const int ORM_MAX_BATCH_DESTROY_ENTITY_NUM = (int)255;    //  批量删除实体的最大数目, 广播时用
		public const int ORM_LEECHDOM_EXTDATA_LEN = (int)16;    //  物品扩展数据长度
		public const int ORM_SET_PROP_PASSBACK = (int)128;    //  属性设置回传
		public const int ORM_OSS_DATA_SIZE_MAX = (int)64;    //  客户端登录上报信息属性长度
		public const int MAX_ROOM_NUM = (int)200;    //  房间最大数量 
		public const int MAX_PERSON_IN_ROOM_NUM = (int)64;    //  每个房间最大人数 
		public const int PROP_NUM_IN_BATCH = (int)256;    //  每批属性的数量
		public const int PROP_VAL_ARR_LEN = (int)64;    //  数组属性的长度
		public const int SETPROP_PASSBACK_LEN = (int)128;    //  每批属性的数量
		public const int BATTLE_INPUT_MAX = (int)2;    //  战斗输入最大数量（暂定）
		public const int BATTLE_INPUT_PARAM_MAX = (int)2;    //  战斗输入操作最大参数数量（暂定）
		public const int BATTLE_ROUND_MAX = (int)30;    //  战斗最大回合数
		public const int BATTLE_ROUND_TIME = (int)10;    //  战斗每回合时间限制,单位秒
		public const int BATTLE_SKILL_MAX = (int)4;    //  战斗最大主动技能数
		public const int BATTLE_BUFF_MAX = (int)10;    //  战斗最大Buff数
		public const int BATTLE_TARGET_MAX = (int)4;    //  战斗最大目标数
		public const int BATTLE_ACTION_PARAM_MAX = (int)4;    //  战斗行动最大参数数量（暂定）
		public const int BATTLE_TAG_LEN_MAX = (int)256;    //   战场标签
		public const int BATTLE_ALL_SIDE_SUM = (int)12;    //   战场最多总人数 6v6
		public const int ORM_FORMATION_NUM_PER_TYPE = (int)64;    //  每种玩法下的阵法上限
		public const int ORM_FORMATION_POS_MAX = (int)6;    //  每个战斗阵容最大位置数量
		public const int BATTLE_ENTITY_SKILL_MAX = (int)40;    //  战斗最大技能数
		public const int BATTLE_ENTITY_NUM_MAX = (int)2;    //   战场最多总人数
		public const int BATTLE_ENTITY_NAME_LEN = (int)32;    //   战斗实体名称
		public const int BATTLE_LOG_NTF_MAX = (int)50;    //   战场log战报单条数量上限
		public const int BATTLE_LOG_PACK_LEN = (int)62464;    //  战场log整包最大长度61k
		public const int BATTLE_ENTITY_EQUIP_NUM_MAX = (int)36;    //  最大装备数
		public const int BATTLE_ENTITY_TAG_LEN_MAX = (int)128;    //  战场客户端标签长度
		public const int ORM_ENTITY_FINALSTATE_PROP_NUM = (int)16;    //  战斗结束时实体属性个数
		public const int BATTLE_BUFFERNUM_IN_LIST = (int)32;    //  buffer列表中的buff数量
		public const int BATTLE_ENTITY_ABILITY_MAX = (int)16;    //  词条数量
		public const int BATTLE_GLOBAL_AI_NUM = (int)64;    //  全局ai的数量
		public const int ORM_ARENA1_MAX_OPPONENT = (int)5;    //  竞技场. 最大对手
		public const int ORM_ARENA1_INVALID_RANK = (int)-1;    //  竞技场名次: 未上榜
		public const int ORM_ARENA1_LOG_NUM = (int)10;    //  替换式竞技场. 最大日志数量
		public const int ORM_RANKING_INVALID_RANK = (int)-1;    //  初始名次
		public const int ORM_OFFLINE_DISCIPLE_NAME_LEN = (int)32;    //  离线弟子名字长度
		public const int ORM_SHOP_RACK_COUNT_MAX = (int)32;    //  商店货架最大数量
	}
	//  附件类型
	public enum EN_ATTACHMENT_TYPE{
		    enMailAT_SimpleGoods=0,    //按id给出的简单物品  ID#val#ID#val....
		    enMailAT_LuaFunc,    //执行一个lua函数
		    enMailAT_AdvEquip,    //高级装备
		    enMailAT_PrizeID,    //奖励ID  PrizeID#Num#PrizeID#Num....
		    enMailAT_Max,    //
	}; 

	//  客户端操作错误码
	public enum EN_CLIENT_OP_ERROR_CODE{
		    enOP_NO_ERROR=0,    //操作成功, 没发生错误
		    enOP_ABNORMAL_ERROR,    //服务器异常
		    enOP_LoginSvr_Maintaining=15,    //服务器维护中
		    enOP_LoginSvr_Busy,    //服务器繁忙
		    enOP_LoginSvr_ClientVerTooLow,    //客户端版本过低
		    enOP_LoginSvr_UnknownPartner,    //未知的partner
		    enOP_LoginSvr_PlatConnError,    //平台服连接错误
		    enOP_LoginSvr_VerifyProcessing,    //校验正在处理
		    enOP_LoginSvr_TestAccountNotAllow,    //不允许使用测试号
		    enOP_LoginSvr_AccountIsEmpty,    //帐号为空串
		    enOP_LoginSvr_InvalidAccount,    //帐号无效
		    enOP_LoginSvr_InvalidPartnerToken,    //无效的token(平台验证返回失败)
		    enOP_LoginSvr_VerifyTimeout,    //校验超时
		    enOP_LoginSvr_InvalidWorldID,    //world id 无效(或未开机)
		    enOP_LoginSvr_LobbyConnError,    //lobby server 连接错误
		    enOP_InvalidAutoLoginSess,    //als 失效,需要进行正常登陆. 
		    enOP_LOBBY_REPEAT_NAME=50,    //角色名已存在
		    enOP_LobbySvr_BuildInfo,    //登陆失败，无法创建用户信息
		    enOP_LobbySvr_Login,    //在大厅服登陆失败
		    enOP_LobbySvr_Create,    //登陆失败，请求创建角色失败
		    enOP_LobbySvr_RoleList,    //登陆失败，角色列表加载出错
		    enOP_LobbySvr_Select,    //
		    enOP_LobbySvr_InvalidAccount,    //帐号无效
		    enOP_LobbySvr_BanRole,    //被封账号
		    enOP_LobbySvr_DelAccount,    //账号注销中
		    enOP_QueryRole_SystemBusy=150,    //系统忙, 稍后再试
		    enOP_QueryRole_Querying,    //本人正在查询, 稍后再试
		    enOP_QueryRole_VisitorNotPermit,    //游客帐号不允许查询,需要先绑定帐号
		    enOP_QueryRole_WorldidNotFound,    //worldid 在列表中找不到
		    enOP_QueryRole_GenerateAlsError,    //生成als失败
		    enOP_LUA_REQ_NOT_ALLOW=200,    //lua请求的函数无效
		    enOP_LeechdomUse_Lee_Not_Found=250,    //物品找不到
		    enOP_LeechdomUse_NoRule,    //没有使用规则
		    enOP_LeechdomUse_ConfigError,    //配置错误
		    enOP_LeechdomUse_ScriptFuncError,    //脚本执行错误
		    enOP_LeechdomUse_MaterialNotEnough,    //材料不足
		    enOP_LeechdomUse_AwardError,    //奖励发放失败
		    enOP_LeechdomUse_UseCountTooMax,    //物品使用次数太多
		    enOP_LeechdomUse_BackpackIsFull,    //奖励的东西太多，背包装不下了
		    enOP_LeechdomUse_AddReStoneToPriList,    //将返回的强化石材料添加的奖励列表时出错
		    enOP_MiniGame_AlreadyInRoom=300,    //已经在房间中
		    enOP_MiniGame_TooManyPlayer,    //房间的player过多
		    enOP_MiniGame_InvalidRoomID,    //房间id无效
		    enOP_MiniGame_RoomNotFound,    //找不到合适的房间
		    enOP_MiniGame_SetPropFail,    //设置属性失败
		    enOP_MiniGame_SetProp_InvalidRoleID,    //role id无效
		    enOP_MiniGame_SetProp_VerNotMatch,    //
		    enOP_Wander_Err=350,    //游历未知错误
		    enOP_Wander_Seed_Not_Owned,    //胚子未拥有
		    enOP_Wander_Seed_ID_Repeate,    //胚子id重复
		    enOP_Wander_Creat_DIscilpe_Err,    //创建弟子失败
		    enOP_Wander_Tuining_Repeate,    //加点操作重复
		    enOP_Wander_Individual_Sum_Err,    //个体值总数错误
		    enOP_Wander_Individual_Limit_MAX,    //个体值超过最大值
		    enOP_Wander_Individual_Limit_Range,    //个体值超过范围
		    enOP_Wander_Stage_Event_Not_Over,    //当前关卡事件未结束
		    enOP_Wander_Stage_Next_Err,    //进入下一关失败
		    enOP_Wander_State_Over=360,    //游历已经结束
		    enOP_Wander_State_Death,    //游历弟子已死亡（结算界面）
		    enOP_Wander_Satge_Event_None,    //关卡事件未找到
		    enOP_Wander_Choose_Repeate,    //选择重复
		    enOP_Wander_Count_Limint_MAX,    //同时游历数量超过上限
		    enOP_Wander_EventContext_Err,    //游历事件数据错误
		    enOP_Wander_Free_Not_Enough,    //游历抽奖次数不足
		    enOP_Wander_Ability_Max,    //词条达上限
		    enOP_Wander_FortureWheel_Complate,    //完成抽奖(没有抽奖次数了)
		    enOP_Wander_Select_Num_Err,    //选择数量错误
		    enOP_Wander_Equip_Buy_Repeate=370,    //装备购买重复
		    enOP_Wander_Equip_Not_Exist,    //装备不存在
		    enOP_Wander_Refresh_Not_Enough,    //刷新次数不足
		    enOP_Wander_Discilpe_Count_Limit,    //当前弟子已达上限，请驱逐
		    enOP_WEquip_Err=400,    //游历装备未知错误
		    enOP_WEquip_Cannot_Equip_Err,    //装备不可放置错误
		    enOP_WEquip_Cannot_UnEquip_Err,    //装备不可卸下错误
		    enOP_WEquip_Cannot_Delete_Err,    //装备不可删除错误
		    enOP_WEquip_Pack_Is_Full,    //装备区已满
		    enOP_WEquip_InValid_Compose_Req,    //装备合成非法输入
		    enOP_WEquip_Compose_NotFound,    //装备合成公式未找到
		    enOP_WEquip_Roll_Compose_Failed,    //装备合成选择失败
		    enOP_WEquip_Compose_Failed,    //装备合成失败
		    enOP_WEquip_Reforge_Not_Enough,    //重铸进度不足
		    enOP_WEquip_UnlockGrid_Reach_Limit,    //开格次数达上限
		    enOP_WEquip_Grid_AlreadyUnlocked,    //格子已经解锁
		    enOP_PrizeSys_Err=500,    //奖励系统未知错误
		    enOP_PrizeSys_BackpackIsFull_Goods,    //奖励系统背包已满错误
		    enOP_Battle_Err=600,    //战斗系统未知错误
		    enOP_Battle_Not_Find,    //战斗未找到
		    enOP_Battle_Ended,    //战斗已经结束
		    enOP_Battle_Fight_Param_Count_Err,    //战斗参数数量错误
		    enOP_Battle_Skill_Usage_Count_Not_Enough,    //技能使用次数不足
		    enOP_Battle_Skill_Not_Used_Self,    //技能无法对自己使用
		    enOP_Battle_Cant_Select_Target,    //目标无法选择
		    enOP_ClimbTower_Err=700,    //爬塔系统未知错误
		    enOP_ClimbTower_LevelIsMax,    //爬塔到达最大层
		    enOP_ClimbTower_StartBattleFailed,    //爬塔开始战斗失败
		    enOP_ClimbTower_NotEnoughCoupon,    //爬塔挑战券不足
		    enOP_Stamina_Err=750,    //体力系统未知错误
		    enOP_Stamina_Not_Enough,    //体力不足
		    enOP_Sect_Err=800,    //宗门系统未知错误
		    enOP_Sect_LastLevel,    //宗门到达最大层
		    enOP_SectForm_FormLocked,    //阵法锁定
		    enOP_SectForm_PosLocked,    //阵法位置锁定
		    enOP_SectForm_PosOccupied,    //阵法位置已占用
		    enOP_SectForm_DiscipleIsOn,    //弟子已经上阵（并且在别的位置）
		    enOP_SectForm_PosAttriMismatch,    //阵法位置属性不合要求
		    enOP_Antique_Err=850,    //古宝系统未知错误
		    enOP_Antique_MaxLevel,    //古宝到达最大星级
		    enOP_Seeding_Err=900,    //功法系统未知错误
		    enOP_Seeding_MaxLevel,    //功法到达最大星级
		    enOP_Task_Err=950,    //任务系统未知错误
		    enOP_Task_ID_Not_Find,    //任务id未找到
		    enOP_Task_Condition_Not_Enough,    //条件未满足
		    enOP_Task_Reward_Err,    //任务奖励发放失败
		    enOP_Common_Person_Not_Found=1000,    //用户未找到
		    enOP_Common_Seed_Not_Found,    //胚子未找到
		    enOP_Common_Disciple_Not_Found,    //弟子未找到
		    enOP_Common_Param_Err,    //参数错误
		    enOP_Common_Person_Part_Not_Found,    //部件未找到
		    enOP_Common_ConfigNot_Found,    //配置未找到
		    enOP_Common_RoundTable_Found,    //圆桌随机错误
		    enOP_Common_Item_Not_Enough,    //道具数量不足
		    enOP_Common_Power_Not_Enough,    //战力不足
		    enOP_Common_Undefined_Type,    //类型未定义
		    enOP_Common_Config_Data_Err=1010,    //配置数据错误
		    enOP_Common_Money_Not_Enough,    //金钱不足
		    enOP_Common_Buy_Times_Not_Enough,    //购买次数不足
		    enOP_Common_Add_Goods_Err,    //添加道具失败
		    enOP_Common_Rename_Err,    //角色名非法
		    enOP_Common_Rename_NotNUll,    //角色名不能为空
		    enOP_Guide_Err=1100,    //引导系统未知错误
		    enOP_Guide_SetGuideFinishErr,    //设置引导错误
		    enOP_Guide_FreeBuff_Len_Err,    //自由数据长度
		    enOP_Arena_Err=1200,    //竞技场未知错误
		    enOP_Arena_NotReady,    //竞技场未装备好
		    enOP_Arena_PersonNotExist,    //玩家不存在
		    enOP_Arena_InvalidType,    //竞技场类型不存在
		    enOP_Arena_RefreshOppTooFast,    //获取敌人过频
		    enOP_Arena_NoChallengePermit,    //不许挑战（次数耗光
		    enOP_Arena_InvalidOpponent,    //对手非法
		    enOP_Arena_AlreadyInBattle,    //正在战斗
		    enOP_Arena_InSettlePeriod,    //正在结算期
		    enOP_Arena_RandomOpponentFail,    //随机对手失败
		    enOP_Arena_InvalidAttForm,    //非法进攻阵容
		    enOP_Arena_InvalidDefForm,    //非法防守阵容
		    enOP_Arena_RevengeOffBoard,    //复仇对象已下榜
		    enOP_PeriodPrize_CfgNotFound=1300,    //未找到配置
		    enOP_PeriodPrize_PurchaseCountReachLimit,    //达到购买上限
		    enOP_PeriodPrize_NotEnoughMoney,    //钱不足
		    enOP_CommonShop_Err=1400,    //通用商店系统未知错误
		    enOP_CommonShop_Need_Refresh,    //商店需要先刷新
		    enOP_CommonShop_Rack_Content_Not_Found,    //商店格子数据未找到
		    enOP_MailSys_ErrorRid=1500,    //邮件Rid有误
		    enOP_MailSys_SetMailFlagFailed,    //设置邮件标志失败
		    enOP_MailSys_PayGoodsFailed,    //添加邮件附件物品失败
		    enOP_MailSys_Expired,    //邮件已过期
		    enOP_SevenDay_SignIn_ActID_Error=1600,    //活动id有误
		    enOP_SevenDay_SignIn_Reward_Repeat=1601,    //今日奖励已领取
		    enOP_SevenDay_SignIn_Need_Pay=1602,    //今日奖励已领取
		    enOP_CDKEY_Request_Too_Quick=1700,    //兑换码请求过频
		    enOP_CDKEY_Http_Fail=1701,    //兑换码http错误
	}; 

	//  邮件标记
	public enum EN_MAIL_FLAG{
		    enMailFlag_Read=1,    //1 已读  ; 0未读
		    enMailFlag_FetchAttachment=2,    //附件标记,  1  已领,  0未领
		    enMailFlag_Important=4,    //重要邮件:   不可一键读取领取
		    enMailFlag_Max,    //
	}; 

	//  语言id
	public enum EN_MAIL_LANGID{
		    enMailLang_min=0,    //min
		    enMailLang_en=0,    //英文
		    enMailLang_zhcn,    //简体中文
		    enMailLang_max,    //max
	}; 

	//  服务器端操作错误码
	public enum EN_SERVER_OP_ERROR_CODE{
		    enSS_NO_ERROR=0,    //操作成功, 没发生错误
		    enSS_ABNORMAL_ERROR,    //异常错误
		    enSS_NETWORK_ERROR,    //网络错误
	}; 

	//   封号类型
	public enum EnAccountBanType{
		    enBanType_GM=1,    //GM封号
	}; 

	//  穿装备的来源/原因
	public enum EnArenaType{
		    enArenaT_Placement=0,    //
		    enArenaT_Score0,    //
		    enArenaT_Placement2,    //
		    enArenaT_Score2,    //
		    enArenaT_Max,    //
	}; 

	//  灵根类型
	public enum EnAttRootType{
		    enAttRootType_Min=0,    //
		    enAttRootType_Gold=1,    //金灵根
		    enAttRootType_Wood=2,    //木灵根
		    enAttRootType_Water=3,    //水灵根
		    enAttRootType_Fire=4,    //火灵根
		    enAttRootType_Earth=5,    //土灵根
		    enAttRootType_Body=6,    //体灵根
		    enAttRootType_Evil=7,    //邪灵根
		    enAttRootType_Dragon=8,    //龙灵根
		    enAttRootType_Immortal=9,    //仙灵根
		    enAttRootType_Max,    //
	}; 

	//  战斗实体单元数组属性定义
	public enum EnBatEntityProp{
		    BENT_PROP_MIN=0,    //最小值, 保留
		    BENT_PROP_ISPLAYER,    //0  怪物角色; 1   是玩家角色
		    BENT_PROP_CAMPID,    //0攻(左)/1守(右)
		    BENT_PROP_POS,    //位置0-4
		    BENT_PROP_INIT_HP,    //初始血量, 如果为-1, 会重置为最大值
		    BENT_PROP_INIT_RAGE,    //初始怒气
		    BENT_PROP_MAIN_BASE_MIN,    //最终一级属性最小值
		    BENT_PROP_QUALIFICATION_BASE,    //资质
		    BENT_PROP_ROOT_BONE_BASE,    //根骨
		    BENT_PROP_INSIGHT_BASE,    //悟性
		    BENT_PROP_QI_SENSE_BASE,    //气感
		    BENT_PROP_POTENTIAL_BASE,    //潜力
		    BENT_PROP_OPPORTUNITY_BASE,    //机缘
		    BENT_PROP_MAIN_BASE_MAX,    //最终一级属性最大值
		    BENT_PROP_SUB_BASE_MIN,    //最终二级属性最小值
		    BENT_PROP_ATTACK_BASE,    //攻击力
		    BENT_PROP_DEFENSE_BASE,    //防御
		    BENT_PROP_HEALTH_BASE,    //生命值
		    BENT_PROP_ATTACK_POWER_PERCENTAGE_BASE,    //攻击力百分比
		    BENT_PROP_DEFENSE_PERCENTAGE_BASE,    //防御百分比
		    BENT_PROP_HEALTH_PERCENTAGE_BASE,    //生命值百分比
		    BENT_PROP_RAGE_LIMIT_BASE,    //怒气上限
		    BENT_PROP_SPEED_BASE,    //速度
		    BENT_PROP_CRITICAL_RATE_BASE,    //暴击率
		    BENT_PROP_IGNORE_CRITICAL_RATE_BASE,    //忽视暴击率
		    BENT_PROP_NORMAL_ATTACK_CRITICAL_RATE_BASE,    //普攻暴击率
		    BENT_PROP_IGNORE_NORMAL_ATTACK_CRITICAL_RATE_BASE,    //忽视普攻暴击率
		    BENT_PROP_SKILL_CRITICAL_RATE_BASE,    //技能暴击率
		    BENT_PROP_IGNORE_SKILL_CRITICAL_RATE_BASE,    //忽视技能暴击率
		    BENT_PROP_RAGE_SKILL_CRITICAL_RATE_BASE,    //怒气技暴击率
		    BENT_PROP_IGNORE_RAGE_SKILL_CRITICAL_RATE_BASE,    //忽视怒气技暴击率
		    BENT_PROP_DODGE_RATE_BASE,    //闪避率
		    BENT_PROP_IGNORE_DODGE_RATE_BASE,    //忽视闪避率
		    BENT_PROP_DIZZINESS_RATE_BASE,    //眩晕率
		    BENT_PROP_IGNORE_DIZZINESS_RATE_BASE,    //忽视眩晕率
		    BENT_PROP_COUNTER_RATE_BASE,    //反击率
		    BENT_PROP_IGNORE_COUNTER_RATE_BASE,    //忽视反击率
		    BENT_PROP_COMBO_RATE_BASE,    //连击率
		    BENT_PROP_IGNORE_COMBO_RATE_BASE,    //忽视连击率
		    BENT_PROP_INCREASE_DAMAGE_BASE,    //增伤
		    BENT_PROP_DECREASE_DAMAGE_BASE,    //减伤
		    BENT_PROP_CRITICAL_INCREASE_DAMAGE_BASE,    //暴击增伤
		    BENT_PROP_CRITICAL_DECREASE_DAMAGE_BASE,    //暴击减伤
		    BENT_PROP_COUNTER_INCREASE_DAMAGE_BASE,    //反击增伤
		    BENT_PROP_COUNTER_DECREASE_DAMAGE_BASE,    //反击减伤
		    BENT_PROP_COMBO_INCREASE_DAMAGE_BASE,    //连击增伤
		    BENT_PROP_COMBO_DECREASE_DAMAGE_BASE,    //连击减伤
		    BENT_PROP_DIZZINESS_INCREASE_DAMAGE_BASE,    //眩晕增伤
		    BENT_PROP_DIZZINESS_DECREASE_DAMAGE_BASE,    //眩晕减伤
		    BENT_PROP_NORMAL_ATTACK_INCREASE_DAMAGE_BASE,    //普攻增伤
		    BENT_PROP_NORMAL_ATTACK_DECREASE_DAMAGE_BASE,    //普攻减伤
		    BENT_PROP_SKILL_INCREASE_DAMAGE_BASE,    //技能增伤
		    BENT_PROP_SKILL_DECREASE_DAMAGE_BASE,    //技能减伤
		    BENT_PROP_RAGE_SKILL_INCREASE_DAMAGE_BASE,    //怒气技增伤
		    BENT_PROP_RAGE_SKILL_DECREASE_DAMAGE_BASE,    //怒气技减伤
		    BENT_PROP_MONSTER_INCREASE_DAMAGE_BASE,    //怪物增伤
		    BENT_PROP_MONSTER_DECREASE_DAMAGE_BASE,    //怪物减伤
		    BENT_PROP_PLAYER_INCREASE_DAMAGE_BASE,    //玩家增伤
		    BENT_PROP_PLAYER_DECREASE_DAMAGE_BASE,    //玩家减伤
		    BENT_PROP_HEAL_STRENGTHEN_BASE,    //强化治疗
		    BENT_PROP_HEAL_WEAKEN_BASE,    //弱化治疗
		    BENT_PROP_DRAIN_RATE_BASE,    //汲取率
		    BENT_PROP_IGNORE_DRAIN_RATE_BASE,    //忽视汲取率
		    BENT_PROP_STRENGTHEN_DRAIN_BASE,    //强化汲取
		    BENT_PROP_WEAKEN_DRAIN_BASE,    //弱化汲取
		    BENT_PROP_THUNDER_INCREASE_DAMAGE_BASE,    //雷系增伤
		    BENT_PROP_THUNDER_DECREASE_DAMAGE_BASE,    //雷系减伤
		    BENT_PROP_GOLD_INCREASE_DAMAGE_BASE,    //金系增伤
		    BENT_PROP_GOLD_DECREASE_DAMAGE_BASE,    //金系减伤
		    BENT_PROP_WOOD_INCREASE_DAMAGE_BASE,    //木系增伤
		    BENT_PROP_WOOD_DECREASE_DAMAGE_BASE,    //木系减伤
		    BENT_PROP_WATER_INCREASE_DAMAGE_BASE,    //水系增伤
		    BENT_PROP_WATER_DECREASE_DAMAGE_BASE,    //水系减伤
		    BENT_PROP_FIRE_INCREASE_DAMAGE_BASE,    //火系增伤
		    BENT_PROP_FIRE_DECREASE_DAMAGE_BASE,    //火系减伤
		    BENT_PROP_EARTH_INCREASE_DAMAGE_BASE,    //土系增伤
		    BENT_PROP_EARTH_DECREASE_DAMAGE_BASE,    //土系减伤
		    BENT_PROP_GLOBAL_ATTACK_POWER_PERCENTAGE_BASE,    //全局攻击力百分比
		    BENT_PROP_GLOBAL_DEFENSE_PERCENTAGE_BASE,    //全局防御百分比
		    BENT_PROP_GLOBAL_HEALTH_PERCENTAGE_BASE,    //全局生命值百分比
		    BENT_PROP_GLOBAL_INCREASE_DAMAGE_BASE,    //全局增伤
		    BENT_PROP_GLOBAL_DECREASE_DAMAGE_BASE,    //全局减伤
		    BENT_PROP_SHIELD_INCREASE_BASE,    //护盾加成百份比
		    BENT_PROP_INIT_END,    //初始化属性  end
		    BENT_PROP_CUR_HP,    //当前血量
		    BENT_PROP_CUR_RAGE,    //当前怒气
		    BENT_PROP_ALIVE,    //存活状态,  0死, 1活
		    BENT_PROP_DIZZY_ROUND,    //眩晕的回合数
		    BENT_PROP_FREEZE_LAYER,    //冰冻层数. 0表示没有冰冻
		    BENT_PROP_CUR_SHIELD,    //当前护盾
		    BENT_PROP_ACT_IN_ROUND,    //本回合是否已经行动
		    BENT_PROP_CRITICALHIT_IN_ROUND,    //本回合爆击次数
		    BENT_PROP_DIZZYHIT_IN_ROUND,    //本回合击晕(对方)次数
		    BENT_PROP_COUNTERHIT_IN_ROUND,    //本回合反击次数
		    BENT_PROP_DODGEHIT_IN_ROUND,    //本回合躲闪次数
		    BENT_PROP_WAITING_RELIVE,    //等待复活
		    BENT_PROP_RELIVE_HP_PERCENT,    //复活时血量(比例)
		    BENT_PROP_MAIN_EFF_MIN,    //最终一级属性最小值
		    BENT_PROP_QUALIFICATION_EFF,    //资质
		    BENT_PROP_ROOT_BONE_EFF,    //根骨
		    BENT_PROP_INSIGHT_EFF,    //悟性
		    BENT_PROP_QI_SENSE_EFF,    //气感
		    BENT_PROP_POTENTIAL_EFF,    //潜力
		    BENT_PROP_OPPORTUNITY_EFF,    //机缘
		    BENT_PROP_MAIN_EFF_MAX,    //最终一级属性最大值
		    BENT_PROP_SUB_EFF_MIN,    //最终二级属性最小值
		    BENT_PROP_ATTACK_EFF,    //攻击力
		    BENT_PROP_DEFENSE_EFF,    //防御
		    BENT_PROP_HEALTH_EFF,    //生命值
		    BENT_PROP_ATTACK_POWER_PERCENTAGE_EFF,    //攻击力百分比
		    BENT_PROP_DEFENSE_PERCENTAGE_EFF,    //防御百分比
		    BENT_PROP_HEALTH_PERCENTAGE_EFF,    //生命值百分比
		    BENT_PROP_RAGE_LIMIT_EFF,    //怒气上限
		    BENT_PROP_SPEED_EFF,    //速度
		    BENT_PROP_CRITICAL_RATE_EFF,    //暴击率
		    BENT_PROP_IGNORE_CRITICAL_RATE_EFF,    //忽视暴击率
		    BENT_PROP_NORMAL_ATTACK_CRITICAL_RATE_EFF,    //普攻暴击率
		    BENT_PROP_IGNORE_NORMAL_ATTACK_CRITICAL_RATE_EFF,    //忽视普攻暴击率
		    BENT_PROP_SKILL_CRITICAL_RATE_EFF,    //技能暴击率
		    BENT_PROP_IGNORE_SKILL_CRITICAL_RATE_EFF,    //忽视技能暴击率
		    BENT_PROP_RAGE_SKILL_CRITICAL_RATE_EFF,    //怒气技暴击率
		    BENT_PROP_IGNORE_RAGE_SKILL_CRITICAL_RATE_EFF,    //忽视怒气技暴击率
		    BENT_PROP_DODGE_RATE_EFF,    //闪避率
		    BENT_PROP_IGNORE_DODGE_RATE_EFF,    //忽视闪避率
		    BENT_PROP_DIZZINESS_RATE_EFF,    //眩晕率
		    BENT_PROP_IGNORE_DIZZINESS_RATE_EFF,    //忽视眩晕率
		    BENT_PROP_COUNTER_RATE_EFF,    //反击率
		    BENT_PROP_IGNORE_COUNTER_RATE_EFF,    //忽视反击率
		    BENT_PROP_COMBO_RATE_EFF,    //连击率
		    BENT_PROP_IGNORE_COMBO_RATE_EFF,    //忽视连击率
		    BENT_PROP_INCREASE_DAMAGE_EFF,    //增伤
		    BENT_PROP_DECREASE_DAMAGE_EFF,    //减伤
		    BENT_PROP_CRITICAL_INCREASE_DAMAGE_EFF,    //暴击增伤
		    BENT_PROP_CRITICAL_DECREASE_DAMAGE_EFF,    //暴击减伤
		    BENT_PROP_COUNTER_INCREASE_DAMAGE_EFF,    //反击增伤
		    BENT_PROP_COUNTER_DECREASE_DAMAGE_EFF,    //反击减伤
		    BENT_PROP_COMBO_INCREASE_DAMAGE_EFF,    //连击增伤
		    BENT_PROP_COMBO_DECREASE_DAMAGE_EFF,    //连击减伤
		    BENT_PROP_DIZZINESS_INCREASE_DAMAGE_EFF,    //眩晕增伤
		    BENT_PROP_DIZZINESS_DECREASE_DAMAGE_EFF,    //眩晕减伤
		    BENT_PROP_NORMAL_ATTACK_INCREASE_DAMAGE_EFF,    //普攻增伤
		    BENT_PROP_NORMAL_ATTACK_DECREASE_DAMAGE_EFF,    //普攻减伤
		    BENT_PROP_SKILL_INCREASE_DAMAGE_EFF,    //技能增伤
		    BENT_PROP_SKILL_DECREASE_DAMAGE_EFF,    //技能减伤
		    BENT_PROP_RAGE_SKILL_INCREASE_DAMAGE_EFF,    //怒气技增伤
		    BENT_PROP_RAGE_SKILL_DECREASE_DAMAGE_EFF,    //怒气技减伤
		    BENT_PROP_MONSTER_INCREASE_DAMAGE_EFF,    //怪物增伤
		    BENT_PROP_MONSTER_DECREASE_DAMAGE_EFF,    //怪物减伤
		    BENT_PROP_PLAYER_INCREASE_DAMAGE_EFF,    //玩家增伤
		    BENT_PROP_PLAYER_DECREASE_DAMAGE_EFF,    //玩家减伤
		    BENT_PROP_HEAL_STRENGTHEN_EFF,    //强化治疗
		    BENT_PROP_HEAL_WEAKEN_EFF,    //弱化治疗
		    BENT_PROP_DRAIN_RATE_EFF,    //汲取率
		    BENT_PROP_IGNORE_DRAIN_RATE_EFF,    //忽视汲取率
		    BENT_PROP_STRENGTHEN_DRAIN_EFF,    //强化汲取
		    BENT_PROP_WEAKEN_DRAIN_EFF,    //弱化汲取
		    BENT_PROP_THUNDER_INCREASE_DAMAGE_EFF,    //雷系增伤
		    BENT_PROP_THUNDER_DECREASE_DAMAGE_EFF,    //雷系减伤
		    BENT_PROP_GOLD_INCREASE_DAMAGE_EFF,    //金系增伤
		    BENT_PROP_GOLD_DECREASE_DAMAGE_EFF,    //金系减伤
		    BENT_PROP_WOOD_INCREASE_DAMAGE_EFF,    //木系增伤
		    BENT_PROP_WOOD_DECREASE_DAMAGE_EFF,    //木系减伤
		    BENT_PROP_WATER_INCREASE_DAMAGE_EFF,    //水系增伤
		    BENT_PROP_WATER_DECREASE_DAMAGE_EFF,    //水系减伤
		    BENT_PROP_FIRE_INCREASE_DAMAGE_EFF,    //火系增伤
		    BENT_PROP_FIRE_DECREASE_DAMAGE_EFF,    //火系减伤
		    BENT_PROP_EARTH_INCREASE_DAMAGE_EFF,    //土系增伤
		    BENT_PROP_EARTH_DECREASE_DAMAGE_EFF,    //土系减伤
		    BENT_PROP_GLOBAL_ATTACK_POWER_PERCENTAGE_EFF,    //全局攻击力百分比
		    BENT_PROP_GLOBAL_DEFENSE_PERCENTAGE_EFF,    //全局防御百分比
		    BENT_PROP_GLOBAL_HEALTH_PERCENTAGE_EFF,    //全局生命值百分比
		    BENT_PROP_GLOBAL_INCREASE_DAMAGE_EFF,    //全局增伤
		    BENT_PROP_GLOBAL_DECREASE_DAMAGE_EFF,    //全局减伤
		    BENT_PROP_SHIELD_INCREASE_EFF,    //护盾加成百份比
		    BENT_PROP_SUB_EFF_MAX,    //最终二级属性  max 
		    BENT_PROP_MAIN_FINAL_MIN,    //最终一级属性最小值
		    BENT_PROP_QUALIFICATION_FINAL,    //资质
		    BENT_PROP_ROOT_BONE_FINAL,    //根骨
		    BENT_PROP_INSIGHT_FINAL,    //悟性
		    BENT_PROP_QI_SENSE_FINAL,    //气感
		    BENT_PROP_POTENTIAL_FINAL,    //潜力
		    BENT_PROP_OPPORTUNITY_FINAL,    //机缘
		    BENT_PROP_MAIN_FINAL_MAX,    //最终一级属性最大值
		    BENT_PROP_SUB_FINAL_MIN,    //最终二级属性最小值
		    BENT_PROP_ATTACK_FINAL,    //攻击力
		    BENT_PROP_DEFENSE_FINAL,    //防御
		    BENT_PROP_HEALTH_FINAL,    //生命值
		    BENT_PROP_ATTACK_POWER_PERCENTAGE_FINAL,    //攻击力百分比
		    BENT_PROP_DEFENSE_PERCENTAGE_FINAL,    //防御百分比
		    BENT_PROP_HEALTH_PERCENTAGE_FINAL,    //生命值百分比
		    BENT_PROP_RAGE_LIMIT_FINAL,    //怒气上限
		    BENT_PROP_SPEED_FINAL,    //速度
		    BENT_PROP_CRITICAL_RATE_FINAL,    //暴击率
		    BENT_PROP_IGNORE_CRITICAL_RATE_FINAL,    //忽视暴击率
		    BENT_PROP_NORMAL_ATTACK_CRITICAL_RATE_FINAL,    //普攻暴击率
		    BENT_PROP_IGNORE_NORMAL_ATTACK_CRITICAL_RATE_FINAL,    //忽视普攻暴击率
		    BENT_PROP_SKILL_CRITICAL_RATE_FINAL,    //技能暴击率
		    BENT_PROP_IGNORE_SKILL_CRITICAL_RATE_FINAL,    //忽视技能暴击率
		    BENT_PROP_RAGE_SKILL_CRITICAL_RATE_FINAL,    //怒气技暴击率
		    BENT_PROP_IGNORE_RAGE_SKILL_CRITICAL_RATE_FINAL,    //忽视怒气技暴击率
		    BENT_PROP_DODGE_RATE_FINAL,    //闪避率
		    BENT_PROP_IGNORE_DODGE_RATE_FINAL,    //忽视闪避率
		    BENT_PROP_DIZZINESS_RATE_FINAL,    //眩晕率
		    BENT_PROP_IGNORE_DIZZINESS_RATE_FINAL,    //忽视眩晕率
		    BENT_PROP_COUNTER_RATE_FINAL,    //反击率
		    BENT_PROP_IGNORE_COUNTER_RATE_FINAL,    //忽视反击率
		    BENT_PROP_COMBO_RATE_FINAL,    //连击率
		    BENT_PROP_IGNORE_COMBO_RATE_FINAL,    //忽视连击率
		    BENT_PROP_INCREASE_DAMAGE_FINAL,    //增伤
		    BENT_PROP_DECREASE_DAMAGE_FINAL,    //减伤
		    BENT_PROP_CRITICAL_INCREASE_DAMAGE_FINAL,    //暴击增伤
		    BENT_PROP_CRITICAL_DECREASE_DAMAGE_FINAL,    //暴击减伤
		    BENT_PROP_COUNTER_INCREASE_DAMAGE_FINAL,    //反击增伤
		    BENT_PROP_COUNTER_DECREASE_DAMAGE_FINAL,    //反击减伤
		    BENT_PROP_COMBO_INCREASE_DAMAGE_FINAL,    //连击增伤
		    BENT_PROP_COMBO_DECREASE_DAMAGE_FINAL,    //连击减伤
		    BENT_PROP_DIZZINESS_INCREASE_DAMAGE_FINAL,    //眩晕增伤
		    BENT_PROP_DIZZINESS_DECREASE_DAMAGE_FINAL,    //眩晕减伤
		    BENT_PROP_NORMAL_ATTACK_INCREASE_DAMAGE_FINAL,    //普攻增伤
		    BENT_PROP_NORMAL_ATTACK_DECREASE_DAMAGE_FINAL,    //普攻减伤
		    BENT_PROP_SKILL_INCREASE_DAMAGE_FINAL,    //技能增伤
		    BENT_PROP_SKILL_DECREASE_DAMAGE_FINAL,    //技能减伤
		    BENT_PROP_RAGE_SKILL_INCREASE_DAMAGE_FINAL,    //怒气技增伤
		    BENT_PROP_RAGE_SKILL_DECREASE_DAMAGE_FINAL,    //怒气技减伤
		    BENT_PROP_MONSTER_INCREASE_DAMAGE_FINAL,    //怪物增伤
		    BENT_PROP_MONSTER_DECREASE_DAMAGE_FINAL,    //怪物减伤
		    BENT_PROP_PLAYER_INCREASE_DAMAGE_FINAL,    //玩家增伤
		    BENT_PROP_PLAYER_DECREASE_DAMAGE_FINAL,    //玩家减伤
		    BENT_PROP_HEAL_STRENGTHEN_FINAL,    //强化治疗
		    BENT_PROP_HEAL_WEAKEN_FINAL,    //弱化治疗
		    BENT_PROP_DRAIN_RATE_FINAL,    //汲取率
		    BENT_PROP_IGNORE_DRAIN_RATE_FINAL,    //忽视汲取率
		    BENT_PROP_STRENGTHEN_DRAIN_FINAL,    //强化汲取
		    BENT_PROP_WEAKEN_DRAIN_FINAL,    //弱化汲取
		    BENT_PROP_THUNDER_INCREASE_DAMAGE_FINAL,    //雷系增伤
		    BENT_PROP_THUNDER_DECREASE_DAMAGE_FINAL,    //雷系减伤
		    BENT_PROP_GOLD_INCREASE_DAMAGE_FINAL,    //金系增伤
		    BENT_PROP_GOLD_DECREASE_DAMAGE_FINAL,    //金系减伤
		    BENT_PROP_WOOD_INCREASE_DAMAGE_FINAL,    //木系增伤
		    BENT_PROP_WOOD_DECREASE_DAMAGE_FINAL,    //木系减伤
		    BENT_PROP_WATER_INCREASE_DAMAGE_FINAL,    //水系增伤
		    BENT_PROP_WATER_DECREASE_DAMAGE_FINAL,    //水系减伤
		    BENT_PROP_FIRE_INCREASE_DAMAGE_FINAL,    //火系增伤
		    BENT_PROP_FIRE_DECREASE_DAMAGE_FINAL,    //火系减伤
		    BENT_PROP_EARTH_INCREASE_DAMAGE_FINAL,    //土系增伤
		    BENT_PROP_EARTH_DECREASE_DAMAGE_FINAL,    //土系减伤
		    BENT_PROP_GLOBAL_ATTACK_POWER_PERCENTAGE_FINAL,    //全局攻击力百分比
		    BENT_PROP_GLOBAL_DEFENSE_PERCENTAGE_FINAL,    //全局防御百分比
		    BENT_PROP_GLOBAL_HEALTH_PERCENTAGE_FINAL,    //全局生命值百分比
		    BENT_PROP_GLOBAL_INCREASE_DAMAGE_FINAL,    //全局增伤
		    BENT_PROP_GLOBAL_DECREASE_DAMAGE_FINAL,    //全局减伤
		    BENT_PROP_SHIELD_INCREASE_FINAL,    //护盾加成百份比
		    BENT_PROP_MAXID,    //最大值
	}; 

	//  战场错误码
	public enum EnBatError{
		    BATERR_NO_ERROR=0,    // 
		    BATERR_ENTITY_CREATEFAIL,    //实体创建失败
		    BATERR_MAX,    // 
	}; 

	//  战斗输入类型
	public enum EnBattleInputType{
		    enBattleInputType_Min=0,    //
		    enBattleInputType_Fight=1,    //战斗
		    enBattleInputType_Run =2,    //逃跑
		    enBattleInputType_Max,    //
	}; 

	//  战斗结果
	public enum EnBattleResult{
		    enBatRes_Win,    //分出胜负
		    enBatRes_Drawgame,    //平局
		    enBatRes_MAX,    //
	}; 

	//  战斗单元数组属性定义
	public enum EnBattleUnitProp{
		    BATTLE_UNIT_PROP_MIN=0,    //最小值, 保留
		    BATTLE_UNIT_PROP_DISPLAY,    //外观
		    BATTLE_UNIT_PROP_SIDE,    //1攻(左)/2守(右)
		    BATTLE_UNIT_PROP_POS,    //位置1-4
		    BATTLE_UNIT_PROP_BATTLE_POS,    //1在场上 0在队列
		    BATTLE_UNIT_PROP_ATTROOT1,    //灵根1
		    BATTLE_UNIT_PROP_ATTROOT2,    //灵根2
		    BATTLE_UNIT_PROP_LEVEL,    //等级
		    BATTLE_UNIT_PROP_MAX_HP,    //最大血量
		    BATTLE_UNIT_PROP_CUR_HP,    //剩余血量
		    BATTLE_UNIT_PROP_BASE_MIN,    //基础属性最小值
		    BATTLE_UNIT_PROP_HP_BASE,    //基础血量
		    BATTLE_UNIT_PROP_SPEED_BASE,    //基础速度
		    BATTLE_UNIT_PROP_ATTACK_BASE,    //基础攻击
		    BATTLE_UNIT_PROP_SPECIAL_ATTACK_BASE,    //基础特攻
		    BATTLE_UNIT_PROP_DEFENSE_BASE,    //基础防御
		    BATTLE_UNIT_PROP_SPECIAL_DEFENSE_BASE,    //基础特防
		    BATTLE_UNIT_PROP_BASE_MAX,    //基础属性最大值
		    BATTLE_UNIT_PROP_MAXID,    //最大值, 保留
	}; 

	//  子弹伤害类型
	public enum EnBulletDamageType{
		    enBDT_None=0,    //无伤害
		    enBDT_Normal,    //普通伤害
		    enBDT_True,    //真实伤害
		    enBDT_Electric,    //电系伤害
		    enBDT_Gold,    //金系伤害
		    enBDT_Wood,    //木系伤害
		    enBDT_Water,    //冰系伤害
		    enBDT_Fire,    //火系伤害
		    enBDT_Earth,    //土系伤害
		    enBDT_Shield=98,    //护盾
		    enBDT_Heal=99,    //治疗
	}; 

	//  弟子词条类型枚举
	public enum EnDiscipleAbility{
		    ABILITY_TYPE_INNATE_NATURE=1,    //先天性格
		    ABILITY_TYPE_INNATE_PHYSIQUE=2,    //先天体质
		    ABILITY_TYPE_ACQUIRED=3,    //后天
		    ABILITY_TYPE_INNATE_TALENT=4,    //先天天赋
	}; 

	//  弟子的数组属性定义
	public enum EnDiscipleProp{
		    DISCIPLE_PROP_MIN=0,    //最小值, 保留
		    DISCIPLE_PROP_LEVEL,    //等级
		    DISCIPLE_PROP_GODEXAM,    //渡劫成功次数
		    DISCIPLE_PROP_WANDERING_DEATH,    //死亡状态 0未完成 1死亡
		    DISCIPLE_PROP_WANDERING_STATE,    //游历状态 0未完成 1已经完成
		    DISCIPLE_PROP_WANDERING_DEGREE,    //游历到哪个关卡
		    DISCIPLE_PROP_ICON_ID,    //弟子头像Id
		    DISCIPLE_PROP_CREATE_TIME,    //弟子创建时间
		    DISCIPLE_PROP_POWER,    //弟子战力
		    DISCIPLE_PROP_WANDER_PACKAGE_LEVEL,    //背包等级
		    DISCIPLE_PROP_SCORE,    //弟子游历评分
		    DISCIPLE_PROP_WANDER_DIFFICULTY,    //游历难度
		    DISCIPLE_PROP_WANDER_PATH,    //游历路途id
		    DISCIPLE_PROP_SEX,    //性别
		    DISCIPLE_PROP_SKIN_UPPER,    //上身衣服
		    DISCIPLE_PROP_SKIN_LOWER,    //下身衣服
		    DISCIPLE_PROP_SKIN_OUTFIT,    //套装
		    DISCIPLE_PROP_SKIN_HAIR,    //头发
		    DISCIPLE_PROP_SKIN_EYE,    //眼睛
		    DISCIPLE_PROP_SKIN_WEAPON,    //武器
		    DISCIPLE_PROP_SKIN_BODY,    //身体
		    DISCIPLE_PROP_SKIN_MOUTH,    //嘴+鼻子
		    DISCIPLE_PROP_QUALITY,    //弟子品质
		    DISCIPLE_PROP_CULTIVATION_TECHNIQUE,    //弟子功法
		    DISCIPLE_PROP_CULTIVATION_TECHNIQUE_A,    //弟子辅功法A
		    DISCIPLE_PROP_CULTIVATION_TECHNIQUE_B,    //弟子辅功法B
		    DISCIPLE_PROP_ELEMENT,    //弟子属性
		    DISCIPLE_PROP_ELEMENT_A,    //弟子属性A
		    DISCIPLE_PROP_ELEMENT_B,    //弟子属性B
		    DISCIPLE_PROP_TUINING,    //是否选择过功法
		    DISCIPLE_PROP_CUR_HP,    //弟子当前血量
		    DISCIPLE_PROP_INDIVIDUAL_SUM,    //六维可分配总值
		    DISCIPLE_PROP_MAIN_INDIVIDUAL_BASE_MIN,    //分配一级属性最小
		    DISCIPLE_PROP_QUALIFICATION_INDIVIDUAL_BASE,    //资质分配
		    DISCIPLE_PROP_ROOT_BONE_INDIVIDUAL_BASE,    //根骨分配
		    DISCIPLE_PROP_INSIGHT_INDIVIDUAL_BASE,    //悟性分配
		    DISCIPLE_PROP_QI_SENSE_INDIVIDUAL_BASE,    //气感分配
		    DISCIPLE_PROP_POTENTIAL_INDIVIDUAL_BASE,    //潜力分配
		    DISCIPLE_PROP_OPPORTUNITY_INDIVIDUAL_BASE,    //机缘分配
		    DISCIPLE_PROP_MAIN_INDIVIDUAL_BASE_MAX,    //分配一级属性最最大
		    DISCIPLE_PROP_MAIN_INITIAL_BASE_MIN,    //初始一级属性最小
		    DISCIPLE_PROP_QUALIFICATION_INITIAL_BASE,    //资质
		    DISCIPLE_PROP_ROOT_BONE_INITIAL_BASE,    //根骨
		    DISCIPLE_PROP_INSIGHT_INITIAL_BASE,    //悟性
		    DISCIPLE_PROP_QI_SENSE_INITIAL_BASE,    //气感
		    DISCIPLE_PROP_POTENTIAL_INITIAL_BASE,    //潜力
		    DISCIPLE_PROP_OPPORTUNITY_INITIAL_BASE,    //机缘
		    DISCIPLE_PROP_MAIN_INITIAL_BASE_MAX,    //初始一级属性最大
		    DISCIPLE_PROP_BASE_MIN,    //最小值, 保留
		    DISCIPLE_PROP_MAIN_BASE_MIN,    //基础一级属性最小
		    DISCIPLE_PROP_QUALIFICATION_BASE,    //资质基础值
		    DISCIPLE_PROP_ROOT_BONE_BASE,    //根骨基础值
		    DISCIPLE_PROP_INSIGHT_BASE,    //悟性基础值
		    DISCIPLE_PROP_QI_SENSE_BASE,    //气感基础值
		    DISCIPLE_PROP_POTENTIAL_BASE,    //潜力基础值
		    DISCIPLE_PROP_OPPORTUNITY_BASE,    //机缘基础值
		    DISCIPLE_PROP_MAIN_BASE_MAX,    //基础一级属性最大
		    DISCIPLE_PROP_SUB_BASE_MIN,    //基础二级属性最小值
		    DISCIPLE_PROP_ATTACK_BASE,    //攻击力基础值
		    DISCIPLE_PROP_DEFENSE_BASE,    //防御基础值
		    DISCIPLE_PROP_HEALTH_BASE,    //生命值基础值
		    DISCIPLE_PROP_ATTACK_POWER_PERCENTAGE_BASE,    //攻击力百分比基础值
		    DISCIPLE_PROP_DEFENSE_PERCENTAGE_BASE,    //防御百分比基础值
		    DISCIPLE_PROP_HEALTH_PERCENTAGE_BASE,    //生命值百分比基础值
		    DISCIPLE_PROP_RAGE_LIMIT_BASE,    //怒气上限基础值
		    DISCIPLE_PROP_SPEED_BASE,    //速度基础值
		    DISCIPLE_PROP_CRITICAL_RATE_BASE,    //暴击率基础值
		    DISCIPLE_PROP_IGNORE_CRITICAL_RATE_BASE,    //忽视暴击率基础值
		    DISCIPLE_PROP_NORMAL_ATTACK_CRITICAL_RATE_BASE,    //普攻暴击率基础值
		    DISCIPLE_PROP_IGNORE_NORMAL_ATTACK_CRITICAL_RATE_BASE,    //忽视普攻暴击率基础值
		    DISCIPLE_PROP_SKILL_CRITICAL_RATE_BASE,    //技能暴击率基础值
		    DISCIPLE_PROP_IGNORE_SKILL_CRITICAL_RATE_BASE,    //忽视技能暴击率基础值
		    DISCIPLE_PROP_RAGE_SKILL_CRITICAL_RATE_BASE,    //怒气技暴击率基础值
		    DISCIPLE_PROP_IGNORE_RAGE_SKILL_CRITICAL_RATE_BASE,    //忽视怒气技暴击率基础值
		    DISCIPLE_PROP_DODGE_RATE_BASE,    //闪避率基础值
		    DISCIPLE_PROP_IGNORE_DODGE_RATE_BASE,    //忽视闪避率基础值
		    DISCIPLE_PROP_DIZZINESS_RATE_BASE,    //眩晕率基础值
		    DISCIPLE_PROP_IGNORE_DIZZINESS_RATE_BASE,    //忽视眩晕率基础值
		    DISCIPLE_PROP_COUNTER_RATE_BASE,    //反击率基础值
		    DISCIPLE_PROP_IGNORE_COUNTER_RATE_BASE,    //忽视反击率基础值
		    DISCIPLE_PROP_COMBO_RATE_BASE,    //连击率基础值
		    DISCIPLE_PROP_IGNORE_COMBO_RATE_BASE,    //忽视连击率基础值
		    DISCIPLE_PROP_INCREASE_DAMAGE_BASE,    //增伤基础值
		    DISCIPLE_PROP_DECREASE_DAMAGE_BASE,    //减伤基础值
		    DISCIPLE_PROP_CRITICAL_INCREASE_DAMAGE_BASE,    //暴击增伤基础值
		    DISCIPLE_PROP_CRITICAL_DECREASE_DAMAGE_BASE,    //暴击减伤基础值
		    DISCIPLE_PROP_COUNTER_INCREASE_DAMAGE_BASE,    //反击增伤基础值
		    DISCIPLE_PROP_COUNTER_DECREASE_DAMAGE_BASE,    //反击减伤基础值
		    DISCIPLE_PROP_COMBO_INCREASE_DAMAGE_BASE,    //连击增伤基础值
		    DISCIPLE_PROP_COMBO_DECREASE_DAMAGE_BASE,    //连击减伤基础值
		    DISCIPLE_PROP_DIZZINESS_INCREASE_DAMAGE_BASE,    //眩晕增伤基础值
		    DISCIPLE_PROP_DIZZINESS_DECREASE_DAMAGE_BASE,    //眩晕减伤基础值
		    DISCIPLE_PROP_NORMAL_ATTACK_INCREASE_DAMAGE_BASE,    //普攻增伤基础值
		    DISCIPLE_PROP_NORMAL_ATTACK_DECREASE_DAMAGE_BASE,    //普攻减伤基础值
		    DISCIPLE_PROP_SKILL_INCREASE_DAMAGE_BASE,    //技能增伤基础值
		    DISCIPLE_PROP_SKILL_DECREASE_DAMAGE_BASE,    //技能减伤基础值
		    DISCIPLE_PROP_RAGE_SKILL_INCREASE_DAMAGE_BASE,    //怒气技增伤基础值
		    DISCIPLE_PROP_RAGE_SKILL_DECREASE_DAMAGE_BASE,    //怒气技减伤基础值
		    DISCIPLE_PROP_MONSTER_INCREASE_DAMAGE_BASE,    //怪物增伤基础值
		    DISCIPLE_PROP_MONSTER_DECREASE_DAMAGE_BASE,    //怪物减伤基础值
		    DISCIPLE_PROP_PLAYER_INCREASE_DAMAGE_BASE,    //玩家增伤基础值
		    DISCIPLE_PROP_PLAYER_DECREASE_DAMAGE_BASE,    //玩家减伤基础值
		    DISCIPLE_PROP_HEAL_STRENGTHEN_BASE,    //强化治疗基础值
		    DISCIPLE_PROP_HEAL_WEAKEN_BASE,    //弱化治疗基础值
		    DISCIPLE_PROP_DRAIN_RATE_BASE,    //汲取率基础值
		    DISCIPLE_PROP_IGNORE_DRAIN_RATE_BASE,    //忽视汲取率基础值
		    DISCIPLE_PROP_STRENGTHEN_DRAIN_BASE,    //强化汲取基础值
		    DISCIPLE_PROP_WEAKEN_DRAIN_BASE,    //弱化汲取基础值
		    DISCIPLE_PROP_THUNDER_INCREASE_DAMAGE_BASE,    //雷系增伤
		    DISCIPLE_PROP_THUNDER_DECREASE_DAMAGE_BASE,    //雷系减伤
		    DISCIPLE_PROP_GOLD_INCREASE_DAMAGE_BASE,    //金系增伤
		    DISCIPLE_PROP_GOLD_DECREASE_DAMAGE_BASE,    //金系减伤
		    DISCIPLE_PROP_WOOD_INCREASE_DAMAGE_BASE,    //木系增伤
		    DISCIPLE_PROP_WOOD_DECREASE_DAMAGE_BASE,    //木系减伤
		    DISCIPLE_PROP_WATER_INCREASE_DAMAGE_BASE,    //水系增伤
		    DISCIPLE_PROP_WATER_DECREASE_DAMAGE_BASE,    //水系减伤
		    DISCIPLE_PROP_FIRE_INCREASE_DAMAGE_BASE,    //火系增伤
		    DISCIPLE_PROP_FIRE_DECREASE_DAMAGE_BASE,    //火系减伤
		    DISCIPLE_PROP_EARTH_INCREASE_DAMAGE_BASE,    //土系增伤
		    DISCIPLE_PROP_EARTH_DECREASE_DAMAGE_BASE,    //土系减伤
		    DISCIPLE_PROP_GLOBAL_ATTACK_POWER_PERCENTAGE_BASE,    //全局攻击力百分比基础值
		    DISCIPLE_PROP_GLOBAL_DEFENSE_PERCENTAGE_BASE,    //全局防御百分比基础值
		    DISCIPLE_PROP_GLOBAL_HEALTH_PERCENTAGE_BASE,    //全局生命值百分比基础值
		    DISCIPLE_PROP_GLOBAL_INCREASE_DAMAGE_BASE,    //全局增伤基础值
		    DISCIPLE_PROP_GLOBAL_DECREASE_DAMAGE_BASE,    //全局减伤基础值
		    DISCIPLE_PROP_TRANSFORM_SUCCESS_RATE_BASE,    //渡劫成功率基础值
		    DISCIPLE_PROP_SHIELD_INCREASE_BASE,    //护盾加成
		    DISCIPLE_PROP_SUB_BASE_MAX,    //基础二级属性最大值
		    DISCIPLE_PROP_BASE_MAX,    //最大值, 保留
		    DISCIPLE_PROP_CUSTOM_MAX,    //存盘分割符
		    DISCIPLE_PROP_EFF_MIN,    //最小值, 保留
		    DISCIPLE_PROP_MAIN_EFF_MIN,    //临时一级属性最小值
		    DISCIPLE_PROP_QUALIFICATION_EFF,    //资质临时值
		    DISCIPLE_PROP_ROOT_BONE_EFF,    //根骨临时值
		    DISCIPLE_PROP_INSIGHT_EFF,    //悟性临时值
		    DISCIPLE_PROP_QI_SENSE_EFF,    //气感临时值
		    DISCIPLE_PROP_POTENTIAL_EFF,    //潜力临时值
		    DISCIPLE_PROP_OPPORTUNITY_EFF,    //机缘临时值
		    DISCIPLE_PROP_MAIN_EFF_MAX,    //临时一级属性最大值
		    DISCIPLE_PROP_SUB_EFF_MIN,    //临时二级属性最小值
		    DISCIPLE_PROP_ATTACK_EFF,    //攻击力临时值
		    DISCIPLE_PROP_DEFENSE_EFF,    //防御临时值
		    DISCIPLE_PROP_HEALTH_EFF,    //生命值临时值
		    DISCIPLE_PROP_ATTACK_POWER_PERCENTAGE_EFF,    //攻击力百分比临时值
		    DISCIPLE_PROP_DEFENSE_PERCENTAGE_EFF,    //防御百分比临时值
		    DISCIPLE_PROP_HEALTH_PERCENTAGE_EFF,    //生命值百分比临时值
		    DISCIPLE_PROP_RAGE_LIMIT_EFF,    //怒气上限临时值
		    DISCIPLE_PROP_SPEED_EFF,    //速度临时值
		    DISCIPLE_PROP_CRITICAL_RATE_EFF,    //暴击率临时值
		    DISCIPLE_PROP_IGNORE_CRITICAL_RATE_EFF,    //忽视暴击率临时值
		    DISCIPLE_PROP_NORMAL_ATTACK_CRITICAL_RATE_EFF,    //普攻暴击率临时值
		    DISCIPLE_PROP_IGNORE_NORMAL_ATTACK_CRITICAL_RATE_EFF,    //忽视普攻暴击率临时值
		    DISCIPLE_PROP_SKILL_CRITICAL_RATE_EFF,    //技能暴击率临时值
		    DISCIPLE_PROP_IGNORE_SKILL_CRITICAL_RATE_EFF,    //忽视技能暴击率临时值
		    DISCIPLE_PROP_RAGE_SKILL_CRITICAL_RATE_EFF,    //怒气技暴击率临时值
		    DISCIPLE_PROP_IGNORE_RAGE_SKILL_CRITICAL_RATE_EFF,    //忽视怒气技暴击率临时值
		    DISCIPLE_PROP_DODGE_RATE_EFF,    //闪避率临时值
		    DISCIPLE_PROP_IGNORE_DODGE_RATE_EFF,    //忽视闪避率临时值
		    DISCIPLE_PROP_DIZZINESS_RATE_EFF,    //眩晕率临时值
		    DISCIPLE_PROP_IGNORE_DIZZINESS_RATE_EFF,    //忽视眩晕率临时值
		    DISCIPLE_PROP_COUNTER_RATE_EFF,    //反击率临时值
		    DISCIPLE_PROP_IGNORE_COUNTER_RATE_EFF,    //忽视反击率临时值
		    DISCIPLE_PROP_COMBO_RATE_EFF,    //连击率临时值
		    DISCIPLE_PROP_IGNORE_COMBO_RATE_EFF,    //忽视连击率临时值
		    DISCIPLE_PROP_INCREASE_DAMAGE_EFF,    //增伤临时值
		    DISCIPLE_PROP_DECREASE_DAMAGE_EFF,    //减伤临时值
		    DISCIPLE_PROP_CRITICAL_INCREASE_DAMAGE_EFF,    //暴击增伤临时值
		    DISCIPLE_PROP_CRITICAL_DECREASE_DAMAGE_EFF,    //暴击减伤临时值
		    DISCIPLE_PROP_COUNTER_INCREASE_DAMAGE_EFF,    //反击增伤临时值
		    DISCIPLE_PROP_COUNTER_DECREASE_DAMAGE_EFF,    //反击减伤临时值
		    DISCIPLE_PROP_COMBO_INCREASE_DAMAGE_EFF,    //连击增伤临时值
		    DISCIPLE_PROP_COMBO_DECREASE_DAMAGE_EFF,    //连击减伤临时值
		    DISCIPLE_PROP_DIZZINESS_INCREASE_DAMAGE_EFF,    //眩晕增伤临时值
		    DISCIPLE_PROP_DIZZINESS_DECREASE_DAMAGE_EFF,    //眩晕减伤临时值
		    DISCIPLE_PROP_NORMAL_ATTACK_INCREASE_DAMAGE_EFF,    //普攻增伤临时值
		    DISCIPLE_PROP_NORMAL_ATTACK_DECREASE_DAMAGE_EFF,    //普攻减伤临时值
		    DISCIPLE_PROP_SKILL_INCREASE_DAMAGE_EFF,    //技能增伤临时值
		    DISCIPLE_PROP_SKILL_DECREASE_DAMAGE_EFF,    //技能减伤临时值
		    DISCIPLE_PROP_RAGE_SKILL_INCREASE_DAMAGE_EFF,    //怒气技增伤临时值
		    DISCIPLE_PROP_RAGE_SKILL_DECREASE_DAMAGE_EFF,    //怒气技减伤临时值
		    DISCIPLE_PROP_MONSTER_INCREASE_DAMAGE_EFF,    //怪物增伤临时值
		    DISCIPLE_PROP_MONSTER_DECREASE_DAMAGE_EFF,    //怪物减伤临时值
		    DISCIPLE_PROP_PLAYER_INCREASE_DAMAGE_EFF,    //玩家增伤临时值
		    DISCIPLE_PROP_PLAYER_DECREASE_DAMAGE_EFF,    //玩家减伤临时值
		    DISCIPLE_PROP_HEAL_STRENGTHEN_EFF,    //强化治疗临时值
		    DISCIPLE_PROP_HEAL_WEAKEN_EFF,    //弱化治疗临时值
		    DISCIPLE_PROP_DRAIN_RATE_EFF,    //汲取率临时值
		    DISCIPLE_PROP_IGNORE_DRAIN_RATE_EFF,    //忽视汲取率临时值
		    DISCIPLE_PROP_STRENGTHEN_DRAIN_EFF,    //强化汲取临时值
		    DISCIPLE_PROP_WEAKEN_DRAIN_EFF,    //弱化汲取临时值
		    DISCIPLE_PROP_THUNDER_INCREASE_DAMAGE_EFF,    //雷系增伤
		    DISCIPLE_PROP_THUNDER_DECREASE_DAMAGE_EFF,    //雷系减伤
		    DISCIPLE_PROP_GOLD_INCREASE_DAMAGE_EFF,    //金系增伤
		    DISCIPLE_PROP_GOLD_DECREASE_DAMAGE_EFF,    //金系减伤
		    DISCIPLE_PROP_WOOD_INCREASE_DAMAGE_EFF,    //木系增伤
		    DISCIPLE_PROP_WOOD_DECREASE_DAMAGE_EFF,    //木系减伤
		    DISCIPLE_PROP_WATER_INCREASE_DAMAGE_EFF,    //水系增伤
		    DISCIPLE_PROP_WATER_DECREASE_DAMAGE_EFF,    //水系减伤
		    DISCIPLE_PROP_FIRE_INCREASE_DAMAGE_EFF,    //火系增伤
		    DISCIPLE_PROP_FIRE_DECREASE_DAMAGE_EFF,    //火系减伤
		    DISCIPLE_PROP_EARTH_INCREASE_DAMAGE_EFF,    //土系增伤
		    DISCIPLE_PROP_EARTH_DECREASE_DAMAGE_EFF,    //土系减伤
		    DISCIPLE_PROP_GLOBAL_ATTACK_POWER_PERCENTAGE_EFF,    //全局攻击力百分比临时值
		    DISCIPLE_PROP_GLOBAL_DEFENSE_PERCENTAGE_EFF,    //全局防御百分比临时值
		    DISCIPLE_PROP_GLOBAL_HEALTH_PERCENTAGE_EFF,    //全局生命值百分比临时值
		    DISCIPLE_PROP_GLOBAL_INCREASE_DAMAGE_EFF,    //全局增伤临时值
		    DISCIPLE_PROP_GLOBAL_DECREASE_DAMAGE_EFF,    //全局减伤临时值
		    DISCIPLE_PROP_TRANSFORM_SUCCESS_RATE_EFF,    //渡劫成功率临时值
		    DISCIPLE_PROP_SHIELD_INCREASE_EFF,    //护盾加成
		    DISCIPLE_PROP_SUB_EFF_MAX,    //临时二级属性最小值
		    DISCIPLE_PROP_EFF_MAX,    //最大值, 保留
		    DISCIPLE_PROP_FINAL_MIN,    //最小值, 保留
		    DISCIPLE_PROP_MAIN_FINAL_MIN,    //最终一级属性最小值
		    DISCIPLE_PROP_QUALIFICATION_FINAL,    //资质最终值
		    DISCIPLE_PROP_ROOT_BONE_FINAL,    //根骨最终值
		    DISCIPLE_PROP_INSIGHT_FINAL,    //悟性最终值
		    DISCIPLE_PROP_QI_SENSE_FINAL,    //气感最终值
		    DISCIPLE_PROP_POTENTIAL_FINAL,    //潜力最终值
		    DISCIPLE_PROP_OPPORTUNITY_FINAL,    //机缘最终值
		    DISCIPLE_PROP_MAIN_FINAL_MAX,    //最终一级属性最大值
		    DISCIPLE_PROP_SUB_FINAL_MIN,    //最终二级属性最小值
		    DISCIPLE_PROP_ATTACK_FINAL,    //攻击力最终值
		    DISCIPLE_PROP_DEFENSE_FINAL,    //防御最终值
		    DISCIPLE_PROP_HEALTH_FINAL,    //生命值最终值
		    DISCIPLE_PROP_ATTACK_POWER_PERCENTAGE_FINAL,    //攻击力百分比最终值
		    DISCIPLE_PROP_DEFENSE_PERCENTAGE_FINAL,    //防御百分比最终值
		    DISCIPLE_PROP_HEALTH_PERCENTAGE_FINAL,    //生命值百分比最终值
		    DISCIPLE_PROP_RAGE_LIMIT_FINAL,    //怒气上限最终值
		    DISCIPLE_PROP_SPEED_FINAL,    //速度最终值
		    DISCIPLE_PROP_CRITICAL_RATE_FINAL,    //暴击率最终值
		    DISCIPLE_PROP_IGNORE_CRITICAL_RATE_FINAL,    //忽视暴击率最终值
		    DISCIPLE_PROP_NORMAL_ATTACK_CRITICAL_RATE_FINAL,    //普攻暴击率最终值
		    DISCIPLE_PROP_IGNORE_NORMAL_ATTACK_CRITICAL_RATE_FINAL,    //忽视普攻暴击率最终值
		    DISCIPLE_PROP_SKILL_CRITICAL_RATE_FINAL,    //技能暴击率最终值
		    DISCIPLE_PROP_IGNORE_SKILL_CRITICAL_RATE_FINAL,    //忽视技能暴击率最终值
		    DISCIPLE_PROP_RAGE_SKILL_CRITICAL_RATE_FINAL,    //怒气技暴击率最终值
		    DISCIPLE_PROP_IGNORE_RAGE_SKILL_CRITICAL_RATE_FINAL,    //忽视怒气技暴击率最终值
		    DISCIPLE_PROP_DODGE_RATE_FINAL,    //闪避率最终值
		    DISCIPLE_PROP_IGNORE_DODGE_RATE_FINAL,    //忽视闪避率最终值
		    DISCIPLE_PROP_DIZZINESS_RATE_FINAL,    //眩晕率最终值
		    DISCIPLE_PROP_IGNORE_DIZZINESS_RATE_FINAL,    //忽视眩晕率最终值
		    DISCIPLE_PROP_COUNTER_RATE_FINAL,    //反击率最终值
		    DISCIPLE_PROP_IGNORE_COUNTER_RATE_FINAL,    //忽视反击率最终值
		    DISCIPLE_PROP_COMBO_RATE_FINAL,    //连击率最终值
		    DISCIPLE_PROP_IGNORE_COMBO_RATE_FINAL,    //忽视连击率最终值
		    DISCIPLE_PROP_INCREASE_DAMAGE_FINAL,    //增伤最终值
		    DISCIPLE_PROP_DECREASE_DAMAGE_FINAL,    //减伤最终值
		    DISCIPLE_PROP_CRITICAL_INCREASE_DAMAGE_FINAL,    //暴击增伤最终值
		    DISCIPLE_PROP_CRITICAL_DECREASE_DAMAGE_FINAL,    //暴击减伤最终值
		    DISCIPLE_PROP_COUNTER_INCREASE_DAMAGE_FINAL,    //反击增伤最终值
		    DISCIPLE_PROP_COUNTER_DECREASE_DAMAGE_FINAL,    //反击减伤最终值
		    DISCIPLE_PROP_COMBO_INCREASE_DAMAGE_FINAL,    //连击增伤最终值
		    DISCIPLE_PROP_COMBO_DECREASE_DAMAGE_FINAL,    //连击减伤最终值
		    DISCIPLE_PROP_DIZZINESS_INCREASE_DAMAGE_FINAL,    //眩晕增伤最终值
		    DISCIPLE_PROP_DIZZINESS_DECREASE_DAMAGE_FINAL,    //眩晕减伤最终值
		    DISCIPLE_PROP_NORMAL_ATTACK_INCREASE_DAMAGE_FINAL,    //普攻增伤最终值
		    DISCIPLE_PROP_NORMAL_ATTACK_DECREASE_DAMAGE_FINAL,    //普攻减伤最终值
		    DISCIPLE_PROP_SKILL_INCREASE_DAMAGE_FINAL,    //技能增伤最终值
		    DISCIPLE_PROP_SKILL_DECREASE_DAMAGE_FINAL,    //技能减伤最终值
		    DISCIPLE_PROP_RAGE_SKILL_INCREASE_DAMAGE_FINAL,    //怒气技增伤最终值
		    DISCIPLE_PROP_RAGE_SKILL_DECREASE_DAMAGE_FINAL,    //怒气技减伤最终值
		    DISCIPLE_PROP_MONSTER_INCREASE_DAMAGE_FINAL,    //怪物增伤最终值
		    DISCIPLE_PROP_MONSTER_DECREASE_DAMAGE_FINAL,    //怪物减伤最终值
		    DISCIPLE_PROP_PLAYER_INCREASE_DAMAGE_FINAL,    //玩家增伤最终值
		    DISCIPLE_PROP_PLAYER_DECREASE_DAMAGE_FINAL,    //玩家减伤最终值
		    DISCIPLE_PROP_HEAL_STRENGTHEN_FINAL,    //强化治疗最终值
		    DISCIPLE_PROP_HEAL_WEAKEN_FINAL,    //弱化治疗最终值
		    DISCIPLE_PROP_DRAIN_RATE_FINAL,    //汲取率最终值
		    DISCIPLE_PROP_IGNORE_DRAIN_RATE_FINAL,    //忽视汲取率最终值
		    DISCIPLE_PROP_STRENGTHEN_DRAIN_FINAL,    //强化汲取最终值
		    DISCIPLE_PROP_WEAKEN_DRAIN_FINAL,    //弱化汲取最终值
		    DISCIPLE_PROP_THUNDER_INCREASE_DAMAGE_FINAL,    //雷系增伤
		    DISCIPLE_PROP_THUNDER_DECREASE_DAMAGE_FINAL,    //雷系减伤
		    DISCIPLE_PROP_GOLD_INCREASE_DAMAGE_FINAL,    //金系增伤
		    DISCIPLE_PROP_GOLD_DECREASE_DAMAGE_FINAL,    //金系减伤
		    DISCIPLE_PROP_WOOD_INCREASE_DAMAGE_FINAL,    //木系增伤
		    DISCIPLE_PROP_WOOD_DECREASE_DAMAGE_FINAL,    //木系减伤
		    DISCIPLE_PROP_WATER_INCREASE_DAMAGE_FINAL,    //水系增伤
		    DISCIPLE_PROP_WATER_DECREASE_DAMAGE_FINAL,    //水系减伤
		    DISCIPLE_PROP_FIRE_INCREASE_DAMAGE_FINAL,    //火系增伤
		    DISCIPLE_PROP_FIRE_DECREASE_DAMAGE_FINAL,    //火系减伤
		    DISCIPLE_PROP_EARTH_INCREASE_DAMAGE_FINAL,    //土系增伤
		    DISCIPLE_PROP_EARTH_DECREASE_DAMAGE_FINAL,    //土系减伤
		    DISCIPLE_PROP_GLOBAL_ATTACK_POWER_PERCENTAGE_FINAL,    //全局攻击力百分比最终值
		    DISCIPLE_PROP_GLOBAL_DEFENSE_PERCENTAGE_FINAL,    //全局防御百分比最终值
		    DISCIPLE_PROP_GLOBAL_HEALTH_PERCENTAGE_FINAL,    //全局生命值百分比最终值
		    DISCIPLE_PROP_GLOBAL_INCREASE_DAMAGE_FINAL,    //全局增伤最终值
		    DISCIPLE_PROP_GLOBAL_DECREASE_DAMAGE_FINAL,    //全局减伤最终值
		    DISCIPLE_PROP_TRANSFORM_SUCCESS_RATE_FINAL,    //渡劫成功率最终值
		    DISCIPLE_PROP_SHIELD_INCREASE_FINAL,    //护盾加成
		    DISCIPLE_PROP_SUB_FINAL_MAX,    //最终二级属性最大值
		    DISCIPLE_PROP_FINAL_MAX,    //最大值, 保留
		    DISCIPLE_PROP_MAXID,    //最大值, 保留
	}; 

	//  战斗单元状态
	public enum EnEntityState{
		    enEntSTATE_Dead,    //死亡
		    enEntSTATE_Normal,    //正常 (存活)
		    enEntSTATE_Max,    //
	}; 

	//  穿装备的来源/原因
	public enum EnEquipReason{
		    EQUIP_REASON_NONE=0,    //默认，不处理
		    EQUIP_REASON_TUINING=1,    //选择功法时随机的
	}; 

	//  阵法类型
	public enum EnFormationType{
		    enFORMTYPE_NORMAL=0,    //普通(通用)阵法
		    enFORMTYPE_TOWER,    //爬塔阵法
	}; 

	//  通用阵法子ID,  归属于enFORMTYPE_NORMAL/enFORMTYPE_SERVER_Inner大类
	public enum EnGeneralFormSecID{
		    enGFSID_ATT=0,    //单人进攻
		    enGFSID_DEF,    //单人防守
	}; 

	//  物品(装备)属性
	public enum EnGoodsProp{
		    GOODS_PROP_GOODSID=0,    //物品ID
		    GOODS_PROP_QTY,    //物品数量
		    GOODS_PROP_BIND,    //绑定标志
		    GOODS_PROP_LOCK,    //锁定标志标志
		    EQUIP_PROP_ENHANCE,    //装备强化值
		    EQUIP_PROP_ENHANCELEVEL,    //装备强化等级,通过强化值换算
		    EQUIP_PROP_POWER,    //装备战斗力
		    EQUIP_PROP_ENHANCE_STARlV,    //装备星级
		    GOODS_PROP_BROADCAST,    //以上为广播属性
		    GOODS_PROP_MAXID,    //最大属性ID
	}; 

	//  手牌区装备类型
	public enum EnHandEquipType{
		    HandEquipType_None=0,    //默认，玩家自己的装备
		    HandEquipType_Shop=1,    //装备商店
	}; 

	//  技能命中类型
	public enum EnHitType{
		    enHT_NormalHit,    //普通命中
		    enHT_Dodge,    //躲闪
		    enHT_Critical,    //
		    enHT_AbsorbHp,    //吸血
	}; 

	//  数值类型 (作为虚拟物品ID)
	public enum EnInherentThingType{
		    InherentThingType_MIN=0,    //无效值
		    InherentThingType_Money=1,    //灵石
		    InherentThingType_BindMoney,    //仙玉
		    InherentThingType_Stamina=3,    //体力
		    InherentThingType_Gold,    //元宝(暂时没用)
		    InherentThingType_BindGold,    //绑定元宝(暂时没用)
		    InherentThingType_MAX,    //最大ID
	}; 

	//  受伤原因类型
	public enum EnInjuredReasonType{
		    enInjuredReasonType_Min=0,    //
		    enInjuredReasonType_BeAttack=0,    //被攻击
		    enInjuredReasonType_BeAttack_Normal,    //普通攻击
		    enInjuredReasonType_BeAttack_Miss,    //失误
		    enInjuredReasonType_BeAttack_Crit,    //暴击
		    enInjuredReasonType_Max,    //
	}; 

	//  被踢原因
	public enum EnKickReason{
		    enKickReason_Normally,    //业务层正常断开.  具体原因查看业务RSP
		    enKickReason_RepeatLogin,    //重复登录踢人
		    enKickReason_GMKick,    //GM踢人
		    enKickReason_DataInvalid,    //数据非法
		    enKickReason_ShootLobbyFailed,    //切换大厅服失败
		    enKickReason_StopServer,    //服务器停机
		    enKickReason_ReleaseZone,    //战场已关闭
		    enKickReason_ClientArriveError,    //进入战场出错
		    enKickReason_PersonDie,    //角色已死亡
		    enKickReason_AllTeammateDie,    //所有队员已死亡
		    enKickReason_CantFindZone,    //找不到战场
		    enKickReason_AbnormalError,    //异常错误
		    enKickReason_RobotExit,    //机器人退出
		    enKickReason_LoginError,    //登录出错
		    enKickReason_VersionDismatch,    //版本号不匹配
	}; 

	//  战斗日志等级
	public enum EnLogLv{
		    enLogLV_Trace,    //
		    enLogLV_Warning,    //
		    enLogLV_Error,    //
	}; 

	//   合作伙伴ID枚举
	public enum EnLoginPartnerID{
		    enLoginPartnerID_Invalid=0,    //无效ID, 无法登陆
		    enLoginPartnerID_Visitor=1,    //游客登录
		    enLoginPartnerID_Test=2,    //测试验证,必定成功
		    enLoginPartnerID_Google=3,    //Google
		    enLoginPartnerID_Facebook=4,    //Facebook
		    enLoginPartnerID_WeChat=5,    //微信
		    enLoginPartnerID_Weibo=6,    //微博
		    enLoginPartnerID_CliHardware=7,    //客户端硬件标识
		    enLoginPartnerID_Appel=8,    //appel
		    enLoginPartnerID_Glacier=9,    //冰川
	}; 

	//  登录类型
	public enum EnLoginType{
		    enLoginType_Normal=0,    //普通登录
		    enLoginType_Auto=1,    //自动登录
	}; 

	//  人物的数组属性定义
	public enum EnLootboxSpendType{
		    EnLBSpend_Free=0,    //免费
		    EnLBSpend_Key,    //钥匙
		    EnLBSpend_Gold,    //仙玉
	}; 

	//  信件来源
	public enum EnPlayerType{
		    enPT_System=0,    //系统
		    enPT_Player,    //玩家
		    enPT_OSS,    //运营系统
	}; 

	//  属性变化原因
	public enum EnPropChangeReason{
		    enPCR_Unknown=0,    //未知
		    enPCR_Buffer=0,    //buffer导致
	}; 

	//  属性类型
	public enum EnPropType{
		    enPT_Role=0,    //角色属性
		    enPT_Room,    //房间属性
	}; 

	//  人物的数组属性定义
	public enum EnRoleProp{
		    ROLE_PROP_MIN=0,    //最小值, 保留
		    ROLE_PROP_SEX,    //性别
		    ROLE_PROP_FACEID,    //头像ID
		    ROLE_PROP_LEVEL,    //等级
		    ROLE_PROP_EXP,    //经验
		    ROLE_PROP_PUBLIC,    //人物公有(广播)属性分隔线
		    ROLE_PROP_GOLD,    //金币,与充值对接
		    ROLE_PROP_BIND_GOLD,    //绑定金币, 与充值对接
		    ROLE_PROP_STAMINA,    //体力
		    ROLE_PROP_PRIVATE,    //人物私有属性结束线, 下面定义的属性, 都不会发送到客户端
		    ROLE_PROP_MAXID,    //最大属性ID
	}; 

	//  人物的数组属性定义
	public enum EnRoleProp64{
		    ROLE_PROP64_MIN=0,    //最小值, 保留
		    ROLE_PROP64_PDBID,    //角色数据库ID
		    ROLE_PROP64_GUILDID,    //帮派ID
		    ROLE_PROP64_WORLDID,    //world id
		    ROLE_PROP64_PUBLIC,    //人物公有属性分隔线
		    ROLE_PROP64_UDBID,    //帐号数据库ID
		    ROLE_PROP64_MONEY,    //金钱（灵石）
		    ROLE_PROP64_BIND_MONEY,    //绑定金钱（仙玉）
		    ROLE_PROP64_EXPPOOL,    //经验池
		    ROLE_PROP64_CREATETIME,    //角色创建时间戳
		    ROLE_PROP64_LOADTIME,    //角色加载 (服务器内New) 时间戳 
		    ROLE_PROP64_EXPECTDELACCOUNT_TIME,    //预计账号删除时间戳，0：无删号请求 
		    ROLE_PROP64_POWER,    //战斗力（当前）
		    ROLE_PROP64_HISTORY_MAX_POWER,    //历史最高战斗力
		    ROLE_PROP64_PRIVATE,    //人物公有属性分隔线
		    ROLE_PROP64_MAXID,    //最大属性64 ID
	}; 

	//  商店条件类型
	public enum EnShopConditionType{
		    EnShopConditionType_None=0,    //默认，不处理
		    EnShopConditionType_SectLevel=1,    //宗门等级
		    EnShopConditionType_MAX,    //最大值
	}; 

	//  篮子类型
	public enum EnSkepType{
		    enSkepType_Min=0,    //
		    enSkepType_Packet=0,    //角色背包
		    enSkepType_Max,    //
	}; 

	//  属性
	public enum EnTechniqueElement{
		    TechniqueElement_None=0,    //默认，不处理
		    TechniqueElement_Glod=1,    //金属性
		    TechniqueElement_Wood=2,    //木属性
		    TechniqueElement_Water=3,    //水属性
		    TechniqueElement_Fire=4,    //火属性
		    TechniqueElement_Earth=5,    //土属性
		    TechniqueElement_Thunder=6,    //雷属性
		    TechniqueElement_MAX,    //最大值
	}; 

	//  穿装备的来源/原因
	public enum EnWEquipUpdateScenario{
		    WEQUIP_UPDATE_SCENARIO_NONE=0,    //默认，不处理
		    WEQUIP_UPDATE_SCENARIO_REPLACE,    //摆放装备时替换
		    WEQUIP_UPDATE_SCENARIO_SHOP,    //商店
	}; 

	//  游历事件类型
	public enum EnWanderingEvent{
		    enWanderingEvent_None=0,    //
		    enWanderingEvent_RoundOver=1,    //回合结束事件
		    enWanderingEvent_Order=2,    //顺序事件
		    enWanderingEvent_Random=3,    //随机事件
		    enWanderingEvent_Choose=4,    //选择事件
		    enWanderingEvent_Battle=5,    //战斗事件
		    enWanderingEvent_Level=6,    //阶段事件
		    enWanderingEvent_FortuneWheel=7,    //转盘事件
		    enWanderingEvent_AbilityChoose=8,    //词条选择事件
		    enWanderingEvent_EquipChoose=9,    //装备选择事件
		    enWanderingEvent_AttributeJudge=10,    //属性判断事件
		    enWanderingEvent_EquipShop=11,    //装备商店事件
		    enWanderingEvent_Max,    //
	}; 

	//  游历事件类型动作类型
	public enum EnWanderingEventActionType{
		    enWanderingEventActionType_None=0,    //
		    enWanderingEventActionType_AddEvent=1,    //添加事件
		    enWanderingEventActionType_RoleReward=2,    //局外奖励
		    enWanderingEventActionType_DiscipleReward=3,    //局内奖励
		    enWanderingEventActionType_Death=4,    //弟子死亡
		    enWanderingEventActionType_BattleDrop=5,    //战斗掉落
		    enWanderingEventActionType_BagExpansion=6,    //背包扩容
		    enWanderingEventActionType_OpenEquipBag=7,    //打开装备背包
		    enWanderingEventActionType_RestoreHealth=8,    //恢复血量
		    enWanderingEventActionType_Max,    //
	}; 

	//  形态
	public enum EnWeaponForm{
		    WeaponForm_None=0,    //默认，不处理
		    WeaponForm_Soldier=1,    //兵
		    WeaponForm_Sword=2,    //剑
		    WeaponForm_Melody=3,    //乐
		    WeaponForm_Anomaly=4,    //异
		    WeaponForm_Command=5,    //御
		    WeaponForm_MAX,    //最大值
	}; 

	public class EnumPrint {
	static public string EnumPrint_EN_ATTACHMENT_TYPE(EN_ATTACHMENT_TYPE enType){
		        if (enType == EN_ATTACHMENT_TYPE.enMailAT_SimpleGoods) return "按id给出的简单物品  ID#val#ID#val....";
		        if (enType == EN_ATTACHMENT_TYPE.enMailAT_LuaFunc) return "执行一个lua函数";
		        if (enType == EN_ATTACHMENT_TYPE.enMailAT_AdvEquip) return "高级装备";
		        if (enType == EN_ATTACHMENT_TYPE.enMailAT_PrizeID) return "奖励ID  PrizeID#Num#PrizeID#Num....";
		        if (enType == EN_ATTACHMENT_TYPE.enMailAT_Max) return "";
				return "";
	} 

	static public string EnumPrint_EN_CLIENT_OP_ERROR_CODE(EN_CLIENT_OP_ERROR_CODE enType){
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_NO_ERROR) return "操作成功, 没发生错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_ABNORMAL_ERROR) return "服务器异常";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LoginSvr_Maintaining) return "服务器维护中";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LoginSvr_Busy) return "服务器繁忙";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LoginSvr_ClientVerTooLow) return "客户端版本过低";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LoginSvr_UnknownPartner) return "未知的partner";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LoginSvr_PlatConnError) return "平台服连接错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LoginSvr_VerifyProcessing) return "校验正在处理";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LoginSvr_TestAccountNotAllow) return "不允许使用测试号";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LoginSvr_AccountIsEmpty) return "帐号为空串";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LoginSvr_InvalidAccount) return "帐号无效";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LoginSvr_InvalidPartnerToken) return "无效的token(平台验证返回失败)";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LoginSvr_VerifyTimeout) return "校验超时";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LoginSvr_InvalidWorldID) return "world id 无效(或未开机)";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LoginSvr_LobbyConnError) return "lobby server 连接错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_InvalidAutoLoginSess) return "als 失效,需要进行正常登陆. ";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LOBBY_REPEAT_NAME) return "角色名已存在";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LobbySvr_BuildInfo) return "登陆失败，无法创建用户信息";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LobbySvr_Login) return "在大厅服登陆失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LobbySvr_Create) return "登陆失败，请求创建角色失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LobbySvr_RoleList) return "登陆失败，角色列表加载出错";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LobbySvr_Select) return "";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LobbySvr_InvalidAccount) return "帐号无效";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LobbySvr_BanRole) return "被封账号";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LobbySvr_DelAccount) return "账号注销中";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_QueryRole_SystemBusy) return "系统忙, 稍后再试";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_QueryRole_Querying) return "本人正在查询, 稍后再试";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_QueryRole_VisitorNotPermit) return "游客帐号不允许查询,需要先绑定帐号";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_QueryRole_WorldidNotFound) return "worldid 在列表中找不到";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_QueryRole_GenerateAlsError) return "生成als失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LUA_REQ_NOT_ALLOW) return "lua请求的函数无效";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LeechdomUse_Lee_Not_Found) return "物品找不到";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LeechdomUse_NoRule) return "没有使用规则";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LeechdomUse_ConfigError) return "配置错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LeechdomUse_ScriptFuncError) return "脚本执行错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LeechdomUse_MaterialNotEnough) return "材料不足";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LeechdomUse_AwardError) return "奖励发放失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LeechdomUse_UseCountTooMax) return "物品使用次数太多";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LeechdomUse_BackpackIsFull) return "奖励的东西太多，背包装不下了";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_LeechdomUse_AddReStoneToPriList) return "将返回的强化石材料添加的奖励列表时出错";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_MiniGame_AlreadyInRoom) return "已经在房间中";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_MiniGame_TooManyPlayer) return "房间的player过多";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_MiniGame_InvalidRoomID) return "房间id无效";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_MiniGame_RoomNotFound) return "找不到合适的房间";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_MiniGame_SetPropFail) return "设置属性失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_MiniGame_SetProp_InvalidRoleID) return "role id无效";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_MiniGame_SetProp_VerNotMatch) return "";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Err) return "游历未知错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Seed_Not_Owned) return "胚子未拥有";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Seed_ID_Repeate) return "胚子id重复";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Creat_DIscilpe_Err) return "创建弟子失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Tuining_Repeate) return "加点操作重复";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Individual_Sum_Err) return "个体值总数错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Individual_Limit_MAX) return "个体值超过最大值";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Individual_Limit_Range) return "个体值超过范围";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Stage_Event_Not_Over) return "当前关卡事件未结束";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Stage_Next_Err) return "进入下一关失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_State_Over) return "游历已经结束";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_State_Death) return "游历弟子已死亡（结算界面）";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Satge_Event_None) return "关卡事件未找到";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Choose_Repeate) return "选择重复";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Count_Limint_MAX) return "同时游历数量超过上限";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_EventContext_Err) return "游历事件数据错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Free_Not_Enough) return "游历抽奖次数不足";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Ability_Max) return "词条达上限";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_FortureWheel_Complate) return "完成抽奖(没有抽奖次数了)";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Select_Num_Err) return "选择数量错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Equip_Buy_Repeate) return "装备购买重复";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Equip_Not_Exist) return "装备不存在";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Refresh_Not_Enough) return "刷新次数不足";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Wander_Discilpe_Count_Limit) return "当前弟子已达上限，请驱逐";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_WEquip_Err) return "游历装备未知错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_WEquip_Cannot_Equip_Err) return "装备不可放置错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_WEquip_Cannot_UnEquip_Err) return "装备不可卸下错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_WEquip_Cannot_Delete_Err) return "装备不可删除错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_WEquip_Pack_Is_Full) return "装备区已满";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_WEquip_InValid_Compose_Req) return "装备合成非法输入";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_WEquip_Compose_NotFound) return "装备合成公式未找到";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_WEquip_Roll_Compose_Failed) return "装备合成选择失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_WEquip_Compose_Failed) return "装备合成失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_WEquip_Reforge_Not_Enough) return "重铸进度不足";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_WEquip_UnlockGrid_Reach_Limit) return "开格次数达上限";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_WEquip_Grid_AlreadyUnlocked) return "格子已经解锁";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_PrizeSys_Err) return "奖励系统未知错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_PrizeSys_BackpackIsFull_Goods) return "奖励系统背包已满错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Battle_Err) return "战斗系统未知错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Battle_Not_Find) return "战斗未找到";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Battle_Ended) return "战斗已经结束";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Battle_Fight_Param_Count_Err) return "战斗参数数量错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Battle_Skill_Usage_Count_Not_Enough) return "技能使用次数不足";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Battle_Skill_Not_Used_Self) return "技能无法对自己使用";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Battle_Cant_Select_Target) return "目标无法选择";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_ClimbTower_Err) return "爬塔系统未知错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_ClimbTower_LevelIsMax) return "爬塔到达最大层";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_ClimbTower_StartBattleFailed) return "爬塔开始战斗失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_ClimbTower_NotEnoughCoupon) return "爬塔挑战券不足";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Stamina_Err) return "体力系统未知错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Stamina_Not_Enough) return "体力不足";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Sect_Err) return "宗门系统未知错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Sect_LastLevel) return "宗门到达最大层";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_SectForm_FormLocked) return "阵法锁定";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_SectForm_PosLocked) return "阵法位置锁定";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_SectForm_PosOccupied) return "阵法位置已占用";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_SectForm_DiscipleIsOn) return "弟子已经上阵（并且在别的位置）";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_SectForm_PosAttriMismatch) return "阵法位置属性不合要求";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Antique_Err) return "古宝系统未知错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Antique_MaxLevel) return "古宝到达最大星级";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Seeding_Err) return "功法系统未知错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Seeding_MaxLevel) return "功法到达最大星级";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Task_Err) return "任务系统未知错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Task_ID_Not_Find) return "任务id未找到";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Task_Condition_Not_Enough) return "条件未满足";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Task_Reward_Err) return "任务奖励发放失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Person_Not_Found) return "用户未找到";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Seed_Not_Found) return "胚子未找到";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Disciple_Not_Found) return "弟子未找到";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Param_Err) return "参数错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Person_Part_Not_Found) return "部件未找到";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_ConfigNot_Found) return "配置未找到";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_RoundTable_Found) return "圆桌随机错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Item_Not_Enough) return "道具数量不足";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Power_Not_Enough) return "战力不足";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Undefined_Type) return "类型未定义";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Config_Data_Err) return "配置数据错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Money_Not_Enough) return "金钱不足";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Buy_Times_Not_Enough) return "购买次数不足";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Add_Goods_Err) return "添加道具失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Rename_Err) return "角色名非法";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Common_Rename_NotNUll) return "角色名不能为空";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Guide_Err) return "引导系统未知错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Guide_SetGuideFinishErr) return "设置引导错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Guide_FreeBuff_Len_Err) return "自由数据长度";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Arena_Err) return "竞技场未知错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Arena_NotReady) return "竞技场未装备好";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Arena_PersonNotExist) return "玩家不存在";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Arena_InvalidType) return "竞技场类型不存在";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Arena_RefreshOppTooFast) return "获取敌人过频";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Arena_NoChallengePermit) return "不许挑战（次数耗光";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Arena_InvalidOpponent) return "对手非法";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Arena_AlreadyInBattle) return "正在战斗";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Arena_InSettlePeriod) return "正在结算期";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Arena_RandomOpponentFail) return "随机对手失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Arena_InvalidAttForm) return "非法进攻阵容";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Arena_InvalidDefForm) return "非法防守阵容";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_Arena_RevengeOffBoard) return "复仇对象已下榜";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_PeriodPrize_CfgNotFound) return "未找到配置";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_PeriodPrize_PurchaseCountReachLimit) return "达到购买上限";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_PeriodPrize_NotEnoughMoney) return "钱不足";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_CommonShop_Err) return "通用商店系统未知错误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_CommonShop_Need_Refresh) return "商店需要先刷新";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_CommonShop_Rack_Content_Not_Found) return "商店格子数据未找到";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_MailSys_ErrorRid) return "邮件Rid有误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_MailSys_SetMailFlagFailed) return "设置邮件标志失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_MailSys_PayGoodsFailed) return "添加邮件附件物品失败";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_MailSys_Expired) return "邮件已过期";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_SevenDay_SignIn_ActID_Error) return "活动id有误";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_SevenDay_SignIn_Reward_Repeat) return "今日奖励已领取";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_SevenDay_SignIn_Need_Pay) return "今日奖励已领取";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_CDKEY_Request_Too_Quick) return "兑换码请求过频";
		        if (enType == EN_CLIENT_OP_ERROR_CODE.enOP_CDKEY_Http_Fail) return "兑换码http错误";
				return "";
	} 

	static public string EnumPrint_EN_MAIL_FLAG(EN_MAIL_FLAG enType){
		        if (enType == EN_MAIL_FLAG.enMailFlag_Read) return "1 已读  ; 0未读";
		        if (enType == EN_MAIL_FLAG.enMailFlag_FetchAttachment) return "附件标记,  1  已领,  0未领";
		        if (enType == EN_MAIL_FLAG.enMailFlag_Important) return "重要邮件:   不可一键读取领取";
		        if (enType == EN_MAIL_FLAG.enMailFlag_Max) return "";
				return "";
	} 

	static public string EnumPrint_EN_MAIL_LANGID(EN_MAIL_LANGID enType){
		        if (enType == EN_MAIL_LANGID.enMailLang_min) return "min";
		        if (enType == EN_MAIL_LANGID.enMailLang_en) return "英文";
		        if (enType == EN_MAIL_LANGID.enMailLang_zhcn) return "简体中文";
		        if (enType == EN_MAIL_LANGID.enMailLang_max) return "max";
				return "";
	} 

	static public string EnumPrint_EN_SERVER_OP_ERROR_CODE(EN_SERVER_OP_ERROR_CODE enType){
		        if (enType == EN_SERVER_OP_ERROR_CODE.enSS_NO_ERROR) return "操作成功, 没发生错误";
		        if (enType == EN_SERVER_OP_ERROR_CODE.enSS_ABNORMAL_ERROR) return "异常错误";
		        if (enType == EN_SERVER_OP_ERROR_CODE.enSS_NETWORK_ERROR) return "网络错误";
				return "";
	} 

	static public string EnumPrint_EnAccountBanType(EnAccountBanType enType){
		        if (enType == EnAccountBanType.enBanType_GM) return "GM封号";
				return "";
	} 

	static public string EnumPrint_EnArenaType(EnArenaType enType){
		        if (enType == EnArenaType.enArenaT_Placement) return "";
		        if (enType == EnArenaType.enArenaT_Score0) return "";
		        if (enType == EnArenaType.enArenaT_Placement2) return "";
		        if (enType == EnArenaType.enArenaT_Score2) return "";
		        if (enType == EnArenaType.enArenaT_Max) return "";
				return "";
	} 

	static public string EnumPrint_EnAttRootType(EnAttRootType enType){
		        if (enType == EnAttRootType.enAttRootType_Min) return "";
		        if (enType == EnAttRootType.enAttRootType_Gold) return "金灵根";
		        if (enType == EnAttRootType.enAttRootType_Wood) return "木灵根";
		        if (enType == EnAttRootType.enAttRootType_Water) return "水灵根";
		        if (enType == EnAttRootType.enAttRootType_Fire) return "火灵根";
		        if (enType == EnAttRootType.enAttRootType_Earth) return "土灵根";
		        if (enType == EnAttRootType.enAttRootType_Body) return "体灵根";
		        if (enType == EnAttRootType.enAttRootType_Evil) return "邪灵根";
		        if (enType == EnAttRootType.enAttRootType_Dragon) return "龙灵根";
		        if (enType == EnAttRootType.enAttRootType_Immortal) return "仙灵根";
		        if (enType == EnAttRootType.enAttRootType_Max) return "";
				return "";
	} 

	static public string EnumPrint_EnBatEntityProp(EnBatEntityProp enType){
		        if (enType == EnBatEntityProp.BENT_PROP_MIN) return "最小值, 保留";
		        if (enType == EnBatEntityProp.BENT_PROP_ISPLAYER) return "0  怪物角色; 1   是玩家角色";
		        if (enType == EnBatEntityProp.BENT_PROP_CAMPID) return "0攻(左)/1守(右)";
		        if (enType == EnBatEntityProp.BENT_PROP_POS) return "位置0-4";
		        if (enType == EnBatEntityProp.BENT_PROP_INIT_HP) return "初始血量, 如果为-1, 会重置为最大值";
		        if (enType == EnBatEntityProp.BENT_PROP_INIT_RAGE) return "初始怒气";
		        if (enType == EnBatEntityProp.BENT_PROP_MAIN_BASE_MIN) return "最终一级属性最小值";
		        if (enType == EnBatEntityProp.BENT_PROP_QUALIFICATION_BASE) return "资质";
		        if (enType == EnBatEntityProp.BENT_PROP_ROOT_BONE_BASE) return "根骨";
		        if (enType == EnBatEntityProp.BENT_PROP_INSIGHT_BASE) return "悟性";
		        if (enType == EnBatEntityProp.BENT_PROP_QI_SENSE_BASE) return "气感";
		        if (enType == EnBatEntityProp.BENT_PROP_POTENTIAL_BASE) return "潜力";
		        if (enType == EnBatEntityProp.BENT_PROP_OPPORTUNITY_BASE) return "机缘";
		        if (enType == EnBatEntityProp.BENT_PROP_MAIN_BASE_MAX) return "最终一级属性最大值";
		        if (enType == EnBatEntityProp.BENT_PROP_SUB_BASE_MIN) return "最终二级属性最小值";
		        if (enType == EnBatEntityProp.BENT_PROP_ATTACK_BASE) return "攻击力";
		        if (enType == EnBatEntityProp.BENT_PROP_DEFENSE_BASE) return "防御";
		        if (enType == EnBatEntityProp.BENT_PROP_HEALTH_BASE) return "生命值";
		        if (enType == EnBatEntityProp.BENT_PROP_ATTACK_POWER_PERCENTAGE_BASE) return "攻击力百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_DEFENSE_PERCENTAGE_BASE) return "防御百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_HEALTH_PERCENTAGE_BASE) return "生命值百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_RAGE_LIMIT_BASE) return "怒气上限";
		        if (enType == EnBatEntityProp.BENT_PROP_SPEED_BASE) return "速度";
		        if (enType == EnBatEntityProp.BENT_PROP_CRITICAL_RATE_BASE) return "暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_CRITICAL_RATE_BASE) return "忽视暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_NORMAL_ATTACK_CRITICAL_RATE_BASE) return "普攻暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_NORMAL_ATTACK_CRITICAL_RATE_BASE) return "忽视普攻暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_SKILL_CRITICAL_RATE_BASE) return "技能暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_SKILL_CRITICAL_RATE_BASE) return "忽视技能暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_RAGE_SKILL_CRITICAL_RATE_BASE) return "怒气技暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_RAGE_SKILL_CRITICAL_RATE_BASE) return "忽视怒气技暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_DODGE_RATE_BASE) return "闪避率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_DODGE_RATE_BASE) return "忽视闪避率";
		        if (enType == EnBatEntityProp.BENT_PROP_DIZZINESS_RATE_BASE) return "眩晕率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_DIZZINESS_RATE_BASE) return "忽视眩晕率";
		        if (enType == EnBatEntityProp.BENT_PROP_COUNTER_RATE_BASE) return "反击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_COUNTER_RATE_BASE) return "忽视反击率";
		        if (enType == EnBatEntityProp.BENT_PROP_COMBO_RATE_BASE) return "连击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_COMBO_RATE_BASE) return "忽视连击率";
		        if (enType == EnBatEntityProp.BENT_PROP_INCREASE_DAMAGE_BASE) return "增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_DECREASE_DAMAGE_BASE) return "减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_CRITICAL_INCREASE_DAMAGE_BASE) return "暴击增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_CRITICAL_DECREASE_DAMAGE_BASE) return "暴击减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_COUNTER_INCREASE_DAMAGE_BASE) return "反击增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_COUNTER_DECREASE_DAMAGE_BASE) return "反击减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_COMBO_INCREASE_DAMAGE_BASE) return "连击增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_COMBO_DECREASE_DAMAGE_BASE) return "连击减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_DIZZINESS_INCREASE_DAMAGE_BASE) return "眩晕增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_DIZZINESS_DECREASE_DAMAGE_BASE) return "眩晕减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_NORMAL_ATTACK_INCREASE_DAMAGE_BASE) return "普攻增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_NORMAL_ATTACK_DECREASE_DAMAGE_BASE) return "普攻减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_SKILL_INCREASE_DAMAGE_BASE) return "技能增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_SKILL_DECREASE_DAMAGE_BASE) return "技能减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_RAGE_SKILL_INCREASE_DAMAGE_BASE) return "怒气技增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_RAGE_SKILL_DECREASE_DAMAGE_BASE) return "怒气技减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_MONSTER_INCREASE_DAMAGE_BASE) return "怪物增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_MONSTER_DECREASE_DAMAGE_BASE) return "怪物减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_PLAYER_INCREASE_DAMAGE_BASE) return "玩家增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_PLAYER_DECREASE_DAMAGE_BASE) return "玩家减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_HEAL_STRENGTHEN_BASE) return "强化治疗";
		        if (enType == EnBatEntityProp.BENT_PROP_HEAL_WEAKEN_BASE) return "弱化治疗";
		        if (enType == EnBatEntityProp.BENT_PROP_DRAIN_RATE_BASE) return "汲取率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_DRAIN_RATE_BASE) return "忽视汲取率";
		        if (enType == EnBatEntityProp.BENT_PROP_STRENGTHEN_DRAIN_BASE) return "强化汲取";
		        if (enType == EnBatEntityProp.BENT_PROP_WEAKEN_DRAIN_BASE) return "弱化汲取";
		        if (enType == EnBatEntityProp.BENT_PROP_THUNDER_INCREASE_DAMAGE_BASE) return "雷系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_THUNDER_DECREASE_DAMAGE_BASE) return "雷系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_GOLD_INCREASE_DAMAGE_BASE) return "金系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_GOLD_DECREASE_DAMAGE_BASE) return "金系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_WOOD_INCREASE_DAMAGE_BASE) return "木系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_WOOD_DECREASE_DAMAGE_BASE) return "木系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_WATER_INCREASE_DAMAGE_BASE) return "水系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_WATER_DECREASE_DAMAGE_BASE) return "水系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_FIRE_INCREASE_DAMAGE_BASE) return "火系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_FIRE_DECREASE_DAMAGE_BASE) return "火系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_EARTH_INCREASE_DAMAGE_BASE) return "土系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_EARTH_DECREASE_DAMAGE_BASE) return "土系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_ATTACK_POWER_PERCENTAGE_BASE) return "全局攻击力百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_DEFENSE_PERCENTAGE_BASE) return "全局防御百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_HEALTH_PERCENTAGE_BASE) return "全局生命值百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_INCREASE_DAMAGE_BASE) return "全局增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_DECREASE_DAMAGE_BASE) return "全局减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_SHIELD_INCREASE_BASE) return "护盾加成百份比";
		        if (enType == EnBatEntityProp.BENT_PROP_INIT_END) return "初始化属性  end";
		        if (enType == EnBatEntityProp.BENT_PROP_CUR_HP) return "当前血量";
		        if (enType == EnBatEntityProp.BENT_PROP_CUR_RAGE) return "当前怒气";
		        if (enType == EnBatEntityProp.BENT_PROP_ALIVE) return "存活状态,  0死, 1活";
		        if (enType == EnBatEntityProp.BENT_PROP_DIZZY_ROUND) return "眩晕的回合数";
		        if (enType == EnBatEntityProp.BENT_PROP_FREEZE_LAYER) return "冰冻层数. 0表示没有冰冻";
		        if (enType == EnBatEntityProp.BENT_PROP_CUR_SHIELD) return "当前护盾";
		        if (enType == EnBatEntityProp.BENT_PROP_ACT_IN_ROUND) return "本回合是否已经行动";
		        if (enType == EnBatEntityProp.BENT_PROP_CRITICALHIT_IN_ROUND) return "本回合爆击次数";
		        if (enType == EnBatEntityProp.BENT_PROP_DIZZYHIT_IN_ROUND) return "本回合击晕(对方)次数";
		        if (enType == EnBatEntityProp.BENT_PROP_COUNTERHIT_IN_ROUND) return "本回合反击次数";
		        if (enType == EnBatEntityProp.BENT_PROP_DODGEHIT_IN_ROUND) return "本回合躲闪次数";
		        if (enType == EnBatEntityProp.BENT_PROP_WAITING_RELIVE) return "等待复活";
		        if (enType == EnBatEntityProp.BENT_PROP_RELIVE_HP_PERCENT) return "复活时血量(比例)";
		        if (enType == EnBatEntityProp.BENT_PROP_MAIN_EFF_MIN) return "最终一级属性最小值";
		        if (enType == EnBatEntityProp.BENT_PROP_QUALIFICATION_EFF) return "资质";
		        if (enType == EnBatEntityProp.BENT_PROP_ROOT_BONE_EFF) return "根骨";
		        if (enType == EnBatEntityProp.BENT_PROP_INSIGHT_EFF) return "悟性";
		        if (enType == EnBatEntityProp.BENT_PROP_QI_SENSE_EFF) return "气感";
		        if (enType == EnBatEntityProp.BENT_PROP_POTENTIAL_EFF) return "潜力";
		        if (enType == EnBatEntityProp.BENT_PROP_OPPORTUNITY_EFF) return "机缘";
		        if (enType == EnBatEntityProp.BENT_PROP_MAIN_EFF_MAX) return "最终一级属性最大值";
		        if (enType == EnBatEntityProp.BENT_PROP_SUB_EFF_MIN) return "最终二级属性最小值";
		        if (enType == EnBatEntityProp.BENT_PROP_ATTACK_EFF) return "攻击力";
		        if (enType == EnBatEntityProp.BENT_PROP_DEFENSE_EFF) return "防御";
		        if (enType == EnBatEntityProp.BENT_PROP_HEALTH_EFF) return "生命值";
		        if (enType == EnBatEntityProp.BENT_PROP_ATTACK_POWER_PERCENTAGE_EFF) return "攻击力百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_DEFENSE_PERCENTAGE_EFF) return "防御百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_HEALTH_PERCENTAGE_EFF) return "生命值百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_RAGE_LIMIT_EFF) return "怒气上限";
		        if (enType == EnBatEntityProp.BENT_PROP_SPEED_EFF) return "速度";
		        if (enType == EnBatEntityProp.BENT_PROP_CRITICAL_RATE_EFF) return "暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_CRITICAL_RATE_EFF) return "忽视暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_NORMAL_ATTACK_CRITICAL_RATE_EFF) return "普攻暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_NORMAL_ATTACK_CRITICAL_RATE_EFF) return "忽视普攻暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_SKILL_CRITICAL_RATE_EFF) return "技能暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_SKILL_CRITICAL_RATE_EFF) return "忽视技能暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_RAGE_SKILL_CRITICAL_RATE_EFF) return "怒气技暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_RAGE_SKILL_CRITICAL_RATE_EFF) return "忽视怒气技暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_DODGE_RATE_EFF) return "闪避率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_DODGE_RATE_EFF) return "忽视闪避率";
		        if (enType == EnBatEntityProp.BENT_PROP_DIZZINESS_RATE_EFF) return "眩晕率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_DIZZINESS_RATE_EFF) return "忽视眩晕率";
		        if (enType == EnBatEntityProp.BENT_PROP_COUNTER_RATE_EFF) return "反击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_COUNTER_RATE_EFF) return "忽视反击率";
		        if (enType == EnBatEntityProp.BENT_PROP_COMBO_RATE_EFF) return "连击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_COMBO_RATE_EFF) return "忽视连击率";
		        if (enType == EnBatEntityProp.BENT_PROP_INCREASE_DAMAGE_EFF) return "增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_DECREASE_DAMAGE_EFF) return "减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_CRITICAL_INCREASE_DAMAGE_EFF) return "暴击增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_CRITICAL_DECREASE_DAMAGE_EFF) return "暴击减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_COUNTER_INCREASE_DAMAGE_EFF) return "反击增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_COUNTER_DECREASE_DAMAGE_EFF) return "反击减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_COMBO_INCREASE_DAMAGE_EFF) return "连击增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_COMBO_DECREASE_DAMAGE_EFF) return "连击减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_DIZZINESS_INCREASE_DAMAGE_EFF) return "眩晕增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_DIZZINESS_DECREASE_DAMAGE_EFF) return "眩晕减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_NORMAL_ATTACK_INCREASE_DAMAGE_EFF) return "普攻增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_NORMAL_ATTACK_DECREASE_DAMAGE_EFF) return "普攻减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_SKILL_INCREASE_DAMAGE_EFF) return "技能增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_SKILL_DECREASE_DAMAGE_EFF) return "技能减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_RAGE_SKILL_INCREASE_DAMAGE_EFF) return "怒气技增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_RAGE_SKILL_DECREASE_DAMAGE_EFF) return "怒气技减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_MONSTER_INCREASE_DAMAGE_EFF) return "怪物增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_MONSTER_DECREASE_DAMAGE_EFF) return "怪物减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_PLAYER_INCREASE_DAMAGE_EFF) return "玩家增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_PLAYER_DECREASE_DAMAGE_EFF) return "玩家减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_HEAL_STRENGTHEN_EFF) return "强化治疗";
		        if (enType == EnBatEntityProp.BENT_PROP_HEAL_WEAKEN_EFF) return "弱化治疗";
		        if (enType == EnBatEntityProp.BENT_PROP_DRAIN_RATE_EFF) return "汲取率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_DRAIN_RATE_EFF) return "忽视汲取率";
		        if (enType == EnBatEntityProp.BENT_PROP_STRENGTHEN_DRAIN_EFF) return "强化汲取";
		        if (enType == EnBatEntityProp.BENT_PROP_WEAKEN_DRAIN_EFF) return "弱化汲取";
		        if (enType == EnBatEntityProp.BENT_PROP_THUNDER_INCREASE_DAMAGE_EFF) return "雷系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_THUNDER_DECREASE_DAMAGE_EFF) return "雷系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_GOLD_INCREASE_DAMAGE_EFF) return "金系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_GOLD_DECREASE_DAMAGE_EFF) return "金系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_WOOD_INCREASE_DAMAGE_EFF) return "木系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_WOOD_DECREASE_DAMAGE_EFF) return "木系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_WATER_INCREASE_DAMAGE_EFF) return "水系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_WATER_DECREASE_DAMAGE_EFF) return "水系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_FIRE_INCREASE_DAMAGE_EFF) return "火系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_FIRE_DECREASE_DAMAGE_EFF) return "火系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_EARTH_INCREASE_DAMAGE_EFF) return "土系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_EARTH_DECREASE_DAMAGE_EFF) return "土系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_ATTACK_POWER_PERCENTAGE_EFF) return "全局攻击力百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_DEFENSE_PERCENTAGE_EFF) return "全局防御百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_HEALTH_PERCENTAGE_EFF) return "全局生命值百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_INCREASE_DAMAGE_EFF) return "全局增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_DECREASE_DAMAGE_EFF) return "全局减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_SHIELD_INCREASE_EFF) return "护盾加成百份比";
		        if (enType == EnBatEntityProp.BENT_PROP_SUB_EFF_MAX) return "最终二级属性  max ";
		        if (enType == EnBatEntityProp.BENT_PROP_MAIN_FINAL_MIN) return "最终一级属性最小值";
		        if (enType == EnBatEntityProp.BENT_PROP_QUALIFICATION_FINAL) return "资质";
		        if (enType == EnBatEntityProp.BENT_PROP_ROOT_BONE_FINAL) return "根骨";
		        if (enType == EnBatEntityProp.BENT_PROP_INSIGHT_FINAL) return "悟性";
		        if (enType == EnBatEntityProp.BENT_PROP_QI_SENSE_FINAL) return "气感";
		        if (enType == EnBatEntityProp.BENT_PROP_POTENTIAL_FINAL) return "潜力";
		        if (enType == EnBatEntityProp.BENT_PROP_OPPORTUNITY_FINAL) return "机缘";
		        if (enType == EnBatEntityProp.BENT_PROP_MAIN_FINAL_MAX) return "最终一级属性最大值";
		        if (enType == EnBatEntityProp.BENT_PROP_SUB_FINAL_MIN) return "最终二级属性最小值";
		        if (enType == EnBatEntityProp.BENT_PROP_ATTACK_FINAL) return "攻击力";
		        if (enType == EnBatEntityProp.BENT_PROP_DEFENSE_FINAL) return "防御";
		        if (enType == EnBatEntityProp.BENT_PROP_HEALTH_FINAL) return "生命值";
		        if (enType == EnBatEntityProp.BENT_PROP_ATTACK_POWER_PERCENTAGE_FINAL) return "攻击力百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_DEFENSE_PERCENTAGE_FINAL) return "防御百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_HEALTH_PERCENTAGE_FINAL) return "生命值百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_RAGE_LIMIT_FINAL) return "怒气上限";
		        if (enType == EnBatEntityProp.BENT_PROP_SPEED_FINAL) return "速度";
		        if (enType == EnBatEntityProp.BENT_PROP_CRITICAL_RATE_FINAL) return "暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_CRITICAL_RATE_FINAL) return "忽视暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_NORMAL_ATTACK_CRITICAL_RATE_FINAL) return "普攻暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_NORMAL_ATTACK_CRITICAL_RATE_FINAL) return "忽视普攻暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_SKILL_CRITICAL_RATE_FINAL) return "技能暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_SKILL_CRITICAL_RATE_FINAL) return "忽视技能暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_RAGE_SKILL_CRITICAL_RATE_FINAL) return "怒气技暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_RAGE_SKILL_CRITICAL_RATE_FINAL) return "忽视怒气技暴击率";
		        if (enType == EnBatEntityProp.BENT_PROP_DODGE_RATE_FINAL) return "闪避率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_DODGE_RATE_FINAL) return "忽视闪避率";
		        if (enType == EnBatEntityProp.BENT_PROP_DIZZINESS_RATE_FINAL) return "眩晕率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_DIZZINESS_RATE_FINAL) return "忽视眩晕率";
		        if (enType == EnBatEntityProp.BENT_PROP_COUNTER_RATE_FINAL) return "反击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_COUNTER_RATE_FINAL) return "忽视反击率";
		        if (enType == EnBatEntityProp.BENT_PROP_COMBO_RATE_FINAL) return "连击率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_COMBO_RATE_FINAL) return "忽视连击率";
		        if (enType == EnBatEntityProp.BENT_PROP_INCREASE_DAMAGE_FINAL) return "增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_DECREASE_DAMAGE_FINAL) return "减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_CRITICAL_INCREASE_DAMAGE_FINAL) return "暴击增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_CRITICAL_DECREASE_DAMAGE_FINAL) return "暴击减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_COUNTER_INCREASE_DAMAGE_FINAL) return "反击增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_COUNTER_DECREASE_DAMAGE_FINAL) return "反击减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_COMBO_INCREASE_DAMAGE_FINAL) return "连击增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_COMBO_DECREASE_DAMAGE_FINAL) return "连击减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_DIZZINESS_INCREASE_DAMAGE_FINAL) return "眩晕增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_DIZZINESS_DECREASE_DAMAGE_FINAL) return "眩晕减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_NORMAL_ATTACK_INCREASE_DAMAGE_FINAL) return "普攻增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_NORMAL_ATTACK_DECREASE_DAMAGE_FINAL) return "普攻减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_SKILL_INCREASE_DAMAGE_FINAL) return "技能增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_SKILL_DECREASE_DAMAGE_FINAL) return "技能减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_RAGE_SKILL_INCREASE_DAMAGE_FINAL) return "怒气技增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_RAGE_SKILL_DECREASE_DAMAGE_FINAL) return "怒气技减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_MONSTER_INCREASE_DAMAGE_FINAL) return "怪物增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_MONSTER_DECREASE_DAMAGE_FINAL) return "怪物减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_PLAYER_INCREASE_DAMAGE_FINAL) return "玩家增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_PLAYER_DECREASE_DAMAGE_FINAL) return "玩家减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_HEAL_STRENGTHEN_FINAL) return "强化治疗";
		        if (enType == EnBatEntityProp.BENT_PROP_HEAL_WEAKEN_FINAL) return "弱化治疗";
		        if (enType == EnBatEntityProp.BENT_PROP_DRAIN_RATE_FINAL) return "汲取率";
		        if (enType == EnBatEntityProp.BENT_PROP_IGNORE_DRAIN_RATE_FINAL) return "忽视汲取率";
		        if (enType == EnBatEntityProp.BENT_PROP_STRENGTHEN_DRAIN_FINAL) return "强化汲取";
		        if (enType == EnBatEntityProp.BENT_PROP_WEAKEN_DRAIN_FINAL) return "弱化汲取";
		        if (enType == EnBatEntityProp.BENT_PROP_THUNDER_INCREASE_DAMAGE_FINAL) return "雷系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_THUNDER_DECREASE_DAMAGE_FINAL) return "雷系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_GOLD_INCREASE_DAMAGE_FINAL) return "金系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_GOLD_DECREASE_DAMAGE_FINAL) return "金系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_WOOD_INCREASE_DAMAGE_FINAL) return "木系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_WOOD_DECREASE_DAMAGE_FINAL) return "木系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_WATER_INCREASE_DAMAGE_FINAL) return "水系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_WATER_DECREASE_DAMAGE_FINAL) return "水系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_FIRE_INCREASE_DAMAGE_FINAL) return "火系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_FIRE_DECREASE_DAMAGE_FINAL) return "火系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_EARTH_INCREASE_DAMAGE_FINAL) return "土系增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_EARTH_DECREASE_DAMAGE_FINAL) return "土系减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_ATTACK_POWER_PERCENTAGE_FINAL) return "全局攻击力百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_DEFENSE_PERCENTAGE_FINAL) return "全局防御百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_HEALTH_PERCENTAGE_FINAL) return "全局生命值百分比";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_INCREASE_DAMAGE_FINAL) return "全局增伤";
		        if (enType == EnBatEntityProp.BENT_PROP_GLOBAL_DECREASE_DAMAGE_FINAL) return "全局减伤";
		        if (enType == EnBatEntityProp.BENT_PROP_SHIELD_INCREASE_FINAL) return "护盾加成百份比";
		        if (enType == EnBatEntityProp.BENT_PROP_MAXID) return "最大值";
				return "";
	} 

	static public string EnumPrint_EnBatError(EnBatError enType){
		        if (enType == EnBatError.BATERR_NO_ERROR) return " ";
		        if (enType == EnBatError.BATERR_ENTITY_CREATEFAIL) return "实体创建失败";
		        if (enType == EnBatError.BATERR_MAX) return " ";
				return "";
	} 

	static public string EnumPrint_EnBattleInputType(EnBattleInputType enType){
		        if (enType == EnBattleInputType.enBattleInputType_Min) return "";
		        if (enType == EnBattleInputType.enBattleInputType_Fight) return "战斗";
		        if (enType == EnBattleInputType.enBattleInputType_Run ) return "逃跑";
		        if (enType == EnBattleInputType.enBattleInputType_Max) return "";
				return "";
	} 

	static public string EnumPrint_EnBattleResult(EnBattleResult enType){
		        if (enType == EnBattleResult.enBatRes_Win) return "分出胜负";
		        if (enType == EnBattleResult.enBatRes_Drawgame) return "平局";
		        if (enType == EnBattleResult.enBatRes_MAX) return "";
				return "";
	} 

	static public string EnumPrint_EnBattleUnitProp(EnBattleUnitProp enType){
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_MIN) return "最小值, 保留";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_DISPLAY) return "外观";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_SIDE) return "1攻(左)/2守(右)";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_POS) return "位置1-4";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_BATTLE_POS) return "1在场上 0在队列";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_ATTROOT1) return "灵根1";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_ATTROOT2) return "灵根2";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_LEVEL) return "等级";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_MAX_HP) return "最大血量";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_CUR_HP) return "剩余血量";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_BASE_MIN) return "基础属性最小值";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_HP_BASE) return "基础血量";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_SPEED_BASE) return "基础速度";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_ATTACK_BASE) return "基础攻击";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_SPECIAL_ATTACK_BASE) return "基础特攻";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_DEFENSE_BASE) return "基础防御";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_SPECIAL_DEFENSE_BASE) return "基础特防";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_BASE_MAX) return "基础属性最大值";
		        if (enType == EnBattleUnitProp.BATTLE_UNIT_PROP_MAXID) return "最大值, 保留";
				return "";
	} 

	static public string EnumPrint_EnBulletDamageType(EnBulletDamageType enType){
		        if (enType == EnBulletDamageType.enBDT_None) return "无伤害";
		        if (enType == EnBulletDamageType.enBDT_Normal) return "普通伤害";
		        if (enType == EnBulletDamageType.enBDT_True) return "真实伤害";
		        if (enType == EnBulletDamageType.enBDT_Electric) return "电系伤害";
		        if (enType == EnBulletDamageType.enBDT_Gold) return "金系伤害";
		        if (enType == EnBulletDamageType.enBDT_Wood) return "木系伤害";
		        if (enType == EnBulletDamageType.enBDT_Water) return "冰系伤害";
		        if (enType == EnBulletDamageType.enBDT_Fire) return "火系伤害";
		        if (enType == EnBulletDamageType.enBDT_Earth) return "土系伤害";
		        if (enType == EnBulletDamageType.enBDT_Shield) return "护盾";
		        if (enType == EnBulletDamageType.enBDT_Heal) return "治疗";
				return "";
	} 

	static public string EnumPrint_EnDiscipleAbility(EnDiscipleAbility enType){
		        if (enType == EnDiscipleAbility.ABILITY_TYPE_INNATE_NATURE) return "先天性格";
		        if (enType == EnDiscipleAbility.ABILITY_TYPE_INNATE_PHYSIQUE) return "先天体质";
		        if (enType == EnDiscipleAbility.ABILITY_TYPE_ACQUIRED) return "后天";
		        if (enType == EnDiscipleAbility.ABILITY_TYPE_INNATE_TALENT) return "先天天赋";
				return "";
	} 

	static public string EnumPrint_EnDiscipleProp(EnDiscipleProp enType){
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MIN) return "最小值, 保留";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_LEVEL) return "等级";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GODEXAM) return "渡劫成功次数";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WANDERING_DEATH) return "死亡状态 0未完成 1死亡";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WANDERING_STATE) return "游历状态 0未完成 1已经完成";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WANDERING_DEGREE) return "游历到哪个关卡";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ICON_ID) return "弟子头像Id";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CREATE_TIME) return "弟子创建时间";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_POWER) return "弟子战力";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WANDER_PACKAGE_LEVEL) return "背包等级";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SCORE) return "弟子游历评分";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WANDER_DIFFICULTY) return "游历难度";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WANDER_PATH) return "游历路途id";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SEX) return "性别";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKIN_UPPER) return "上身衣服";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKIN_LOWER) return "下身衣服";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKIN_OUTFIT) return "套装";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKIN_HAIR) return "头发";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKIN_EYE) return "眼睛";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKIN_WEAPON) return "武器";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKIN_BODY) return "身体";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKIN_MOUTH) return "嘴+鼻子";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_QUALITY) return "弟子品质";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CULTIVATION_TECHNIQUE) return "弟子功法";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CULTIVATION_TECHNIQUE_A) return "弟子辅功法A";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CULTIVATION_TECHNIQUE_B) return "弟子辅功法B";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ELEMENT) return "弟子属性";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ELEMENT_A) return "弟子属性A";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ELEMENT_B) return "弟子属性B";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_TUINING) return "是否选择过功法";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CUR_HP) return "弟子当前血量";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_INDIVIDUAL_SUM) return "六维可分配总值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MAIN_INDIVIDUAL_BASE_MIN) return "分配一级属性最小";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_QUALIFICATION_INDIVIDUAL_BASE) return "资质分配";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ROOT_BONE_INDIVIDUAL_BASE) return "根骨分配";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_INSIGHT_INDIVIDUAL_BASE) return "悟性分配";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_QI_SENSE_INDIVIDUAL_BASE) return "气感分配";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_POTENTIAL_INDIVIDUAL_BASE) return "潜力分配";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_OPPORTUNITY_INDIVIDUAL_BASE) return "机缘分配";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MAIN_INDIVIDUAL_BASE_MAX) return "分配一级属性最最大";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MAIN_INITIAL_BASE_MIN) return "初始一级属性最小";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_QUALIFICATION_INITIAL_BASE) return "资质";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ROOT_BONE_INITIAL_BASE) return "根骨";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_INSIGHT_INITIAL_BASE) return "悟性";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_QI_SENSE_INITIAL_BASE) return "气感";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_POTENTIAL_INITIAL_BASE) return "潜力";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_OPPORTUNITY_INITIAL_BASE) return "机缘";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MAIN_INITIAL_BASE_MAX) return "初始一级属性最大";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_BASE_MIN) return "最小值, 保留";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MAIN_BASE_MIN) return "基础一级属性最小";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_QUALIFICATION_BASE) return "资质基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ROOT_BONE_BASE) return "根骨基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_INSIGHT_BASE) return "悟性基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_QI_SENSE_BASE) return "气感基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_POTENTIAL_BASE) return "潜力基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_OPPORTUNITY_BASE) return "机缘基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MAIN_BASE_MAX) return "基础一级属性最大";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SUB_BASE_MIN) return "基础二级属性最小值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ATTACK_BASE) return "攻击力基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DEFENSE_BASE) return "防御基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_HEALTH_BASE) return "生命值基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ATTACK_POWER_PERCENTAGE_BASE) return "攻击力百分比基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DEFENSE_PERCENTAGE_BASE) return "防御百分比基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_HEALTH_PERCENTAGE_BASE) return "生命值百分比基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_RAGE_LIMIT_BASE) return "怒气上限基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SPEED_BASE) return "速度基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CRITICAL_RATE_BASE) return "暴击率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_CRITICAL_RATE_BASE) return "忽视暴击率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_NORMAL_ATTACK_CRITICAL_RATE_BASE) return "普攻暴击率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_NORMAL_ATTACK_CRITICAL_RATE_BASE) return "忽视普攻暴击率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKILL_CRITICAL_RATE_BASE) return "技能暴击率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_SKILL_CRITICAL_RATE_BASE) return "忽视技能暴击率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_RAGE_SKILL_CRITICAL_RATE_BASE) return "怒气技暴击率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_RAGE_SKILL_CRITICAL_RATE_BASE) return "忽视怒气技暴击率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DODGE_RATE_BASE) return "闪避率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_DODGE_RATE_BASE) return "忽视闪避率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DIZZINESS_RATE_BASE) return "眩晕率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_DIZZINESS_RATE_BASE) return "忽视眩晕率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COUNTER_RATE_BASE) return "反击率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_COUNTER_RATE_BASE) return "忽视反击率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COMBO_RATE_BASE) return "连击率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_COMBO_RATE_BASE) return "忽视连击率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_INCREASE_DAMAGE_BASE) return "增伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DECREASE_DAMAGE_BASE) return "减伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CRITICAL_INCREASE_DAMAGE_BASE) return "暴击增伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CRITICAL_DECREASE_DAMAGE_BASE) return "暴击减伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COUNTER_INCREASE_DAMAGE_BASE) return "反击增伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COUNTER_DECREASE_DAMAGE_BASE) return "反击减伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COMBO_INCREASE_DAMAGE_BASE) return "连击增伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COMBO_DECREASE_DAMAGE_BASE) return "连击减伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DIZZINESS_INCREASE_DAMAGE_BASE) return "眩晕增伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DIZZINESS_DECREASE_DAMAGE_BASE) return "眩晕减伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_NORMAL_ATTACK_INCREASE_DAMAGE_BASE) return "普攻增伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_NORMAL_ATTACK_DECREASE_DAMAGE_BASE) return "普攻减伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKILL_INCREASE_DAMAGE_BASE) return "技能增伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKILL_DECREASE_DAMAGE_BASE) return "技能减伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_RAGE_SKILL_INCREASE_DAMAGE_BASE) return "怒气技增伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_RAGE_SKILL_DECREASE_DAMAGE_BASE) return "怒气技减伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MONSTER_INCREASE_DAMAGE_BASE) return "怪物增伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MONSTER_DECREASE_DAMAGE_BASE) return "怪物减伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_PLAYER_INCREASE_DAMAGE_BASE) return "玩家增伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_PLAYER_DECREASE_DAMAGE_BASE) return "玩家减伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_HEAL_STRENGTHEN_BASE) return "强化治疗基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_HEAL_WEAKEN_BASE) return "弱化治疗基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DRAIN_RATE_BASE) return "汲取率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_DRAIN_RATE_BASE) return "忽视汲取率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_STRENGTHEN_DRAIN_BASE) return "强化汲取基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WEAKEN_DRAIN_BASE) return "弱化汲取基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_THUNDER_INCREASE_DAMAGE_BASE) return "雷系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_THUNDER_DECREASE_DAMAGE_BASE) return "雷系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GOLD_INCREASE_DAMAGE_BASE) return "金系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GOLD_DECREASE_DAMAGE_BASE) return "金系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WOOD_INCREASE_DAMAGE_BASE) return "木系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WOOD_DECREASE_DAMAGE_BASE) return "木系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WATER_INCREASE_DAMAGE_BASE) return "水系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WATER_DECREASE_DAMAGE_BASE) return "水系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_FIRE_INCREASE_DAMAGE_BASE) return "火系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_FIRE_DECREASE_DAMAGE_BASE) return "火系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_EARTH_INCREASE_DAMAGE_BASE) return "土系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_EARTH_DECREASE_DAMAGE_BASE) return "土系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_ATTACK_POWER_PERCENTAGE_BASE) return "全局攻击力百分比基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_DEFENSE_PERCENTAGE_BASE) return "全局防御百分比基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_HEALTH_PERCENTAGE_BASE) return "全局生命值百分比基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_INCREASE_DAMAGE_BASE) return "全局增伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_DECREASE_DAMAGE_BASE) return "全局减伤基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_TRANSFORM_SUCCESS_RATE_BASE) return "渡劫成功率基础值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SHIELD_INCREASE_BASE) return "护盾加成";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SUB_BASE_MAX) return "基础二级属性最大值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_BASE_MAX) return "最大值, 保留";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CUSTOM_MAX) return "存盘分割符";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_EFF_MIN) return "最小值, 保留";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MAIN_EFF_MIN) return "临时一级属性最小值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_QUALIFICATION_EFF) return "资质临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ROOT_BONE_EFF) return "根骨临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_INSIGHT_EFF) return "悟性临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_QI_SENSE_EFF) return "气感临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_POTENTIAL_EFF) return "潜力临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_OPPORTUNITY_EFF) return "机缘临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MAIN_EFF_MAX) return "临时一级属性最大值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SUB_EFF_MIN) return "临时二级属性最小值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ATTACK_EFF) return "攻击力临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DEFENSE_EFF) return "防御临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_HEALTH_EFF) return "生命值临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ATTACK_POWER_PERCENTAGE_EFF) return "攻击力百分比临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DEFENSE_PERCENTAGE_EFF) return "防御百分比临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_HEALTH_PERCENTAGE_EFF) return "生命值百分比临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_RAGE_LIMIT_EFF) return "怒气上限临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SPEED_EFF) return "速度临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CRITICAL_RATE_EFF) return "暴击率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_CRITICAL_RATE_EFF) return "忽视暴击率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_NORMAL_ATTACK_CRITICAL_RATE_EFF) return "普攻暴击率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_NORMAL_ATTACK_CRITICAL_RATE_EFF) return "忽视普攻暴击率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKILL_CRITICAL_RATE_EFF) return "技能暴击率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_SKILL_CRITICAL_RATE_EFF) return "忽视技能暴击率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_RAGE_SKILL_CRITICAL_RATE_EFF) return "怒气技暴击率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_RAGE_SKILL_CRITICAL_RATE_EFF) return "忽视怒气技暴击率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DODGE_RATE_EFF) return "闪避率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_DODGE_RATE_EFF) return "忽视闪避率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DIZZINESS_RATE_EFF) return "眩晕率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_DIZZINESS_RATE_EFF) return "忽视眩晕率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COUNTER_RATE_EFF) return "反击率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_COUNTER_RATE_EFF) return "忽视反击率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COMBO_RATE_EFF) return "连击率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_COMBO_RATE_EFF) return "忽视连击率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_INCREASE_DAMAGE_EFF) return "增伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DECREASE_DAMAGE_EFF) return "减伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CRITICAL_INCREASE_DAMAGE_EFF) return "暴击增伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CRITICAL_DECREASE_DAMAGE_EFF) return "暴击减伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COUNTER_INCREASE_DAMAGE_EFF) return "反击增伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COUNTER_DECREASE_DAMAGE_EFF) return "反击减伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COMBO_INCREASE_DAMAGE_EFF) return "连击增伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COMBO_DECREASE_DAMAGE_EFF) return "连击减伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DIZZINESS_INCREASE_DAMAGE_EFF) return "眩晕增伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DIZZINESS_DECREASE_DAMAGE_EFF) return "眩晕减伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_NORMAL_ATTACK_INCREASE_DAMAGE_EFF) return "普攻增伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_NORMAL_ATTACK_DECREASE_DAMAGE_EFF) return "普攻减伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKILL_INCREASE_DAMAGE_EFF) return "技能增伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKILL_DECREASE_DAMAGE_EFF) return "技能减伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_RAGE_SKILL_INCREASE_DAMAGE_EFF) return "怒气技增伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_RAGE_SKILL_DECREASE_DAMAGE_EFF) return "怒气技减伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MONSTER_INCREASE_DAMAGE_EFF) return "怪物增伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MONSTER_DECREASE_DAMAGE_EFF) return "怪物减伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_PLAYER_INCREASE_DAMAGE_EFF) return "玩家增伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_PLAYER_DECREASE_DAMAGE_EFF) return "玩家减伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_HEAL_STRENGTHEN_EFF) return "强化治疗临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_HEAL_WEAKEN_EFF) return "弱化治疗临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DRAIN_RATE_EFF) return "汲取率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_DRAIN_RATE_EFF) return "忽视汲取率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_STRENGTHEN_DRAIN_EFF) return "强化汲取临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WEAKEN_DRAIN_EFF) return "弱化汲取临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_THUNDER_INCREASE_DAMAGE_EFF) return "雷系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_THUNDER_DECREASE_DAMAGE_EFF) return "雷系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GOLD_INCREASE_DAMAGE_EFF) return "金系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GOLD_DECREASE_DAMAGE_EFF) return "金系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WOOD_INCREASE_DAMAGE_EFF) return "木系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WOOD_DECREASE_DAMAGE_EFF) return "木系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WATER_INCREASE_DAMAGE_EFF) return "水系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WATER_DECREASE_DAMAGE_EFF) return "水系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_FIRE_INCREASE_DAMAGE_EFF) return "火系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_FIRE_DECREASE_DAMAGE_EFF) return "火系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_EARTH_INCREASE_DAMAGE_EFF) return "土系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_EARTH_DECREASE_DAMAGE_EFF) return "土系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_ATTACK_POWER_PERCENTAGE_EFF) return "全局攻击力百分比临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_DEFENSE_PERCENTAGE_EFF) return "全局防御百分比临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_HEALTH_PERCENTAGE_EFF) return "全局生命值百分比临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_INCREASE_DAMAGE_EFF) return "全局增伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_DECREASE_DAMAGE_EFF) return "全局减伤临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_TRANSFORM_SUCCESS_RATE_EFF) return "渡劫成功率临时值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SHIELD_INCREASE_EFF) return "护盾加成";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SUB_EFF_MAX) return "临时二级属性最小值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_EFF_MAX) return "最大值, 保留";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_FINAL_MIN) return "最小值, 保留";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MAIN_FINAL_MIN) return "最终一级属性最小值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_QUALIFICATION_FINAL) return "资质最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ROOT_BONE_FINAL) return "根骨最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_INSIGHT_FINAL) return "悟性最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_QI_SENSE_FINAL) return "气感最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_POTENTIAL_FINAL) return "潜力最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_OPPORTUNITY_FINAL) return "机缘最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MAIN_FINAL_MAX) return "最终一级属性最大值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SUB_FINAL_MIN) return "最终二级属性最小值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ATTACK_FINAL) return "攻击力最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DEFENSE_FINAL) return "防御最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_HEALTH_FINAL) return "生命值最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_ATTACK_POWER_PERCENTAGE_FINAL) return "攻击力百分比最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DEFENSE_PERCENTAGE_FINAL) return "防御百分比最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_HEALTH_PERCENTAGE_FINAL) return "生命值百分比最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_RAGE_LIMIT_FINAL) return "怒气上限最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SPEED_FINAL) return "速度最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CRITICAL_RATE_FINAL) return "暴击率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_CRITICAL_RATE_FINAL) return "忽视暴击率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_NORMAL_ATTACK_CRITICAL_RATE_FINAL) return "普攻暴击率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_NORMAL_ATTACK_CRITICAL_RATE_FINAL) return "忽视普攻暴击率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKILL_CRITICAL_RATE_FINAL) return "技能暴击率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_SKILL_CRITICAL_RATE_FINAL) return "忽视技能暴击率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_RAGE_SKILL_CRITICAL_RATE_FINAL) return "怒气技暴击率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_RAGE_SKILL_CRITICAL_RATE_FINAL) return "忽视怒气技暴击率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DODGE_RATE_FINAL) return "闪避率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_DODGE_RATE_FINAL) return "忽视闪避率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DIZZINESS_RATE_FINAL) return "眩晕率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_DIZZINESS_RATE_FINAL) return "忽视眩晕率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COUNTER_RATE_FINAL) return "反击率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_COUNTER_RATE_FINAL) return "忽视反击率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COMBO_RATE_FINAL) return "连击率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_COMBO_RATE_FINAL) return "忽视连击率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_INCREASE_DAMAGE_FINAL) return "增伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DECREASE_DAMAGE_FINAL) return "减伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CRITICAL_INCREASE_DAMAGE_FINAL) return "暴击增伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_CRITICAL_DECREASE_DAMAGE_FINAL) return "暴击减伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COUNTER_INCREASE_DAMAGE_FINAL) return "反击增伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COUNTER_DECREASE_DAMAGE_FINAL) return "反击减伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COMBO_INCREASE_DAMAGE_FINAL) return "连击增伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_COMBO_DECREASE_DAMAGE_FINAL) return "连击减伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DIZZINESS_INCREASE_DAMAGE_FINAL) return "眩晕增伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DIZZINESS_DECREASE_DAMAGE_FINAL) return "眩晕减伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_NORMAL_ATTACK_INCREASE_DAMAGE_FINAL) return "普攻增伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_NORMAL_ATTACK_DECREASE_DAMAGE_FINAL) return "普攻减伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKILL_INCREASE_DAMAGE_FINAL) return "技能增伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SKILL_DECREASE_DAMAGE_FINAL) return "技能减伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_RAGE_SKILL_INCREASE_DAMAGE_FINAL) return "怒气技增伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_RAGE_SKILL_DECREASE_DAMAGE_FINAL) return "怒气技减伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MONSTER_INCREASE_DAMAGE_FINAL) return "怪物增伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MONSTER_DECREASE_DAMAGE_FINAL) return "怪物减伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_PLAYER_INCREASE_DAMAGE_FINAL) return "玩家增伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_PLAYER_DECREASE_DAMAGE_FINAL) return "玩家减伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_HEAL_STRENGTHEN_FINAL) return "强化治疗最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_HEAL_WEAKEN_FINAL) return "弱化治疗最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_DRAIN_RATE_FINAL) return "汲取率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_IGNORE_DRAIN_RATE_FINAL) return "忽视汲取率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_STRENGTHEN_DRAIN_FINAL) return "强化汲取最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WEAKEN_DRAIN_FINAL) return "弱化汲取最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_THUNDER_INCREASE_DAMAGE_FINAL) return "雷系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_THUNDER_DECREASE_DAMAGE_FINAL) return "雷系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GOLD_INCREASE_DAMAGE_FINAL) return "金系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GOLD_DECREASE_DAMAGE_FINAL) return "金系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WOOD_INCREASE_DAMAGE_FINAL) return "木系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WOOD_DECREASE_DAMAGE_FINAL) return "木系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WATER_INCREASE_DAMAGE_FINAL) return "水系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_WATER_DECREASE_DAMAGE_FINAL) return "水系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_FIRE_INCREASE_DAMAGE_FINAL) return "火系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_FIRE_DECREASE_DAMAGE_FINAL) return "火系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_EARTH_INCREASE_DAMAGE_FINAL) return "土系增伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_EARTH_DECREASE_DAMAGE_FINAL) return "土系减伤";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_ATTACK_POWER_PERCENTAGE_FINAL) return "全局攻击力百分比最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_DEFENSE_PERCENTAGE_FINAL) return "全局防御百分比最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_HEALTH_PERCENTAGE_FINAL) return "全局生命值百分比最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_INCREASE_DAMAGE_FINAL) return "全局增伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_GLOBAL_DECREASE_DAMAGE_FINAL) return "全局减伤最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_TRANSFORM_SUCCESS_RATE_FINAL) return "渡劫成功率最终值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SHIELD_INCREASE_FINAL) return "护盾加成";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_SUB_FINAL_MAX) return "最终二级属性最大值";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_FINAL_MAX) return "最大值, 保留";
		        if (enType == EnDiscipleProp.DISCIPLE_PROP_MAXID) return "最大值, 保留";
				return "";
	} 

	static public string EnumPrint_EnEntityState(EnEntityState enType){
		        if (enType == EnEntityState.enEntSTATE_Dead) return "死亡";
		        if (enType == EnEntityState.enEntSTATE_Normal) return "正常 (存活)";
		        if (enType == EnEntityState.enEntSTATE_Max) return "";
				return "";
	} 

	static public string EnumPrint_EnEquipReason(EnEquipReason enType){
		        if (enType == EnEquipReason.EQUIP_REASON_NONE) return "默认，不处理";
		        if (enType == EnEquipReason.EQUIP_REASON_TUINING) return "选择功法时随机的";
				return "";
	} 

	static public string EnumPrint_EnFormationType(EnFormationType enType){
		        if (enType == EnFormationType.enFORMTYPE_NORMAL) return "普通(通用)阵法";
		        if (enType == EnFormationType.enFORMTYPE_TOWER) return "爬塔阵法";
				return "";
	} 

	static public string EnumPrint_EnGeneralFormSecID(EnGeneralFormSecID enType){
		        if (enType == EnGeneralFormSecID.enGFSID_ATT) return "单人进攻";
		        if (enType == EnGeneralFormSecID.enGFSID_DEF) return "单人防守";
				return "";
	} 

	static public string EnumPrint_EnGoodsProp(EnGoodsProp enType){
		        if (enType == EnGoodsProp.GOODS_PROP_GOODSID) return "物品ID";
		        if (enType == EnGoodsProp.GOODS_PROP_QTY) return "物品数量";
		        if (enType == EnGoodsProp.GOODS_PROP_BIND) return "绑定标志";
		        if (enType == EnGoodsProp.GOODS_PROP_LOCK) return "锁定标志标志";
		        if (enType == EnGoodsProp.EQUIP_PROP_ENHANCE) return "装备强化值";
		        if (enType == EnGoodsProp.EQUIP_PROP_ENHANCELEVEL) return "装备强化等级,通过强化值换算";
		        if (enType == EnGoodsProp.EQUIP_PROP_POWER) return "装备战斗力";
		        if (enType == EnGoodsProp.EQUIP_PROP_ENHANCE_STARlV) return "装备星级";
		        if (enType == EnGoodsProp.GOODS_PROP_BROADCAST) return "以上为广播属性";
		        if (enType == EnGoodsProp.GOODS_PROP_MAXID) return "最大属性ID";
				return "";
	} 

	static public string EnumPrint_EnHandEquipType(EnHandEquipType enType){
		        if (enType == EnHandEquipType.HandEquipType_None) return "默认，玩家自己的装备";
		        if (enType == EnHandEquipType.HandEquipType_Shop) return "装备商店";
				return "";
	} 

	static public string EnumPrint_EnHitType(EnHitType enType){
		        if (enType == EnHitType.enHT_NormalHit) return "普通命中";
		        if (enType == EnHitType.enHT_Dodge) return "躲闪";
		        if (enType == EnHitType.enHT_Critical) return "";
		        if (enType == EnHitType.enHT_AbsorbHp) return "吸血";
				return "";
	} 

	static public string EnumPrint_EnInherentThingType(EnInherentThingType enType){
		        if (enType == EnInherentThingType.InherentThingType_MIN) return "无效值";
		        if (enType == EnInherentThingType.InherentThingType_Money) return "灵石";
		        if (enType == EnInherentThingType.InherentThingType_BindMoney) return "仙玉";
		        if (enType == EnInherentThingType.InherentThingType_Stamina) return "体力";
		        if (enType == EnInherentThingType.InherentThingType_Gold) return "元宝(暂时没用)";
		        if (enType == EnInherentThingType.InherentThingType_BindGold) return "绑定元宝(暂时没用)";
		        if (enType == EnInherentThingType.InherentThingType_MAX) return "最大ID";
				return "";
	} 

	static public string EnumPrint_EnInjuredReasonType(EnInjuredReasonType enType){
		        if (enType == EnInjuredReasonType.enInjuredReasonType_Min) return "";
		        if (enType == EnInjuredReasonType.enInjuredReasonType_BeAttack) return "被攻击";
		        if (enType == EnInjuredReasonType.enInjuredReasonType_BeAttack_Normal) return "普通攻击";
		        if (enType == EnInjuredReasonType.enInjuredReasonType_BeAttack_Miss) return "失误";
		        if (enType == EnInjuredReasonType.enInjuredReasonType_BeAttack_Crit) return "暴击";
		        if (enType == EnInjuredReasonType.enInjuredReasonType_Max) return "";
				return "";
	} 

	static public string EnumPrint_EnKickReason(EnKickReason enType){
		        if (enType == EnKickReason.enKickReason_Normally) return "业务层正常断开.  具体原因查看业务RSP";
		        if (enType == EnKickReason.enKickReason_RepeatLogin) return "重复登录踢人";
		        if (enType == EnKickReason.enKickReason_GMKick) return "GM踢人";
		        if (enType == EnKickReason.enKickReason_DataInvalid) return "数据非法";
		        if (enType == EnKickReason.enKickReason_ShootLobbyFailed) return "切换大厅服失败";
		        if (enType == EnKickReason.enKickReason_StopServer) return "服务器停机";
		        if (enType == EnKickReason.enKickReason_ReleaseZone) return "战场已关闭";
		        if (enType == EnKickReason.enKickReason_ClientArriveError) return "进入战场出错";
		        if (enType == EnKickReason.enKickReason_PersonDie) return "角色已死亡";
		        if (enType == EnKickReason.enKickReason_AllTeammateDie) return "所有队员已死亡";
		        if (enType == EnKickReason.enKickReason_CantFindZone) return "找不到战场";
		        if (enType == EnKickReason.enKickReason_AbnormalError) return "异常错误";
		        if (enType == EnKickReason.enKickReason_RobotExit) return "机器人退出";
		        if (enType == EnKickReason.enKickReason_LoginError) return "登录出错";
		        if (enType == EnKickReason.enKickReason_VersionDismatch) return "版本号不匹配";
				return "";
	} 

	static public string EnumPrint_EnLogLv(EnLogLv enType){
		        if (enType == EnLogLv.enLogLV_Trace) return "";
		        if (enType == EnLogLv.enLogLV_Warning) return "";
		        if (enType == EnLogLv.enLogLV_Error) return "";
				return "";
	} 

	static public string EnumPrint_EnLoginPartnerID(EnLoginPartnerID enType){
		        if (enType == EnLoginPartnerID.enLoginPartnerID_Invalid) return "无效ID, 无法登陆";
		        if (enType == EnLoginPartnerID.enLoginPartnerID_Visitor) return "游客登录";
		        if (enType == EnLoginPartnerID.enLoginPartnerID_Test) return "测试验证,必定成功";
		        if (enType == EnLoginPartnerID.enLoginPartnerID_Google) return "Google";
		        if (enType == EnLoginPartnerID.enLoginPartnerID_Facebook) return "Facebook";
		        if (enType == EnLoginPartnerID.enLoginPartnerID_WeChat) return "微信";
		        if (enType == EnLoginPartnerID.enLoginPartnerID_Weibo) return "微博";
		        if (enType == EnLoginPartnerID.enLoginPartnerID_CliHardware) return "客户端硬件标识";
		        if (enType == EnLoginPartnerID.enLoginPartnerID_Appel) return "appel";
		        if (enType == EnLoginPartnerID.enLoginPartnerID_Glacier) return "冰川";
				return "";
	} 

	static public string EnumPrint_EnLoginType(EnLoginType enType){
		        if (enType == EnLoginType.enLoginType_Normal) return "普通登录";
		        if (enType == EnLoginType.enLoginType_Auto) return "自动登录";
				return "";
	} 

	static public string EnumPrint_EnLootboxSpendType(EnLootboxSpendType enType){
		        if (enType == EnLootboxSpendType.EnLBSpend_Free) return "免费";
		        if (enType == EnLootboxSpendType.EnLBSpend_Key) return "钥匙";
		        if (enType == EnLootboxSpendType.EnLBSpend_Gold) return "仙玉";
				return "";
	} 

	static public string EnumPrint_EnPlayerType(EnPlayerType enType){
		        if (enType == EnPlayerType.enPT_System) return "系统";
		        if (enType == EnPlayerType.enPT_Player) return "玩家";
		        if (enType == EnPlayerType.enPT_OSS) return "运营系统";
				return "";
	} 

	static public string EnumPrint_EnPropChangeReason(EnPropChangeReason enType){
		        if (enType == EnPropChangeReason.enPCR_Unknown) return "未知";
		        if (enType == EnPropChangeReason.enPCR_Buffer) return "buffer导致";
				return "";
	} 

	static public string EnumPrint_EnPropType(EnPropType enType){
		        if (enType == EnPropType.enPT_Role) return "角色属性";
		        if (enType == EnPropType.enPT_Room) return "房间属性";
				return "";
	} 

	static public string EnumPrint_EnRoleProp(EnRoleProp enType){
		        if (enType == EnRoleProp.ROLE_PROP_MIN) return "最小值, 保留";
		        if (enType == EnRoleProp.ROLE_PROP_SEX) return "性别";
		        if (enType == EnRoleProp.ROLE_PROP_FACEID) return "头像ID";
		        if (enType == EnRoleProp.ROLE_PROP_LEVEL) return "等级";
		        if (enType == EnRoleProp.ROLE_PROP_EXP) return "经验";
		        if (enType == EnRoleProp.ROLE_PROP_PUBLIC) return "人物公有(广播)属性分隔线";
		        if (enType == EnRoleProp.ROLE_PROP_GOLD) return "金币,与充值对接";
		        if (enType == EnRoleProp.ROLE_PROP_BIND_GOLD) return "绑定金币, 与充值对接";
		        if (enType == EnRoleProp.ROLE_PROP_STAMINA) return "体力";
		        if (enType == EnRoleProp.ROLE_PROP_PRIVATE) return "人物私有属性结束线, 下面定义的属性, 都不会发送到客户端";
		        if (enType == EnRoleProp.ROLE_PROP_MAXID) return "最大属性ID";
				return "";
	} 

	static public string EnumPrint_EnRoleProp64(EnRoleProp64 enType){
		        if (enType == EnRoleProp64.ROLE_PROP64_MIN) return "最小值, 保留";
		        if (enType == EnRoleProp64.ROLE_PROP64_PDBID) return "角色数据库ID";
		        if (enType == EnRoleProp64.ROLE_PROP64_GUILDID) return "帮派ID";
		        if (enType == EnRoleProp64.ROLE_PROP64_WORLDID) return "world id";
		        if (enType == EnRoleProp64.ROLE_PROP64_PUBLIC) return "人物公有属性分隔线";
		        if (enType == EnRoleProp64.ROLE_PROP64_UDBID) return "帐号数据库ID";
		        if (enType == EnRoleProp64.ROLE_PROP64_MONEY) return "金钱（灵石）";
		        if (enType == EnRoleProp64.ROLE_PROP64_BIND_MONEY) return "绑定金钱（仙玉）";
		        if (enType == EnRoleProp64.ROLE_PROP64_EXPPOOL) return "经验池";
		        if (enType == EnRoleProp64.ROLE_PROP64_CREATETIME) return "角色创建时间戳";
		        if (enType == EnRoleProp64.ROLE_PROP64_LOADTIME) return "角色加载 (服务器内New) 时间戳 ";
		        if (enType == EnRoleProp64.ROLE_PROP64_EXPECTDELACCOUNT_TIME) return "预计账号删除时间戳，0：无删号请求 ";
		        if (enType == EnRoleProp64.ROLE_PROP64_POWER) return "战斗力（当前）";
		        if (enType == EnRoleProp64.ROLE_PROP64_HISTORY_MAX_POWER) return "历史最高战斗力";
		        if (enType == EnRoleProp64.ROLE_PROP64_PRIVATE) return "人物公有属性分隔线";
		        if (enType == EnRoleProp64.ROLE_PROP64_MAXID) return "最大属性64 ID";
				return "";
	} 

	static public string EnumPrint_EnShopConditionType(EnShopConditionType enType){
		        if (enType == EnShopConditionType.EnShopConditionType_None) return "默认，不处理";
		        if (enType == EnShopConditionType.EnShopConditionType_SectLevel) return "宗门等级";
		        if (enType == EnShopConditionType.EnShopConditionType_MAX) return "最大值";
				return "";
	} 

	static public string EnumPrint_EnSkepType(EnSkepType enType){
		        if (enType == EnSkepType.enSkepType_Min) return "";
		        if (enType == EnSkepType.enSkepType_Packet) return "角色背包";
		        if (enType == EnSkepType.enSkepType_Max) return "";
				return "";
	} 

	static public string EnumPrint_EnTechniqueElement(EnTechniqueElement enType){
		        if (enType == EnTechniqueElement.TechniqueElement_None) return "默认，不处理";
		        if (enType == EnTechniqueElement.TechniqueElement_Glod) return "金属性";
		        if (enType == EnTechniqueElement.TechniqueElement_Wood) return "木属性";
		        if (enType == EnTechniqueElement.TechniqueElement_Water) return "水属性";
		        if (enType == EnTechniqueElement.TechniqueElement_Fire) return "火属性";
		        if (enType == EnTechniqueElement.TechniqueElement_Earth) return "土属性";
		        if (enType == EnTechniqueElement.TechniqueElement_Thunder) return "雷属性";
		        if (enType == EnTechniqueElement.TechniqueElement_MAX) return "最大值";
				return "";
	} 

	static public string EnumPrint_EnWEquipUpdateScenario(EnWEquipUpdateScenario enType){
		        if (enType == EnWEquipUpdateScenario.WEQUIP_UPDATE_SCENARIO_NONE) return "默认，不处理";
		        if (enType == EnWEquipUpdateScenario.WEQUIP_UPDATE_SCENARIO_REPLACE) return "摆放装备时替换";
		        if (enType == EnWEquipUpdateScenario.WEQUIP_UPDATE_SCENARIO_SHOP) return "商店";
				return "";
	} 

	static public string EnumPrint_EnWanderingEvent(EnWanderingEvent enType){
		        if (enType == EnWanderingEvent.enWanderingEvent_None) return "";
		        if (enType == EnWanderingEvent.enWanderingEvent_RoundOver) return "回合结束事件";
		        if (enType == EnWanderingEvent.enWanderingEvent_Order) return "顺序事件";
		        if (enType == EnWanderingEvent.enWanderingEvent_Random) return "随机事件";
		        if (enType == EnWanderingEvent.enWanderingEvent_Choose) return "选择事件";
		        if (enType == EnWanderingEvent.enWanderingEvent_Battle) return "战斗事件";
		        if (enType == EnWanderingEvent.enWanderingEvent_Level) return "阶段事件";
		        if (enType == EnWanderingEvent.enWanderingEvent_FortuneWheel) return "转盘事件";
		        if (enType == EnWanderingEvent.enWanderingEvent_AbilityChoose) return "词条选择事件";
		        if (enType == EnWanderingEvent.enWanderingEvent_EquipChoose) return "装备选择事件";
		        if (enType == EnWanderingEvent.enWanderingEvent_AttributeJudge) return "属性判断事件";
		        if (enType == EnWanderingEvent.enWanderingEvent_EquipShop) return "装备商店事件";
		        if (enType == EnWanderingEvent.enWanderingEvent_Max) return "";
				return "";
	} 

	static public string EnumPrint_EnWanderingEventActionType(EnWanderingEventActionType enType){
		        if (enType == EnWanderingEventActionType.enWanderingEventActionType_None) return "";
		        if (enType == EnWanderingEventActionType.enWanderingEventActionType_AddEvent) return "添加事件";
		        if (enType == EnWanderingEventActionType.enWanderingEventActionType_RoleReward) return "局外奖励";
		        if (enType == EnWanderingEventActionType.enWanderingEventActionType_DiscipleReward) return "局内奖励";
		        if (enType == EnWanderingEventActionType.enWanderingEventActionType_Death) return "弟子死亡";
		        if (enType == EnWanderingEventActionType.enWanderingEventActionType_BattleDrop) return "战斗掉落";
		        if (enType == EnWanderingEventActionType.enWanderingEventActionType_BagExpansion) return "背包扩容";
		        if (enType == EnWanderingEventActionType.enWanderingEventActionType_OpenEquipBag) return "打开装备背包";
		        if (enType == EnWanderingEventActionType.enWanderingEventActionType_RestoreHealth) return "恢复血量";
		        if (enType == EnWanderingEventActionType.enWanderingEventActionType_Max) return "";
				return "";
	} 

	static public string EnumPrint_EnWeaponForm(EnWeaponForm enType){
		        if (enType == EnWeaponForm.WeaponForm_None) return "默认，不处理";
		        if (enType == EnWeaponForm.WeaponForm_Soldier) return "兵";
		        if (enType == EnWeaponForm.WeaponForm_Sword) return "剑";
		        if (enType == EnWeaponForm.WeaponForm_Melody) return "乐";
		        if (enType == EnWeaponForm.WeaponForm_Anomaly) return "异";
		        if (enType == EnWeaponForm.WeaponForm_Command) return "御";
		        if (enType == EnWeaponForm.WeaponForm_MAX) return "最大值";
				return "";
	} 

	}   // EnumPrint



// 空结构, 有些消息不需要带现场, 可以统一指向这个结构
public class TNullStruct
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 消息包头
public class TMsgHead
{
	private uint[] __orm_has_bits = new uint[1];
	private uint iMsgID;   //消息id
	private int iSyncFlag;   //同步标记


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iMsgID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iMsgID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iMsgID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iMsgID(uint _iMsgID){set_has_iMsgID(); iMsgID=_iMsgID;}
	public uint get_iMsgID(){if (has_iMsgID()) {return iMsgID;} return 0;}

	public bool has_iSyncFlag() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iSyncFlag() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iSyncFlag() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iSyncFlag(int _iSyncFlag){set_has_iSyncFlag(); iSyncFlag=_iSyncFlag;}
	public int get_iSyncFlag(){if (has_iSyncFlag()) {return iSyncFlag;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMsgID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(iMsgID);
		};
		if (has_iSyncFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iSyncFlag);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMsgID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(iMsgID);
		};
		if (has_iSyncFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iSyncFlag);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_iMsgID();
				iMsgID = oPacker.ReadVarintUINT32();
			}break;
			case 12: {
				set_has_iSyncFlag();
				iSyncFlag = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端登陆大厅额外数据
public class TLoginExtraContext
{
	private uint[] __orm_has_bits = new uint[1];
	private byte bWillBeDelete;   //这个是旧结构, 稍后可能被删除
	private byte byLanguage;   //语言
	private string szAdid;   //客户端标记
	private string szVerifyCode;   //验证码，用于维护时GM进入游戏
	private string szMacAddr;   //网卡地址
	private string szVersion;   //版本号


	public const int MAX_PACKEDSIZE = 294;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_bWillBeDelete() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_bWillBeDelete() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_bWillBeDelete() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_bWillBeDelete(byte _bWillBeDelete){set_has_bWillBeDelete(); bWillBeDelete=_bWillBeDelete;}
	public byte get_bWillBeDelete(){if (has_bWillBeDelete()) {return bWillBeDelete;} return 0;}

	public bool has_byLanguage() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_byLanguage() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_byLanguage() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_byLanguage(byte _byLanguage){set_has_byLanguage(); byLanguage=_byLanguage;}
	public byte get_byLanguage(){if (has_byLanguage()) {return byLanguage;} return 0;}

	public bool has_szAdid() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_szAdid() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_szAdid() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_szAdid(string _szAdid){set_has_szAdid(); szAdid=_szAdid;}
	public string get_szAdid(){if (has_szAdid()) {return szAdid;} return "";}

	public bool has_szVerifyCode() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_szVerifyCode() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_szVerifyCode() {__orm_has_bits[0] &= ~(0x2000u);}
	public void set_szVerifyCode(string _szVerifyCode){set_has_szVerifyCode(); szVerifyCode=_szVerifyCode;}
	public string get_szVerifyCode(){if (has_szVerifyCode()) {return szVerifyCode;} return "";}

	public bool has_szMacAddr() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_szMacAddr() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_szMacAddr() {__orm_has_bits[0] &= ~(0x4000u);}
	public void set_szMacAddr(string _szMacAddr){set_has_szMacAddr(); szMacAddr=_szMacAddr;}
	public string get_szMacAddr(){if (has_szMacAddr()) {return szMacAddr;} return "";}

	public bool has_szVersion() {return (__orm_has_bits[0] & 0x10000u) != 0;}
	public void set_has_szVersion() {__orm_has_bits[0] |= 0x10000u;}
	public void clear_has_szVersion() {__orm_has_bits[0] &= ~(0x10000u);}
	public void set_szVersion(string _szVersion){set_has_szVersion(); szVersion=_szVersion;}
	public string get_szVersion(){if (has_szVersion()) {return szVersion;} return "1.0.2";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bWillBeDelete()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(bWillBeDelete);
		};
		if (has_byLanguage()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,2));  // f id
			oPacker.WriteUINT8(byLanguage);
		};
		if (has_szAdid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,3));  // f id
			oPacker.WriteSTRING(szAdid);
		};
		if (has_szVerifyCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,3));  // f id
			oPacker.WriteSTRING(szVerifyCode);
		};
		if (has_szMacAddr()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,3));  // f id
			oPacker.WriteSTRING(szMacAddr);
		};
		if (has_szVersion()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,3));  // f id
			oPacker.WriteSTRING(szVersion);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bWillBeDelete()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(bWillBeDelete);
		};
		if (has_byLanguage()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,2));  // f id
			oPacker.WriteUINT8(byLanguage);
		};
		if (has_szAdid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,3));  // f id
			oPacker.WriteSTRING(szAdid);
		};
		if (has_szVerifyCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,3));  // f id
			oPacker.WriteSTRING(szVerifyCode);
		};
		if (has_szMacAddr()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,3));  // f id
			oPacker.WriteSTRING(szMacAddr);
		};
		if (has_szVersion()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,3));  // f id
			oPacker.WriteSTRING(szVersion);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_bWillBeDelete();
				bWillBeDelete = oPacker.ReadUINT8();
			}break;
			case 11: {
				set_has_byLanguage();
				byLanguage = oPacker.ReadUINT8();
			}break;
			case 12: {
				set_has_szAdid();
				szAdid = oPacker.ReadSTRING();
			}break;
			case 13: {
				set_has_szVerifyCode();
				szVerifyCode = oPacker.ReadSTRING();
			}break;
			case 14: {
				set_has_szMacAddr();
				szMacAddr = oPacker.ReadSTRING();
			}break;
			case 16: {
				set_has_szVersion();
				szVersion = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 32位key val
public class TK32V32
{
	private uint[] __orm_has_bits = new uint[1];
	private int iKey;   //属性id
	private int iVal;   //属性值


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iKey() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iKey() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iKey() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iKey(int _iKey){set_has_iKey(); iKey=_iKey;}
	public int get_iKey(){if (has_iKey()) {return iKey;} return 0;}

	public bool has_iVal() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iVal() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iVal() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iVal(int _iVal){set_has_iVal(); iVal=_iVal;}
	public int get_iVal(){if (has_iVal()) {return iVal;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iKey);
		};
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iVal);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iKey);
		};
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iVal);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iKey();
				iKey = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iVal();
				iVal = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// key val
public class TK32V64
{
	private uint[] __orm_has_bits = new uint[1];
	private int iKey;   //属性id
	private long iVal;   //属性值


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iKey() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iKey() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iKey() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iKey(int _iKey){set_has_iKey(); iKey=_iKey;}
	public int get_iKey(){if (has_iKey()) {return iKey;} return 0;}

	public bool has_iVal() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iVal() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iVal() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iVal(long _iVal){set_has_iVal(); iVal=_iVal;}
	public long get_iVal(){if (has_iVal()) {return iVal;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iKey);
		};
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iVal);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iKey);
		};
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iVal);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iKey();
				iKey = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iVal();
				iVal = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// key val
public class TK64V32
{
	private uint[] __orm_has_bits = new uint[1];
	private long iKey;   //属性id
	private int iVal;   //属性值


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iKey() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iKey() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iKey() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iKey(long _iKey){set_has_iKey(); iKey=_iKey;}
	public long get_iKey(){if (has_iKey()) {return iKey;} return 0;}

	public bool has_iVal() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iVal() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iVal() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iVal(int _iVal){set_has_iVal(); iVal=_iVal;}
	public int get_iVal(){if (has_iVal()) {return iVal;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iKey);
		};
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iVal);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iKey);
		};
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iVal);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iKey();
				iKey = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iVal();
				iVal = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TAutoLoginSession
{
	private uint[] __orm_has_bits = new uint[1];
	private short iLen;   //
	private sbyte[] arrData = new sbyte[(int)TCONST.ORM_ALS_TOKEN_LEN];   //
	private string strToken;   //

	public const int countof_arrData = (int)TCONST.ORM_ALS_TOKEN_LEN;

	public const int MAX_PACKEDSIZE = 1126;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iLen() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLen() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLen() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLen(short _iLen){set_has_iLen(); iLen=_iLen;}
	public short get_iLen(){if (has_iLen()) {return iLen;} return 0;}

	public bool has_arrData() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrData() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrData() {__orm_has_bits[0] &= ~(0x20u);}
	public sbyte[] set_arrData(){set_has_arrData(); return arrData;}
	public sbyte[] get_arrData(){return arrData;}

	public bool has_strToken() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_strToken() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_strToken() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_strToken(string _strToken){set_has_strToken(); strToken=_strToken;}
	public string get_strToken(){if (has_strToken()) {return strToken;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT16(iLen);
		};
		if (has_arrData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)TCONST.ORM_ALS_TOKEN_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_ALS_TOKEN_LEN) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
		    oPacker.WriteINT8(arrData[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_strToken()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(strToken);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT16(iLen);
		};
		if (has_arrData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)TCONST.ORM_ALS_TOKEN_LEN) {
				oPacker.PushFieldName("iLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_ALS_TOKEN_LEN) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
		    oPacker.WriteINT8(arrData[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_strToken()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(strToken);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLen();
				iLen = oPacker.ReadVarintINT16();
			}break;
			case 5: {
				set_has_arrData();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iLen=iLen<__orm_iArrCount ? iLen:(short)__orm_iArrCount;
				iLen=iLen<(short)TCONST.ORM_ALS_TOKEN_LEN ? iLen:(short)TCONST.ORM_ALS_TOKEN_LEN;
				if (iLen > (int)TCONST.ORM_ALS_TOKEN_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iLen; ++__orm_iLoopVar) {
					arrData[__orm_iLoopVar] = oPacker.ReadINT8();
				};
			}break;
			case 6: {
				set_has_strToken();
				strToken = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TVector3
{
	private uint[] __orm_has_bits = new uint[1];
	private float x;   //
	private float y;   //
	private float z;   //


	public const int MAX_PACKEDSIZE = 35;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_x() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_x() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_x() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_x(float _x){set_has_x(); x=_x;}
	public float get_x(){if (has_x()) {return x;} return 0;}

	public bool has_y() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_y() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_y() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_y(float _y){set_has_y(); y=_y;}
	public float get_y(){if (has_y()) {return y;} return 0;}

	public bool has_z() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_z() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_z() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_z(float _z){set_has_z(); z=_z;}
	public float get_z(){if (has_z()) {return z;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_x()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteFLOAT(x);
		};
		if (has_y()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteFLOAT(y);
		};
		if (has_z()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteFLOAT(z);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_x()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteFLOAT(x);
		};
		if (has_y()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteFLOAT(y);
		};
		if (has_z()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteFLOAT(z);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_x();
				x = oPacker.ReadFLOAT();
			}break;
			case 2: {
				set_has_y();
				y = oPacker.ReadFLOAT();
			}break;
			case 3: {
				set_has_z();
				z = oPacker.ReadFLOAT();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// kv列表
public class TKVList
{
	private uint[] __orm_has_bits = new uint[1];
	private int iCount;   //数量
	private TK32V32[] arrKV = new TK32V32[(int)32];   //kv数组
	public TKVList() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)32; ++__orm_iLoopVar) {
			arrKV[__orm_iLoopVar] = new TK32V32();
		}
	}

	public const int countof_arrKV = (int)32;

	public const int MAX_PACKEDSIZE = 829;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)32; ++__orm_iLoopVar){arrKV[__orm_iLoopVar].init();}
	}
	public bool has_iCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iCount(int _iCount){set_has_iCount(); iCount=_iCount;}
	public int get_iCount(){if (has_iCount()) {return iCount;} return 0;}

	public bool has_arrKV() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrKV() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrKV() {__orm_has_bits[0] &= ~(0x4u);}
	public TK32V32[] set_arrKV(){set_has_arrKV(); return arrKV;}
	public TK32V32[] get_arrKV(){return arrKV;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrKV()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				arrKV[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrKV()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)32) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrKV[{0}]", __orm_iLoopVar);
				arrKV[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iCount();
				iCount = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrKV();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(int)__orm_iArrCount;
				iCount=iCount<(int)32 ? iCount:(int)32;
				if (iCount > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrKV[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// kv属性块
public class TKVBlock
{
	private uint[] __orm_has_bits = new uint[1];
	private int iId;   //id
	private TKVList stList = new TKVList();   //一个kv列表


	public const int MAX_PACKEDSIZE = 853;

	public void init() {
		__orm_has_bits[0]=0;
		stList.init();
	}
	public bool has_iId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iId(int _iId){set_has_iId(); iId=_iId;}
	public int get_iId(){if (has_iId()) {return iId;} return 0;}

	public bool has_stList() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stList() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stList() {__orm_has_bits[0] &= ~(0x4u);}
	public TKVList set_stList(){set_has_stList(); return stList;}
	public TKVList get_stList(){return stList;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iId);
		};
		if (has_stList()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stList.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iId);
		};
		if (has_stList()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stList");
			stList.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iId();
				iId = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_stList();
				stList.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端自主存储管理的数据
public class TClientFreeData
{
	private uint[] __orm_has_bits = new uint[1];
	private uint iVer;   //版本号
	private uint iDataCount0;   //数据长度0
	private int[] arrData0 = new int[(int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT];   //整形数据

	public const int countof_arrData0 = (int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT;

	public const int MAX_PACKEDSIZE = 359;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iVer() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iVer() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iVer() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iVer(uint _iVer){set_has_iVer(); iVer=_iVer;}
	public uint get_iVer(){if (has_iVer()) {return iVer;} return 0;}

	public bool has_iDataCount0() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iDataCount0() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iDataCount0() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iDataCount0(uint _iDataCount0){set_has_iDataCount0(); iDataCount0=_iDataCount0;}
	public uint get_iDataCount0(){if (has_iDataCount0()) {return iDataCount0;} return 0;}

	public bool has_arrData0() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrData0() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrData0() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrData0(){set_has_arrData0(); return arrData0;}
	public int[] get_arrData0(){return arrData0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(iVer);
		};
		if (has_iDataCount0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintUINT32(iDataCount0);
		};
		if (has_arrData0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDataCount0();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT) && (__orm_iLoopVar < iDataCount0); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrData0[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(iVer);
		};
		if (has_iDataCount0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintUINT32(iDataCount0);
		};
		if (has_arrData0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDataCount0();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT) {
				oPacker.PushFieldName("iDataCount0={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT) && (__orm_iLoopVar < iDataCount0); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrData0[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iVer();
				iVer = oPacker.ReadVarintUINT32();
			}break;
			case 2: {
				set_has_iDataCount0();
				iDataCount0 = oPacker.ReadVarintUINT32();
			}break;
			case 3: {
				set_has_arrData0();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iDataCount0=iDataCount0<__orm_iArrCount ? iDataCount0:(uint)__orm_iArrCount;
				iDataCount0=iDataCount0<(uint)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT ? iDataCount0:(uint)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT;
				if (iDataCount0 > (int)TCONST.ORM_MAX_CLIENT_FREE_DATA0_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iDataCount0; ++__orm_iLoopVar) {
					arrData0[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 握手请求
public class TMSG_LOGIN_HANDSHAKE_REQ
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 握手回复
public class TMSG_LOGIN_HANDSHAKE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private uint u32ErrCode;   //错误码


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_u32ErrCode() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_u32ErrCode() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_u32ErrCode() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_u32ErrCode(uint _u32ErrCode){set_has_u32ErrCode(); u32ErrCode=_u32ErrCode;}
	public uint get_u32ErrCode(){if (has_u32ErrCode()) {return u32ErrCode;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_u32ErrCode();
				u32ErrCode = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 登陆错误通知
public class TMSG_LOGIN_ERROR_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int nError;   //错误码


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_nError() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_nError() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_nError() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_nError(int _nError){set_has_nError(); nError=_nError;}
	public int get_nError(){if (has_nError()) {return nError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_nError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(nError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_nError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(nError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 12: {
				set_has_nError();
				nError = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 登录数据
public class TLoginBaseData
{
	private uint[] __orm_has_bits = new uint[1];
	private long i64World;   //登陆的游戏区
	private string szUserName;   //用户帐号
	private string szPassword;   //用户密码
	private int nPartnerID;   //取值参考 EnLoginPartnerID
	private string szSession;   //通行证登录返回的session


	public const int MAX_PACKEDSIZE = 2429;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_i64World() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_i64World() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_i64World() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_i64World(long _i64World){set_has_i64World(); i64World=_i64World;}
	public long get_i64World(){if (has_i64World()) {return i64World;} return 0;}

	public bool has_szUserName() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_szUserName() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_szUserName() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_szUserName(string _szUserName){set_has_szUserName(); szUserName=_szUserName;}
	public string get_szUserName(){if (has_szUserName()) {return szUserName;} return "";}

	public bool has_szPassword() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_szPassword() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_szPassword() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_szPassword(string _szPassword){set_has_szPassword(); szPassword=_szPassword;}
	public string get_szPassword(){if (has_szPassword()) {return szPassword;} return "";}

	public bool has_nPartnerID() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_nPartnerID() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_nPartnerID() {__orm_has_bits[0] &= ~(0x2000u);}
	public void set_nPartnerID(int _nPartnerID){set_has_nPartnerID(); nPartnerID=_nPartnerID;}
	public int get_nPartnerID(){if (has_nPartnerID()) {return nPartnerID;} return 0;}

	public bool has_szSession() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_szSession() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_szSession() {__orm_has_bits[0] &= ~(0x4000u);}
	public void set_szSession(string _szSession){set_has_szSession(); szSession=_szSession;}
	public string get_szSession(){if (has_szSession()) {return szSession;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64World()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(i64World);
		};
		if (has_szUserName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,3));  // f id
			oPacker.WriteSTRING(szUserName);
		};
		if (has_szPassword()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,3));  // f id
			oPacker.WriteSTRING(szPassword);
		};
		if (has_nPartnerID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(nPartnerID);
		};
		if (has_szSession()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,3));  // f id
			oPacker.WriteSTRING(szSession);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64World()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(i64World);
		};
		if (has_szUserName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,3));  // f id
			oPacker.WriteSTRING(szUserName);
		};
		if (has_szPassword()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,3));  // f id
			oPacker.WriteSTRING(szPassword);
		};
		if (has_nPartnerID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(nPartnerID);
		};
		if (has_szSession()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,3));  // f id
			oPacker.WriteSTRING(szSession);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 5: {
				set_has_i64World();
				i64World = oPacker.ReadVarintINT64();
			}break;
			case 11: {
				set_has_szUserName();
				szUserName = oPacker.ReadSTRING();
			}break;
			case 12: {
				set_has_szPassword();
				szPassword = oPacker.ReadSTRING();
			}break;
			case 13: {
				set_has_nPartnerID();
				nPartnerID = oPacker.ReadVarintINT32();
			}break;
			case 14: {
				set_has_szSession();
				szSession = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端登录请求
public class TMSG_LOGIN_LOGIN_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private string szClientKey;   //客户端标识, 取自硬件,可以是手机名称等不常变的内容.
	private TLoginBaseData stBaseData = new TLoginBaseData();   //客户端版本号
	private TLoginExtraContext stLoginExContext = new TLoginExtraContext();   //登陆大厅额外数据


	public const int MAX_PACKEDSIZE = 2884;

	public void init() {
		__orm_has_bits[0]=0;
		stBaseData.init();
		stLoginExContext.init();
	}
	public bool has_szClientKey() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_szClientKey() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_szClientKey() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_szClientKey(string _szClientKey){set_has_szClientKey(); szClientKey=_szClientKey;}
	public string get_szClientKey(){if (has_szClientKey()) {return szClientKey;} return "";}

	public bool has_stBaseData() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_stBaseData() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_stBaseData() {__orm_has_bits[0] &= ~(0x800u);}
	public TLoginBaseData set_stBaseData(){set_has_stBaseData(); return stBaseData;}
	public TLoginBaseData get_stBaseData(){return stBaseData;}

	public bool has_stLoginExContext() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_stLoginExContext() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_stLoginExContext() {__orm_has_bits[0] &= ~(0x1000u);}
	public TLoginExtraContext set_stLoginExContext(){set_has_stLoginExContext(); return stLoginExContext;}
	public TLoginExtraContext get_stLoginExContext(){return stLoginExContext;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szClientKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,3));  // f id
			oPacker.WriteSTRING(szClientKey);
		};
		if (has_stBaseData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stBaseData.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stLoginExContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stLoginExContext.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szClientKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,3));  // f id
			oPacker.WriteSTRING(szClientKey);
		};
		if (has_stBaseData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stBaseData");
			stBaseData.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stLoginExContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stLoginExContext");
			stLoginExContext.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 5: {
				set_has_szClientKey();
				szClientKey = oPacker.ReadSTRING();
			}break;
			case 11: {
				set_has_stBaseData();
				stBaseData.Unpack(oPacker);
			}break;
			case 12: {
				set_has_stLoginExContext();
				stLoginExContext.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端登录回复
public class TMSG_LOGIN_LOGIN_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private uint u32ErrCode;   //错误码
	private uint u32AllowTime;   //允许登录时间
	private uint u32CurTime;   //服务器当前时间戳


	public const int MAX_PACKEDSIZE = 35;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_u32ErrCode() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_u32ErrCode() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_u32ErrCode() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_u32ErrCode(uint _u32ErrCode){set_has_u32ErrCode(); u32ErrCode=_u32ErrCode;}
	public uint get_u32ErrCode(){if (has_u32ErrCode()) {return u32ErrCode;} return 0;}

	public bool has_u32AllowTime() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_u32AllowTime() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_u32AllowTime() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_u32AllowTime(uint _u32AllowTime){set_has_u32AllowTime(); u32AllowTime=_u32AllowTime;}
	public uint get_u32AllowTime(){if (has_u32AllowTime()) {return u32AllowTime;} return 0;}

	public bool has_u32CurTime() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_u32CurTime() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_u32CurTime() {__orm_has_bits[0] &= ~(0x2000u);}
	public void set_u32CurTime(uint _u32CurTime){set_has_u32CurTime(); u32CurTime=_u32CurTime;}
	public uint get_u32CurTime(){if (has_u32CurTime()) {return u32CurTime;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
		if (has_u32AllowTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(u32AllowTime);
		};
		if (has_u32CurTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintUINT32(u32CurTime);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
		if (has_u32AllowTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(u32AllowTime);
		};
		if (has_u32CurTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintUINT32(u32CurTime);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_u32ErrCode();
				u32ErrCode = oPacker.ReadVarintUINT32();
			}break;
			case 12: {
				set_has_u32AllowTime();
				u32AllowTime = oPacker.ReadVarintUINT32();
			}break;
			case 13: {
				set_has_u32CurTime();
				u32CurTime = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
//  CLIENT -> LOGIN MSG_LOGIN_AUTO_LOGIN_REQ  发送自动登录消息
public class TMSG_LOGIN_AUTO_LOGIN_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private TAutoLoginSession stALSess = new TAutoLoginSession();   //
	private TLoginExtraContext stLoginExContext = new TLoginExtraContext();   //客户端登陆大厅额外数据
	private string szClientKey;   //客户端标识, 取自硬件,可以是手机名称等不常变的内容.


	public const int MAX_PACKEDSIZE = 1581;

	public void init() {
		__orm_has_bits[0]=0;
		stALSess.init();
		stLoginExContext.init();
	}
	public bool has_stALSess() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_stALSess() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_stALSess() {__orm_has_bits[0] &= ~(0x2u);}
	public TAutoLoginSession set_stALSess(){set_has_stALSess(); return stALSess;}
	public TAutoLoginSession get_stALSess(){return stALSess;}

	public bool has_stLoginExContext() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stLoginExContext() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stLoginExContext() {__orm_has_bits[0] &= ~(0x4u);}
	public TLoginExtraContext set_stLoginExContext(){set_has_stLoginExContext(); return stLoginExContext;}
	public TLoginExtraContext get_stLoginExContext(){return stLoginExContext;}

	public bool has_szClientKey() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_szClientKey() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_szClientKey() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_szClientKey(string _szClientKey){set_has_szClientKey(); szClientKey=_szClientKey;}
	public string get_szClientKey(){if (has_szClientKey()) {return szClientKey;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stALSess()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stALSess.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stLoginExContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stLoginExContext.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szClientKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,3));  // f id
			oPacker.WriteSTRING(szClientKey);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stALSess()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stALSess");
			stALSess.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stLoginExContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stLoginExContext");
			stLoginExContext.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szClientKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,3));  // f id
			oPacker.WriteSTRING(szClientKey);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_stALSess();
				stALSess.Unpack(oPacker);
			}break;
			case 2: {
				set_has_stLoginExContext();
				stLoginExContext.Unpack(oPacker);
			}break;
			case 5: {
				set_has_szClientKey();
				szClientKey = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
//  LOBBY -> CLIENT MSG_LOGIN_UPDATE_ALSESSION_NTF  更新自动登陆Session
public class TMSG_LOGIN_UPDATE_ALSESSION_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private TAutoLoginSession stALSess = new TAutoLoginSession();   //
	private long i64WorldID;   //游戏世界id
	private string szParName;   //指定partnerID下对应的帐号名
	private int nPartnerID;   //取值参考 EnLoginPartnerID


	public const int MAX_PACKEDSIZE = 1431;

	public void init() {
		__orm_has_bits[0]=0;
		stALSess.init();
	}
	public bool has_stALSess() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_stALSess() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_stALSess() {__orm_has_bits[0] &= ~(0x2u);}
	public TAutoLoginSession set_stALSess(){set_has_stALSess(); return stALSess;}
	public TAutoLoginSession get_stALSess(){return stALSess;}

	public bool has_i64WorldID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_i64WorldID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_i64WorldID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_i64WorldID(long _i64WorldID){set_has_i64WorldID(); i64WorldID=_i64WorldID;}
	public long get_i64WorldID(){if (has_i64WorldID()) {return i64WorldID;} return 0;}

	public bool has_szParName() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_szParName() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_szParName() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_szParName(string _szParName){set_has_szParName(); szParName=_szParName;}
	public string get_szParName(){if (has_szParName()) {return szParName;} return "";}

	public bool has_nPartnerID() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_nPartnerID() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_nPartnerID() {__orm_has_bits[0] &= ~(0x2000u);}
	public void set_nPartnerID(int _nPartnerID){set_has_nPartnerID(); nPartnerID=_nPartnerID;}
	public int get_nPartnerID(){if (has_nPartnerID()) {return nPartnerID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stALSess()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stALSess.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64WorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64WorldID);
		};
		if (has_szParName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,3));  // f id
			oPacker.WriteSTRING(szParName);
		};
		if (has_nPartnerID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(nPartnerID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stALSess()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stALSess");
			stALSess.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64WorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64WorldID);
		};
		if (has_szParName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,3));  // f id
			oPacker.WriteSTRING(szParName);
		};
		if (has_nPartnerID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(nPartnerID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_stALSess();
				stALSess.Unpack(oPacker);
			}break;
			case 4: {
				set_has_i64WorldID();
				i64WorldID = oPacker.ReadVarintINT64();
			}break;
			case 11: {
				set_has_szParName();
				szParName = oPacker.ReadSTRING();
			}break;
			case 13: {
				set_has_nPartnerID();
				nPartnerID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
//  被踢通知 即将删除,  不再使用
public class TMSG_LOGIN_KICKOUT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int kickReason;   //踢人原因参考  


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_kickReason() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_kickReason() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_kickReason() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_kickReason(int _kickReason){set_has_kickReason(); kickReason=_kickReason;}
	public int get_kickReason(){if (has_kickReason()) {return kickReason;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_kickReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(kickReason);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_kickReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(kickReason);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_kickReason();
				kickReason = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
//  新账号通知
public class TMSG_LOGIN_NEW_ACCOUNT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int nPartnerID;   //取值参考 EnLoginPartnerID
	private string szAccountName;   //账号名
	private string szPassword;   //用户密码


	public const int MAX_PACKEDSIZE = 356;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_nPartnerID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_nPartnerID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_nPartnerID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_nPartnerID(int _nPartnerID){set_has_nPartnerID(); nPartnerID=_nPartnerID;}
	public int get_nPartnerID(){if (has_nPartnerID()) {return nPartnerID;} return 0;}

	public bool has_szAccountName() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_szAccountName() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_szAccountName() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_szAccountName(string _szAccountName){set_has_szAccountName(); szAccountName=_szAccountName;}
	public string get_szAccountName(){if (has_szAccountName()) {return szAccountName;} return "";}

	public bool has_szPassword() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_szPassword() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_szPassword() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_szPassword(string _szPassword){set_has_szPassword(); szPassword=_szPassword;}
	public string get_szPassword(){if (has_szPassword()) {return szPassword;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_nPartnerID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(nPartnerID);
		};
		if (has_szAccountName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szAccountName);
		};
		if (has_szPassword()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,3));  // f id
			oPacker.WriteSTRING(szPassword);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_nPartnerID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(nPartnerID);
		};
		if (has_szAccountName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szAccountName);
		};
		if (has_szPassword()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,3));  // f id
			oPacker.WriteSTRING(szPassword);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_nPartnerID();
				nPartnerID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_szAccountName();
				szAccountName = oPacker.ReadSTRING();
			}break;
			case 5: {
				set_has_szPassword();
				szPassword = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 封号通知
public class TMSG_LOGIN_BAN_ACCOUNT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private uint u32BanType;   //封号类型
	private uint u32EndTime;   //封号结束时间


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_u32BanType() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_u32BanType() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_u32BanType() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_u32BanType(uint _u32BanType){set_has_u32BanType(); u32BanType=_u32BanType;}
	public uint get_u32BanType(){if (has_u32BanType()) {return u32BanType;} return 0;}

	public bool has_u32EndTime() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_u32EndTime() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_u32EndTime() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_u32EndTime(uint _u32EndTime){set_has_u32EndTime(); u32EndTime=_u32EndTime;}
	public uint get_u32EndTime(){if (has_u32EndTime()) {return u32EndTime;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32BanType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(u32BanType);
		};
		if (has_u32EndTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(u32EndTime);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32BanType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(u32BanType);
		};
		if (has_u32EndTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(u32EndTime);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_u32BanType();
				u32BanType = oPacker.ReadVarintUINT32();
			}break;
			case 12: {
				set_has_u32EndTime();
				u32EndTime = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 大厅服错误通知. 例如登陆错误
public class TMSG_LOBBY_ERROR_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private uint dwError;   //错误码


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_dwError() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_dwError() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_dwError() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_dwError(uint _dwError){set_has_dwError(); dwError=_dwError;}
	public uint get_dwError(){if (has_dwError()) {return dwError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_dwError();
				dwError = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 全服查询角色
public class TMSG_LOGIN_QUERY_ALL_ROLE_REQ
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 全服查询角色
public class TMSG_LOGIN_QUERY_ALL_ROLE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //操作结果


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 角色位置
public class TRoleLocaction
{
	private uint[] __orm_has_bits = new uint[1];
	private long i64WorldID;   //游戏世界id
	private long i64RoleID;   //角色id
	private long i64CreateTime;   //创角时间


	public const int MAX_PACKEDSIZE = 50;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_i64WorldID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_i64WorldID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_i64WorldID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_i64WorldID(long _i64WorldID){set_has_i64WorldID(); i64WorldID=_i64WorldID;}
	public long get_i64WorldID(){if (has_i64WorldID()) {return i64WorldID;} return 0;}

	public bool has_i64RoleID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_i64RoleID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_i64RoleID() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_i64RoleID(long _i64RoleID){set_has_i64RoleID(); i64RoleID=_i64RoleID;}
	public long get_i64RoleID(){if (has_i64RoleID()) {return i64RoleID;} return 0;}

	public bool has_i64CreateTime() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_i64CreateTime() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_i64CreateTime() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_i64CreateTime(long _i64CreateTime){set_has_i64CreateTime(); i64CreateTime=_i64CreateTime;}
	public long get_i64CreateTime(){if (has_i64CreateTime()) {return i64CreateTime;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64WorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64WorldID);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_i64CreateTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT64(i64CreateTime);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64WorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64WorldID);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_i64CreateTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT64(i64CreateTime);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_i64WorldID();
				i64WorldID = oPacker.ReadVarintINT64();
			}break;
			case 5: {
				set_has_i64RoleID();
				i64RoleID = oPacker.ReadVarintINT64();
			}break;
			case 7: {
				set_has_i64CreateTime();
				i64CreateTime = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 全服查询角色
public class TMSG_LOGIN_QUERY_ALL_ROLE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iNum;   //角色数量
	private TRoleLocaction[] arrRole = new TRoleLocaction[(int)16];   //角色数量
	public TMSG_LOGIN_QUERY_ALL_ROLE_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)16; ++__orm_iLoopVar) {
			arrRole[__orm_iLoopVar] = new TRoleLocaction();
		}
	}

	public const int countof_arrRole = (int)16;

	public const int MAX_PACKEDSIZE = 829;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)16; ++__orm_iLoopVar){arrRole[__orm_iLoopVar].init();}
	}
	public bool has_iNum() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iNum() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iNum() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iNum(int _iNum){set_has_iNum(); iNum=_iNum;}
	public int get_iNum(){if (has_iNum()) {return iNum;} return 0;}

	public bool has_arrRole() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrRole() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrRole() {__orm_has_bits[0] &= ~(0x10u);}
	public TRoleLocaction[] set_arrRole(){set_has_arrRole(); return arrRole;}
	public TRoleLocaction[] get_arrRole(){return arrRole;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
		if (has_arrRole()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)16) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)16) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
				arrRole[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
		if (has_arrRole()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)16) {
				oPacker.PushFieldName("iNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)16) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrRole[{0}]", __orm_iLoopVar);
				arrRole[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iNum();
				iNum = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_arrRole();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iNum=iNum<__orm_iArrCount ? iNum:(int)__orm_iArrCount;
				iNum=iNum<(int)16 ? iNum:(int)16;
				if (iNum > (int)16) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iNum; ++__orm_iLoopVar) {
					arrRole[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 本游戏区没帐号信息, 客户端应该询问用户是否建号
public class TMSG_LOGIN_NOACC_INWORLD_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long i64WorldID;   //游戏世界id


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_i64WorldID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_i64WorldID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_i64WorldID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_i64WorldID(long _i64WorldID){set_has_i64WorldID(); i64WorldID=_i64WorldID;}
	public long get_i64WorldID(){if (has_i64WorldID()) {return i64WorldID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64WorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64WorldID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64WorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64WorldID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_i64WorldID();
				i64WorldID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 请求在本世界下建号
public class TMSG_LOGIN_CREATE_ACC_INWORLD_REQ
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_LOGIN_CREATE_ACC_INWORLD_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //操作结果


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 查询其它区的ALS,需要先请求MSG_LOGIN_QUERY_ALL_ROLE_REQ
public class TMSG_LOGIN_GEN_WORLD_ALS_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long i64WorldID;   //游戏世界id


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_i64WorldID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_i64WorldID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_i64WorldID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_i64WorldID(long _i64WorldID){set_has_i64WorldID(); i64WorldID=_i64WorldID;}
	public long get_i64WorldID(){if (has_i64WorldID()) {return i64WorldID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64WorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64WorldID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64WorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64WorldID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_i64WorldID();
				i64WorldID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_LOGIN_GEN_WORLD_ALS_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //操作结果
	private TAutoLoginSession stALSess = new TAutoLoginSession();   //
	private long i64WorldID;   //游戏世界id
	private string szParName;   //指定partnerID下对应的帐号名
	private int nPartnerID;   //取值参考 EnLoginPartnerID


	public const int MAX_PACKEDSIZE = 1441;

	public void init() {
		__orm_has_bits[0]=0;
		stALSess.init();
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_stALSess() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stALSess() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stALSess() {__orm_has_bits[0] &= ~(0x4u);}
	public TAutoLoginSession set_stALSess(){set_has_stALSess(); return stALSess;}
	public TAutoLoginSession get_stALSess(){return stALSess;}

	public bool has_i64WorldID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_i64WorldID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_i64WorldID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_i64WorldID(long _i64WorldID){set_has_i64WorldID(); i64WorldID=_i64WorldID;}
	public long get_i64WorldID(){if (has_i64WorldID()) {return i64WorldID;} return 0;}

	public bool has_szParName() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_szParName() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_szParName() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_szParName(string _szParName){set_has_szParName(); szParName=_szParName;}
	public string get_szParName(){if (has_szParName()) {return szParName;} return "";}

	public bool has_nPartnerID() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_nPartnerID() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_nPartnerID() {__orm_has_bits[0] &= ~(0x2000u);}
	public void set_nPartnerID(int _nPartnerID){set_has_nPartnerID(); nPartnerID=_nPartnerID;}
	public int get_nPartnerID(){if (has_nPartnerID()) {return nPartnerID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_stALSess()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stALSess.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64WorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64WorldID);
		};
		if (has_szParName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,3));  // f id
			oPacker.WriteSTRING(szParName);
		};
		if (has_nPartnerID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(nPartnerID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_stALSess()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stALSess");
			stALSess.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64WorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64WorldID);
		};
		if (has_szParName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,3));  // f id
			oPacker.WriteSTRING(szParName);
		};
		if (has_nPartnerID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(nPartnerID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_stALSess();
				stALSess.Unpack(oPacker);
			}break;
			case 4: {
				set_has_i64WorldID();
				i64WorldID = oPacker.ReadVarintINT64();
			}break;
			case 11: {
				set_has_szParName();
				szParName = oPacker.ReadSTRING();
			}break;
			case 13: {
				set_has_nPartnerID();
				nPartnerID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 删除当前帐号
public class TMSG_LOGIN_ACCOUNT_DELETE_REQ
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_LOGIN_ACCOUNT_DELETE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 帐号恢复删除结果
public class TMSG_LOGIN_ACCOUNT_UNDELETE_REQ
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_LOGIN_ACCOUNT_UNDELETE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 帐号删除结果
public class TMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDeleteDate;   //删除日期,0表示永不删除


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDeleteDate() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iDeleteDate() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iDeleteDate() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iDeleteDate(long _iDeleteDate){set_has_iDeleteDate(); iDeleteDate=_iDeleteDate;}
	public long get_iDeleteDate(){if (has_iDeleteDate()) {return iDeleteDate;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDeleteDate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iDeleteDate);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDeleteDate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iDeleteDate);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iDeleteDate();
				iDeleteDate = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 本世界角色删除完成
public class TMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private int iAccID;   //帐号id


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iAccID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iAccID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iAccID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iAccID(int _iAccID){set_has_iAccID(); iAccID=_iAccID;}
	public int get_iAccID(){if (has_iAccID()) {return iAccID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iAccID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iAccID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iAccID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iAccID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iAccID();
				iAccID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 封号通知
public class TMSG_LOGIN_BANROLE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iUserType;   //0：封账号 、 1：封角色
	private int iKillFlag;   //封号类型：0：未封号、 1：封号  2：删号
	private long iKillExpire;   //封号到期时间，-1：永久封号  其余：时间戳，过了该时间账号才会解封


	public const int MAX_PACKEDSIZE = 36;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iUserType() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iUserType() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iUserType() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iUserType(sbyte _iUserType){set_has_iUserType(); iUserType=_iUserType;}
	public sbyte get_iUserType(){if (has_iUserType()) {return iUserType;} return 0;}

	public bool has_iKillFlag() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iKillFlag() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iKillFlag() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iKillFlag(int _iKillFlag){set_has_iKillFlag(); iKillFlag=_iKillFlag;}
	public int get_iKillFlag(){if (has_iKillFlag()) {return iKillFlag;} return 0;}

	public bool has_iKillExpire() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iKillExpire() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iKillExpire() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iKillExpire(long _iKillExpire){set_has_iKillExpire(); iKillExpire=_iKillExpire;}
	public long get_iKillExpire(){if (has_iKillExpire()) {return iKillExpire;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iUserType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iUserType);
		};
		if (has_iKillFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iKillFlag);
		};
		if (has_iKillExpire()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iKillExpire);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iUserType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iUserType);
		};
		if (has_iKillFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iKillFlag);
		};
		if (has_iKillExpire()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iKillExpire);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iUserType();
				iUserType = oPacker.ReadINT8();
			}break;
			case 2: {
				set_has_iKillFlag();
				iKillFlag = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iKillExpire();
				iKillExpire = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 服务器维护通知
public class TMSG_LOGIN_SERVERMAINTAIN_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iSartTime;   //维护开始时间戳
	private long iEndTime;   //维护结束时间戳
	private string szNotice;   //维护公告


	public const int MAX_PACKEDSIZE = 65580;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iSartTime() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iSartTime() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iSartTime() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iSartTime(long _iSartTime){set_has_iSartTime(); iSartTime=_iSartTime;}
	public long get_iSartTime(){if (has_iSartTime()) {return iSartTime;} return 0;}

	public bool has_iEndTime() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iEndTime() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iEndTime() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iEndTime(long _iEndTime){set_has_iEndTime(); iEndTime=_iEndTime;}
	public long get_iEndTime(){if (has_iEndTime()) {return iEndTime;} return 0;}

	public bool has_szNotice() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_szNotice() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_szNotice() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_szNotice(string _szNotice){set_has_szNotice(); szNotice=_szNotice;}
	public string get_szNotice(){if (has_szNotice()) {return szNotice;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSartTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iSartTime);
		};
		if (has_iEndTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iEndTime);
		};
		if (has_szNotice()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szNotice);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSartTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iSartTime);
		};
		if (has_iEndTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iEndTime);
		};
		if (has_szNotice()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szNotice);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iSartTime();
				iSartTime = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_iEndTime();
				iEndTime = oPacker.ReadVarintINT64();
			}break;
			case 6: {
				set_has_szNotice();
				szNotice = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 开区时间通知
public class TMSG_LOGIN_WORLDOPENDATE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iWorldID;   //worldid
	private long iTime;   //开区时间  gmtime
	private long iFirstWorldID;   //合服后的worldid
	private long iFirstWorldID_iTime;   //合服后世界的开区时间  gmtime


	public const int MAX_PACKEDSIZE = 65;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iWorldID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iWorldID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iWorldID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iWorldID(long _iWorldID){set_has_iWorldID(); iWorldID=_iWorldID;}
	public long get_iWorldID(){if (has_iWorldID()) {return iWorldID;} return 0;}

	public bool has_iTime() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iTime() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iTime() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iTime(long _iTime){set_has_iTime(); iTime=_iTime;}
	public long get_iTime(){if (has_iTime()) {return iTime;} return 0;}

	public bool has_iFirstWorldID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iFirstWorldID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iFirstWorldID() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iFirstWorldID(long _iFirstWorldID){set_has_iFirstWorldID(); iFirstWorldID=_iFirstWorldID;}
	public long get_iFirstWorldID(){if (has_iFirstWorldID()) {return iFirstWorldID;} return 0;}

	public bool has_iFirstWorldID_iTime() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iFirstWorldID_iTime() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iFirstWorldID_iTime() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iFirstWorldID_iTime(long _iFirstWorldID_iTime){set_has_iFirstWorldID_iTime(); iFirstWorldID_iTime=_iFirstWorldID_iTime;}
	public long get_iFirstWorldID_iTime(){if (has_iFirstWorldID_iTime()) {return iFirstWorldID_iTime;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iWorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iWorldID);
		};
		if (has_iTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iTime);
		};
		if (has_iFirstWorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(iFirstWorldID);
		};
		if (has_iFirstWorldID_iTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT64(iFirstWorldID_iTime);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iWorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iWorldID);
		};
		if (has_iTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iTime);
		};
		if (has_iFirstWorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(iFirstWorldID);
		};
		if (has_iFirstWorldID_iTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT64(iFirstWorldID_iTime);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iWorldID();
				iWorldID = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_iTime();
				iTime = oPacker.ReadVarintINT64();
			}break;
			case 5: {
				set_has_iFirstWorldID();
				iFirstWorldID = oPacker.ReadVarintINT64();
			}break;
			case 6: {
				set_has_iFirstWorldID_iTime();
				iFirstWorldID_iTime = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 创建篮子-通知
public class TMSG_SKEP_CREATE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private uint u32SkepID;   //篮子ID


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_u32SkepID() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_u32SkepID() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_u32SkepID() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_u32SkepID(uint _u32SkepID){set_has_u32SkepID(); u32SkepID=_u32SkepID;}
	public uint get_u32SkepID(){if (has_u32SkepID()) {return u32SkepID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32SkepID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(u32SkepID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32SkepID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintUINT32(u32SkepID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 12: {
				set_has_u32SkepID();
				u32SkepID = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 销毁篮子-通知
public class TMSG_SKEP_DESTROY_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private uint u32SkepID;   //篮子ID


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_u32SkepID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_u32SkepID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_u32SkepID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_u32SkepID(uint _u32SkepID){set_has_u32SkepID(); u32SkepID=_u32SkepID;}
	public uint get_u32SkepID(){if (has_u32SkepID()) {return u32SkepID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32SkepID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(u32SkepID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32SkepID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintUINT32(u32SkepID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_u32SkepID();
				u32SkepID = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 添加物品到篮子
public class TMSG_SKEP_ADD_ITEM_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte bCleanFirst;   //添加物品前是否需要全部删除物品
	private int iCount;   //变更的物品数量
	private int[] arrGoodsSid = new int[(int)TCONST.UPDATE_ITEM_COUNT_MAX];   //物品列表
	private uint u32SkepID;   //篮子ID

	public const int countof_arrGoodsSid = (int)TCONST.UPDATE_ITEM_COUNT_MAX;

	public const int MAX_PACKEDSIZE = 10045;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_bCleanFirst() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_bCleanFirst() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_bCleanFirst() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_bCleanFirst(sbyte _bCleanFirst){set_has_bCleanFirst(); bCleanFirst=_bCleanFirst;}
	public sbyte get_bCleanFirst(){if (has_bCleanFirst()) {return bCleanFirst;} return 0;}

	public bool has_iCount() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iCount() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iCount() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iCount(int _iCount){set_has_iCount(); iCount=_iCount;}
	public int get_iCount(){if (has_iCount()) {return iCount;} return 0;}

	public bool has_arrGoodsSid() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrGoodsSid() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrGoodsSid() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrGoodsSid(){set_has_arrGoodsSid(); return arrGoodsSid;}
	public int[] get_arrGoodsSid(){return arrGoodsSid;}

	public bool has_u32SkepID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_u32SkepID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_u32SkepID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_u32SkepID(uint _u32SkepID){set_has_u32SkepID(); u32SkepID=_u32SkepID;}
	public uint get_u32SkepID(){if (has_u32SkepID()) {return u32SkepID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bCleanFirst()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bCleanFirst);
		};
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrGoodsSid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.UPDATE_ITEM_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.UPDATE_ITEM_COUNT_MAX) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrGoodsSid[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_u32SkepID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintUINT32(u32SkepID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bCleanFirst()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bCleanFirst);
		};
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrGoodsSid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.UPDATE_ITEM_COUNT_MAX) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.UPDATE_ITEM_COUNT_MAX) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrGoodsSid[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_u32SkepID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintUINT32(u32SkepID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_bCleanFirst();
				bCleanFirst = oPacker.ReadINT8();
			}break;
			case 2: {
				set_has_iCount();
				iCount = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrGoodsSid();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(int)__orm_iArrCount;
				iCount=iCount<(int)TCONST.UPDATE_ITEM_COUNT_MAX ? iCount:(int)TCONST.UPDATE_ITEM_COUNT_MAX;
				if (iCount > (int)TCONST.UPDATE_ITEM_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrGoodsSid[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 4: {
				set_has_u32SkepID();
				u32SkepID = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 从篮子中移除物品
public class TMSG_SKEP_REMOVE_ITEM_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iCount;   //变更的物品数量
	private int[] arrGoodsSid = new int[(int)TCONST.UPDATE_ITEM_COUNT_MAX];   //物品列表
	private uint u32SkepID;   //篮子ID

	public const int countof_arrGoodsSid = (int)TCONST.UPDATE_ITEM_COUNT_MAX;

	public const int MAX_PACKEDSIZE = 10039;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iCount() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iCount() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iCount() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iCount(int _iCount){set_has_iCount(); iCount=_iCount;}
	public int get_iCount(){if (has_iCount()) {return iCount;} return 0;}

	public bool has_arrGoodsSid() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrGoodsSid() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrGoodsSid() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrGoodsSid(){set_has_arrGoodsSid(); return arrGoodsSid;}
	public int[] get_arrGoodsSid(){return arrGoodsSid;}

	public bool has_u32SkepID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_u32SkepID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_u32SkepID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_u32SkepID(uint _u32SkepID){set_has_u32SkepID(); u32SkepID=_u32SkepID;}
	public uint get_u32SkepID(){if (has_u32SkepID()) {return u32SkepID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrGoodsSid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.UPDATE_ITEM_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.UPDATE_ITEM_COUNT_MAX) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrGoodsSid[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_u32SkepID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintUINT32(u32SkepID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrGoodsSid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.UPDATE_ITEM_COUNT_MAX) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.UPDATE_ITEM_COUNT_MAX) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrGoodsSid[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_u32SkepID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintUINT32(u32SkepID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iCount();
				iCount = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrGoodsSid();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(int)__orm_iArrCount;
				iCount=iCount<(int)TCONST.UPDATE_ITEM_COUNT_MAX ? iCount:(int)TCONST.UPDATE_ITEM_COUNT_MAX;
				if (iCount > (int)TCONST.UPDATE_ITEM_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrGoodsSid[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 4: {
				set_has_u32SkepID();
				u32SkepID = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// lua参数
public class TLuaParam
{
	private uint[] __orm_has_bits = new uint[1];
	private string szVal;   //参数内容


	public const int MAX_PACKEDSIZE = 143;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_szVal() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_szVal() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_szVal() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_szVal(string _szVal){set_has_szVal(); szVal=_szVal;}
	public string get_szVal(){if (has_szVal()) {return szVal;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szVal);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szVal);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_szVal();
				szVal = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// Lua动作:客户端请求
public class TMSG_ACTION_LUA_REQUEST_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private string szFuncName;   //函数名
	private byte u8ParamCount;   //参数数量
	private TLuaParam[] arrParams = new TLuaParam[(int)TCONST.ORM_LUA_PARAM_COUNT_MAX];   //参数列表
	public TMSG_ACTION_LUA_REQUEST_REQ() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_LUA_PARAM_COUNT_MAX; ++__orm_iLoopVar) {
			arrParams[__orm_iLoopVar] = new TLuaParam();
		}
	}

	public const int countof_arrParams = (int)TCONST.ORM_LUA_PARAM_COUNT_MAX;

	public const int MAX_PACKEDSIZE = 4739;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_LUA_PARAM_COUNT_MAX; ++__orm_iLoopVar){arrParams[__orm_iLoopVar].init();}
	}
	public bool has_szFuncName() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_szFuncName() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_szFuncName() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_szFuncName(string _szFuncName){set_has_szFuncName(); szFuncName=_szFuncName;}
	public string get_szFuncName(){if (has_szFuncName()) {return szFuncName;} return "";}

	public bool has_u8ParamCount() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_u8ParamCount() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_u8ParamCount() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_u8ParamCount(byte _u8ParamCount){set_has_u8ParamCount(); u8ParamCount=_u8ParamCount;}
	public byte get_u8ParamCount(){if (has_u8ParamCount()) {return u8ParamCount;} return 0;}

	public bool has_arrParams() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrParams() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrParams() {__orm_has_bits[0] &= ~(0x8u);}
	public TLuaParam[] set_arrParams(){set_has_arrParams(); return arrParams;}
	public TLuaParam[] get_arrParams(){return arrParams;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szFuncName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szFuncName);
		};
		if (has_u8ParamCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteUINT8(u8ParamCount);
		};
		if (has_arrParams()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8ParamCount();
			if (__orm_ReferVar > (int)TCONST.ORM_LUA_PARAM_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_LUA_PARAM_COUNT_MAX) && (__orm_iLoopVar < u8ParamCount); ++__orm_iLoopVar) {
				arrParams[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szFuncName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szFuncName);
		};
		if (has_u8ParamCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteUINT8(u8ParamCount);
		};
		if (has_arrParams()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8ParamCount();
			if (__orm_ReferVar > (int)TCONST.ORM_LUA_PARAM_COUNT_MAX) {
				oPacker.PushFieldName("u8ParamCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_LUA_PARAM_COUNT_MAX) && (__orm_iLoopVar < u8ParamCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrParams[{0}]", __orm_iLoopVar);
				arrParams[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_szFuncName();
				szFuncName = oPacker.ReadSTRING();
			}break;
			case 2: {
				set_has_u8ParamCount();
				u8ParamCount = oPacker.ReadUINT8();
			}break;
			case 3: {
				set_has_arrParams();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8ParamCount=u8ParamCount<__orm_iArrCount ? u8ParamCount:(byte)__orm_iArrCount;
				u8ParamCount=u8ParamCount<(byte)TCONST.ORM_LUA_PARAM_COUNT_MAX ? u8ParamCount:(byte)TCONST.ORM_LUA_PARAM_COUNT_MAX;
				if (u8ParamCount > (int)TCONST.ORM_LUA_PARAM_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8ParamCount; ++__orm_iLoopVar) {
					arrParams[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// Lua动作:服务器回复
public class TMSG_ACTION_LUA_REQUEST_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int nErrCode;   //错误码


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_nErrCode() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_nErrCode() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_nErrCode() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_nErrCode(int _nErrCode){set_has_nErrCode(); nErrCode=_nErrCode;}
	public int get_nErrCode(){if (has_nErrCode()) {return nErrCode;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_nErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(nErrCode);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_nErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(nErrCode);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_nErrCode();
				nErrCode = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// Lua动作:调用客户端方法
public class TMSG_ACTION_LUA_SCRIPT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private string szScript;   //脚本内容


	public const int MAX_PACKEDSIZE = 8207;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_szScript() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_szScript() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_szScript() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_szScript(string _szScript){set_has_szScript(); szScript=_szScript;}
	public string get_szScript(){if (has_szScript()) {return szScript;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szScript()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szScript);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szScript()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szScript);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_szScript();
				szScript = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 与TMSG_ACTION_LUA_SCRIPT_NTF类似, 单独分拆函数名,及json的参数现场 
public class TMSG_ACTION_LUALIKE_SCRIPT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private string szFunction;   //函数标识,例如 client_show_tower_ui 
	private string szJsonParam;   //json现场.  例如  { towerID: 1,  level: 8, ...}   


	public const int MAX_PACKEDSIZE = 8345;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_szFunction() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_szFunction() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_szFunction() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_szFunction(string _szFunction){set_has_szFunction(); szFunction=_szFunction;}
	public string get_szFunction(){if (has_szFunction()) {return szFunction;} return "";}

	public bool has_szJsonParam() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_szJsonParam() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_szJsonParam() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_szJsonParam(string _szJsonParam){set_has_szJsonParam(); szJsonParam=_szJsonParam;}
	public string get_szJsonParam(){if (has_szJsonParam()) {return szJsonParam;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szFunction()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szFunction);
		};
		if (has_szJsonParam()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szJsonParam);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szFunction()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szFunction);
		};
		if (has_szJsonParam()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szJsonParam);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_szFunction();
				szFunction = oPacker.ReadSTRING();
			}break;
			case 2: {
				set_has_szJsonParam();
				szJsonParam = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 查询服务器时间
public class TMSG_ACTION_QUERY_TIME_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private long i64Time;   //服务器时间


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_i64Time() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_i64Time() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_i64Time() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_i64Time(long _i64Time){set_has_i64Time(); i64Time=_i64Time;}
	public long get_i64Time(){if (has_i64Time()) {return i64Time;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64Time()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(i64Time);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64Time()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(i64Time);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_i64Time();
				i64Time = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 测试用例数据确认,只用在用例中
public class TMSG_ACTION_TESTCASE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int[] arrTag = new int[(int)3];   //

	public const int countof_arrTag = (int)3;

	public const int MAX_PACKEDSIZE = 34;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)3; ++__orm_iLoopVar){arrTag[__orm_iLoopVar]=0;}
	}
	public bool has_arrTag() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_arrTag() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_arrTag() {__orm_has_bits[0] &= ~(0x2u);}
	public int[] set_arrTag(){set_has_arrTag(); return arrTag;}
	public int[] get_arrTag(){return arrTag;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_arrTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)3); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)3); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrTag[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_arrTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)3); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)3); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrTag[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_arrTag();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)3 ? __orm_iArrCount:(uint)3;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrTag[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 同步标记通知
public class TMSG_ACTION_SYNC_FLAG_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iSync;   //同步标记


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iSync() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iSync() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iSync() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iSync(int _iSync){set_has_iSync(); iSync=_iSync;}
	public int get_iSync(){if (has_iSync()) {return iSync;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSync()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iSync);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSync()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iSync);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iSync();
				iSync = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 同步异常
public class TMSG_ACTION_OUT_OF_SYNC_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iSync;   //同步标记


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iSync() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iSync() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iSync() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iSync(int _iSync){set_has_iSync(); iSync=_iSync;}
	public int get_iSync(){if (has_iSync()) {return iSync;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSync()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iSync);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSync()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iSync);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iSync();
				iSync = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 奖励展示
public class TMSG_ACTION_SHOW_PRIZE_NTF
{
	private uint[] __orm_has_bits = new uint[2];
	private int iMoney;   //金币数量
	private int iGold;   //钻石数量
	private int iGold_Bind;   //绑定钻石的数量
	private int iHeroExpPool;   //英雄经验池数量
	private int iGuildContri;   //联盟贡献
	private int iExp;   //经验数量
	private int iGoodsNum;   //物品数量
	private int[] arrGoodsSID = new int[(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX];   //物品SID列表
	private int[] arrGoodsNum = new int[(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX];   //物品数量列表
	private string sTag;   //客户端定位标签
	private int iShowMode;   //显示模式
	private sbyte iPrizeIDCount;   //奖励ID数量
	private int[] arrPrizeID = new int[(int)32];   //奖励ID数组
	private int[] arrPrizeNum = new int[(int)32];   //奖励ID数量数组
	private long iDiscipleLId;   //弟子localId
	private int iWanderGoodsNum;   //物品数量
	private int[] arrWanderGoodsID = new int[(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX];   //游历物品ID列表
	private int[] arrWanderGoodsNum = new int[(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX];   //游历物品数量列表
	private int iWEquipsNum;   //游历装备数量
	private int[] arrWEquipId = new int[(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX];   //游历装备ID列表
	private long[] arrWEquipLocalId = new long[(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX];   //游历装备localId列表
	private int iDisciplePropNum;   //弟子属性数量
	private TK32V32[] arrDiscipleProp = new TK32V32[(int)32];   //弟子属性数组
	private int iPersonPropNum;   //角色32位属性数量
	private TK32V32[] arrPersonProp = new TK32V32[(int)32];   //角色32位属性数组
	private int iPersonLongPropNum;   //角色64位属性数量
	private TK32V64[] arrPersonLongProp = new TK32V64[(int)32];   //角色64位属性数组
	public TMSG_ACTION_SHOW_PRIZE_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)32; ++__orm_iLoopVar) {
			arrDiscipleProp[__orm_iLoopVar] = new TK32V32();
		}
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)32; ++__orm_iLoopVar) {
			arrPersonProp[__orm_iLoopVar] = new TK32V32();
		}
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)32; ++__orm_iLoopVar) {
			arrPersonLongProp[__orm_iLoopVar] = new TK32V64();
		}
	}

	public const int countof_arrGoodsSID = (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX;
	public const int countof_arrGoodsNum = (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX;
	public const int countof_arrPrizeID = (int)32;
	public const int countof_arrPrizeNum = (int)32;
	public const int countof_arrWanderGoodsID = (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX;
	public const int countof_arrWanderGoodsNum = (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX;
	public const int countof_arrWEquipId = (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX;
	public const int countof_arrWEquipLocalId = (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX;
	public const int countof_arrDiscipleProp = (int)32;
	public const int countof_arrPersonProp = (int)32;
	public const int countof_arrPersonLongProp = (int)32;

	public const int MAX_PACKEDSIZE = 5014;

	public void init() {
		for (int __orm_iLoopVar=0; __orm_iLoopVar<2; ++__orm_iLoopVar) {__orm_has_bits[__orm_iLoopVar]=0;};
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)32; ++__orm_iLoopVar){arrDiscipleProp[__orm_iLoopVar].init();}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)32; ++__orm_iLoopVar){arrPersonProp[__orm_iLoopVar].init();}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)32; ++__orm_iLoopVar){arrPersonLongProp[__orm_iLoopVar].init();}
	}
	public bool has_iMoney() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iMoney() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iMoney() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iMoney(int _iMoney){set_has_iMoney(); iMoney=_iMoney;}
	public int get_iMoney(){if (has_iMoney()) {return iMoney;} return 0;}

	public bool has_iGold() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iGold() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iGold() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iGold(int _iGold){set_has_iGold(); iGold=_iGold;}
	public int get_iGold(){if (has_iGold()) {return iGold;} return 0;}

	public bool has_iGold_Bind() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iGold_Bind() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iGold_Bind() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iGold_Bind(int _iGold_Bind){set_has_iGold_Bind(); iGold_Bind=_iGold_Bind;}
	public int get_iGold_Bind(){if (has_iGold_Bind()) {return iGold_Bind;} return 0;}

	public bool has_iHeroExpPool() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iHeroExpPool() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iHeroExpPool() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iHeroExpPool(int _iHeroExpPool){set_has_iHeroExpPool(); iHeroExpPool=_iHeroExpPool;}
	public int get_iHeroExpPool(){if (has_iHeroExpPool()) {return iHeroExpPool;} return 0;}

	public bool has_iGuildContri() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iGuildContri() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iGuildContri() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iGuildContri(int _iGuildContri){set_has_iGuildContri(); iGuildContri=_iGuildContri;}
	public int get_iGuildContri(){if (has_iGuildContri()) {return iGuildContri;} return 0;}

	public bool has_iExp() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iExp() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iExp() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iExp(int _iExp){set_has_iExp(); iExp=_iExp;}
	public int get_iExp(){if (has_iExp()) {return iExp;} return 0;}

	public bool has_iGoodsNum() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_iGoodsNum() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_iGoodsNum() {__orm_has_bits[0] &= ~(0x200u);}
	public void set_iGoodsNum(int _iGoodsNum){set_has_iGoodsNum(); iGoodsNum=_iGoodsNum;}
	public int get_iGoodsNum(){if (has_iGoodsNum()) {return iGoodsNum;} return 0;}

	public bool has_arrGoodsSID() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_arrGoodsSID() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_arrGoodsSID() {__orm_has_bits[0] &= ~(0x400u);}
	public int[] set_arrGoodsSID(){set_has_arrGoodsSID(); return arrGoodsSID;}
	public int[] get_arrGoodsSID(){return arrGoodsSID;}

	public bool has_arrGoodsNum() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_arrGoodsNum() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_arrGoodsNum() {__orm_has_bits[0] &= ~(0x800u);}
	public int[] set_arrGoodsNum(){set_has_arrGoodsNum(); return arrGoodsNum;}
	public int[] get_arrGoodsNum(){return arrGoodsNum;}

	public bool has_sTag() {return (__orm_has_bits[0] & 0x20000u) != 0;}
	public void set_has_sTag() {__orm_has_bits[0] |= 0x20000u;}
	public void clear_has_sTag() {__orm_has_bits[0] &= ~(0x20000u);}
	public void set_sTag(string _sTag){set_has_sTag(); sTag=_sTag;}
	public string get_sTag(){if (has_sTag()) {return sTag;} return "";}

	public bool has_iShowMode() {return (__orm_has_bits[0] & 0x80000u) != 0;}
	public void set_has_iShowMode() {__orm_has_bits[0] |= 0x80000u;}
	public void clear_has_iShowMode() {__orm_has_bits[0] &= ~(0x80000u);}
	public void set_iShowMode(int _iShowMode){set_has_iShowMode(); iShowMode=_iShowMode;}
	public int get_iShowMode(){if (has_iShowMode()) {return iShowMode;} return 0;}

	public bool has_iPrizeIDCount() {return (__orm_has_bits[0] & 0x100000u) != 0;}
	public void set_has_iPrizeIDCount() {__orm_has_bits[0] |= 0x100000u;}
	public void clear_has_iPrizeIDCount() {__orm_has_bits[0] &= ~(0x100000u);}
	public void set_iPrizeIDCount(sbyte _iPrizeIDCount){set_has_iPrizeIDCount(); iPrizeIDCount=_iPrizeIDCount;}
	public sbyte get_iPrizeIDCount(){if (has_iPrizeIDCount()) {return iPrizeIDCount;} return 0;}

	public bool has_arrPrizeID() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_arrPrizeID() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_arrPrizeID() {__orm_has_bits[0] &= ~(0x1000u);}
	public int[] set_arrPrizeID(){set_has_arrPrizeID(); return arrPrizeID;}
	public int[] get_arrPrizeID(){return arrPrizeID;}

	public bool has_arrPrizeNum() {return (__orm_has_bits[0] & 0x1000000u) != 0;}
	public void set_has_arrPrizeNum() {__orm_has_bits[0] |= 0x1000000u;}
	public void clear_has_arrPrizeNum() {__orm_has_bits[0] &= ~(0x1000000u);}
	public int[] set_arrPrizeNum(){set_has_arrPrizeNum(); return arrPrizeNum;}
	public int[] get_arrPrizeNum(){return arrPrizeNum;}

	public bool has_iDiscipleLId() {return (__orm_has_bits[0] & 0x80000000u) != 0;}
	public void set_has_iDiscipleLId() {__orm_has_bits[0] |= 0x80000000u;}
	public void clear_has_iDiscipleLId() {__orm_has_bits[0] &= ~(0x80000000u);}
	public void set_iDiscipleLId(long _iDiscipleLId){set_has_iDiscipleLId(); iDiscipleLId=_iDiscipleLId;}
	public long get_iDiscipleLId(){if (has_iDiscipleLId()) {return iDiscipleLId;} return 0;}

	public bool has_iWanderGoodsNum() {return (__orm_has_bits[1] & 0x1u) != 0;}
	public void set_has_iWanderGoodsNum() {__orm_has_bits[1] |= 0x1u;}
	public void clear_has_iWanderGoodsNum() {__orm_has_bits[1] &= ~(0x1u);}
	public void set_iWanderGoodsNum(int _iWanderGoodsNum){set_has_iWanderGoodsNum(); iWanderGoodsNum=_iWanderGoodsNum;}
	public int get_iWanderGoodsNum(){if (has_iWanderGoodsNum()) {return iWanderGoodsNum;} return 0;}

	public bool has_arrWanderGoodsID() {return (__orm_has_bits[1] & 0x2u) != 0;}
	public void set_has_arrWanderGoodsID() {__orm_has_bits[1] |= 0x2u;}
	public void clear_has_arrWanderGoodsID() {__orm_has_bits[1] &= ~(0x2u);}
	public int[] set_arrWanderGoodsID(){set_has_arrWanderGoodsID(); return arrWanderGoodsID;}
	public int[] get_arrWanderGoodsID(){return arrWanderGoodsID;}

	public bool has_arrWanderGoodsNum() {return (__orm_has_bits[1] & 0x4u) != 0;}
	public void set_has_arrWanderGoodsNum() {__orm_has_bits[1] |= 0x4u;}
	public void clear_has_arrWanderGoodsNum() {__orm_has_bits[1] &= ~(0x4u);}
	public int[] set_arrWanderGoodsNum(){set_has_arrWanderGoodsNum(); return arrWanderGoodsNum;}
	public int[] get_arrWanderGoodsNum(){return arrWanderGoodsNum;}

	public bool has_iWEquipsNum() {return (__orm_has_bits[1] & 0x8u) != 0;}
	public void set_has_iWEquipsNum() {__orm_has_bits[1] |= 0x8u;}
	public void clear_has_iWEquipsNum() {__orm_has_bits[1] &= ~(0x8u);}
	public void set_iWEquipsNum(int _iWEquipsNum){set_has_iWEquipsNum(); iWEquipsNum=_iWEquipsNum;}
	public int get_iWEquipsNum(){if (has_iWEquipsNum()) {return iWEquipsNum;} return 0;}

	public bool has_arrWEquipId() {return (__orm_has_bits[1] & 0x10u) != 0;}
	public void set_has_arrWEquipId() {__orm_has_bits[1] |= 0x10u;}
	public void clear_has_arrWEquipId() {__orm_has_bits[1] &= ~(0x10u);}
	public int[] set_arrWEquipId(){set_has_arrWEquipId(); return arrWEquipId;}
	public int[] get_arrWEquipId(){return arrWEquipId;}

	public bool has_arrWEquipLocalId() {return (__orm_has_bits[1] & 0x20u) != 0;}
	public void set_has_arrWEquipLocalId() {__orm_has_bits[1] |= 0x20u;}
	public void clear_has_arrWEquipLocalId() {__orm_has_bits[1] &= ~(0x20u);}
	public long[] set_arrWEquipLocalId(){set_has_arrWEquipLocalId(); return arrWEquipLocalId;}
	public long[] get_arrWEquipLocalId(){return arrWEquipLocalId;}

	public bool has_iDisciplePropNum() {return (__orm_has_bits[1] & 0x100u) != 0;}
	public void set_has_iDisciplePropNum() {__orm_has_bits[1] |= 0x100u;}
	public void clear_has_iDisciplePropNum() {__orm_has_bits[1] &= ~(0x100u);}
	public void set_iDisciplePropNum(int _iDisciplePropNum){set_has_iDisciplePropNum(); iDisciplePropNum=_iDisciplePropNum;}
	public int get_iDisciplePropNum(){if (has_iDisciplePropNum()) {return iDisciplePropNum;} return 0;}

	public bool has_arrDiscipleProp() {return (__orm_has_bits[1] & 0x200u) != 0;}
	public void set_has_arrDiscipleProp() {__orm_has_bits[1] |= 0x200u;}
	public void clear_has_arrDiscipleProp() {__orm_has_bits[1] &= ~(0x200u);}
	public TK32V32[] set_arrDiscipleProp(){set_has_arrDiscipleProp(); return arrDiscipleProp;}
	public TK32V32[] get_arrDiscipleProp(){return arrDiscipleProp;}

	public bool has_iPersonPropNum() {return (__orm_has_bits[1] & 0x400u) != 0;}
	public void set_has_iPersonPropNum() {__orm_has_bits[1] |= 0x400u;}
	public void clear_has_iPersonPropNum() {__orm_has_bits[1] &= ~(0x400u);}
	public void set_iPersonPropNum(int _iPersonPropNum){set_has_iPersonPropNum(); iPersonPropNum=_iPersonPropNum;}
	public int get_iPersonPropNum(){if (has_iPersonPropNum()) {return iPersonPropNum;} return 0;}

	public bool has_arrPersonProp() {return (__orm_has_bits[1] & 0x800u) != 0;}
	public void set_has_arrPersonProp() {__orm_has_bits[1] |= 0x800u;}
	public void clear_has_arrPersonProp() {__orm_has_bits[1] &= ~(0x800u);}
	public TK32V32[] set_arrPersonProp(){set_has_arrPersonProp(); return arrPersonProp;}
	public TK32V32[] get_arrPersonProp(){return arrPersonProp;}

	public bool has_iPersonLongPropNum() {return (__orm_has_bits[1] & 0x1000u) != 0;}
	public void set_has_iPersonLongPropNum() {__orm_has_bits[1] |= 0x1000u;}
	public void clear_has_iPersonLongPropNum() {__orm_has_bits[1] &= ~(0x1000u);}
	public void set_iPersonLongPropNum(int _iPersonLongPropNum){set_has_iPersonLongPropNum(); iPersonLongPropNum=_iPersonLongPropNum;}
	public int get_iPersonLongPropNum(){if (has_iPersonLongPropNum()) {return iPersonLongPropNum;} return 0;}

	public bool has_arrPersonLongProp() {return (__orm_has_bits[1] & 0x2000u) != 0;}
	public void set_has_arrPersonLongProp() {__orm_has_bits[1] |= 0x2000u;}
	public void clear_has_arrPersonLongProp() {__orm_has_bits[1] &= ~(0x2000u);}
	public TK32V64[] set_arrPersonLongProp(){set_has_arrPersonLongProp(); return arrPersonLongProp;}
	public TK32V64[] get_arrPersonLongProp(){return arrPersonLongProp;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMoney()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iMoney);
		};
		if (has_iGold()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGold);
		};
		if (has_iGold_Bind()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iGold_Bind);
		};
		if (has_iHeroExpPool()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iHeroExpPool);
		};
		if (has_iGuildContri()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iGuildContri);
		};
		if (has_iExp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iExp);
		};
		if (has_iGoodsNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iGoodsNum);
		};
		if (has_arrGoodsSID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iGoodsNum();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) && (__orm_iLoopVar < iGoodsNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrGoodsSID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrGoodsNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iGoodsNum();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) && (__orm_iLoopVar < iGoodsNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrGoodsNum[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_sTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,3));  // f id
			oPacker.WriteSTRING(sTag);
		};
		if (has_iShowMode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(19,0));  // f id
			oPacker.WriteVarintINT32(iShowMode);
		};
		if (has_iPrizeIDCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(20,2));  // f id
			oPacker.WriteINT8(iPrizeIDCount);
		};
		if (has_arrPrizeID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPrizeIDCount();
			if (__orm_ReferVar > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iPrizeIDCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPrizeID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrPrizeNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(24,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPrizeIDCount();
			if (__orm_ReferVar > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iPrizeIDCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPrizeNum[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iDiscipleLId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(31,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLId);
		};
		if (has_iWanderGoodsNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(32,0));  // f id
			oPacker.WriteVarintINT32(iWanderGoodsNum);
		};
		if (has_arrWanderGoodsID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(33,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iWanderGoodsNum();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) && (__orm_iLoopVar < iWanderGoodsNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrWanderGoodsID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrWanderGoodsNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(34,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iWanderGoodsNum();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) && (__orm_iLoopVar < iWanderGoodsNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrWanderGoodsNum[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iWEquipsNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(35,0));  // f id
			oPacker.WriteVarintINT32(iWEquipsNum);
		};
		if (has_arrWEquipId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(36,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iWEquipsNum();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) && (__orm_iLoopVar < iWEquipsNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrWEquipId[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrWEquipLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(37,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iWEquipsNum();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) && (__orm_iLoopVar < iWEquipsNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrWEquipLocalId[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iDisciplePropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(40,0));  // f id
			oPacker.WriteVarintINT32(iDisciplePropNum);
		};
		if (has_arrDiscipleProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(41,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDisciplePropNum();
			if (__orm_ReferVar > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iDisciplePropNum); ++__orm_iLoopVar) {
				arrDiscipleProp[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iPersonPropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(42,0));  // f id
			oPacker.WriteVarintINT32(iPersonPropNum);
		};
		if (has_arrPersonProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(43,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPersonPropNum();
			if (__orm_ReferVar > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iPersonPropNum); ++__orm_iLoopVar) {
				arrPersonProp[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iPersonLongPropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(44,0));  // f id
			oPacker.WriteVarintINT32(iPersonLongPropNum);
		};
		if (has_arrPersonLongProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(45,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPersonLongPropNum();
			if (__orm_ReferVar > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iPersonLongPropNum); ++__orm_iLoopVar) {
				arrPersonLongProp[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMoney()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iMoney);
		};
		if (has_iGold()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGold);
		};
		if (has_iGold_Bind()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iGold_Bind);
		};
		if (has_iHeroExpPool()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iHeroExpPool);
		};
		if (has_iGuildContri()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iGuildContri);
		};
		if (has_iExp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iExp);
		};
		if (has_iGoodsNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iGoodsNum);
		};
		if (has_arrGoodsSID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iGoodsNum();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {
				oPacker.PushFieldName("iGoodsNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) && (__orm_iLoopVar < iGoodsNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrGoodsSID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrGoodsNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iGoodsNum();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {
				oPacker.PushFieldName("iGoodsNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) && (__orm_iLoopVar < iGoodsNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrGoodsNum[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_sTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,3));  // f id
			oPacker.WriteSTRING(sTag);
		};
		if (has_iShowMode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(19,0));  // f id
			oPacker.WriteVarintINT32(iShowMode);
		};
		if (has_iPrizeIDCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(20,2));  // f id
			oPacker.WriteINT8(iPrizeIDCount);
		};
		if (has_arrPrizeID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPrizeIDCount();
			if (__orm_ReferVar > (int)32) {
				oPacker.PushFieldName("iPrizeIDCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iPrizeIDCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPrizeID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrPrizeNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(24,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPrizeIDCount();
			if (__orm_ReferVar > (int)32) {
				oPacker.PushFieldName("iPrizeIDCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iPrizeIDCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPrizeNum[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iDiscipleLId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(31,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLId);
		};
		if (has_iWanderGoodsNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(32,0));  // f id
			oPacker.WriteVarintINT32(iWanderGoodsNum);
		};
		if (has_arrWanderGoodsID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(33,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iWanderGoodsNum();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {
				oPacker.PushFieldName("iWanderGoodsNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) && (__orm_iLoopVar < iWanderGoodsNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrWanderGoodsID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrWanderGoodsNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(34,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iWanderGoodsNum();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {
				oPacker.PushFieldName("iWanderGoodsNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) && (__orm_iLoopVar < iWanderGoodsNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrWanderGoodsNum[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iWEquipsNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(35,0));  // f id
			oPacker.WriteVarintINT32(iWEquipsNum);
		};
		if (has_arrWEquipId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(36,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iWEquipsNum();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {
				oPacker.PushFieldName("iWEquipsNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) && (__orm_iLoopVar < iWEquipsNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrWEquipId[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrWEquipLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(37,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iWEquipsNum();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {
				oPacker.PushFieldName("iWEquipsNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) && (__orm_iLoopVar < iWEquipsNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrWEquipLocalId[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iDisciplePropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(40,0));  // f id
			oPacker.WriteVarintINT32(iDisciplePropNum);
		};
		if (has_arrDiscipleProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(41,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDisciplePropNum();
			if (__orm_ReferVar > (int)32) {
				oPacker.PushFieldName("iDisciplePropNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iDisciplePropNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrDiscipleProp[{0}]", __orm_iLoopVar);
				arrDiscipleProp[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iPersonPropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(42,0));  // f id
			oPacker.WriteVarintINT32(iPersonPropNum);
		};
		if (has_arrPersonProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(43,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPersonPropNum();
			if (__orm_ReferVar > (int)32) {
				oPacker.PushFieldName("iPersonPropNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iPersonPropNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrPersonProp[{0}]", __orm_iLoopVar);
				arrPersonProp[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iPersonLongPropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(44,0));  // f id
			oPacker.WriteVarintINT32(iPersonLongPropNum);
		};
		if (has_arrPersonLongProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(45,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPersonLongPropNum();
			if (__orm_ReferVar > (int)32) {
				oPacker.PushFieldName("iPersonLongPropNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iPersonLongPropNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrPersonLongProp[{0}]", __orm_iLoopVar);
				arrPersonLongProp[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iMoney();
				iMoney = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iGold();
				iGold = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iGold_Bind();
				iGold_Bind = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iHeroExpPool();
				iHeroExpPool = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iGuildContri();
				iGuildContri = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iExp();
				iExp = oPacker.ReadVarintINT32();
			}break;
			case 9: {
				set_has_iGoodsNum();
				iGoodsNum = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_arrGoodsSID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iGoodsNum=iGoodsNum<__orm_iArrCount ? iGoodsNum:(int)__orm_iArrCount;
				iGoodsNum=iGoodsNum<(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX ? iGoodsNum:(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX;
				if (iGoodsNum > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iGoodsNum; ++__orm_iLoopVar) {
					arrGoodsSID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 11: {
				set_has_arrGoodsNum();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iGoodsNum=iGoodsNum<__orm_iArrCount ? iGoodsNum:(int)__orm_iArrCount;
				iGoodsNum=iGoodsNum<(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX ? iGoodsNum:(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX;
				if (iGoodsNum > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iGoodsNum; ++__orm_iLoopVar) {
					arrGoodsNum[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 17: {
				set_has_sTag();
				sTag = oPacker.ReadSTRING();
			}break;
			case 19: {
				set_has_iShowMode();
				iShowMode = oPacker.ReadVarintINT32();
			}break;
			case 20: {
				set_has_iPrizeIDCount();
				iPrizeIDCount = oPacker.ReadINT8();
			}break;
			case 12: {
				set_has_arrPrizeID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPrizeIDCount=iPrizeIDCount<__orm_iArrCount ? iPrizeIDCount:(sbyte)__orm_iArrCount;
				iPrizeIDCount=iPrizeIDCount<(sbyte)32 ? iPrizeIDCount:(sbyte)32;
				if (iPrizeIDCount > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPrizeIDCount; ++__orm_iLoopVar) {
					arrPrizeID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 24: {
				set_has_arrPrizeNum();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPrizeIDCount=iPrizeIDCount<__orm_iArrCount ? iPrizeIDCount:(sbyte)__orm_iArrCount;
				iPrizeIDCount=iPrizeIDCount<(sbyte)32 ? iPrizeIDCount:(sbyte)32;
				if (iPrizeIDCount > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPrizeIDCount; ++__orm_iLoopVar) {
					arrPrizeNum[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 31: {
				set_has_iDiscipleLId();
				iDiscipleLId = oPacker.ReadVarintINT64();
			}break;
			case 32: {
				set_has_iWanderGoodsNum();
				iWanderGoodsNum = oPacker.ReadVarintINT32();
			}break;
			case 33: {
				set_has_arrWanderGoodsID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iWanderGoodsNum=iWanderGoodsNum<__orm_iArrCount ? iWanderGoodsNum:(int)__orm_iArrCount;
				iWanderGoodsNum=iWanderGoodsNum<(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX ? iWanderGoodsNum:(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX;
				if (iWanderGoodsNum > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iWanderGoodsNum; ++__orm_iLoopVar) {
					arrWanderGoodsID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 34: {
				set_has_arrWanderGoodsNum();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iWanderGoodsNum=iWanderGoodsNum<__orm_iArrCount ? iWanderGoodsNum:(int)__orm_iArrCount;
				iWanderGoodsNum=iWanderGoodsNum<(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX ? iWanderGoodsNum:(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX;
				if (iWanderGoodsNum > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iWanderGoodsNum; ++__orm_iLoopVar) {
					arrWanderGoodsNum[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 35: {
				set_has_iWEquipsNum();
				iWEquipsNum = oPacker.ReadVarintINT32();
			}break;
			case 36: {
				set_has_arrWEquipId();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iWEquipsNum=iWEquipsNum<__orm_iArrCount ? iWEquipsNum:(int)__orm_iArrCount;
				iWEquipsNum=iWEquipsNum<(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX ? iWEquipsNum:(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX;
				if (iWEquipsNum > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iWEquipsNum; ++__orm_iLoopVar) {
					arrWEquipId[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 37: {
				set_has_arrWEquipLocalId();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iWEquipsNum=iWEquipsNum<__orm_iArrCount ? iWEquipsNum:(int)__orm_iArrCount;
				iWEquipsNum=iWEquipsNum<(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX ? iWEquipsNum:(int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX;
				if (iWEquipsNum > (int)TCONST.ORM_SHOW_PRIZE_GOODS_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iWEquipsNum; ++__orm_iLoopVar) {
					arrWEquipLocalId[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			case 40: {
				set_has_iDisciplePropNum();
				iDisciplePropNum = oPacker.ReadVarintINT32();
			}break;
			case 41: {
				set_has_arrDiscipleProp();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iDisciplePropNum=iDisciplePropNum<__orm_iArrCount ? iDisciplePropNum:(int)__orm_iArrCount;
				iDisciplePropNum=iDisciplePropNum<(int)32 ? iDisciplePropNum:(int)32;
				if (iDisciplePropNum > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iDisciplePropNum; ++__orm_iLoopVar) {
					arrDiscipleProp[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 42: {
				set_has_iPersonPropNum();
				iPersonPropNum = oPacker.ReadVarintINT32();
			}break;
			case 43: {
				set_has_arrPersonProp();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPersonPropNum=iPersonPropNum<__orm_iArrCount ? iPersonPropNum:(int)__orm_iArrCount;
				iPersonPropNum=iPersonPropNum<(int)32 ? iPersonPropNum:(int)32;
				if (iPersonPropNum > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPersonPropNum; ++__orm_iLoopVar) {
					arrPersonProp[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 44: {
				set_has_iPersonLongPropNum();
				iPersonLongPropNum = oPacker.ReadVarintINT32();
			}break;
			case 45: {
				set_has_arrPersonLongProp();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPersonLongPropNum=iPersonLongPropNum<__orm_iArrCount ? iPersonLongPropNum:(int)__orm_iArrCount;
				iPersonLongPropNum=iPersonLongPropNum<(int)32 ? iPersonLongPropNum:(int)32;
				if (iPersonLongPropNum > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPersonLongPropNum; ++__orm_iLoopVar) {
					arrPersonLongProp[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 离线奖励现场，奖励ID
public class TOfflinePrizeCxt_PrizeID
{
	private uint[] __orm_has_bits = new uint[1];
	private int iID;   //
	private int iLen;   //
	private int[] arrPrizeID = new int[(int)10];   //奖励ID
	private int iOsAddReason;   //
	private string sTag;   //奖励标签

	public const int countof_arrPrizeID = (int)10;

	public const int MAX_PACKEDSIZE = 173;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iID(int _iID){set_has_iID(); iID=_iID;}
	public int get_iID(){if (has_iID()) {return iID;} return 0;}

	public bool has_iLen() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iLen() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iLen() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iLen(int _iLen){set_has_iLen(); iLen=_iLen;}
	public int get_iLen(){if (has_iLen()) {return iLen;} return 0;}

	public bool has_arrPrizeID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrPrizeID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrPrizeID() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrPrizeID(){set_has_arrPrizeID(); return arrPrizeID;}
	public int[] get_arrPrizeID(){return arrPrizeID;}

	public bool has_iOsAddReason() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iOsAddReason() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iOsAddReason() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iOsAddReason(int _iOsAddReason){set_has_iOsAddReason(); iOsAddReason=_iOsAddReason;}
	public int get_iOsAddReason(){if (has_iOsAddReason()) {return iOsAddReason;} return 0;}

	public bool has_sTag() {return (__orm_has_bits[0] & 0x20000u) != 0;}
	public void set_has_sTag() {__orm_has_bits[0] |= 0x20000u;}
	public void clear_has_sTag() {__orm_has_bits[0] &= ~(0x20000u);}
	public void set_sTag(string _sTag){set_has_sTag(); sTag=_sTag;}
	public string get_sTag(){if (has_sTag()) {return sTag;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iID);
		};
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iLen);
		};
		if (has_arrPrizeID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)10) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)10) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPrizeID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iOsAddReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iOsAddReason);
		};
		if (has_sTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,3));  // f id
			oPacker.WriteSTRING(sTag);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iID);
		};
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iLen);
		};
		if (has_arrPrizeID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)10) {
				oPacker.PushFieldName("iLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)10) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPrizeID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iOsAddReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iOsAddReason);
		};
		if (has_sTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,3));  // f id
			oPacker.WriteSTRING(sTag);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iID();
				iID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iLen();
				iLen = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrPrizeID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iLen=iLen<__orm_iArrCount ? iLen:(int)__orm_iArrCount;
				iLen=iLen<(int)10 ? iLen:(int)10;
				if (iLen > (int)10) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iLen; ++__orm_iLoopVar) {
					arrPrizeID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 4: {
				set_has_iOsAddReason();
				iOsAddReason = oPacker.ReadVarintINT32();
			}break;
			case 17: {
				set_has_sTag();
				sTag = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 物品使用req
public class TMSG_LEECHDOM_USE_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iGoodsSID;   //使用的物品sid
	private ushort[] arrSelect = new ushort[(int)TCONST.ORM_LEECHDOM_USE_SELECT_COUNT];   //9种物品各自的使用次数
	private string strPass;   //透传(客户端用)

	public const int countof_arrSelect = (int)TCONST.ORM_LEECHDOM_USE_SELECT_COUNT;

	public const int MAX_PACKEDSIZE = 199;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_LEECHDOM_USE_SELECT_COUNT; ++__orm_iLoopVar){arrSelect[__orm_iLoopVar]=0;}
	}
	public bool has_iGoodsSID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iGoodsSID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iGoodsSID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iGoodsSID(int _iGoodsSID){set_has_iGoodsSID(); iGoodsSID=_iGoodsSID;}
	public int get_iGoodsSID(){if (has_iGoodsSID()) {return iGoodsSID;} return 0;}

	public bool has_arrSelect() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrSelect() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrSelect() {__orm_has_bits[0] &= ~(0x20u);}
	public ushort[] set_arrSelect(){set_has_arrSelect(); return arrSelect;}
	public ushort[] get_arrSelect(){return arrSelect;}

	public bool has_strPass() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_strPass() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_strPass() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_strPass(string _strPass){set_has_strPass(); strPass=_strPass;}
	public string get_strPass(){if (has_strPass()) {return strPass;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iGoodsSID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iGoodsSID);
		};
		if (has_arrSelect()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_LEECHDOM_USE_SELECT_COUNT); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_LEECHDOM_USE_SELECT_COUNT); ++__orm_iLoopVar) {
		    oPacker.WriteVarintUINT16(arrSelect[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_strPass()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,3));  // f id
			oPacker.WriteSTRING(strPass);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iGoodsSID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iGoodsSID);
		};
		if (has_arrSelect()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_LEECHDOM_USE_SELECT_COUNT); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_LEECHDOM_USE_SELECT_COUNT); ++__orm_iLoopVar) {
		    oPacker.WriteVarintUINT16(arrSelect[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_strPass()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,3));  // f id
			oPacker.WriteSTRING(strPass);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iGoodsSID();
				iGoodsSID = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_arrSelect();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)TCONST.ORM_LEECHDOM_USE_SELECT_COUNT ? __orm_iArrCount:(uint)TCONST.ORM_LEECHDOM_USE_SELECT_COUNT;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrSelect[__orm_iLoopVar] = oPacker.ReadVarintUINT16();
				};
			}break;
			case 7: {
				set_has_strPass();
				strPass = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 物品使用rsp
public class TMSG_LEECHDOM_USE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private uint u32ErrCode;   //错误码
	private uint iGoodsID;   //物品ID, 不是sid
	private string strPass;   //透传(客户端用)


	public const int MAX_PACKEDSIZE = 99;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_u32ErrCode() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_u32ErrCode() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_u32ErrCode() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_u32ErrCode(uint _u32ErrCode){set_has_u32ErrCode(); u32ErrCode=_u32ErrCode;}
	public uint get_u32ErrCode(){if (has_u32ErrCode()) {return u32ErrCode;} return 0;}

	public bool has_iGoodsID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iGoodsID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iGoodsID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iGoodsID(uint _iGoodsID){set_has_iGoodsID(); iGoodsID=_iGoodsID;}
	public uint get_iGoodsID(){if (has_iGoodsID()) {return iGoodsID;} return 0;}

	public bool has_strPass() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_strPass() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_strPass() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_strPass(string _strPass){set_has_strPass(); strPass=_strPass;}
	public string get_strPass(){if (has_strPass()) {return strPass;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
		if (has_iGoodsID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintUINT32(iGoodsID);
		};
		if (has_strPass()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,3));  // f id
			oPacker.WriteSTRING(strPass);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
		if (has_iGoodsID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintUINT32(iGoodsID);
		};
		if (has_strPass()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,3));  // f id
			oPacker.WriteSTRING(strPass);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_u32ErrCode();
				u32ErrCode = oPacker.ReadVarintUINT32();
			}break;
			case 2: {
				set_has_iGoodsID();
				iGoodsID = oPacker.ReadVarintUINT32();
			}break;
			case 7: {
				set_has_strPass();
				strPass = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 胚子定义
public class TSeedingInfo
{
	private uint[] __orm_has_bits = new uint[1];
	private long iLocalId;   //本地id
	private int iSeedingId;   //种子id
	private int iStarLevel;   //星级


	public const int MAX_PACKEDSIZE = 40;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLocalId(long _iLocalId){set_has_iLocalId(); iLocalId=_iLocalId;}
	public long get_iLocalId(){if (has_iLocalId()) {return iLocalId;} return 0;}

	public bool has_iSeedingId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iSeedingId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iSeedingId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iSeedingId(int _iSeedingId){set_has_iSeedingId(); iSeedingId=_iSeedingId;}
	public int get_iSeedingId(){if (has_iSeedingId()) {return iSeedingId;} return 0;}

	public bool has_iStarLevel() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iStarLevel() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iStarLevel() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iStarLevel(int _iStarLevel){set_has_iStarLevel(); iStarLevel=_iStarLevel;}
	public int get_iStarLevel(){if (has_iStarLevel()) {return iStarLevel;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_iSeedingId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSeedingId);
		};
		if (has_iStarLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iStarLevel);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_iSeedingId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSeedingId);
		};
		if (has_iStarLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iStarLevel);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLocalId();
				iLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iSeedingId();
				iSeedingId = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iStarLevel();
				iStarLevel = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 胚子部件数据(私有)
public class TSeedlingPartPrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private int iSeedingCount;   //胚子数量
	private TSeedingInfo[] arrSeedingInfo = new TSeedingInfo[(int)TCONST.ORM_MAX_SEEDING_NUM];   //胚子数组
	public TSeedlingPartPrivateContext() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_MAX_SEEDING_NUM; ++__orm_iLoopVar) {
			arrSeedingInfo[__orm_iLoopVar] = new TSeedingInfo();
		}
	}

	public const int countof_arrSeedingInfo = (int)TCONST.ORM_MAX_SEEDING_NUM;

	public const int MAX_PACKEDSIZE = 4029;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_MAX_SEEDING_NUM; ++__orm_iLoopVar){arrSeedingInfo[__orm_iLoopVar].init();}
	}
	public bool has_iSeedingCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iSeedingCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iSeedingCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iSeedingCount(int _iSeedingCount){set_has_iSeedingCount(); iSeedingCount=_iSeedingCount;}
	public int get_iSeedingCount(){if (has_iSeedingCount()) {return iSeedingCount;} return 0;}

	public bool has_arrSeedingInfo() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrSeedingInfo() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrSeedingInfo() {__orm_has_bits[0] &= ~(0x4u);}
	public TSeedingInfo[] set_arrSeedingInfo(){set_has_arrSeedingInfo(); return arrSeedingInfo;}
	public TSeedingInfo[] get_arrSeedingInfo(){return arrSeedingInfo;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSeedingCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iSeedingCount);
		};
		if (has_arrSeedingInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSeedingCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_SEEDING_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_SEEDING_NUM) && (__orm_iLoopVar < iSeedingCount); ++__orm_iLoopVar) {
				arrSeedingInfo[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSeedingCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iSeedingCount);
		};
		if (has_arrSeedingInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSeedingCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_SEEDING_NUM) {
				oPacker.PushFieldName("iSeedingCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_SEEDING_NUM) && (__orm_iLoopVar < iSeedingCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrSeedingInfo[{0}]", __orm_iLoopVar);
				arrSeedingInfo[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iSeedingCount();
				iSeedingCount = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrSeedingInfo();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iSeedingCount=iSeedingCount<__orm_iArrCount ? iSeedingCount:(int)__orm_iArrCount;
				iSeedingCount=iSeedingCount<(int)TCONST.ORM_MAX_SEEDING_NUM ? iSeedingCount:(int)TCONST.ORM_MAX_SEEDING_NUM;
				if (iSeedingCount > (int)TCONST.ORM_MAX_SEEDING_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iSeedingCount; ++__orm_iLoopVar) {
					arrSeedingInfo[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备实例定义
public class TWanderEquip
{
	private uint[] __orm_has_bits = new uint[1];
	private long iLocalId;   //本地id
	private int iEquipId;   //装备id
	private int iPos;   //位置
	private int iRot;   //旋转
	private int iHandType;   //手牌区装备类型 EnHandEquipType


	public const int MAX_PACKEDSIZE = 60;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLocalId(long _iLocalId){set_has_iLocalId(); iLocalId=_iLocalId;}
	public long get_iLocalId(){if (has_iLocalId()) {return iLocalId;} return 0;}

	public bool has_iEquipId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iEquipId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iEquipId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iEquipId(int _iEquipId){set_has_iEquipId(); iEquipId=_iEquipId;}
	public int get_iEquipId(){if (has_iEquipId()) {return iEquipId;} return 0;}

	public bool has_iPos() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iPos() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iPos() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iPos(int _iPos){set_has_iPos(); iPos=_iPos;}
	public int get_iPos(){if (has_iPos()) {return iPos;} return -1;}

	public bool has_iRot() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRot() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRot() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRot(int _iRot){set_has_iRot(); iRot=_iRot;}
	public int get_iRot(){if (has_iRot()) {return iRot;} return 0;}

	public bool has_iHandType() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iHandType() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iHandType() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iHandType(int _iHandType){set_has_iHandType(); iHandType=_iHandType;}
	public int get_iHandType(){if (has_iHandType()) {return iHandType;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_iEquipId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iEquipId);
		};
		if (has_iPos()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iPos);
		};
		if (has_iRot()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRot);
		};
		if (has_iHandType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iHandType);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_iEquipId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iEquipId);
		};
		if (has_iPos()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iPos);
		};
		if (has_iRot()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRot);
		};
		if (has_iHandType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iHandType);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLocalId();
				iLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iEquipId();
				iEquipId = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iPos();
				iPos = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iRot();
				iRot = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iHandType();
				iHandType = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 命盘定义
public class TFateChart
{
	private uint[] __orm_has_bits = new uint[1];
	private int[] arrGroundMask = new int[(int)TCONST.ORM_FATECHART_ROW_NUM];   //格子区域位图
	private int[] arrEquipMask = new int[(int)TCONST.ORM_FATECHART_ROW_NUM];   //已装备位图

	public const int countof_arrGroundMask = (int)TCONST.ORM_FATECHART_ROW_NUM;
	public const int countof_arrEquipMask = (int)TCONST.ORM_FATECHART_ROW_NUM;

	public const int MAX_PACKEDSIZE = 93;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_FATECHART_ROW_NUM; ++__orm_iLoopVar){arrGroundMask[__orm_iLoopVar]=0;}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_FATECHART_ROW_NUM; ++__orm_iLoopVar){arrEquipMask[__orm_iLoopVar]=0;}
	}
	public bool has_arrGroundMask() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_arrGroundMask() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_arrGroundMask() {__orm_has_bits[0] &= ~(0x2u);}
	public int[] set_arrGroundMask(){set_has_arrGroundMask(); return arrGroundMask;}
	public int[] get_arrGroundMask(){return arrGroundMask;}

	public bool has_arrEquipMask() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrEquipMask() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrEquipMask() {__orm_has_bits[0] &= ~(0x4u);}
	public int[] set_arrEquipMask(){set_has_arrEquipMask(); return arrEquipMask;}
	public int[] get_arrEquipMask(){return arrEquipMask;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_arrGroundMask()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_FATECHART_ROW_NUM); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_FATECHART_ROW_NUM); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrGroundMask[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrEquipMask()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_FATECHART_ROW_NUM); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_FATECHART_ROW_NUM); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrEquipMask[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_arrGroundMask()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_FATECHART_ROW_NUM); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_FATECHART_ROW_NUM); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrGroundMask[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrEquipMask()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_FATECHART_ROW_NUM); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_FATECHART_ROW_NUM); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrEquipMask[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_arrGroundMask();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)TCONST.ORM_FATECHART_ROW_NUM ? __orm_iArrCount:(uint)TCONST.ORM_FATECHART_ROW_NUM;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrGroundMask[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 2: {
				set_has_arrEquipMask();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)TCONST.ORM_FATECHART_ROW_NUM ? __orm_iArrCount:(uint)TCONST.ORM_FATECHART_ROW_NUM;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrEquipMask[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 完整装备信息
public class TFullEquipInfo
{
	private uint[] __orm_has_bits = new uint[1];
	private long iMaxLocalId;   //装备最大localId
	private int iWanderEquipCount;   //装备数量
	private TWanderEquip[] arrWanderEquip = new TWanderEquip[(int)TCONST.ORM_MAX_EQUIP_NUM];   //装备数组
	public TFullEquipInfo() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM; ++__orm_iLoopVar) {
			arrWanderEquip[__orm_iLoopVar] = new TWanderEquip();
		}
	}

	public const int countof_arrWanderEquip = (int)TCONST.ORM_MAX_EQUIP_NUM;

	public const int MAX_PACKEDSIZE = 2924;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_MAX_EQUIP_NUM; ++__orm_iLoopVar){arrWanderEquip[__orm_iLoopVar].init();}
	}
	public bool has_iMaxLocalId() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iMaxLocalId() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iMaxLocalId() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iMaxLocalId(long _iMaxLocalId){set_has_iMaxLocalId(); iMaxLocalId=_iMaxLocalId;}
	public long get_iMaxLocalId(){if (has_iMaxLocalId()) {return iMaxLocalId;} return 0;}

	public bool has_iWanderEquipCount() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iWanderEquipCount() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iWanderEquipCount() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iWanderEquipCount(int _iWanderEquipCount){set_has_iWanderEquipCount(); iWanderEquipCount=_iWanderEquipCount;}
	public int get_iWanderEquipCount(){if (has_iWanderEquipCount()) {return iWanderEquipCount;} return 0;}

	public bool has_arrWanderEquip() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_arrWanderEquip() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_arrWanderEquip() {__orm_has_bits[0] &= ~(0x1000u);}
	public TWanderEquip[] set_arrWanderEquip(){set_has_arrWanderEquip(); return arrWanderEquip;}
	public TWanderEquip[] get_arrWanderEquip(){return arrWanderEquip;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMaxLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT64(iMaxLocalId);
		};
		if (has_iWanderEquipCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iWanderEquipCount);
		};
		if (has_arrWanderEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iWanderEquipCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_EQUIP_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM) && (__orm_iLoopVar < iWanderEquipCount); ++__orm_iLoopVar) {
				arrWanderEquip[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMaxLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT64(iMaxLocalId);
		};
		if (has_iWanderEquipCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iWanderEquipCount);
		};
		if (has_arrWanderEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iWanderEquipCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_EQUIP_NUM) {
				oPacker.PushFieldName("iWanderEquipCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM) && (__orm_iLoopVar < iWanderEquipCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrWanderEquip[{0}]", __orm_iLoopVar);
				arrWanderEquip[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 10: {
				set_has_iMaxLocalId();
				iMaxLocalId = oPacker.ReadVarintINT64();
			}break;
			case 11: {
				set_has_iWanderEquipCount();
				iWanderEquipCount = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_arrWanderEquip();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iWanderEquipCount=iWanderEquipCount<__orm_iArrCount ? iWanderEquipCount:(int)__orm_iArrCount;
				iWanderEquipCount=iWanderEquipCount<(int)TCONST.ORM_MAX_EQUIP_NUM ? iWanderEquipCount:(int)TCONST.ORM_MAX_EQUIP_NUM;
				if (iWanderEquipCount > (int)TCONST.ORM_MAX_EQUIP_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iWanderEquipCount; ++__orm_iLoopVar) {
					arrWanderEquip[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 一列表装备信息
public class TWanderEquipList
{
	private uint[] __orm_has_bits = new uint[1];
	private int iWanderEquipCount;   //装备数量
	private TWanderEquip[] arrWanderEquip = new TWanderEquip[(int)TCONST.ORM_MAX_EQUIP_NUM];   //装备数组
	public TWanderEquipList() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM; ++__orm_iLoopVar) {
			arrWanderEquip[__orm_iLoopVar] = new TWanderEquip();
		}
	}

	public const int countof_arrWanderEquip = (int)TCONST.ORM_MAX_EQUIP_NUM;

	public const int MAX_PACKEDSIZE = 2909;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_MAX_EQUIP_NUM; ++__orm_iLoopVar){arrWanderEquip[__orm_iLoopVar].init();}
	}
	public bool has_iWanderEquipCount() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iWanderEquipCount() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iWanderEquipCount() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iWanderEquipCount(int _iWanderEquipCount){set_has_iWanderEquipCount(); iWanderEquipCount=_iWanderEquipCount;}
	public int get_iWanderEquipCount(){if (has_iWanderEquipCount()) {return iWanderEquipCount;} return 0;}

	public bool has_arrWanderEquip() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_arrWanderEquip() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_arrWanderEquip() {__orm_has_bits[0] &= ~(0x1000u);}
	public TWanderEquip[] set_arrWanderEquip(){set_has_arrWanderEquip(); return arrWanderEquip;}
	public TWanderEquip[] get_arrWanderEquip(){return arrWanderEquip;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iWanderEquipCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iWanderEquipCount);
		};
		if (has_arrWanderEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iWanderEquipCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_EQUIP_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM) && (__orm_iLoopVar < iWanderEquipCount); ++__orm_iLoopVar) {
				arrWanderEquip[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iWanderEquipCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iWanderEquipCount);
		};
		if (has_arrWanderEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iWanderEquipCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_EQUIP_NUM) {
				oPacker.PushFieldName("iWanderEquipCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM) && (__orm_iLoopVar < iWanderEquipCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrWanderEquip[{0}]", __orm_iLoopVar);
				arrWanderEquip[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 11: {
				set_has_iWanderEquipCount();
				iWanderEquipCount = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_arrWanderEquip();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iWanderEquipCount=iWanderEquipCount<__orm_iArrCount ? iWanderEquipCount:(int)__orm_iArrCount;
				iWanderEquipCount=iWanderEquipCount<(int)TCONST.ORM_MAX_EQUIP_NUM ? iWanderEquipCount:(int)TCONST.ORM_MAX_EQUIP_NUM;
				if (iWanderEquipCount > (int)TCONST.ORM_MAX_EQUIP_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iWanderEquipCount; ++__orm_iLoopVar) {
					arrWanderEquip[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备图鉴单元
public class TEquipAtlasInfo
{
	private uint[] __orm_has_bits = new uint[1];
	private int iGroupId;   //装备组id
	private int iQuality;   //品质


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iGroupId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iGroupId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iGroupId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iGroupId(int _iGroupId){set_has_iGroupId(); iGroupId=_iGroupId;}
	public int get_iGroupId(){if (has_iGroupId()) {return iGroupId;} return 0;}

	public bool has_iQuality() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iQuality() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iQuality() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iQuality(int _iQuality){set_has_iQuality(); iQuality=_iQuality;}
	public int get_iQuality(){if (has_iQuality()) {return iQuality;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iGroupId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iGroupId);
		};
		if (has_iQuality()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iQuality);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iGroupId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iGroupId);
		};
		if (has_iQuality()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iQuality);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iGroupId();
				iGroupId = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iQuality();
				iQuality = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 一列表弟子技能信息
public class TDiscipleSkillList
{
	private uint[] __orm_has_bits = new uint[1];
	private int iSkillCount;   //技能数量
	private int[] arrSkill = new int[(int)TCONST.ORM_MAX_EQUIP_NUM];   //技能数组
	private int[] arrSkillArea = new int[(int)TCONST.ORM_MAX_EQUIP_NUM];   //技能区域数组

	public const int countof_arrSkill = (int)TCONST.ORM_MAX_EQUIP_NUM;
	public const int countof_arrSkillArea = (int)TCONST.ORM_MAX_EQUIP_NUM;

	public const int MAX_PACKEDSIZE = 523;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iSkillCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iSkillCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iSkillCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iSkillCount(int _iSkillCount){set_has_iSkillCount(); iSkillCount=_iSkillCount;}
	public int get_iSkillCount(){if (has_iSkillCount()) {return iSkillCount;} return 0;}

	public bool has_arrSkill() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrSkill() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrSkill() {__orm_has_bits[0] &= ~(0x4u);}
	public int[] set_arrSkill(){set_has_arrSkill(); return arrSkill;}
	public int[] get_arrSkill(){return arrSkill;}

	public bool has_arrSkillArea() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrSkillArea() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrSkillArea() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrSkillArea(){set_has_arrSkillArea(); return arrSkillArea;}
	public int[] get_arrSkillArea(){return arrSkillArea;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSkillCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iSkillCount);
		};
		if (has_arrSkill()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSkillCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_EQUIP_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM) && (__orm_iLoopVar < iSkillCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrSkill[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrSkillArea()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSkillCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_EQUIP_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM) && (__orm_iLoopVar < iSkillCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrSkillArea[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSkillCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iSkillCount);
		};
		if (has_arrSkill()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSkillCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_EQUIP_NUM) {
				oPacker.PushFieldName("iSkillCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM) && (__orm_iLoopVar < iSkillCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrSkill[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrSkillArea()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSkillCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_EQUIP_NUM) {
				oPacker.PushFieldName("iSkillCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM) && (__orm_iLoopVar < iSkillCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrSkillArea[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iSkillCount();
				iSkillCount = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrSkill();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iSkillCount=iSkillCount<__orm_iArrCount ? iSkillCount:(int)__orm_iArrCount;
				iSkillCount=iSkillCount<(int)TCONST.ORM_MAX_EQUIP_NUM ? iSkillCount:(int)TCONST.ORM_MAX_EQUIP_NUM;
				if (iSkillCount > (int)TCONST.ORM_MAX_EQUIP_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iSkillCount; ++__orm_iLoopVar) {
					arrSkill[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 3: {
				set_has_arrSkillArea();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iSkillCount=iSkillCount<__orm_iArrCount ? iSkillCount:(int)__orm_iArrCount;
				iSkillCount=iSkillCount<(int)TCONST.ORM_MAX_EQUIP_NUM ? iSkillCount:(int)TCONST.ORM_MAX_EQUIP_NUM;
				if (iSkillCount > (int)TCONST.ORM_MAX_EQUIP_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iSkillCount; ++__orm_iLoopVar) {
					arrSkillArea[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 一列表弟子词条信息
public class TDiscipleAbilityList
{
	private uint[] __orm_has_bits = new uint[1];
	private int iCount;   //词条数量
	private int[] arrAbility = new int[(int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM];   //词条数组
	private int[] arrAbilityNum = new int[(int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM];   //词条数量数组

	public const int countof_arrAbility = (int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM;
	public const int countof_arrAbilityNum = (int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM;

	public const int MAX_PACKEDSIZE = 203;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iCount(int _iCount){set_has_iCount(); iCount=_iCount;}
	public int get_iCount(){if (has_iCount()) {return iCount;} return 0;}

	public bool has_arrAbility() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrAbility() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrAbility() {__orm_has_bits[0] &= ~(0x4u);}
	public int[] set_arrAbility(){set_has_arrAbility(); return arrAbility;}
	public int[] get_arrAbility(){return arrAbility;}

	public bool has_arrAbilityNum() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrAbilityNum() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrAbilityNum() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrAbilityNum(){set_has_arrAbilityNum(); return arrAbilityNum;}
	public int[] get_arrAbilityNum(){return arrAbilityNum;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrAbility()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrAbility[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrAbilityNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrAbilityNum[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrAbility()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrAbility[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrAbilityNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrAbilityNum[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iCount();
				iCount = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrAbility();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(int)__orm_iArrCount;
				iCount=iCount<(int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM ? iCount:(int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM;
				if (iCount > (int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrAbility[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 3: {
				set_has_arrAbilityNum();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(int)__orm_iArrCount;
				iCount=iCount<(int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM ? iCount:(int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM;
				if (iCount > (int)TCONST.ORM_MAX_DISCIPLE_ABILITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrAbilityNum[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 弟子定义
public class TDiscipleInfo
{
	private uint[] __orm_has_bits = new uint[1];
	private long iLocalId;   //本地id
	private int iSeedingId;   //胚子id
	private TFullEquipInfo stFullEquipInfo = new TFullEquipInfo();   //完整装备信息
	private TDiscipleSkillList stSkillList = new TDiscipleSkillList();   //完整技能信息
	private TDiscipleAbilityList stAbilityList = new TDiscipleAbilityList();   //完整词条信息
	private string szName;   //弟子名字
	private long[] arrLevelUnlocked = new long[(int)1];   //被解锁的背包等级，位图
	private int[] arrProp = new int[(int)EnDiscipleProp.DISCIPLE_PROP_MAXID];   //弟子属性

	public const int countof_arrLevelUnlocked = (int)1;
	public const int countof_arrProp = (int)EnDiscipleProp.DISCIPLE_PROP_MAXID;

	public const int MAX_PACKEDSIZE = 5247;

	public void init() {
		__orm_has_bits[0]=0;
		stFullEquipInfo.init();
		stSkillList.init();
		stAbilityList.init();
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)1; ++__orm_iLoopVar){arrLevelUnlocked[__orm_iLoopVar]=0;}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)EnDiscipleProp.DISCIPLE_PROP_MAXID; ++__orm_iLoopVar){arrProp[__orm_iLoopVar]=0;}
	}
	public bool has_iLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLocalId(long _iLocalId){set_has_iLocalId(); iLocalId=_iLocalId;}
	public long get_iLocalId(){if (has_iLocalId()) {return iLocalId;} return 0;}

	public bool has_iSeedingId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iSeedingId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iSeedingId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iSeedingId(int _iSeedingId){set_has_iSeedingId(); iSeedingId=_iSeedingId;}
	public int get_iSeedingId(){if (has_iSeedingId()) {return iSeedingId;} return 0;}

	public bool has_stFullEquipInfo() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_stFullEquipInfo() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_stFullEquipInfo() {__orm_has_bits[0] &= ~(0x8u);}
	public TFullEquipInfo set_stFullEquipInfo(){set_has_stFullEquipInfo(); return stFullEquipInfo;}
	public TFullEquipInfo get_stFullEquipInfo(){return stFullEquipInfo;}

	public bool has_stSkillList() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_stSkillList() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_stSkillList() {__orm_has_bits[0] &= ~(0x10u);}
	public TDiscipleSkillList set_stSkillList(){set_has_stSkillList(); return stSkillList;}
	public TDiscipleSkillList get_stSkillList(){return stSkillList;}

	public bool has_stAbilityList() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_stAbilityList() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_stAbilityList() {__orm_has_bits[0] &= ~(0x20u);}
	public TDiscipleAbilityList set_stAbilityList(){set_has_stAbilityList(); return stAbilityList;}
	public TDiscipleAbilityList get_stAbilityList(){return stAbilityList;}

	public bool has_szName() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_szName() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_szName() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_szName(string _szName){set_has_szName(); szName=_szName;}
	public string get_szName(){if (has_szName()) {return szName;} return "";}

	public bool has_arrLevelUnlocked() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_arrLevelUnlocked() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_arrLevelUnlocked() {__orm_has_bits[0] &= ~(0x100u);}
	public long[] set_arrLevelUnlocked(){set_has_arrLevelUnlocked(); return arrLevelUnlocked;}
	public long[] get_arrLevelUnlocked(){return arrLevelUnlocked;}

	public bool has_arrProp() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_arrProp() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_arrProp() {__orm_has_bits[0] &= ~(0x400u);}
	public int[] set_arrProp(){set_has_arrProp(); return arrProp;}
	public int[] get_arrProp(){return arrProp;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_iSeedingId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSeedingId);
		};
		if (has_stFullEquipInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stFullEquipInfo.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stSkillList()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stSkillList.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stAbilityList()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stAbilityList.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szName);
		};
		if (has_arrLevelUnlocked()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)1); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)1); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrLevelUnlocked[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)EnDiscipleProp.DISCIPLE_PROP_MAXID); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnDiscipleProp.DISCIPLE_PROP_MAXID); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrProp[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_iSeedingId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSeedingId);
		};
		if (has_stFullEquipInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stFullEquipInfo");
			stFullEquipInfo.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stSkillList()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stSkillList");
			stSkillList.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stAbilityList()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stAbilityList");
			stAbilityList.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szName);
		};
		if (has_arrLevelUnlocked()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)1); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)1); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrLevelUnlocked[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)EnDiscipleProp.DISCIPLE_PROP_MAXID); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnDiscipleProp.DISCIPLE_PROP_MAXID); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrProp[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLocalId();
				iLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iSeedingId();
				iSeedingId = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_stFullEquipInfo();
				stFullEquipInfo.Unpack(oPacker);
			}break;
			case 4: {
				set_has_stSkillList();
				stSkillList.Unpack(oPacker);
			}break;
			case 5: {
				set_has_stAbilityList();
				stAbilityList.Unpack(oPacker);
			}break;
			case 6: {
				set_has_szName();
				szName = oPacker.ReadSTRING();
			}break;
			case 8: {
				set_has_arrLevelUnlocked();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)1 ? __orm_iArrCount:(uint)1;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrLevelUnlocked[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			case 10: {
				set_has_arrProp();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)EnDiscipleProp.DISCIPLE_PROP_MAXID ? __orm_iArrCount:(uint)EnDiscipleProp.DISCIPLE_PROP_MAXID;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrProp[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 弟子属性更新信息
public class TDiscipleUpdateInfo
{
	private uint[] __orm_has_bits = new uint[1];
	private long iLocalId;   //本地id
	private int iChangePropNum;   //更新属性数量
	private TK32V32[] arrProp = new TK32V32[(int)EnDiscipleProp.DISCIPLE_PROP_MAXID];   //更新属性数组
	public TDiscipleUpdateInfo() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)EnDiscipleProp.DISCIPLE_PROP_MAXID; ++__orm_iLoopVar) {
			arrProp[__orm_iLoopVar] = new TK32V32();
		}
	}

	public const int countof_arrProp = (int)EnDiscipleProp.DISCIPLE_PROP_MAXID;

	public const int MAX_PACKEDSIZE = 7344;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)EnDiscipleProp.DISCIPLE_PROP_MAXID; ++__orm_iLoopVar){arrProp[__orm_iLoopVar].init();}
	}
	public bool has_iLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLocalId(long _iLocalId){set_has_iLocalId(); iLocalId=_iLocalId;}
	public long get_iLocalId(){if (has_iLocalId()) {return iLocalId;} return 0;}

	public bool has_iChangePropNum() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_iChangePropNum() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_iChangePropNum() {__orm_has_bits[0] &= ~(0x200u);}
	public void set_iChangePropNum(int _iChangePropNum){set_has_iChangePropNum(); iChangePropNum=_iChangePropNum;}
	public int get_iChangePropNum(){if (has_iChangePropNum()) {return iChangePropNum;} return 0;}

	public bool has_arrProp() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_arrProp() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_arrProp() {__orm_has_bits[0] &= ~(0x400u);}
	public TK32V32[] set_arrProp(){set_has_arrProp(); return arrProp;}
	public TK32V32[] get_arrProp(){return arrProp;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_iChangePropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iChangePropNum);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iChangePropNum();
			if (__orm_ReferVar > (int)EnDiscipleProp.DISCIPLE_PROP_MAXID) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnDiscipleProp.DISCIPLE_PROP_MAXID) && (__orm_iLoopVar < iChangePropNum); ++__orm_iLoopVar) {
				arrProp[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_iChangePropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iChangePropNum);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iChangePropNum();
			if (__orm_ReferVar > (int)EnDiscipleProp.DISCIPLE_PROP_MAXID) {
				oPacker.PushFieldName("iChangePropNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnDiscipleProp.DISCIPLE_PROP_MAXID) && (__orm_iLoopVar < iChangePropNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrProp[{0}]", __orm_iLoopVar);
				arrProp[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLocalId();
				iLocalId = oPacker.ReadVarintINT64();
			}break;
			case 9: {
				set_has_iChangePropNum();
				iChangePropNum = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_arrProp();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iChangePropNum=iChangePropNum<__orm_iArrCount ? iChangePropNum:(int)__orm_iArrCount;
				iChangePropNum=iChangePropNum<(int)EnDiscipleProp.DISCIPLE_PROP_MAXID ? iChangePropNum:(int)EnDiscipleProp.DISCIPLE_PROP_MAXID;
				if (iChangePropNum > (int)EnDiscipleProp.DISCIPLE_PROP_MAXID) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iChangePropNum; ++__orm_iLoopVar) {
					arrProp[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 弟子部件数据(私有)
public class TDisciplePartPrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private int iDiscipleCount;   //胚子数量
	private TDiscipleInfo[] arrDiscipleInfo = new TDiscipleInfo[(int)TCONST.ORM_MAX_DISCIPLE_NUM];   //弟子数组
	public TDisciplePartPrivateContext() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_MAX_DISCIPLE_NUM; ++__orm_iLoopVar) {
			arrDiscipleInfo[__orm_iLoopVar] = new TDiscipleInfo();
		}
	}

	public const int countof_arrDiscipleInfo = (int)TCONST.ORM_MAX_DISCIPLE_NUM;

	public const int MAX_PACKEDSIZE = 524729;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_MAX_DISCIPLE_NUM; ++__orm_iLoopVar){arrDiscipleInfo[__orm_iLoopVar].init();}
	}
	public bool has_iDiscipleCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleCount(int _iDiscipleCount){set_has_iDiscipleCount(); iDiscipleCount=_iDiscipleCount;}
	public int get_iDiscipleCount(){if (has_iDiscipleCount()) {return iDiscipleCount;} return 0;}

	public bool has_arrDiscipleInfo() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrDiscipleInfo() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrDiscipleInfo() {__orm_has_bits[0] &= ~(0x4u);}
	public TDiscipleInfo[] set_arrDiscipleInfo(){set_has_arrDiscipleInfo(); return arrDiscipleInfo;}
	public TDiscipleInfo[] get_arrDiscipleInfo(){return arrDiscipleInfo;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iDiscipleCount);
		};
		if (has_arrDiscipleInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDiscipleCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_DISCIPLE_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_DISCIPLE_NUM) && (__orm_iLoopVar < iDiscipleCount); ++__orm_iLoopVar) {
				arrDiscipleInfo[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iDiscipleCount);
		};
		if (has_arrDiscipleInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDiscipleCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_DISCIPLE_NUM) {
				oPacker.PushFieldName("iDiscipleCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_DISCIPLE_NUM) && (__orm_iLoopVar < iDiscipleCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrDiscipleInfo[{0}]", __orm_iLoopVar);
				arrDiscipleInfo[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleCount();
				iDiscipleCount = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrDiscipleInfo();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iDiscipleCount=iDiscipleCount<__orm_iArrCount ? iDiscipleCount:(int)__orm_iArrCount;
				iDiscipleCount=iDiscipleCount<(int)TCONST.ORM_MAX_DISCIPLE_NUM ? iDiscipleCount:(int)TCONST.ORM_MAX_DISCIPLE_NUM;
				if (iDiscipleCount > (int)TCONST.ORM_MAX_DISCIPLE_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iDiscipleCount; ++__orm_iLoopVar) {
					arrDiscipleInfo[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 胚子创建
public class TMSG_SEEDING_CREATE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private TSeedingInfo stSeedingInfo = new TSeedingInfo();   //胚子数据


	public const int MAX_PACKEDSIZE = 54;

	public void init() {
		__orm_has_bits[0]=0;
		stSeedingInfo.init();
	}
	public bool has_stSeedingInfo() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_stSeedingInfo() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_stSeedingInfo() {__orm_has_bits[0] &= ~(0x2u);}
	public TSeedingInfo set_stSeedingInfo(){set_has_stSeedingInfo(); return stSeedingInfo;}
	public TSeedingInfo get_stSeedingInfo(){return stSeedingInfo;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stSeedingInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stSeedingInfo.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stSeedingInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stSeedingInfo");
			stSeedingInfo.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_stSeedingInfo();
				stSeedingInfo.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 胚子更新-通知
public class TMSG_SEEDING_UPDATE_PROP_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private TSeedingInfo stSeedingInfo = new TSeedingInfo();   //胚子数据


	public const int MAX_PACKEDSIZE = 54;

	public void init() {
		__orm_has_bits[0]=0;
		stSeedingInfo.init();
	}
	public bool has_stSeedingInfo() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_stSeedingInfo() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_stSeedingInfo() {__orm_has_bits[0] &= ~(0x2u);}
	public TSeedingInfo set_stSeedingInfo(){set_has_stSeedingInfo(); return stSeedingInfo;}
	public TSeedingInfo get_stSeedingInfo(){return stSeedingInfo;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stSeedingInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stSeedingInfo.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stSeedingInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stSeedingInfo");
			stSeedingInfo.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_stSeedingInfo();
				stSeedingInfo.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 胚子升星-请求
public class TMSG_SEEDING_UPGRADE_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iSeedingId;   //胚子id


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iSeedingId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iSeedingId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iSeedingId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iSeedingId(int _iSeedingId){set_has_iSeedingId(); iSeedingId=_iSeedingId;}
	public int get_iSeedingId(){if (has_iSeedingId()) {return iSeedingId;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSeedingId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iSeedingId);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSeedingId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iSeedingId);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iSeedingId();
				iSeedingId = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 胚子升星-返回
public class TMSG_SEEDING_UPGRADE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private int iSeedingId;   //胚子id
	private int iNewLevel;   //新等级
	private int iPower;   //当前战力
	private int iPowerBefore;   //升级前战力


	public const int MAX_PACKEDSIZE = 55;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iSeedingId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iSeedingId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iSeedingId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iSeedingId(int _iSeedingId){set_has_iSeedingId(); iSeedingId=_iSeedingId;}
	public int get_iSeedingId(){if (has_iSeedingId()) {return iSeedingId;} return 0;}

	public bool has_iNewLevel() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iNewLevel() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iNewLevel() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iNewLevel(int _iNewLevel){set_has_iNewLevel(); iNewLevel=_iNewLevel;}
	public int get_iNewLevel(){if (has_iNewLevel()) {return iNewLevel;} return 0;}

	public bool has_iPower() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iPower() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iPower() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iPower(int _iPower){set_has_iPower(); iPower=_iPower;}
	public int get_iPower(){if (has_iPower()) {return iPower;} return 0;}

	public bool has_iPowerBefore() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iPowerBefore() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iPowerBefore() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iPowerBefore(int _iPowerBefore){set_has_iPowerBefore(); iPowerBefore=_iPowerBefore;}
	public int get_iPowerBefore(){if (has_iPowerBefore()) {return iPowerBefore;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iSeedingId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSeedingId);
		};
		if (has_iNewLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iNewLevel);
		};
		if (has_iPower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPower);
		};
		if (has_iPowerBefore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iPowerBefore);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iSeedingId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSeedingId);
		};
		if (has_iNewLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iNewLevel);
		};
		if (has_iPower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPower);
		};
		if (has_iPowerBefore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iPowerBefore);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iSeedingId();
				iSeedingId = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iNewLevel();
				iNewLevel = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iPower();
				iPower = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iPowerBefore();
				iPowerBefore = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 弟子创建
public class TMSG_DISCIPLE_CREATE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private TDiscipleInfo stDiscipleInfo = new TDiscipleInfo();   //弟子数据


	public const int MAX_PACKEDSIZE = 5261;

	public void init() {
		__orm_has_bits[0]=0;
		stDiscipleInfo.init();
	}
	public bool has_stDiscipleInfo() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_stDiscipleInfo() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_stDiscipleInfo() {__orm_has_bits[0] &= ~(0x2u);}
	public TDiscipleInfo set_stDiscipleInfo(){set_has_stDiscipleInfo(); return stDiscipleInfo;}
	public TDiscipleInfo get_stDiscipleInfo(){return stDiscipleInfo;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stDiscipleInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stDiscipleInfo.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stDiscipleInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stDiscipleInfo");
			stDiscipleInfo.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_stDiscipleInfo();
				stDiscipleInfo.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 弟子更新
public class TMSG_DISCIPLE_UPDATE_PROP_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private TDiscipleUpdateInfo stDiscipleUpdateInfo = new TDiscipleUpdateInfo();   //弟子更新数据


	public const int MAX_PACKEDSIZE = 7358;

	public void init() {
		__orm_has_bits[0]=0;
		stDiscipleUpdateInfo.init();
	}
	public bool has_stDiscipleUpdateInfo() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_stDiscipleUpdateInfo() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_stDiscipleUpdateInfo() {__orm_has_bits[0] &= ~(0x2u);}
	public TDiscipleUpdateInfo set_stDiscipleUpdateInfo(){set_has_stDiscipleUpdateInfo(); return stDiscipleUpdateInfo;}
	public TDiscipleUpdateInfo get_stDiscipleUpdateInfo(){return stDiscipleUpdateInfo;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stDiscipleUpdateInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stDiscipleUpdateInfo.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stDiscipleUpdateInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stDiscipleUpdateInfo");
			stDiscipleUpdateInfo.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_stDiscipleUpdateInfo();
				stDiscipleUpdateInfo.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 弟子改名-请求
public class TMSG_DISCIPLE_RENAME_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalId;   //弟子localId
	private string szName;   //新名字


	public const int MAX_PACKEDSIZE = 62;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_szName() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_szName() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_szName() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_szName(string _szName){set_has_szName(); szName=_szName;}
	public string get_szName(){if (has_szName()) {return szName;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szName);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szName);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_szName();
				szName = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 弟子改名-返回
public class TMSG_DISCIPLE_RENAME_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private long iDiscipleLocalId;   //弟子localId
	private string szName;   //新名字


	public const int MAX_PACKEDSIZE = 72;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_szName() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_szName() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_szName() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_szName(string _szName){set_has_szName(); szName=_szName;}
	public string get_szName(){if (has_szName()) {return szName;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szName);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szName);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_szName();
				szName = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备摆放-请求
public class TMSG_DISCIPLE_MOVE_EQUIP_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalId;   //弟子本地id
	private TWanderEquip stWanderEquip = new TWanderEquip();   //装备数据


	public const int MAX_PACKEDSIZE = 89;

	public void init() {
		__orm_has_bits[0]=0;
		stWanderEquip.init();
	}
	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_stWanderEquip() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stWanderEquip() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stWanderEquip() {__orm_has_bits[0] &= ~(0x4u);}
	public TWanderEquip set_stWanderEquip(){set_has_stWanderEquip(); return stWanderEquip;}
	public TWanderEquip get_stWanderEquip(){return stWanderEquip;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_stWanderEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stWanderEquip.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_stWanderEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stWanderEquip");
			stWanderEquip.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_stWanderEquip();
				stWanderEquip.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备摆放-返回
public class TMSG_DISCIPLE_MOVE_EQUIP_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private long iDiscipleLocalId;   //弟子本地id
	private TWanderEquip stMovedEquip = new TWanderEquip();   //更新后的装备数据
	private TWanderEquipList stAffectedEquipList = new TWanderEquipList();   //引起变化的其他装备


	public const int MAX_PACKEDSIZE = 3017;

	public void init() {
		__orm_has_bits[0]=0;
		stMovedEquip.init();
		stAffectedEquipList.init();
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_stMovedEquip() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_stMovedEquip() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_stMovedEquip() {__orm_has_bits[0] &= ~(0x800u);}
	public TWanderEquip set_stMovedEquip(){set_has_stMovedEquip(); return stMovedEquip;}
	public TWanderEquip get_stMovedEquip(){return stMovedEquip;}

	public bool has_stAffectedEquipList() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_stAffectedEquipList() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_stAffectedEquipList() {__orm_has_bits[0] &= ~(0x1000u);}
	public TWanderEquipList set_stAffectedEquipList(){set_has_stAffectedEquipList(); return stAffectedEquipList;}
	public TWanderEquipList get_stAffectedEquipList(){return stAffectedEquipList;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_stMovedEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stMovedEquip.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stAffectedEquipList()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stAffectedEquipList.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_stMovedEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stMovedEquip");
			stMovedEquip.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stAffectedEquipList()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stAffectedEquipList");
			stAffectedEquipList.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 11: {
				set_has_stMovedEquip();
				stMovedEquip.Unpack(oPacker);
			}break;
			case 12: {
				set_has_stAffectedEquipList();
				stAffectedEquipList.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备删除-请求
public class TMSG_DISCIPLE_DELETE_EQUIP_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalId;   //弟子本地id
	private long iEquipLocalId;   //装备本地id


	public const int MAX_PACKEDSIZE = 35;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_iEquipLocalId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iEquipLocalId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iEquipLocalId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iEquipLocalId(long _iEquipLocalId){set_has_iEquipLocalId(); iEquipLocalId=_iEquipLocalId;}
	public long get_iEquipLocalId(){if (has_iEquipLocalId()) {return iEquipLocalId;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iEquipLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iEquipLocalId);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iEquipLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iEquipLocalId);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iEquipLocalId();
				iEquipLocalId = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备删除-返回
public class TMSG_DISCIPLE_DELETE_EQUIP_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private long iDiscipleLocalId;   //弟子本地id
	private long iEquipLocalId;   //装备本地id


	public const int MAX_PACKEDSIZE = 45;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_iEquipLocalId() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iEquipLocalId() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iEquipLocalId() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iEquipLocalId(long _iEquipLocalId){set_has_iEquipLocalId(); iEquipLocalId=_iEquipLocalId;}
	public long get_iEquipLocalId(){if (has_iEquipLocalId()) {return iEquipLocalId;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iEquipLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iEquipLocalId);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iEquipLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iEquipLocalId);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_iEquipLocalId();
				iEquipLocalId = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备添加
public class TMSG_EQUIP_CREATE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalId;   //弟子本地id
	private TWanderEquip stWanderEquip = new TWanderEquip();   //装备数据
	private int iReason;   //EnEquipReason


	public const int MAX_PACKEDSIZE = 99;

	public void init() {
		__orm_has_bits[0]=0;
		stWanderEquip.init();
	}
	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_stWanderEquip() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stWanderEquip() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stWanderEquip() {__orm_has_bits[0] &= ~(0x4u);}
	public TWanderEquip set_stWanderEquip(){set_has_stWanderEquip(); return stWanderEquip;}
	public TWanderEquip get_stWanderEquip(){return stWanderEquip;}

	public bool has_iReason() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iReason() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iReason() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iReason(int _iReason){set_has_iReason(); iReason=_iReason;}
	public int get_iReason(){if (has_iReason()) {return iReason;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_stWanderEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stWanderEquip.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iReason);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_stWanderEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stWanderEquip");
			stWanderEquip.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iReason);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_stWanderEquip();
				stWanderEquip.Unpack(oPacker);
			}break;
			case 3: {
				set_has_iReason();
				iReason = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备更新
public class TMSG_EQUIP_UPDATE_PROP_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalId;   //弟子本地id
	private TFullEquipInfo stFullEquipInfo = new TFullEquipInfo();   //装备数据
	private int iScenario;   //应用场景 EnWEquipUpdateScenario


	public const int MAX_PACKEDSIZE = 2963;

	public void init() {
		__orm_has_bits[0]=0;
		stFullEquipInfo.init();
	}
	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_stFullEquipInfo() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stFullEquipInfo() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stFullEquipInfo() {__orm_has_bits[0] &= ~(0x4u);}
	public TFullEquipInfo set_stFullEquipInfo(){set_has_stFullEquipInfo(); return stFullEquipInfo;}
	public TFullEquipInfo get_stFullEquipInfo(){return stFullEquipInfo;}

	public bool has_iScenario() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iScenario() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iScenario() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iScenario(int _iScenario){set_has_iScenario(); iScenario=_iScenario;}
	public int get_iScenario(){if (has_iScenario()) {return iScenario;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_stFullEquipInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stFullEquipInfo.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iScenario()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iScenario);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_stFullEquipInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stFullEquipInfo");
			stFullEquipInfo.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iScenario()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iScenario);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_stFullEquipInfo();
				stFullEquipInfo.Unpack(oPacker);
			}break;
			case 5: {
				set_has_iScenario();
				iScenario = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备删除
public class TMSG_EQUIP_DELETE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalId;   //弟子本地id
	private long iEquiLocalId;   //装备本地id


	public const int MAX_PACKEDSIZE = 35;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_iEquiLocalId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iEquiLocalId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iEquiLocalId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iEquiLocalId(long _iEquiLocalId){set_has_iEquiLocalId(); iEquiLocalId=_iEquiLocalId;}
	public long get_iEquiLocalId(){if (has_iEquiLocalId()) {return iEquiLocalId;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iEquiLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iEquiLocalId);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iEquiLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iEquiLocalId);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iEquiLocalId();
				iEquiLocalId = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备合成-请求
public class TMSG_DISCIPLE_COMPOSE_EQUIP_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalId;   //弟子本地id
	private int iSpecFormulaId;   //特殊配方Id
	private int iMaterialCount;   //材料数量
	private long[] arrMaterialLId = new long[(int)TCONST.ORM_MAX_COMPOSE_MAT_NUM];   //材料LocalId

	public const int countof_arrMaterialLId = (int)TCONST.ORM_MAX_COMPOSE_MAT_NUM;

	public const int MAX_PACKEDSIZE = 104;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_iSpecFormulaId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iSpecFormulaId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iSpecFormulaId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iSpecFormulaId(int _iSpecFormulaId){set_has_iSpecFormulaId(); iSpecFormulaId=_iSpecFormulaId;}
	public int get_iSpecFormulaId(){if (has_iSpecFormulaId()) {return iSpecFormulaId;} return 0;}

	public bool has_iMaterialCount() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iMaterialCount() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iMaterialCount() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iMaterialCount(int _iMaterialCount){set_has_iMaterialCount(); iMaterialCount=_iMaterialCount;}
	public int get_iMaterialCount(){if (has_iMaterialCount()) {return iMaterialCount;} return 0;}

	public bool has_arrMaterialLId() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_arrMaterialLId() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_arrMaterialLId() {__orm_has_bits[0] &= ~(0x40u);}
	public long[] set_arrMaterialLId(){set_has_arrMaterialLId(); return arrMaterialLId;}
	public long[] get_arrMaterialLId(){return arrMaterialLId;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iSpecFormulaId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSpecFormulaId);
		};
		if (has_iMaterialCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iMaterialCount);
		};
		if (has_arrMaterialLId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iMaterialCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_COMPOSE_MAT_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_COMPOSE_MAT_NUM) && (__orm_iLoopVar < iMaterialCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrMaterialLId[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iSpecFormulaId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSpecFormulaId);
		};
		if (has_iMaterialCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iMaterialCount);
		};
		if (has_arrMaterialLId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iMaterialCount();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_COMPOSE_MAT_NUM) {
				oPacker.PushFieldName("iMaterialCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_COMPOSE_MAT_NUM) && (__orm_iLoopVar < iMaterialCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrMaterialLId[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iSpecFormulaId();
				iSpecFormulaId = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iMaterialCount();
				iMaterialCount = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_arrMaterialLId();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iMaterialCount=iMaterialCount<__orm_iArrCount ? iMaterialCount:(int)__orm_iArrCount;
				iMaterialCount=iMaterialCount<(int)TCONST.ORM_MAX_COMPOSE_MAT_NUM ? iMaterialCount:(int)TCONST.ORM_MAX_COMPOSE_MAT_NUM;
				if (iMaterialCount > (int)TCONST.ORM_MAX_COMPOSE_MAT_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iMaterialCount; ++__orm_iLoopVar) {
					arrMaterialLId[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备合成-返回
public class TMSG_DISCIPLE_COMPOSE_EQUIP_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private long iDiscipleLocalId;   //弟子本地id
	private long iNewEquipLocalId;   //合成后新装备本地id
	private int iMatEquipId;   //主合成素材equipId (req)的arrMaterialLId的第一个


	public const int MAX_PACKEDSIZE = 55;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_iNewEquipLocalId() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iNewEquipLocalId() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iNewEquipLocalId() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iNewEquipLocalId(long _iNewEquipLocalId){set_has_iNewEquipLocalId(); iNewEquipLocalId=_iNewEquipLocalId;}
	public long get_iNewEquipLocalId(){if (has_iNewEquipLocalId()) {return iNewEquipLocalId;} return 0;}

	public bool has_iMatEquipId() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iMatEquipId() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iMatEquipId() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iMatEquipId(int _iMatEquipId){set_has_iMatEquipId(); iMatEquipId=_iMatEquipId;}
	public int get_iMatEquipId(){if (has_iMatEquipId()) {return iMatEquipId;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iNewEquipLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iNewEquipLocalId);
		};
		if (has_iMatEquipId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iMatEquipId);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iNewEquipLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iNewEquipLocalId);
		};
		if (has_iMatEquipId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iMatEquipId);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_iNewEquipLocalId();
				iNewEquipLocalId = oPacker.ReadVarintINT64();
			}break;
			case 4: {
				set_has_iMatEquipId();
				iMatEquipId = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备图鉴-请求
public class TMSG_DISCIPLE_EQUIP_ATLAS_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLid;   //弟子本地id


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_EQUIP_ATLAS_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private long iDiscipleLid;   //弟子本地id
	private int iAtlasNum;   //图鉴数量
	private TEquipAtlasInfo[] arrAtlas = new TEquipAtlasInfo[(int)TCONST.ORM_MAX_EQUIP_NUM];   //图鉴数组
	public TMSG_DISCIPLE_EQUIP_ATLAS_RSP() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM; ++__orm_iLoopVar) {
			arrAtlas[__orm_iLoopVar] = new TEquipAtlasInfo();
		}
	}

	public const int countof_arrAtlas = (int)TCONST.ORM_MAX_EQUIP_NUM;

	public const int MAX_PACKEDSIZE = 1254;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_MAX_EQUIP_NUM; ++__orm_iLoopVar){arrAtlas[__orm_iLoopVar].init();}
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public bool has_iAtlasNum() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iAtlasNum() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iAtlasNum() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iAtlasNum(int _iAtlasNum){set_has_iAtlasNum(); iAtlasNum=_iAtlasNum;}
	public int get_iAtlasNum(){if (has_iAtlasNum()) {return iAtlasNum;} return 0;}

	public bool has_arrAtlas() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrAtlas() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrAtlas() {__orm_has_bits[0] &= ~(0x10u);}
	public TEquipAtlasInfo[] set_arrAtlas(){set_has_arrAtlas(); return arrAtlas;}
	public TEquipAtlasInfo[] get_arrAtlas(){return arrAtlas;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
		if (has_iAtlasNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iAtlasNum);
		};
		if (has_arrAtlas()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iAtlasNum();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_EQUIP_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM) && (__orm_iLoopVar < iAtlasNum); ++__orm_iLoopVar) {
				arrAtlas[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
		if (has_iAtlasNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iAtlasNum);
		};
		if (has_arrAtlas()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iAtlasNum();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_EQUIP_NUM) {
				oPacker.PushFieldName("iAtlasNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM) && (__orm_iLoopVar < iAtlasNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrAtlas[{0}]", __orm_iLoopVar);
				arrAtlas[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_iAtlasNum();
				iAtlasNum = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_arrAtlas();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iAtlasNum=iAtlasNum<__orm_iArrCount ? iAtlasNum:(int)__orm_iArrCount;
				iAtlasNum=iAtlasNum<(int)TCONST.ORM_MAX_EQUIP_NUM ? iAtlasNum:(int)TCONST.ORM_MAX_EQUIP_NUM;
				if (iAtlasNum > (int)TCONST.ORM_MAX_EQUIP_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iAtlasNum; ++__orm_iLoopVar) {
					arrAtlas[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备重铸-请求
public class TMSG_DISCIPLE_REFORGE_EQUIP_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalId;   //弟子本地id


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备重铸-返回
public class TMSG_DISCIPLE_REFORGE_EQUIP_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private long iDiscipleLocalId;   //弟子本地id
	private int iEquipNum;   //重铸的装备数量
	private long[] arrEquipLid = new long[(int)TCONST.ORM_MAX_EQUIP_NUM];   //装备LId

	public const int countof_arrEquipLid = (int)TCONST.ORM_MAX_EQUIP_NUM;

	public const int MAX_PACKEDSIZE = 534;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_iEquipNum() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iEquipNum() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iEquipNum() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iEquipNum(int _iEquipNum){set_has_iEquipNum(); iEquipNum=_iEquipNum;}
	public int get_iEquipNum(){if (has_iEquipNum()) {return iEquipNum;} return 0;}

	public bool has_arrEquipLid() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrEquipLid() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrEquipLid() {__orm_has_bits[0] &= ~(0x10u);}
	public long[] set_arrEquipLid(){set_has_arrEquipLid(); return arrEquipLid;}
	public long[] get_arrEquipLid(){return arrEquipLid;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iEquipNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iEquipNum);
		};
		if (has_arrEquipLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iEquipNum();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_EQUIP_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM) && (__orm_iLoopVar < iEquipNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrEquipLid[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iEquipNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iEquipNum);
		};
		if (has_arrEquipLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iEquipNum();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_EQUIP_NUM) {
				oPacker.PushFieldName("iEquipNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_EQUIP_NUM) && (__orm_iLoopVar < iEquipNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrEquipLid[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_iEquipNum();
				iEquipNum = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_arrEquipLid();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iEquipNum=iEquipNum<__orm_iArrCount ? iEquipNum:(int)__orm_iArrCount;
				iEquipNum=iEquipNum<(int)TCONST.ORM_MAX_EQUIP_NUM ? iEquipNum:(int)TCONST.ORM_MAX_EQUIP_NUM;
				if (iEquipNum > (int)TCONST.ORM_MAX_EQUIP_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iEquipNum; ++__orm_iLoopVar) {
					arrEquipLid[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 技能替换-请求
public class TMSG_DISCIPLE_REPLACE_SKILL_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalId;   //弟子本地id
	private int iSkillOne;   //技能1 id
	private int iSkillOther;   //技能2 id 激活区空位-1 待选区空位-2


	public const int MAX_PACKEDSIZE = 40;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_iSkillOne() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iSkillOne() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iSkillOne() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iSkillOne(int _iSkillOne){set_has_iSkillOne(); iSkillOne=_iSkillOne;}
	public int get_iSkillOne(){if (has_iSkillOne()) {return iSkillOne;} return 0;}

	public bool has_iSkillOther() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iSkillOther() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iSkillOther() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iSkillOther(int _iSkillOther){set_has_iSkillOther(); iSkillOther=_iSkillOther;}
	public int get_iSkillOther(){if (has_iSkillOther()) {return iSkillOther;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iSkillOne()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSkillOne);
		};
		if (has_iSkillOther()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iSkillOther);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iSkillOne()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSkillOne);
		};
		if (has_iSkillOther()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iSkillOther);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iSkillOne();
				iSkillOne = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iSkillOther();
				iSkillOther = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 技能替换-返回
public class TMSG_DISCIPLE_REPLACE_SKILL_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private long iDiscipleLocalId;   //弟子本地id
	private int iSkillOne;   //技能1 id
	private int iSkillOneZone;   //技能1 交换后区域
	private int iSkillOther;   //技能2 id
	private int iSkillOtherZone;   //技能2 交换后区域


	public const int MAX_PACKEDSIZE = 70;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_iSkillOne() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iSkillOne() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iSkillOne() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iSkillOne(int _iSkillOne){set_has_iSkillOne(); iSkillOne=_iSkillOne;}
	public int get_iSkillOne(){if (has_iSkillOne()) {return iSkillOne;} return 0;}

	public bool has_iSkillOneZone() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iSkillOneZone() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iSkillOneZone() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iSkillOneZone(int _iSkillOneZone){set_has_iSkillOneZone(); iSkillOneZone=_iSkillOneZone;}
	public int get_iSkillOneZone(){if (has_iSkillOneZone()) {return iSkillOneZone;} return 0;}

	public bool has_iSkillOther() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iSkillOther() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iSkillOther() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iSkillOther(int _iSkillOther){set_has_iSkillOther(); iSkillOther=_iSkillOther;}
	public int get_iSkillOther(){if (has_iSkillOther()) {return iSkillOther;} return 0;}

	public bool has_iSkillOtherZone() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iSkillOtherZone() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iSkillOtherZone() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iSkillOtherZone(int _iSkillOtherZone){set_has_iSkillOtherZone(); iSkillOtherZone=_iSkillOtherZone;}
	public int get_iSkillOtherZone(){if (has_iSkillOtherZone()) {return iSkillOtherZone;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iSkillOne()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iSkillOne);
		};
		if (has_iSkillOneZone()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iSkillOneZone);
		};
		if (has_iSkillOther()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iSkillOther);
		};
		if (has_iSkillOtherZone()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iSkillOtherZone);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iSkillOne()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iSkillOne);
		};
		if (has_iSkillOneZone()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iSkillOneZone);
		};
		if (has_iSkillOther()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iSkillOther);
		};
		if (has_iSkillOtherZone()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iSkillOtherZone);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_iSkillOne();
				iSkillOne = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iSkillOneZone();
				iSkillOneZone = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iSkillOther();
				iSkillOther = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iSkillOtherZone();
				iSkillOtherZone = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 词条添加
public class TMSG_DISCIPLE_ADD_ABILITY_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalId;   //弟子本地id
	private int iAbility;   //词条id


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_iAbility() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iAbility() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iAbility() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iAbility(int _iAbility){set_has_iAbility(); iAbility=_iAbility;}
	public int get_iAbility(){if (has_iAbility()) {return iAbility;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iAbility()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iAbility);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iAbility()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iAbility);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iAbility();
				iAbility = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 词条移除
public class TMSG_DISCIPLE_REMOVE_ABILITY_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalId;   //弟子本地id
	private int iAbility;   //词条id


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_iAbility() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iAbility() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iAbility() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iAbility(int _iAbility){set_has_iAbility(); iAbility=_iAbility;}
	public int get_iAbility(){if (has_iAbility()) {return iAbility;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iAbility()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iAbility);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iAbility()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iAbility);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iAbility();
				iAbility = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 背包损血解锁格子-请求
public class TMSG_DISCIPLE_GRID_HP_UNLOCK_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalId;   //弟子本地id
	private int iLevel;   //背包等级


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_iLevel() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iLevel() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iLevel() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iLevel(int _iLevel){set_has_iLevel(); iLevel=_iLevel;}
	public int get_iLevel(){if (has_iLevel()) {return iLevel;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iLevel();
				iLevel = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 背包损血解锁格子-回复
public class TMSG_DISCIPLE_GRID_HP_UNLOCK_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private long iDiscipleLocalId;   //弟子本地id
	private int iLevel;   //背包等级


	public const int MAX_PACKEDSIZE = 40;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_iLevel() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iLevel() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iLevel() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iLevel(int _iLevel){set_has_iLevel(); iLevel=_iLevel;}
	public int get_iLevel(){if (has_iLevel()) {return iLevel;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_iLevel();
				iLevel = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 背包解锁格子-通知
public class TMSG_DISCIPLE_GRID_UNLOCK_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalId;   //弟子本地id
	private long[] arrLevelUnlocked = new long[(int)1];   //被解锁的背包等级，位图

	public const int countof_arrLevelUnlocked = (int)1;

	public const int MAX_PACKEDSIZE = 44;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)1; ++__orm_iLoopVar){arrLevelUnlocked[__orm_iLoopVar]=0;}
	}
	public bool has_iDiscipleLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalId(long _iDiscipleLocalId){set_has_iDiscipleLocalId(); iDiscipleLocalId=_iDiscipleLocalId;}
	public long get_iDiscipleLocalId(){if (has_iDiscipleLocalId()) {return iDiscipleLocalId;} return 0;}

	public bool has_arrLevelUnlocked() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrLevelUnlocked() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrLevelUnlocked() {__orm_has_bits[0] &= ~(0x4u);}
	public long[] set_arrLevelUnlocked(){set_has_arrLevelUnlocked(); return arrLevelUnlocked;}
	public long[] get_arrLevelUnlocked(){return arrLevelUnlocked;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_arrLevelUnlocked()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)1); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)1); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrLevelUnlocked[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalId);
		};
		if (has_arrLevelUnlocked()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)1); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)1); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrLevelUnlocked[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalId();
				iDiscipleLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_arrLevelUnlocked();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)1 ? __orm_iArrCount:(uint)1;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrLevelUnlocked[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 宗门部件现场
public class TSectPartPrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private int iLevel;   //当前等级


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iLevel() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLevel() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLevel() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLevel(int _iLevel){set_has_iLevel(); iLevel=_iLevel;}
	public int get_iLevel(){if (has_iLevel()) {return iLevel;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLevel();
				iLevel = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 宗门升级-请求
public class TMSG_SECT_UPGRADE_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iIsOneClick;   //是否一键升级 1-是 0-否


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iIsOneClick() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iIsOneClick() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iIsOneClick() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iIsOneClick(int _iIsOneClick){set_has_iIsOneClick(); iIsOneClick=_iIsOneClick;}
	public int get_iIsOneClick(){if (has_iIsOneClick()) {return iIsOneClick;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iIsOneClick()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iIsOneClick);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iIsOneClick()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iIsOneClick);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iIsOneClick();
				iIsOneClick = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 宗门升级-返回
public class TMSG_SECT_UPGRADE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private int iNewLevel;   //新等级


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iNewLevel() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iNewLevel() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iNewLevel() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iNewLevel(int _iNewLevel){set_has_iNewLevel(); iNewLevel=_iNewLevel;}
	public int get_iNewLevel(){if (has_iNewLevel()) {return iNewLevel;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iNewLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iNewLevel);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iNewLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iNewLevel);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iNewLevel();
				iNewLevel = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 宗门升级-通知
public class TMSG_SECT_UPGRADE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iNewLevel;   //新等级
	private int iPower;   //当前战力
	private int iPowerBefore;   //升级前战力


	public const int MAX_PACKEDSIZE = 35;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iNewLevel() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iNewLevel() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iNewLevel() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iNewLevel(int _iNewLevel){set_has_iNewLevel(); iNewLevel=_iNewLevel;}
	public int get_iNewLevel(){if (has_iNewLevel()) {return iNewLevel;} return 0;}

	public bool has_iPower() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iPower() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iPower() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iPower(int _iPower){set_has_iPower(); iPower=_iPower;}
	public int get_iPower(){if (has_iPower()) {return iPower;} return 0;}

	public bool has_iPowerBefore() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iPowerBefore() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iPowerBefore() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iPowerBefore(int _iPowerBefore){set_has_iPowerBefore(); iPowerBefore=_iPowerBefore;}
	public int get_iPowerBefore(){if (has_iPowerBefore()) {return iPowerBefore;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNewLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iNewLevel);
		};
		if (has_iPower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iPower);
		};
		if (has_iPowerBefore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iPowerBefore);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNewLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iNewLevel);
		};
		if (has_iPower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iPower);
		};
		if (has_iPowerBefore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iPowerBefore);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iNewLevel();
				iNewLevel = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iPower();
				iPower = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iPowerBefore();
				iPowerBefore = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 宗门大阵 一个阵
public class TSectFormLayout
{
	private uint[] __orm_has_bits = new uint[1];
	private int iFormID;   //阵法id
	private int iLevel;   //阵等级
	private int iExp;   //阵经验
	private long[] arrDiscipleLId = new long[(int)TCONST.ORM_SECTFORM_FORM_SIZE];   //6格子分别有哪些弟子 0表示没人
	private sbyte iFormUnlockFlag;   //是否解锁
	private sbyte iPosUnlockFlag;   //每个位置是否解锁 位图

	public const int countof_arrDiscipleLId = (int)TCONST.ORM_SECTFORM_FORM_SIZE;

	public const int MAX_PACKEDSIZE = 121;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_SECTFORM_FORM_SIZE; ++__orm_iLoopVar){arrDiscipleLId[__orm_iLoopVar]=0;}
	}
	public bool has_iFormID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iFormID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iFormID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iFormID(int _iFormID){set_has_iFormID(); iFormID=_iFormID;}
	public int get_iFormID(){if (has_iFormID()) {return iFormID;} return 0;}

	public bool has_iLevel() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iLevel() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iLevel() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iLevel(int _iLevel){set_has_iLevel(); iLevel=_iLevel;}
	public int get_iLevel(){if (has_iLevel()) {return iLevel;} return 0;}

	public bool has_iExp() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iExp() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iExp() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iExp(int _iExp){set_has_iExp(); iExp=_iExp;}
	public int get_iExp(){if (has_iExp()) {return iExp;} return 0;}

	public bool has_arrDiscipleLId() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrDiscipleLId() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrDiscipleLId() {__orm_has_bits[0] &= ~(0x10u);}
	public long[] set_arrDiscipleLId(){set_has_arrDiscipleLId(); return arrDiscipleLId;}
	public long[] get_arrDiscipleLId(){return arrDiscipleLId;}

	public bool has_iFormUnlockFlag() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iFormUnlockFlag() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iFormUnlockFlag() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iFormUnlockFlag(sbyte _iFormUnlockFlag){set_has_iFormUnlockFlag(); iFormUnlockFlag=_iFormUnlockFlag;}
	public sbyte get_iFormUnlockFlag(){if (has_iFormUnlockFlag()) {return iFormUnlockFlag;} return 0;}

	public bool has_iPosUnlockFlag() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iPosUnlockFlag() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iPosUnlockFlag() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iPosUnlockFlag(sbyte _iPosUnlockFlag){set_has_iPosUnlockFlag(); iPosUnlockFlag=_iPosUnlockFlag;}
	public sbyte get_iPosUnlockFlag(){if (has_iPosUnlockFlag()) {return iPosUnlockFlag;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iFormID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iFormID);
		};
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
		if (has_iExp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iExp);
		};
		if (has_arrDiscipleLId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_SECTFORM_FORM_SIZE); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SECTFORM_FORM_SIZE); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrDiscipleLId[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iFormUnlockFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,2));  // f id
			oPacker.WriteINT8(iFormUnlockFlag);
		};
		if (has_iPosUnlockFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteINT8(iPosUnlockFlag);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iFormID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iFormID);
		};
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
		if (has_iExp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iExp);
		};
		if (has_arrDiscipleLId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_SECTFORM_FORM_SIZE); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SECTFORM_FORM_SIZE); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrDiscipleLId[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iFormUnlockFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,2));  // f id
			oPacker.WriteINT8(iFormUnlockFlag);
		};
		if (has_iPosUnlockFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteINT8(iPosUnlockFlag);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iFormID();
				iFormID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iLevel();
				iLevel = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iExp();
				iExp = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_arrDiscipleLId();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)TCONST.ORM_SECTFORM_FORM_SIZE ? __orm_iArrCount:(uint)TCONST.ORM_SECTFORM_FORM_SIZE;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrDiscipleLId[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			case 5: {
				set_has_iFormUnlockFlag();
				iFormUnlockFlag = oPacker.ReadINT8();
			}break;
			case 6: {
				set_has_iPosUnlockFlag();
				iPosUnlockFlag = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 宗门大阵部件现场
public class TSectFormationPartPrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private int iLayoutCount;   //新等级
	private TSectFormLayout[] arrLayouts = new TSectFormLayout[(int)TCONST.ORM_SECTFORM_NUM_MAX];   //阵法信息
	private TKVBlock[] arrProps = new TKVBlock[(int)TCONST.ORM_SECTFORM_NUM_MAX];   //阵法属性
	public TSectFormationPartPrivateContext() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_SECTFORM_NUM_MAX; ++__orm_iLoopVar) {
			arrLayouts[__orm_iLoopVar] = new TSectFormLayout();
		}
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_SECTFORM_NUM_MAX; ++__orm_iLoopVar) {
			arrProps[__orm_iLoopVar] = new TKVBlock();
		}
	}

	public const int countof_arrLayouts = (int)TCONST.ORM_SECTFORM_NUM_MAX;
	public const int countof_arrProps = (int)TCONST.ORM_SECTFORM_NUM_MAX;

	public const int MAX_PACKEDSIZE = 15627;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_SECTFORM_NUM_MAX; ++__orm_iLoopVar){arrLayouts[__orm_iLoopVar].init();}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_SECTFORM_NUM_MAX; ++__orm_iLoopVar){arrProps[__orm_iLoopVar].init();}
	}
	public bool has_iLayoutCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLayoutCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLayoutCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLayoutCount(int _iLayoutCount){set_has_iLayoutCount(); iLayoutCount=_iLayoutCount;}
	public int get_iLayoutCount(){if (has_iLayoutCount()) {return iLayoutCount;} return 0;}

	public bool has_arrLayouts() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrLayouts() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrLayouts() {__orm_has_bits[0] &= ~(0x4u);}
	public TSectFormLayout[] set_arrLayouts(){set_has_arrLayouts(); return arrLayouts;}
	public TSectFormLayout[] get_arrLayouts(){return arrLayouts;}

	public bool has_arrProps() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrProps() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrProps() {__orm_has_bits[0] &= ~(0x8u);}
	public TKVBlock[] set_arrProps(){set_has_arrProps(); return arrProps;}
	public TKVBlock[] get_arrProps(){return arrProps;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLayoutCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLayoutCount);
		};
		if (has_arrLayouts()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLayoutCount();
			if (__orm_ReferVar > (int)TCONST.ORM_SECTFORM_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SECTFORM_NUM_MAX) && (__orm_iLoopVar < iLayoutCount); ++__orm_iLoopVar) {
				arrLayouts[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrProps()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLayoutCount();
			if (__orm_ReferVar > (int)TCONST.ORM_SECTFORM_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SECTFORM_NUM_MAX) && (__orm_iLoopVar < iLayoutCount); ++__orm_iLoopVar) {
				arrProps[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLayoutCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLayoutCount);
		};
		if (has_arrLayouts()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLayoutCount();
			if (__orm_ReferVar > (int)TCONST.ORM_SECTFORM_NUM_MAX) {
				oPacker.PushFieldName("iLayoutCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SECTFORM_NUM_MAX) && (__orm_iLoopVar < iLayoutCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrLayouts[{0}]", __orm_iLoopVar);
				arrLayouts[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrProps()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLayoutCount();
			if (__orm_ReferVar > (int)TCONST.ORM_SECTFORM_NUM_MAX) {
				oPacker.PushFieldName("iLayoutCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SECTFORM_NUM_MAX) && (__orm_iLoopVar < iLayoutCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrProps[{0}]", __orm_iLoopVar);
				arrProps[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLayoutCount();
				iLayoutCount = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrLayouts();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iLayoutCount=iLayoutCount<__orm_iArrCount ? iLayoutCount:(int)__orm_iArrCount;
				iLayoutCount=iLayoutCount<(int)TCONST.ORM_SECTFORM_NUM_MAX ? iLayoutCount:(int)TCONST.ORM_SECTFORM_NUM_MAX;
				if (iLayoutCount > (int)TCONST.ORM_SECTFORM_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iLayoutCount; ++__orm_iLoopVar) {
					arrLayouts[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 3: {
				set_has_arrProps();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iLayoutCount=iLayoutCount<__orm_iArrCount ? iLayoutCount:(int)__orm_iArrCount;
				iLayoutCount=iLayoutCount<(int)TCONST.ORM_SECTFORM_NUM_MAX ? iLayoutCount:(int)TCONST.ORM_SECTFORM_NUM_MAX;
				if (iLayoutCount > (int)TCONST.ORM_SECTFORM_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iLayoutCount; ++__orm_iLoopVar) {
					arrProps[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 宗门大阵上下阵-请求
public class TMSG_SECTFORM_CHANGE_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long[] arrDiscipleLId = new long[(int)TCONST.ORM_SECTFORM_FORM_SIZE];   //要操作的弟子
	private int iFormID;   //要上的大阵 / 当前的大阵
	private string szClientPass;   //客户端透传字段

	public const int countof_arrDiscipleLId = (int)TCONST.ORM_SECTFORM_FORM_SIZE;

	public const int MAX_PACKEDSIZE = 131;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_SECTFORM_FORM_SIZE; ++__orm_iLoopVar){arrDiscipleLId[__orm_iLoopVar]=0;}
	}
	public bool has_arrDiscipleLId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_arrDiscipleLId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_arrDiscipleLId() {__orm_has_bits[0] &= ~(0x2u);}
	public long[] set_arrDiscipleLId(){set_has_arrDiscipleLId(); return arrDiscipleLId;}
	public long[] get_arrDiscipleLId(){return arrDiscipleLId;}

	public bool has_iFormID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iFormID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iFormID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iFormID(int _iFormID){set_has_iFormID(); iFormID=_iFormID;}
	public int get_iFormID(){if (has_iFormID()) {return iFormID;} return 0;}

	public bool has_szClientPass() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_szClientPass() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_szClientPass() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_szClientPass(string _szClientPass){set_has_szClientPass(); szClientPass=_szClientPass;}
	public string get_szClientPass(){if (has_szClientPass()) {return szClientPass;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_arrDiscipleLId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_SECTFORM_FORM_SIZE); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SECTFORM_FORM_SIZE); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrDiscipleLId[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iFormID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iFormID);
		};
		if (has_szClientPass()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,3));  // f id
			oPacker.WriteSTRING(szClientPass);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_arrDiscipleLId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_SECTFORM_FORM_SIZE); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SECTFORM_FORM_SIZE); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrDiscipleLId[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iFormID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iFormID);
		};
		if (has_szClientPass()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,3));  // f id
			oPacker.WriteSTRING(szClientPass);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_arrDiscipleLId();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)TCONST.ORM_SECTFORM_FORM_SIZE ? __orm_iArrCount:(uint)TCONST.ORM_SECTFORM_FORM_SIZE;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrDiscipleLId[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			case 2: {
				set_has_iFormID();
				iFormID = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_szClientPass();
				szClientPass = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 宗门大阵上下阵-返回
public class TMSG_SECTFORM_CHANGE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private int iFormID;   //操作的阵
	private int iPowerOld;   //旧战力
	private int iPowerNew;   //新战力
	private string szClientPass;   //客户端透传字段


	public const int MAX_PACKEDSIZE = 87;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iFormID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iFormID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iFormID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iFormID(int _iFormID){set_has_iFormID(); iFormID=_iFormID;}
	public int get_iFormID(){if (has_iFormID()) {return iFormID;} return 0;}

	public bool has_iPowerOld() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iPowerOld() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iPowerOld() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iPowerOld(int _iPowerOld){set_has_iPowerOld(); iPowerOld=_iPowerOld;}
	public int get_iPowerOld(){if (has_iPowerOld()) {return iPowerOld;} return 0;}

	public bool has_iPowerNew() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iPowerNew() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iPowerNew() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iPowerNew(int _iPowerNew){set_has_iPowerNew(); iPowerNew=_iPowerNew;}
	public int get_iPowerNew(){if (has_iPowerNew()) {return iPowerNew;} return 0;}

	public bool has_szClientPass() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_szClientPass() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_szClientPass() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_szClientPass(string _szClientPass){set_has_szClientPass(); szClientPass=_szClientPass;}
	public string get_szClientPass(){if (has_szClientPass()) {return szClientPass;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iFormID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iFormID);
		};
		if (has_iPowerOld()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iPowerOld);
		};
		if (has_iPowerNew()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iPowerNew);
		};
		if (has_szClientPass()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,3));  // f id
			oPacker.WriteSTRING(szClientPass);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iFormID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iFormID);
		};
		if (has_iPowerOld()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iPowerOld);
		};
		if (has_iPowerNew()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iPowerNew);
		};
		if (has_szClientPass()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,3));  // f id
			oPacker.WriteSTRING(szClientPass);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iFormID();
				iFormID = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iPowerOld();
				iPowerOld = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iPowerNew();
				iPowerNew = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_szClientPass();
				szClientPass = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 宗门状态变化-通知
public class TMSG_SECTFORM_UPDATE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iLayoutCount;   //阵法数量
	private TSectFormLayout[] arrLayouts = new TSectFormLayout[(int)TCONST.ORM_SECTFORM_NUM_MAX];   //阵法信息
	private TKVBlock[] arrProps = new TKVBlock[(int)TCONST.ORM_SECTFORM_NUM_MAX];   //阵法属性
	public TMSG_SECTFORM_UPDATE_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_SECTFORM_NUM_MAX; ++__orm_iLoopVar) {
			arrLayouts[__orm_iLoopVar] = new TSectFormLayout();
		}
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_SECTFORM_NUM_MAX; ++__orm_iLoopVar) {
			arrProps[__orm_iLoopVar] = new TKVBlock();
		}
	}

	public const int countof_arrLayouts = (int)TCONST.ORM_SECTFORM_NUM_MAX;
	public const int countof_arrProps = (int)TCONST.ORM_SECTFORM_NUM_MAX;

	public const int MAX_PACKEDSIZE = 15627;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_SECTFORM_NUM_MAX; ++__orm_iLoopVar){arrLayouts[__orm_iLoopVar].init();}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_SECTFORM_NUM_MAX; ++__orm_iLoopVar){arrProps[__orm_iLoopVar].init();}
	}
	public bool has_iLayoutCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLayoutCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLayoutCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLayoutCount(int _iLayoutCount){set_has_iLayoutCount(); iLayoutCount=_iLayoutCount;}
	public int get_iLayoutCount(){if (has_iLayoutCount()) {return iLayoutCount;} return 0;}

	public bool has_arrLayouts() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrLayouts() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrLayouts() {__orm_has_bits[0] &= ~(0x4u);}
	public TSectFormLayout[] set_arrLayouts(){set_has_arrLayouts(); return arrLayouts;}
	public TSectFormLayout[] get_arrLayouts(){return arrLayouts;}

	public bool has_arrProps() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrProps() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrProps() {__orm_has_bits[0] &= ~(0x8u);}
	public TKVBlock[] set_arrProps(){set_has_arrProps(); return arrProps;}
	public TKVBlock[] get_arrProps(){return arrProps;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLayoutCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLayoutCount);
		};
		if (has_arrLayouts()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLayoutCount();
			if (__orm_ReferVar > (int)TCONST.ORM_SECTFORM_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SECTFORM_NUM_MAX) && (__orm_iLoopVar < iLayoutCount); ++__orm_iLoopVar) {
				arrLayouts[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrProps()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLayoutCount();
			if (__orm_ReferVar > (int)TCONST.ORM_SECTFORM_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SECTFORM_NUM_MAX) && (__orm_iLoopVar < iLayoutCount); ++__orm_iLoopVar) {
				arrProps[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLayoutCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLayoutCount);
		};
		if (has_arrLayouts()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLayoutCount();
			if (__orm_ReferVar > (int)TCONST.ORM_SECTFORM_NUM_MAX) {
				oPacker.PushFieldName("iLayoutCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SECTFORM_NUM_MAX) && (__orm_iLoopVar < iLayoutCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrLayouts[{0}]", __orm_iLoopVar);
				arrLayouts[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrProps()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLayoutCount();
			if (__orm_ReferVar > (int)TCONST.ORM_SECTFORM_NUM_MAX) {
				oPacker.PushFieldName("iLayoutCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SECTFORM_NUM_MAX) && (__orm_iLoopVar < iLayoutCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrProps[{0}]", __orm_iLoopVar);
				arrProps[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLayoutCount();
				iLayoutCount = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrLayouts();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iLayoutCount=iLayoutCount<__orm_iArrCount ? iLayoutCount:(int)__orm_iArrCount;
				iLayoutCount=iLayoutCount<(int)TCONST.ORM_SECTFORM_NUM_MAX ? iLayoutCount:(int)TCONST.ORM_SECTFORM_NUM_MAX;
				if (iLayoutCount > (int)TCONST.ORM_SECTFORM_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iLayoutCount; ++__orm_iLoopVar) {
					arrLayouts[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 3: {
				set_has_arrProps();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iLayoutCount=iLayoutCount<__orm_iArrCount ? iLayoutCount:(int)__orm_iArrCount;
				iLayoutCount=iLayoutCount<(int)TCONST.ORM_SECTFORM_NUM_MAX ? iLayoutCount:(int)TCONST.ORM_SECTFORM_NUM_MAX;
				if (iLayoutCount > (int)TCONST.ORM_SECTFORM_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iLayoutCount; ++__orm_iLoopVar) {
					arrProps[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 古宝信息
public class TAntiqueInfo
{
	private uint[] __orm_has_bits = new uint[1];
	private int iAntiqueId;   //古宝id
	private int iLevel;   //当前等级
	private long iSkillProgress;   //技能进度


	public const int MAX_PACKEDSIZE = 40;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iAntiqueId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iAntiqueId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iAntiqueId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iAntiqueId(int _iAntiqueId){set_has_iAntiqueId(); iAntiqueId=_iAntiqueId;}
	public int get_iAntiqueId(){if (has_iAntiqueId()) {return iAntiqueId;} return 0;}

	public bool has_iLevel() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iLevel() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iLevel() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iLevel(int _iLevel){set_has_iLevel(); iLevel=_iLevel;}
	public int get_iLevel(){if (has_iLevel()) {return iLevel;} return 0;}

	public bool has_iSkillProgress() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iSkillProgress() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iSkillProgress() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iSkillProgress(long _iSkillProgress){set_has_iSkillProgress(); iSkillProgress=_iSkillProgress;}
	public long get_iSkillProgress(){if (has_iSkillProgress()) {return iSkillProgress;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iAntiqueId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iAntiqueId);
		};
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
		if (has_iSkillProgress()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iSkillProgress);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iAntiqueId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iAntiqueId);
		};
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
		if (has_iSkillProgress()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iSkillProgress);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iAntiqueId();
				iAntiqueId = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iLevel();
				iLevel = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iSkillProgress();
				iSkillProgress = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 古宝部件现场
public class TAntiquePartPrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private int iAntiqueCount;   //古宝数量
	private TAntiqueInfo[] arrAntique = new TAntiqueInfo[(int)128];   //古宝列表
	public TAntiquePartPrivateContext() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)128; ++__orm_iLoopVar) {
			arrAntique[__orm_iLoopVar] = new TAntiqueInfo();
		}
	}

	public const int countof_arrAntique = (int)128;

	public const int MAX_PACKEDSIZE = 5149;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)128; ++__orm_iLoopVar){arrAntique[__orm_iLoopVar].init();}
	}
	public bool has_iAntiqueCount() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iAntiqueCount() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iAntiqueCount() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iAntiqueCount(int _iAntiqueCount){set_has_iAntiqueCount(); iAntiqueCount=_iAntiqueCount;}
	public int get_iAntiqueCount(){if (has_iAntiqueCount()) {return iAntiqueCount;} return 0;}

	public bool has_arrAntique() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrAntique() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrAntique() {__orm_has_bits[0] &= ~(0x8u);}
	public TAntiqueInfo[] set_arrAntique(){set_has_arrAntique(); return arrAntique;}
	public TAntiqueInfo[] get_arrAntique(){return arrAntique;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iAntiqueCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iAntiqueCount);
		};
		if (has_arrAntique()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iAntiqueCount();
			if (__orm_ReferVar > (int)128) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)128) && (__orm_iLoopVar < iAntiqueCount); ++__orm_iLoopVar) {
				arrAntique[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iAntiqueCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iAntiqueCount);
		};
		if (has_arrAntique()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iAntiqueCount();
			if (__orm_ReferVar > (int)128) {
				oPacker.PushFieldName("iAntiqueCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)128) && (__orm_iLoopVar < iAntiqueCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrAntique[{0}]", __orm_iLoopVar);
				arrAntique[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iAntiqueCount();
				iAntiqueCount = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrAntique();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iAntiqueCount=iAntiqueCount<__orm_iArrCount ? iAntiqueCount:(int)__orm_iArrCount;
				iAntiqueCount=iAntiqueCount<(int)128 ? iAntiqueCount:(int)128;
				if (iAntiqueCount > (int)128) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iAntiqueCount; ++__orm_iLoopVar) {
					arrAntique[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 古宝更新-通知
public class TMSG_ANTIQUE_UPDATE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private TAntiqueInfo stAntiqueInfo = new TAntiqueInfo();   //新古宝数据


	public const int MAX_PACKEDSIZE = 54;

	public void init() {
		__orm_has_bits[0]=0;
		stAntiqueInfo.init();
	}
	public bool has_stAntiqueInfo() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_stAntiqueInfo() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_stAntiqueInfo() {__orm_has_bits[0] &= ~(0x2u);}
	public TAntiqueInfo set_stAntiqueInfo(){set_has_stAntiqueInfo(); return stAntiqueInfo;}
	public TAntiqueInfo get_stAntiqueInfo(){return stAntiqueInfo;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stAntiqueInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stAntiqueInfo.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stAntiqueInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stAntiqueInfo");
			stAntiqueInfo.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_stAntiqueInfo();
				stAntiqueInfo.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 古宝升星-请求
public class TMSG_ANTIQUE_UPGRADE_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iAntiqueId;   //古宝id


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iAntiqueId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iAntiqueId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iAntiqueId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iAntiqueId(int _iAntiqueId){set_has_iAntiqueId(); iAntiqueId=_iAntiqueId;}
	public int get_iAntiqueId(){if (has_iAntiqueId()) {return iAntiqueId;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iAntiqueId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iAntiqueId);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iAntiqueId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iAntiqueId);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iAntiqueId();
				iAntiqueId = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 古宝升星-返回
public class TMSG_ANTIQUE_UPGRADE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private int iAntiqueId;   //古宝id
	private int iNewLevel;   //新等级
	private int iPower;   //当前战力
	private int iPowerBefore;   //升级前战力


	public const int MAX_PACKEDSIZE = 55;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iAntiqueId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iAntiqueId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iAntiqueId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iAntiqueId(int _iAntiqueId){set_has_iAntiqueId(); iAntiqueId=_iAntiqueId;}
	public int get_iAntiqueId(){if (has_iAntiqueId()) {return iAntiqueId;} return 0;}

	public bool has_iNewLevel() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iNewLevel() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iNewLevel() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iNewLevel(int _iNewLevel){set_has_iNewLevel(); iNewLevel=_iNewLevel;}
	public int get_iNewLevel(){if (has_iNewLevel()) {return iNewLevel;} return 0;}

	public bool has_iPower() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iPower() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iPower() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iPower(int _iPower){set_has_iPower(); iPower=_iPower;}
	public int get_iPower(){if (has_iPower()) {return iPower;} return 0;}

	public bool has_iPowerBefore() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iPowerBefore() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iPowerBefore() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iPowerBefore(int _iPowerBefore){set_has_iPowerBefore(); iPowerBefore=_iPowerBefore;}
	public int get_iPowerBefore(){if (has_iPowerBefore()) {return iPowerBefore;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iAntiqueId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iAntiqueId);
		};
		if (has_iNewLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iNewLevel);
		};
		if (has_iPower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPower);
		};
		if (has_iPowerBefore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iPowerBefore);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iAntiqueId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iAntiqueId);
		};
		if (has_iNewLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iNewLevel);
		};
		if (has_iPower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPower);
		};
		if (has_iPowerBefore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iPowerBefore);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iAntiqueId();
				iAntiqueId = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iNewLevel();
				iNewLevel = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iPower();
				iPower = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iPowerBefore();
				iPowerBefore = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 事件行动数据（暂定）
public class TWanderEventActionLog
{
	private uint[] __orm_has_bits = new uint[1];
	private int iActionID;   //行动id
	private int iActionType;   //行动类型 EnWanderingEventActionType
	private int iParamNum;   //附带参数数量
	private TK32V32[] arrParam = new TK32V32[(int)TCONST.WANDERING_EVENT_ACTION_MAX];   //例：奖励 道具id-道具数量
	public TWanderEventActionLog() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.WANDERING_EVENT_ACTION_MAX; ++__orm_iLoopVar) {
			arrParam[__orm_iLoopVar] = new TK32V32();
		}
	}

	public const int countof_arrParam = (int)TCONST.WANDERING_EVENT_ACTION_MAX;

	public const int MAX_PACKEDSIZE = 324;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.WANDERING_EVENT_ACTION_MAX; ++__orm_iLoopVar){arrParam[__orm_iLoopVar].init();}
	}
	public bool has_iActionID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iActionID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iActionID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iActionID(int _iActionID){set_has_iActionID(); iActionID=_iActionID;}
	public int get_iActionID(){if (has_iActionID()) {return iActionID;} return 0;}

	public bool has_iActionType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iActionType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iActionType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iActionType(int _iActionType){set_has_iActionType(); iActionType=_iActionType;}
	public int get_iActionType(){if (has_iActionType()) {return iActionType;} return 0;}

	public bool has_iParamNum() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iParamNum() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iParamNum() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iParamNum(int _iParamNum){set_has_iParamNum(); iParamNum=_iParamNum;}
	public int get_iParamNum(){if (has_iParamNum()) {return iParamNum;} return 0;}

	public bool has_arrParam() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrParam() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrParam() {__orm_has_bits[0] &= ~(0x10u);}
	public TK32V32[] set_arrParam(){set_has_arrParam(); return arrParam;}
	public TK32V32[] get_arrParam(){return arrParam;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iActionID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iActionID);
		};
		if (has_iActionType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iActionType);
		};
		if (has_iParamNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iParamNum);
		};
		if (has_arrParam()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iParamNum();
			if (__orm_ReferVar > (int)TCONST.WANDERING_EVENT_ACTION_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_EVENT_ACTION_MAX) && (__orm_iLoopVar < iParamNum); ++__orm_iLoopVar) {
				arrParam[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iActionID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iActionID);
		};
		if (has_iActionType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iActionType);
		};
		if (has_iParamNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iParamNum);
		};
		if (has_arrParam()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iParamNum();
			if (__orm_ReferVar > (int)TCONST.WANDERING_EVENT_ACTION_MAX) {
				oPacker.PushFieldName("iParamNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_EVENT_ACTION_MAX) && (__orm_iLoopVar < iParamNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrParam[{0}]", __orm_iLoopVar);
				arrParam[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iActionID();
				iActionID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iActionType();
				iActionType = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iParamNum();
				iParamNum = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_arrParam();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iParamNum=iParamNum<__orm_iArrCount ? iParamNum:(int)__orm_iArrCount;
				iParamNum=iParamNum<(int)TCONST.WANDERING_EVENT_ACTION_MAX ? iParamNum:(int)TCONST.WANDERING_EVENT_ACTION_MAX;
				if (iParamNum > (int)TCONST.WANDERING_EVENT_ACTION_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iParamNum; ++__orm_iLoopVar) {
					arrParam[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历事件log现场
public class TWanderEventLog
{
	private uint[] __orm_has_bits = new uint[1];
	private int iEventID;   //事件id
	private int iStageID;   //关卡id
	private int iStartFlag;   //开始标识
	private int iEndFlag;   //结束标识
	private int actionNum;   //执行的action数量
	private TWanderEventActionLog[] arrAction = new TWanderEventActionLog[(int)TCONST.WANDERING_EVENT_ACTION_MAX];   //action数据一般跟着iEndFlag走
	private int iOrder;   //每个事件唯一序号
	public TWanderEventLog() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.WANDERING_EVENT_ACTION_MAX; ++__orm_iLoopVar) {
			arrAction[__orm_iLoopVar] = new TWanderEventActionLog();
		}
	}

	public const int countof_arrAction = (int)TCONST.WANDERING_EVENT_ACTION_MAX;

	public const int MAX_PACKEDSIZE = 3643;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.WANDERING_EVENT_ACTION_MAX; ++__orm_iLoopVar){arrAction[__orm_iLoopVar].init();}
	}
	public bool has_iEventID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iEventID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iEventID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iEventID(int _iEventID){set_has_iEventID(); iEventID=_iEventID;}
	public int get_iEventID(){if (has_iEventID()) {return iEventID;} return 0;}

	public bool has_iStageID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iStageID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iStageID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iStageID(int _iStageID){set_has_iStageID(); iStageID=_iStageID;}
	public int get_iStageID(){if (has_iStageID()) {return iStageID;} return 0;}

	public bool has_iStartFlag() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iStartFlag() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iStartFlag() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iStartFlag(int _iStartFlag){set_has_iStartFlag(); iStartFlag=_iStartFlag;}
	public int get_iStartFlag(){if (has_iStartFlag()) {return iStartFlag;} return 0;}

	public bool has_iEndFlag() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iEndFlag() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iEndFlag() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iEndFlag(int _iEndFlag){set_has_iEndFlag(); iEndFlag=_iEndFlag;}
	public int get_iEndFlag(){if (has_iEndFlag()) {return iEndFlag;} return 0;}

	public bool has_actionNum() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_actionNum() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_actionNum() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_actionNum(int _actionNum){set_has_actionNum(); actionNum=_actionNum;}
	public int get_actionNum(){if (has_actionNum()) {return actionNum;} return 0;}

	public bool has_arrAction() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_arrAction() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_arrAction() {__orm_has_bits[0] &= ~(0x40u);}
	public TWanderEventActionLog[] set_arrAction(){set_has_arrAction(); return arrAction;}
	public TWanderEventActionLog[] get_arrAction(){return arrAction;}

	public bool has_iOrder() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iOrder() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iOrder() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iOrder(int _iOrder){set_has_iOrder(); iOrder=_iOrder;}
	public int get_iOrder(){if (has_iOrder()) {return iOrder;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iEventID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iEventID);
		};
		if (has_iStageID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStageID);
		};
		if (has_iStartFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iStartFlag);
		};
		if (has_iEndFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iEndFlag);
		};
		if (has_actionNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(actionNum);
		};
		if (has_arrAction()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_actionNum();
			if (__orm_ReferVar > (int)TCONST.WANDERING_EVENT_ACTION_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_EVENT_ACTION_MAX) && (__orm_iLoopVar < actionNum); ++__orm_iLoopVar) {
				arrAction[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iOrder()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iOrder);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iEventID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iEventID);
		};
		if (has_iStageID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStageID);
		};
		if (has_iStartFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iStartFlag);
		};
		if (has_iEndFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iEndFlag);
		};
		if (has_actionNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(actionNum);
		};
		if (has_arrAction()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_actionNum();
			if (__orm_ReferVar > (int)TCONST.WANDERING_EVENT_ACTION_MAX) {
				oPacker.PushFieldName("actionNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_EVENT_ACTION_MAX) && (__orm_iLoopVar < actionNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrAction[{0}]", __orm_iLoopVar);
				arrAction[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iOrder()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iOrder);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iEventID();
				iEventID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iStageID();
				iStageID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iStartFlag();
				iStartFlag = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iEndFlag();
				iEndFlag = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_actionNum();
				actionNum = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_arrAction();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				actionNum=actionNum<__orm_iArrCount ? actionNum:(int)__orm_iArrCount;
				actionNum=actionNum<(int)TCONST.WANDERING_EVENT_ACTION_MAX ? actionNum:(int)TCONST.WANDERING_EVENT_ACTION_MAX;
				if (actionNum > (int)TCONST.WANDERING_EVENT_ACTION_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < actionNum; ++__orm_iLoopVar) {
					arrAction[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 7: {
				set_has_iOrder();
				iOrder = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 事件数组 打包用（服务器用）
public class TWanderEventPack
{
	private uint[] __orm_has_bits = new uint[1];
	private int iEventNum;   //log数量
	private TWanderEventLog[] arrEventLog = new TWanderEventLog[(int)TCONST.WANDERING_EVENT_PACk_DB_MAX];   //事件log
	public TWanderEventPack() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.WANDERING_EVENT_PACk_DB_MAX; ++__orm_iLoopVar) {
			arrEventLog[__orm_iLoopVar] = new TWanderEventLog();
		}
	}

	public const int countof_arrEventLog = (int)TCONST.WANDERING_EVENT_PACk_DB_MAX;

	public const int MAX_PACKEDSIZE = 1821529;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.WANDERING_EVENT_PACk_DB_MAX; ++__orm_iLoopVar){arrEventLog[__orm_iLoopVar].init();}
	}
	public bool has_iEventNum() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iEventNum() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iEventNum() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iEventNum(int _iEventNum){set_has_iEventNum(); iEventNum=_iEventNum;}
	public int get_iEventNum(){if (has_iEventNum()) {return iEventNum;} return 0;}

	public bool has_arrEventLog() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrEventLog() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrEventLog() {__orm_has_bits[0] &= ~(0x4u);}
	public TWanderEventLog[] set_arrEventLog(){set_has_arrEventLog(); return arrEventLog;}
	public TWanderEventLog[] get_arrEventLog(){return arrEventLog;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iEventNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iEventNum);
		};
		if (has_arrEventLog()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iEventNum();
			if (__orm_ReferVar > (int)TCONST.WANDERING_EVENT_PACk_DB_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_EVENT_PACk_DB_MAX) && (__orm_iLoopVar < iEventNum); ++__orm_iLoopVar) {
				arrEventLog[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iEventNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iEventNum);
		};
		if (has_arrEventLog()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iEventNum();
			if (__orm_ReferVar > (int)TCONST.WANDERING_EVENT_PACk_DB_MAX) {
				oPacker.PushFieldName("iEventNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_EVENT_PACk_DB_MAX) && (__orm_iLoopVar < iEventNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrEventLog[{0}]", __orm_iLoopVar);
				arrEventLog[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iEventNum();
				iEventNum = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrEventLog();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iEventNum=iEventNum<__orm_iArrCount ? iEventNum:(int)__orm_iArrCount;
				iEventNum=iEventNum<(int)TCONST.WANDERING_EVENT_PACk_DB_MAX ? iEventNum:(int)TCONST.WANDERING_EVENT_PACk_DB_MAX;
				if (iEventNum > (int)TCONST.WANDERING_EVENT_PACk_DB_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iEventNum; ++__orm_iLoopVar) {
					arrEventLog[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历部件数据(私有)
public class TWanderPartPrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private int iDifficulty;   //已通关最大难度 初始0


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDifficulty() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDifficulty() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDifficulty() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDifficulty(int _iDifficulty){set_has_iDifficulty(); iDifficulty=_iDifficulty;}
	public int get_iDifficulty(){if (has_iDifficulty()) {return iDifficulty;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDifficulty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iDifficulty);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDifficulty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iDifficulty);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDifficulty();
				iDifficulty = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历难度变更
public class TMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iDifficulty;   //已通关最大难度 初始0


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDifficulty() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDifficulty() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDifficulty() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDifficulty(int _iDifficulty){set_has_iDifficulty(); iDifficulty=_iDifficulty;}
	public int get_iDifficulty(){if (has_iDifficulty()) {return iDifficulty;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDifficulty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iDifficulty);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDifficulty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iDifficulty);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDifficulty();
				iDifficulty = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 创建弟子-请求
public class TMSG_DISCIPLE_BUILD_DISCIPLE_REQ
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_BUILD_DISCIPLE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLocalID;   //弟子id


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 选择性格和个体值-请求
public class TMSG_DISCIPLE_TUINING_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子ID
	private int iSeedingID;   //功法，胚子表seedid
	private int iSeedingID_A;   //功法A，胚子表seedid
	private int iSeedingID_B;   //功法B，胚子表seedid
	private TK32V32[] arrAttribute = new TK32V32[(int)TCONST.WANDERING_ATTRIBUTE_MAX];   //分配属性  暂定枚举为 DISCIPLE_PROP_INDIVIDUAL_MIN 到 DISCIPLE_PROP_INDIVIDUAL_MAX
	public TMSG_DISCIPLE_TUINING_REQ() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.WANDERING_ATTRIBUTE_MAX; ++__orm_iLoopVar) {
			arrAttribute[__orm_iLoopVar] = new TK32V32();
		}
	}

	public const int countof_arrAttribute = (int)TCONST.WANDERING_ATTRIBUTE_MAX;

	public const int MAX_PACKEDSIZE = 214;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.WANDERING_ATTRIBUTE_MAX; ++__orm_iLoopVar){arrAttribute[__orm_iLoopVar].init();}
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_iSeedingID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iSeedingID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iSeedingID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iSeedingID(int _iSeedingID){set_has_iSeedingID(); iSeedingID=_iSeedingID;}
	public int get_iSeedingID(){if (has_iSeedingID()) {return iSeedingID;} return 0;}

	public bool has_iSeedingID_A() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iSeedingID_A() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iSeedingID_A() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iSeedingID_A(int _iSeedingID_A){set_has_iSeedingID_A(); iSeedingID_A=_iSeedingID_A;}
	public int get_iSeedingID_A(){if (has_iSeedingID_A()) {return iSeedingID_A;} return 0;}

	public bool has_iSeedingID_B() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iSeedingID_B() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iSeedingID_B() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iSeedingID_B(int _iSeedingID_B){set_has_iSeedingID_B(); iSeedingID_B=_iSeedingID_B;}
	public int get_iSeedingID_B(){if (has_iSeedingID_B()) {return iSeedingID_B;} return 0;}

	public bool has_arrAttribute() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrAttribute() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrAttribute() {__orm_has_bits[0] &= ~(0x20u);}
	public TK32V32[] set_arrAttribute(){set_has_arrAttribute(); return arrAttribute;}
	public TK32V32[] get_arrAttribute(){return arrAttribute;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iSeedingID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSeedingID);
		};
		if (has_iSeedingID_A()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iSeedingID_A);
		};
		if (has_iSeedingID_B()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iSeedingID_B);
		};
		if (has_arrAttribute()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.WANDERING_ATTRIBUTE_MAX); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_ATTRIBUTE_MAX); ++__orm_iLoopVar) {
				arrAttribute[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iSeedingID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSeedingID);
		};
		if (has_iSeedingID_A()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iSeedingID_A);
		};
		if (has_iSeedingID_B()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iSeedingID_B);
		};
		if (has_arrAttribute()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.WANDERING_ATTRIBUTE_MAX); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_ATTRIBUTE_MAX); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrAttribute[{0}]", __orm_iLoopVar);
				arrAttribute[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iSeedingID();
				iSeedingID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iSeedingID_A();
				iSeedingID_A = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iSeedingID_B();
				iSeedingID_B = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_arrAttribute();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)TCONST.WANDERING_ATTRIBUTE_MAX ? __orm_iArrCount:(uint)TCONST.WANDERING_ATTRIBUTE_MAX;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrAttribute[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_TUINING_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLocalID;   //弟子id


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 开始游历-请求
public class TMSG_DISCIPLE_WANDERING_START_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子id
	private string szPassBack;   //透传参数


	public const int MAX_PACKEDSIZE = 94;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_szPassBack() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_szPassBack() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_szPassBack() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_szPassBack(string _szPassBack){set_has_szPassBack(); szPassBack=_szPassBack;}
	public string get_szPassBack(){if (has_szPassBack()) {return szPassBack;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_szPassBack();
				szPassBack = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_WANDERING_START_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLocalID;   //弟子id


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历事件Log通知
public class TMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子id
	private int iStartFlag;   //是否开始
	private int iEndFlag;   //是否结束
	private int iEventNum;   //log数量
	private TWanderEventLog[] arrEventLog = new TWanderEventLog[(int)TCONST.WANDERING_EVENT_LOG_MAX];   //事件log
	private string szPassBack;   //透传参数
	public TMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.WANDERING_EVENT_LOG_MAX; ++__orm_iLoopVar) {
			arrEventLog[__orm_iLoopVar] = new TWanderEventLog();
		}
	}

	public const int countof_arrEventLog = (int)TCONST.WANDERING_EVENT_LOG_MAX;

	public const int MAX_PACKEDSIZE = 182288;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.WANDERING_EVENT_LOG_MAX; ++__orm_iLoopVar){arrEventLog[__orm_iLoopVar].init();}
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_iStartFlag() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iStartFlag() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iStartFlag() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iStartFlag(int _iStartFlag){set_has_iStartFlag(); iStartFlag=_iStartFlag;}
	public int get_iStartFlag(){if (has_iStartFlag()) {return iStartFlag;} return 0;}

	public bool has_iEndFlag() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iEndFlag() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iEndFlag() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iEndFlag(int _iEndFlag){set_has_iEndFlag(); iEndFlag=_iEndFlag;}
	public int get_iEndFlag(){if (has_iEndFlag()) {return iEndFlag;} return 0;}

	public bool has_iEventNum() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iEventNum() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iEventNum() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iEventNum(int _iEventNum){set_has_iEventNum(); iEventNum=_iEventNum;}
	public int get_iEventNum(){if (has_iEventNum()) {return iEventNum;} return 0;}

	public bool has_arrEventLog() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrEventLog() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrEventLog() {__orm_has_bits[0] &= ~(0x20u);}
	public TWanderEventLog[] set_arrEventLog(){set_has_arrEventLog(); return arrEventLog;}
	public TWanderEventLog[] get_arrEventLog(){return arrEventLog;}

	public bool has_szPassBack() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_szPassBack() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_szPassBack() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_szPassBack(string _szPassBack){set_has_szPassBack(); szPassBack=_szPassBack;}
	public string get_szPassBack(){if (has_szPassBack()) {return szPassBack;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iStartFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStartFlag);
		};
		if (has_iEndFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iEndFlag);
		};
		if (has_iEventNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iEventNum);
		};
		if (has_arrEventLog()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iEventNum();
			if (__orm_ReferVar > (int)TCONST.WANDERING_EVENT_LOG_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_EVENT_LOG_MAX) && (__orm_iLoopVar < iEventNum); ++__orm_iLoopVar) {
				arrEventLog[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iStartFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStartFlag);
		};
		if (has_iEndFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iEndFlag);
		};
		if (has_iEventNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iEventNum);
		};
		if (has_arrEventLog()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iEventNum();
			if (__orm_ReferVar > (int)TCONST.WANDERING_EVENT_LOG_MAX) {
				oPacker.PushFieldName("iEventNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_EVENT_LOG_MAX) && (__orm_iLoopVar < iEventNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrEventLog[{0}]", __orm_iLoopVar);
				arrEventLog[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iStartFlag();
				iStartFlag = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iEndFlag();
				iEndFlag = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iEventNum();
				iEventNum = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_arrEventLog();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iEventNum=iEventNum<__orm_iArrCount ? iEventNum:(int)__orm_iArrCount;
				iEventNum=iEventNum<(int)TCONST.WANDERING_EVENT_LOG_MAX ? iEventNum:(int)TCONST.WANDERING_EVENT_LOG_MAX;
				if (iEventNum > (int)TCONST.WANDERING_EVENT_LOG_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iEventNum; ++__orm_iLoopVar) {
					arrEventLog[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 6: {
				set_has_szPassBack();
				szPassBack = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-结束-请求
public class TMSG_DISCIPLE_WANDERING_FINISH_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子ID


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_WANDERING_FINISH_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLocalID;   //弟子ID
	private int iWanderState;   //0为失败1为成功


	public const int MAX_PACKEDSIZE = 40;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_iWanderState() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iWanderState() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iWanderState() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iWanderState(int _iWanderState){set_has_iWanderState(); iWanderState=_iWanderState;}
	public int get_iWanderState(){if (has_iWanderState()) {return iWanderState;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iWanderState()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iWanderState);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iWanderState()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iWanderState);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iWanderState();
				iWanderState = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游戏即将结束
public class TMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子local ID
	private int iFinishReason;   //结束原因


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_iFinishReason() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iFinishReason() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iFinishReason() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iFinishReason(int _iFinishReason){set_has_iFinishReason(); iFinishReason=_iFinishReason;}
	public int get_iFinishReason(){if (has_iFinishReason()) {return iFinishReason;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iFinishReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iFinishReason);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iFinishReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iFinishReason);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iFinishReason();
				iFinishReason = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-继续-请求
public class TMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子ID


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLocalID;   //弟子ID
	private int iStageID;   //当前所在关卡


	public const int MAX_PACKEDSIZE = 40;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_iStageID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iStageID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iStageID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iStageID(int _iStageID){set_has_iStageID(); iStageID=_iStageID;}
	public int get_iStageID(){if (has_iStageID()) {return iStageID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iStageID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStageID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iStageID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStageID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iStageID();
				iStageID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-提交选项
public class TMSG_DISCIPLE_WANDERING_CHOOSE_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子ID
	private int iOptionID;   //选项01234,WanderingStage.csv


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_iOptionID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iOptionID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iOptionID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iOptionID(int _iOptionID){set_has_iOptionID(); iOptionID=_iOptionID;}
	public int get_iOptionID(){if (has_iOptionID()) {return iOptionID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iOptionID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iOptionID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iOptionID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iOptionID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iOptionID();
				iOptionID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_WANDERING_CHOOSE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLocalID;   //弟子ID


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-弟子移除
public class TMSG_DISCIPLE_WANDERING_REMOVE_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子ID


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_WANDERING_REMOVE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLocalID;   //弟子ID


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-关闭界面-对应Start请求
public class TMSG_DISCIPLE_WANDERING_CLOSE_REQ
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_WANDERING_CLOSE_RSP
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-轮盘-开始通知
public class TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子ID
	private string szPassBack;   //透传参数
	private int iRewardCount;   //物品数量
	private int[] arrRewards = new int[(int)TCONST.WANDERING_FORTUNEWHEEL_REWARD_MAX];   //已获得的奖励索引数组，最后一个数据为,本次呈现给玩家的数据
	private int iWheelID;   //转盘表id

	public const int countof_arrRewards = (int)TCONST.WANDERING_FORTUNEWHEEL_REWARD_MAX;

	public const int MAX_PACKEDSIZE = 208;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_szPassBack() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_szPassBack() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_szPassBack() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_szPassBack(string _szPassBack){set_has_szPassBack(); szPassBack=_szPassBack;}
	public string get_szPassBack(){if (has_szPassBack()) {return szPassBack;} return "";}

	public bool has_iRewardCount() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iRewardCount() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iRewardCount() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iRewardCount(int _iRewardCount){set_has_iRewardCount(); iRewardCount=_iRewardCount;}
	public int get_iRewardCount(){if (has_iRewardCount()) {return iRewardCount;} return 0;}

	public bool has_arrRewards() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrRewards() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrRewards() {__orm_has_bits[0] &= ~(0x10u);}
	public int[] set_arrRewards(){set_has_arrRewards(); return arrRewards;}
	public int[] get_arrRewards(){return arrRewards;}

	public bool has_iWheelID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iWheelID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iWheelID() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iWheelID(int _iWheelID){set_has_iWheelID(); iWheelID=_iWheelID;}
	public int get_iWheelID(){if (has_iWheelID()) {return iWheelID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
		if (has_iRewardCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iRewardCount);
		};
		if (has_arrRewards()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iRewardCount();
			if (__orm_ReferVar > (int)TCONST.WANDERING_FORTUNEWHEEL_REWARD_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_FORTUNEWHEEL_REWARD_MAX) && (__orm_iLoopVar < iRewardCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrRewards[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iWheelID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iWheelID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
		if (has_iRewardCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iRewardCount);
		};
		if (has_arrRewards()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iRewardCount();
			if (__orm_ReferVar > (int)TCONST.WANDERING_FORTUNEWHEEL_REWARD_MAX) {
				oPacker.PushFieldName("iRewardCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_FORTUNEWHEEL_REWARD_MAX) && (__orm_iLoopVar < iRewardCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrRewards[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iWheelID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iWheelID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_szPassBack();
				szPassBack = oPacker.ReadSTRING();
			}break;
			case 3: {
				set_has_iRewardCount();
				iRewardCount = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_arrRewards();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iRewardCount=iRewardCount<__orm_iArrCount ? iRewardCount:(int)__orm_iArrCount;
				iRewardCount=iRewardCount<(int)TCONST.WANDERING_FORTUNEWHEEL_REWARD_MAX ? iRewardCount:(int)TCONST.WANDERING_FORTUNEWHEEL_REWARD_MAX;
				if (iRewardCount > (int)TCONST.WANDERING_FORTUNEWHEEL_REWARD_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iRewardCount; ++__orm_iLoopVar) {
					arrRewards[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 5: {
				set_has_iWheelID();
				iWheelID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-轮盘-加载状态请求
public class TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子ID
	private string szPassBack;   //透传参数


	public const int MAX_PACKEDSIZE = 94;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_szPassBack() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_szPassBack() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_szPassBack() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_szPassBack(string _szPassBack){set_has_szPassBack(); szPassBack=_szPassBack;}
	public string get_szPassBack(){if (has_szPassBack()) {return szPassBack;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_szPassBack();
				szPassBack = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLocalID;   //弟子ID


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-轮盘-请求抽奖
public class TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子ID
	private sbyte bTake;   //是否继续抽奖
	private string szPassBack;   //透传参数


	public const int MAX_PACKEDSIZE = 100;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_bTake() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_bTake() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_bTake() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_bTake(sbyte _bTake){set_has_bTake(); bTake=_bTake;}
	public sbyte get_bTake(){if (has_bTake()) {return bTake;} return 0;}

	public bool has_szPassBack() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_szPassBack() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_szPassBack() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_szPassBack(string _szPassBack){set_has_szPassBack(); szPassBack=_szPassBack;}
	public string get_szPassBack(){if (has_szPassBack()) {return szPassBack;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_bTake()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(bTake);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_bTake()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(bTake);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_bTake();
				bTake = oPacker.ReadINT8();
			}break;
			case 3: {
				set_has_szPassBack();
				szPassBack = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLocalID;   //弟子ID
	private int iRewardIndex;   //当前抽出的奖励索引
	private sbyte bTake;   //是否继续抽奖


	public const int MAX_PACKEDSIZE = 46;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_iRewardIndex() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iRewardIndex() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iRewardIndex() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iRewardIndex(int _iRewardIndex){set_has_iRewardIndex(); iRewardIndex=_iRewardIndex;}
	public int get_iRewardIndex(){if (has_iRewardIndex()) {return iRewardIndex;} return 0;}

	public bool has_bTake() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_bTake() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_bTake() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_bTake(sbyte _bTake){set_has_bTake(); bTake=_bTake;}
	public sbyte get_bTake(){if (has_bTake()) {return bTake;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iRewardIndex()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iRewardIndex);
		};
		if (has_bTake()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bTake);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iRewardIndex()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iRewardIndex);
		};
		if (has_bTake()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bTake);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iRewardIndex();
				iRewardIndex = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_bTake();
				bTake = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-渡劫-请求
public class TMSG_DISCIPLE_WANDERING_GODEXAM_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子ID


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_WANDERING_GODEXAM_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLocalID;   //弟子ID


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-商店购买-请求
public class TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLid;   //弟子localid
	private long iEquipLid;   //装备localid
	private string szPassBack;   //透传参数


	public const int MAX_PACKEDSIZE = 109;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public bool has_iEquipLid() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iEquipLid() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iEquipLid() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iEquipLid(long _iEquipLid){set_has_iEquipLid(); iEquipLid=_iEquipLid;}
	public long get_iEquipLid(){if (has_iEquipLid()) {return iEquipLid;} return 0;}

	public bool has_szPassBack() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_szPassBack() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_szPassBack() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_szPassBack(string _szPassBack){set_has_szPassBack(); szPassBack=_szPassBack;}
	public string get_szPassBack(){if (has_szPassBack()) {return szPassBack;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
		if (has_iEquipLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iEquipLid);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
		if (has_iEquipLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iEquipLid);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iEquipLid();
				iEquipLid = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_szPassBack();
				szPassBack = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLid;   //弟子localid
	private long iEquipLid;   //装备localid
	private string szPassBack;   //透传参数


	public const int MAX_PACKEDSIZE = 119;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public bool has_iEquipLid() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iEquipLid() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iEquipLid() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iEquipLid(long _iEquipLid){set_has_iEquipLid(); iEquipLid=_iEquipLid;}
	public long get_iEquipLid(){if (has_iEquipLid()) {return iEquipLid;} return 0;}

	public bool has_szPassBack() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_szPassBack() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_szPassBack() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_szPassBack(string _szPassBack){set_has_szPassBack(); szPassBack=_szPassBack;}
	public string get_szPassBack(){if (has_szPassBack()) {return szPassBack;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
		if (has_iEquipLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iEquipLid);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
		if (has_iEquipLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iEquipLid);
		};
		if (has_szPassBack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szPassBack);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iEquipLid();
				iEquipLid = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_szPassBack();
				szPassBack = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-商店数据-请求
public class TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLid;   //弟子localid


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLid;   //弟子localid
	private int iEquipCount;   //装备数量
	private long[] arrEquips = new long[(int)TCONST.WANDERING_EVENT_TEMP_DATA_INFO_MAX];   //装备数组，装备localid
	private int iEventID;   //事件id
	private int iRefreshCount;   //已刷新次数

	public const int countof_arrEquips = (int)TCONST.WANDERING_EVENT_TEMP_DATA_INFO_MAX;

	public const int MAX_PACKEDSIZE = 234;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public bool has_iEquipCount() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iEquipCount() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iEquipCount() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iEquipCount(int _iEquipCount){set_has_iEquipCount(); iEquipCount=_iEquipCount;}
	public int get_iEquipCount(){if (has_iEquipCount()) {return iEquipCount;} return 0;}

	public bool has_arrEquips() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrEquips() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrEquips() {__orm_has_bits[0] &= ~(0x8u);}
	public long[] set_arrEquips(){set_has_arrEquips(); return arrEquips;}
	public long[] get_arrEquips(){return arrEquips;}

	public bool has_iEventID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iEventID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iEventID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iEventID(int _iEventID){set_has_iEventID(); iEventID=_iEventID;}
	public int get_iEventID(){if (has_iEventID()) {return iEventID;} return 0;}

	public bool has_iRefreshCount() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iRefreshCount() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iRefreshCount() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iRefreshCount(int _iRefreshCount){set_has_iRefreshCount(); iRefreshCount=_iRefreshCount;}
	public int get_iRefreshCount(){if (has_iRefreshCount()) {return iRefreshCount;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
		if (has_iEquipCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iEquipCount);
		};
		if (has_arrEquips()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iEquipCount();
			if (__orm_ReferVar > (int)TCONST.WANDERING_EVENT_TEMP_DATA_INFO_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_EVENT_TEMP_DATA_INFO_MAX) && (__orm_iLoopVar < iEquipCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrEquips[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iEventID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iEventID);
		};
		if (has_iRefreshCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iRefreshCount);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
		if (has_iEquipCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iEquipCount);
		};
		if (has_arrEquips()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iEquipCount();
			if (__orm_ReferVar > (int)TCONST.WANDERING_EVENT_TEMP_DATA_INFO_MAX) {
				oPacker.PushFieldName("iEquipCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_EVENT_TEMP_DATA_INFO_MAX) && (__orm_iLoopVar < iEquipCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrEquips[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iEventID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iEventID);
		};
		if (has_iRefreshCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iRefreshCount);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iEquipCount();
				iEquipCount = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrEquips();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iEquipCount=iEquipCount<__orm_iArrCount ? iEquipCount:(int)__orm_iArrCount;
				iEquipCount=iEquipCount<(int)TCONST.WANDERING_EVENT_TEMP_DATA_INFO_MAX ? iEquipCount:(int)TCONST.WANDERING_EVENT_TEMP_DATA_INFO_MAX;
				if (iEquipCount > (int)TCONST.WANDERING_EVENT_TEMP_DATA_INFO_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iEquipCount; ++__orm_iLoopVar) {
					arrEquips[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			case 4: {
				set_has_iEventID();
				iEventID = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iRefreshCount();
				iRefreshCount = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-商店关闭-请求
public class TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLid;   //弟子localid


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLid;   //弟子localid


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-装备商店刷新-请求
public class TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLid;   //弟子localid


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLid;   //弟子localid


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历物品变化通知
public class TMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子localID
	private int iGoodCount;   //物品数量
	private TK32V32[] arrGoods = new TK32V32[(int)TCONST.WANDERING_GOOD_COUNT_MAX];   //物品数组
	public TMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.WANDERING_GOOD_COUNT_MAX; ++__orm_iLoopVar) {
			arrGoods[__orm_iLoopVar] = new TK32V32();
		}
	}

	public const int countof_arrGoods = (int)TCONST.WANDERING_GOOD_COUNT_MAX;

	public const int MAX_PACKEDSIZE = 844;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.WANDERING_GOOD_COUNT_MAX; ++__orm_iLoopVar){arrGoods[__orm_iLoopVar].init();}
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_iGoodCount() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iGoodCount() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iGoodCount() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iGoodCount(int _iGoodCount){set_has_iGoodCount(); iGoodCount=_iGoodCount;}
	public int get_iGoodCount(){if (has_iGoodCount()) {return iGoodCount;} return 0;}

	public bool has_arrGoods() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrGoods() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrGoods() {__orm_has_bits[0] &= ~(0x8u);}
	public TK32V32[] set_arrGoods(){set_has_arrGoods(); return arrGoods;}
	public TK32V32[] get_arrGoods(){return arrGoods;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iGoodCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGoodCount);
		};
		if (has_arrGoods()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iGoodCount();
			if (__orm_ReferVar > (int)TCONST.WANDERING_GOOD_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_GOOD_COUNT_MAX) && (__orm_iLoopVar < iGoodCount); ++__orm_iLoopVar) {
				arrGoods[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iGoodCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGoodCount);
		};
		if (has_arrGoods()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iGoodCount();
			if (__orm_ReferVar > (int)TCONST.WANDERING_GOOD_COUNT_MAX) {
				oPacker.PushFieldName("iGoodCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_GOOD_COUNT_MAX) && (__orm_iLoopVar < iGoodCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrGoods[{0}]", __orm_iLoopVar);
				arrGoods[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iGoodCount();
				iGoodCount = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrGoods();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iGoodCount=iGoodCount<__orm_iArrCount ? iGoodCount:(int)__orm_iArrCount;
				iGoodCount=iGoodCount<(int)TCONST.WANDERING_GOOD_COUNT_MAX ? iGoodCount:(int)TCONST.WANDERING_GOOD_COUNT_MAX;
				if (iGoodCount > (int)TCONST.WANDERING_GOOD_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iGoodCount; ++__orm_iLoopVar) {
					arrGoods[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历物品全量数据通知
public class TMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子localID
	private int iGoodCount;   //物品数量
	private TK32V32[] arrGoods = new TK32V32[(int)TCONST.WANDERING_GOOD_COUNT_MAX];   //物品数组
	public TMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.WANDERING_GOOD_COUNT_MAX; ++__orm_iLoopVar) {
			arrGoods[__orm_iLoopVar] = new TK32V32();
		}
	}

	public const int countof_arrGoods = (int)TCONST.WANDERING_GOOD_COUNT_MAX;

	public const int MAX_PACKEDSIZE = 844;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.WANDERING_GOOD_COUNT_MAX; ++__orm_iLoopVar){arrGoods[__orm_iLoopVar].init();}
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_iGoodCount() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iGoodCount() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iGoodCount() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iGoodCount(int _iGoodCount){set_has_iGoodCount(); iGoodCount=_iGoodCount;}
	public int get_iGoodCount(){if (has_iGoodCount()) {return iGoodCount;} return 0;}

	public bool has_arrGoods() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrGoods() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrGoods() {__orm_has_bits[0] &= ~(0x8u);}
	public TK32V32[] set_arrGoods(){set_has_arrGoods(); return arrGoods;}
	public TK32V32[] get_arrGoods(){return arrGoods;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iGoodCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGoodCount);
		};
		if (has_arrGoods()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iGoodCount();
			if (__orm_ReferVar > (int)TCONST.WANDERING_GOOD_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_GOOD_COUNT_MAX) && (__orm_iLoopVar < iGoodCount); ++__orm_iLoopVar) {
				arrGoods[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iGoodCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGoodCount);
		};
		if (has_arrGoods()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iGoodCount();
			if (__orm_ReferVar > (int)TCONST.WANDERING_GOOD_COUNT_MAX) {
				oPacker.PushFieldName("iGoodCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_GOOD_COUNT_MAX) && (__orm_iLoopVar < iGoodCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrGoods[{0}]", __orm_iLoopVar);
				arrGoods[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iGoodCount();
				iGoodCount = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrGoods();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iGoodCount=iGoodCount<__orm_iArrCount ? iGoodCount:(int)__orm_iArrCount;
				iGoodCount=iGoodCount<(int)TCONST.WANDERING_GOOD_COUNT_MAX ? iGoodCount:(int)TCONST.WANDERING_GOOD_COUNT_MAX;
				if (iGoodCount > (int)TCONST.WANDERING_GOOD_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iGoodCount; ++__orm_iLoopVar) {
					arrGoods[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 选择词条 通知
public class TMSG_WANDERING_ABILITY_SELECT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子localID
	private int iAbilityCount;   //词条数量
	private int[] arrAbility = new int[(int)TCONST.WANDERING_SELECT_ABILITY_MAX];   //词条数量
	private int iCanSelectCount;   //能选词条数量

	public const int countof_arrAbility = (int)TCONST.WANDERING_SELECT_ABILITY_MAX;

	public const int MAX_PACKEDSIZE = 104;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_iAbilityCount() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iAbilityCount() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iAbilityCount() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iAbilityCount(int _iAbilityCount){set_has_iAbilityCount(); iAbilityCount=_iAbilityCount;}
	public int get_iAbilityCount(){if (has_iAbilityCount()) {return iAbilityCount;} return 0;}

	public bool has_arrAbility() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrAbility() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrAbility() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrAbility(){set_has_arrAbility(); return arrAbility;}
	public int[] get_arrAbility(){return arrAbility;}

	public bool has_iCanSelectCount() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iCanSelectCount() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iCanSelectCount() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iCanSelectCount(int _iCanSelectCount){set_has_iCanSelectCount(); iCanSelectCount=_iCanSelectCount;}
	public int get_iCanSelectCount(){if (has_iCanSelectCount()) {return iCanSelectCount;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iAbilityCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iAbilityCount);
		};
		if (has_arrAbility()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iAbilityCount();
			if (__orm_ReferVar > (int)TCONST.WANDERING_SELECT_ABILITY_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_SELECT_ABILITY_MAX) && (__orm_iLoopVar < iAbilityCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrAbility[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iCanSelectCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iCanSelectCount);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iAbilityCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iAbilityCount);
		};
		if (has_arrAbility()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iAbilityCount();
			if (__orm_ReferVar > (int)TCONST.WANDERING_SELECT_ABILITY_MAX) {
				oPacker.PushFieldName("iAbilityCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_SELECT_ABILITY_MAX) && (__orm_iLoopVar < iAbilityCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrAbility[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iCanSelectCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iCanSelectCount);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iAbilityCount();
				iAbilityCount = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrAbility();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iAbilityCount=iAbilityCount<__orm_iArrCount ? iAbilityCount:(int)__orm_iArrCount;
				iAbilityCount=iAbilityCount<(int)TCONST.WANDERING_SELECT_ABILITY_MAX ? iAbilityCount:(int)TCONST.WANDERING_SELECT_ABILITY_MAX;
				if (iAbilityCount > (int)TCONST.WANDERING_SELECT_ABILITY_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iAbilityCount; ++__orm_iLoopVar) {
					arrAbility[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 4: {
				set_has_iCanSelectCount();
				iCanSelectCount = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 选择词条 请求
public class TMSG_WANDERING_ABILITY_SELECT_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子localID
	private int iSelectNum;   //选择词条数量
	private int[] arrAbilityIndex = new int[(int)TCONST.WANDERING_SELECT_ABILITY_MAX];   //词条索引数组

	public const int countof_arrAbilityIndex = (int)TCONST.WANDERING_SELECT_ABILITY_MAX;

	public const int MAX_PACKEDSIZE = 94;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_iSelectNum() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iSelectNum() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iSelectNum() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iSelectNum(int _iSelectNum){set_has_iSelectNum(); iSelectNum=_iSelectNum;}
	public int get_iSelectNum(){if (has_iSelectNum()) {return iSelectNum;} return 0;}

	public bool has_arrAbilityIndex() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrAbilityIndex() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrAbilityIndex() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrAbilityIndex(){set_has_arrAbilityIndex(); return arrAbilityIndex;}
	public int[] get_arrAbilityIndex(){return arrAbilityIndex;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iSelectNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSelectNum);
		};
		if (has_arrAbilityIndex()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSelectNum();
			if (__orm_ReferVar > (int)TCONST.WANDERING_SELECT_ABILITY_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_SELECT_ABILITY_MAX) && (__orm_iLoopVar < iSelectNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrAbilityIndex[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iSelectNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSelectNum);
		};
		if (has_arrAbilityIndex()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSelectNum();
			if (__orm_ReferVar > (int)TCONST.WANDERING_SELECT_ABILITY_MAX) {
				oPacker.PushFieldName("iSelectNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.WANDERING_SELECT_ABILITY_MAX) && (__orm_iLoopVar < iSelectNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrAbilityIndex[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iSelectNum();
				iSelectNum = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrAbilityIndex();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iSelectNum=iSelectNum<__orm_iArrCount ? iSelectNum:(int)__orm_iArrCount;
				iSelectNum=iSelectNum<(int)TCONST.WANDERING_SELECT_ABILITY_MAX ? iSelectNum:(int)TCONST.WANDERING_SELECT_ABILITY_MAX;
				if (iSelectNum > (int)TCONST.WANDERING_SELECT_ABILITY_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iSelectNum; ++__orm_iLoopVar) {
					arrAbilityIndex[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 选择词条 回复
public class TMSG_WANDERING_ABILITY_SELECT_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLocalID;   //弟子localID


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 主动加载词条状态 请求
public class TMSG_WANDERING_ABILITY_SELECT_LOAD_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子localID


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 主动加载词条状态 回复
public class TMSG_WANDERING_ABILITY_SELECT_LOAD_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLocalID;   //弟子localID


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备选择下一页 请求
public class TMSG_WANDERING_EQUIP_SELECT_NEXT_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLid;   //弟子localID


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_WANDERING_EQUIP_SELECT_NEXT_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLid;   //弟子localID


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 主动加载装备事件数据 请求
public class TMSG_WANDERING_EQUIP_SELECT_LOAD_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLid;   //弟子localID


	public const int MAX_PACKEDSIZE = 20;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_WANDERING_EQUIP_SELECT_LOAD_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iDiscipleLid;   //弟子localID


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备事件通知
public class TMSG_WANDERING_EQUIP_SELECT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLid;   //弟子localID
	private int iCurIndex;   //当前所在第几页，默认0开始计数
	private int iEventID;   //事件id


	public const int MAX_PACKEDSIZE = 40;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public bool has_iCurIndex() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iCurIndex() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iCurIndex() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iCurIndex(int _iCurIndex){set_has_iCurIndex(); iCurIndex=_iCurIndex;}
	public int get_iCurIndex(){if (has_iCurIndex()) {return iCurIndex;} return 0;}

	public bool has_iEventID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iEventID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iEventID() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iEventID(int _iEventID){set_has_iEventID(); iEventID=_iEventID;}
	public int get_iEventID(){if (has_iEventID()) {return iEventID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
		if (has_iCurIndex()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iCurIndex);
		};
		if (has_iEventID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iEventID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
		if (has_iCurIndex()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iCurIndex);
		};
		if (has_iEventID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iEventID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iCurIndex();
				iCurIndex = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iEventID();
				iEventID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历内系统数据-通知
public class TMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLid;   //弟子localID
	private int iReforgeProgress;   //重铸点数


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iDiscipleLid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLid(long _iDiscipleLid){set_has_iDiscipleLid(); iDiscipleLid=_iDiscipleLid;}
	public long get_iDiscipleLid(){if (has_iDiscipleLid()) {return iDiscipleLid;} return 0;}

	public bool has_iReforgeProgress() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iReforgeProgress() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iReforgeProgress() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iReforgeProgress(int _iReforgeProgress){set_has_iReforgeProgress(); iReforgeProgress=_iReforgeProgress;}
	public int get_iReforgeProgress(){if (has_iReforgeProgress()) {return iReforgeProgress;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
		if (has_iReforgeProgress()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iReforgeProgress);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLid);
		};
		if (has_iReforgeProgress()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iReforgeProgress);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLid();
				iDiscipleLid = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iReforgeProgress();
				iReforgeProgress = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 体力系统部件数据现场
public class TStaminaPartPrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private long iRestoreTime;   //体力不足时间戳
	private int iDailyBuyTimes;   //每日购买次数
	private long iLastBuyTime;   //最后一次购买时间戳


	public const int MAX_PACKEDSIZE = 45;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRestoreTime() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iRestoreTime() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iRestoreTime() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iRestoreTime(long _iRestoreTime){set_has_iRestoreTime(); iRestoreTime=_iRestoreTime;}
	public long get_iRestoreTime(){if (has_iRestoreTime()) {return iRestoreTime;} return 0;}

	public bool has_iDailyBuyTimes() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iDailyBuyTimes() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iDailyBuyTimes() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iDailyBuyTimes(int _iDailyBuyTimes){set_has_iDailyBuyTimes(); iDailyBuyTimes=_iDailyBuyTimes;}
	public int get_iDailyBuyTimes(){if (has_iDailyBuyTimes()) {return iDailyBuyTimes;} return 0;}

	public bool has_iLastBuyTime() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iLastBuyTime() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iLastBuyTime() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iLastBuyTime(long _iLastBuyTime){set_has_iLastBuyTime(); iLastBuyTime=_iLastBuyTime;}
	public long get_iLastBuyTime(){if (has_iLastBuyTime()) {return iLastBuyTime;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRestoreTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iRestoreTime);
		};
		if (has_iDailyBuyTimes()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iDailyBuyTimes);
		};
		if (has_iLastBuyTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iLastBuyTime);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRestoreTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iRestoreTime);
		};
		if (has_iDailyBuyTimes()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iDailyBuyTimes);
		};
		if (has_iLastBuyTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iLastBuyTime);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iRestoreTime();
				iRestoreTime = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iDailyBuyTimes();
				iDailyBuyTimes = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iLastBuyTime();
				iLastBuyTime = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 体力购买 请求
public class TMSG_STAMINA_BUY_REQ
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_STAMINA_BUY_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_STAMINA_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iRestoreTime;   //体力不足时间戳
	private int iDailyBuyTimes;   //每日购买次数
	private long iLastBuyTime;   //最后一次购买时间戳


	public const int MAX_PACKEDSIZE = 45;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRestoreTime() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iRestoreTime() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iRestoreTime() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iRestoreTime(long _iRestoreTime){set_has_iRestoreTime(); iRestoreTime=_iRestoreTime;}
	public long get_iRestoreTime(){if (has_iRestoreTime()) {return iRestoreTime;} return 0;}

	public bool has_iDailyBuyTimes() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iDailyBuyTimes() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iDailyBuyTimes() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iDailyBuyTimes(int _iDailyBuyTimes){set_has_iDailyBuyTimes(); iDailyBuyTimes=_iDailyBuyTimes;}
	public int get_iDailyBuyTimes(){if (has_iDailyBuyTimes()) {return iDailyBuyTimes;} return 0;}

	public bool has_iLastBuyTime() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iLastBuyTime() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iLastBuyTime() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iLastBuyTime(long _iLastBuyTime){set_has_iLastBuyTime(); iLastBuyTime=_iLastBuyTime;}
	public long get_iLastBuyTime(){if (has_iLastBuyTime()) {return iLastBuyTime;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRestoreTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iRestoreTime);
		};
		if (has_iDailyBuyTimes()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iDailyBuyTimes);
		};
		if (has_iLastBuyTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iLastBuyTime);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRestoreTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iRestoreTime);
		};
		if (has_iDailyBuyTimes()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iDailyBuyTimes);
		};
		if (has_iLastBuyTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iLastBuyTime);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iRestoreTime();
				iRestoreTime = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iDailyBuyTimes();
				iDailyBuyTimes = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iLastBuyTime();
				iLastBuyTime = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 奖励条目
public class TPeriodPrizeItem
{
	private uint[] __orm_has_bits = new uint[1];
	private int iID;   //
	private long iLastClaimTime;   //最后领取时间  
	private long iLastBuyTime;   //最后购买时间  
	private int iPurchaseCount;   //今天已购买的次数
	private long iNextRecovTime;   //下次回复时间.  如果为0, 表示无须恢复.


	public const int MAX_PACKEDSIZE = 70;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iID(int _iID){set_has_iID(); iID=_iID;}
	public int get_iID(){if (has_iID()) {return iID;} return 0;}

	public bool has_iLastClaimTime() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iLastClaimTime() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iLastClaimTime() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iLastClaimTime(long _iLastClaimTime){set_has_iLastClaimTime(); iLastClaimTime=_iLastClaimTime;}
	public long get_iLastClaimTime(){if (has_iLastClaimTime()) {return iLastClaimTime;} return 0;}

	public bool has_iLastBuyTime() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iLastBuyTime() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iLastBuyTime() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iLastBuyTime(long _iLastBuyTime){set_has_iLastBuyTime(); iLastBuyTime=_iLastBuyTime;}
	public long get_iLastBuyTime(){if (has_iLastBuyTime()) {return iLastBuyTime;} return 0;}

	public bool has_iPurchaseCount() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iPurchaseCount() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iPurchaseCount() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iPurchaseCount(int _iPurchaseCount){set_has_iPurchaseCount(); iPurchaseCount=_iPurchaseCount;}
	public int get_iPurchaseCount(){if (has_iPurchaseCount()) {return iPurchaseCount;} return 0;}

	public bool has_iNextRecovTime() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iNextRecovTime() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iNextRecovTime() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iNextRecovTime(long _iNextRecovTime){set_has_iNextRecovTime(); iNextRecovTime=_iNextRecovTime;}
	public long get_iNextRecovTime(){if (has_iNextRecovTime()) {return iNextRecovTime;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iID);
		};
		if (has_iLastClaimTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iLastClaimTime);
		};
		if (has_iLastBuyTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(iLastBuyTime);
		};
		if (has_iPurchaseCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iPurchaseCount);
		};
		if (has_iNextRecovTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(iNextRecovTime);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iID);
		};
		if (has_iLastClaimTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iLastClaimTime);
		};
		if (has_iLastBuyTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(iLastBuyTime);
		};
		if (has_iPurchaseCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iPurchaseCount);
		};
		if (has_iNextRecovTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(iNextRecovTime);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iID();
				iID = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iLastClaimTime();
				iLastClaimTime = oPacker.ReadVarintINT64();
			}break;
			case 5: {
				set_has_iLastBuyTime();
				iLastBuyTime = oPacker.ReadVarintINT64();
			}break;
			case 6: {
				set_has_iPurchaseCount();
				iPurchaseCount = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iNextRecovTime();
				iNextRecovTime = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 体力系统部件数据现场
public class TPeriodPrizePartPrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private int iItemNum;   //
	private TPeriodPrizeItem[] arrItem = new TPeriodPrizeItem[(int)TCONST.ORM_PERIODPRIZE_ITEM_NUM];   //
	public TPeriodPrizePartPrivateContext() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM; ++__orm_iLoopVar) {
			arrItem[__orm_iLoopVar] = new TPeriodPrizeItem();
		}
	}

	public const int countof_arrItem = (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM;

	public const int MAX_PACKEDSIZE = 2269;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_PERIODPRIZE_ITEM_NUM; ++__orm_iLoopVar){arrItem[__orm_iLoopVar].init();}
	}
	public bool has_iItemNum() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iItemNum() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iItemNum() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iItemNum(int _iItemNum){set_has_iItemNum(); iItemNum=_iItemNum;}
	public int get_iItemNum(){if (has_iItemNum()) {return iItemNum;} return 0;}

	public bool has_arrItem() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrItem() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrItem() {__orm_has_bits[0] &= ~(0x4u);}
	public TPeriodPrizeItem[] set_arrItem(){set_has_arrItem(); return arrItem;}
	public TPeriodPrizeItem[] get_arrItem(){return arrItem;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iItemNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iItemNum);
		};
		if (has_arrItem()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iItemNum();
			if (__orm_ReferVar > (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM) && (__orm_iLoopVar < iItemNum); ++__orm_iLoopVar) {
				arrItem[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iItemNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iItemNum);
		};
		if (has_arrItem()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iItemNum();
			if (__orm_ReferVar > (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM) {
				oPacker.PushFieldName("iItemNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM) && (__orm_iLoopVar < iItemNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrItem[{0}]", __orm_iLoopVar);
				arrItem[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iItemNum();
				iItemNum = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrItem();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iItemNum=iItemNum<__orm_iArrCount ? iItemNum:(int)__orm_iArrCount;
				iItemNum=iItemNum<(int)TCONST.ORM_PERIODPRIZE_ITEM_NUM ? iItemNum:(int)TCONST.ORM_PERIODPRIZE_ITEM_NUM;
				if (iItemNum > (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iItemNum; ++__orm_iLoopVar) {
					arrItem[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 时长奖励, 条目变动
public class TMSG_PERIODPRIZE_ITEM_CHANGED_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iItemNum;   //
	private TPeriodPrizeItem[] arrItem = new TPeriodPrizeItem[(int)TCONST.ORM_PERIODPRIZE_ITEM_NUM];   //
	public TMSG_PERIODPRIZE_ITEM_CHANGED_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM; ++__orm_iLoopVar) {
			arrItem[__orm_iLoopVar] = new TPeriodPrizeItem();
		}
	}

	public const int countof_arrItem = (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM;

	public const int MAX_PACKEDSIZE = 2269;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_PERIODPRIZE_ITEM_NUM; ++__orm_iLoopVar){arrItem[__orm_iLoopVar].init();}
	}
	public bool has_iItemNum() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iItemNum() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iItemNum() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iItemNum(int _iItemNum){set_has_iItemNum(); iItemNum=_iItemNum;}
	public int get_iItemNum(){if (has_iItemNum()) {return iItemNum;} return 0;}

	public bool has_arrItem() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrItem() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrItem() {__orm_has_bits[0] &= ~(0x4u);}
	public TPeriodPrizeItem[] set_arrItem(){set_has_arrItem(); return arrItem;}
	public TPeriodPrizeItem[] get_arrItem(){return arrItem;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iItemNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iItemNum);
		};
		if (has_arrItem()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iItemNum();
			if (__orm_ReferVar > (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM) && (__orm_iLoopVar < iItemNum); ++__orm_iLoopVar) {
				arrItem[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iItemNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iItemNum);
		};
		if (has_arrItem()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iItemNum();
			if (__orm_ReferVar > (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM) {
				oPacker.PushFieldName("iItemNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM) && (__orm_iLoopVar < iItemNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrItem[{0}]", __orm_iLoopVar);
				arrItem[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iItemNum();
				iItemNum = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrItem();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iItemNum=iItemNum<__orm_iArrCount ? iItemNum:(int)__orm_iArrCount;
				iItemNum=iItemNum<(int)TCONST.ORM_PERIODPRIZE_ITEM_NUM ? iItemNum:(int)TCONST.ORM_PERIODPRIZE_ITEM_NUM;
				if (iItemNum > (int)TCONST.ORM_PERIODPRIZE_ITEM_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iItemNum; ++__orm_iLoopVar) {
					arrItem[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 购买物品
public class TMSG_PERIODPRIZE_ITEM_PURCHASE_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iItemID;   //条目id
	private int iNum;   //购买数量


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iItemID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iItemID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iItemID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iItemID(int _iItemID){set_has_iItemID(); iItemID=_iItemID;}
	public int get_iItemID(){if (has_iItemID()) {return iItemID;} return 0;}

	public bool has_iNum() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iNum() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iNum() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iNum(int _iNum){set_has_iNum(); iNum=_iNum;}
	public int get_iNum(){if (has_iNum()) {return iNum;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iItemID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iItemID);
		};
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iItemID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iItemID);
		};
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iItemID();
				iItemID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iNum();
				iNum = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 购买物品
public class TMSG_PERIODPRIZE_ITEM_PURCHASE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private int iItemID;   //条目id
	private int iNum;   //购买数量


	public const int MAX_PACKEDSIZE = 35;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iItemID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iItemID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iItemID() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iItemID(int _iItemID){set_has_iItemID(); iItemID=_iItemID;}
	public int get_iItemID(){if (has_iItemID()) {return iItemID;} return 0;}

	public bool has_iNum() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iNum() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iNum() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iNum(int _iNum){set_has_iNum(); iNum=_iNum;}
	public int get_iNum(){if (has_iNum()) {return iNum;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iItemID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iItemID);
		};
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iItemID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iItemID);
		};
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iItemID();
				iItemID = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iNum();
				iNum = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 兑换码-请求
public class TMSG_CDKEY_WITHDRAW_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private string szCdKey;   //兑换码


	public const int MAX_PACKEDSIZE = 79;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_szCdKey() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_szCdKey() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_szCdKey() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_szCdKey(string _szCdKey){set_has_szCdKey(); szCdKey=_szCdKey;}
	public string get_szCdKey(){if (has_szCdKey()) {return szCdKey;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szCdKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szCdKey);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szCdKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szCdKey);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_szCdKey();
				szCdKey = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 兑换码-通知
public class TMSG_CDKEY_WITHDRAW_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private string szCdKey;   //兑换码
	private int iSdkError;   //sdk后台错误码
	private string szErrorMsg;   //失败消息


	public const int MAX_PACKEDSIZE = 227;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_szCdKey() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_szCdKey() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_szCdKey() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_szCdKey(string _szCdKey){set_has_szCdKey(); szCdKey=_szCdKey;}
	public string get_szCdKey(){if (has_szCdKey()) {return szCdKey;} return "";}

	public bool has_iSdkError() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iSdkError() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iSdkError() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iSdkError(int _iSdkError){set_has_iSdkError(); iSdkError=_iSdkError;}
	public int get_iSdkError(){if (has_iSdkError()) {return iSdkError;} return 0;}

	public bool has_szErrorMsg() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_szErrorMsg() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_szErrorMsg() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_szErrorMsg(string _szErrorMsg){set_has_szErrorMsg(); szErrorMsg=_szErrorMsg;}
	public string get_szErrorMsg(){if (has_szErrorMsg()) {return szErrorMsg;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szCdKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szCdKey);
		};
		if (has_iSdkError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iSdkError);
		};
		if (has_szErrorMsg()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,3));  // f id
			oPacker.WriteSTRING(szErrorMsg);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szCdKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szCdKey);
		};
		if (has_iSdkError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iSdkError);
		};
		if (has_szErrorMsg()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,3));  // f id
			oPacker.WriteSTRING(szErrorMsg);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_szCdKey();
				szCdKey = oPacker.ReadSTRING();
			}break;
			case 3: {
				set_has_iSdkError();
				iSdkError = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_szErrorMsg();
				szErrorMsg = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 兑换码-回复
public class TMSG_CDKEY_WITHDRAW_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private string szCdKey;   //兑换码


	public const int MAX_PACKEDSIZE = 89;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_szCdKey() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_szCdKey() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_szCdKey() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_szCdKey(string _szCdKey){set_has_szCdKey(); szCdKey=_szCdKey;}
	public string get_szCdKey(){if (has_szCdKey()) {return szCdKey;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_szCdKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szCdKey);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_szCdKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szCdKey);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_szCdKey();
				szCdKey = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 引导组定义
public class TGuideData
{
	private uint[] __orm_has_bits = new uint[1];
	private int nGuideID;   //引导ID
	private sbyte nCurStep;   //引导步骤：-1已经执行完毕, 0还未执行,大于0表示当前执行到的步骤


	public const int MAX_PACKEDSIZE = 21;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_nGuideID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_nGuideID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_nGuideID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_nGuideID(int _nGuideID){set_has_nGuideID(); nGuideID=_nGuideID;}
	public int get_nGuideID(){if (has_nGuideID()) {return nGuideID;} return 0;}

	public bool has_nCurStep() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_nCurStep() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_nCurStep() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_nCurStep(sbyte _nCurStep){set_has_nCurStep(); nCurStep=_nCurStep;}
	public sbyte get_nCurStep(){if (has_nCurStep()) {return nCurStep;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_nGuideID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(nGuideID);
		};
		if (has_nCurStep()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(nCurStep);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_nGuideID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(nGuideID);
		};
		if (has_nCurStep()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(nCurStep);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_nGuideID();
				nGuideID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_nCurStep();
				nCurStep = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 引导部件数据(私有)
public class TGuidePartPrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private byte u8GuideCount;   //数组长度
	private TGuideData[] arrGuideData = new TGuideData[(int)TCONST.ORM_GUIDE_COUNT_MAX];   //开启状态引导数组ID
	private uint[] arrFinish = new uint[(int)TCONST.ORM_GUIDE_FINISHFLAGARR_LEN];   //完成标志数组，按位存储
	private int iBuffLen;   //长度
	private byte[] szFreeBuff = new byte[(int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN];   //客户端自由数据
	public TGuidePartPrivateContext() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_GUIDE_COUNT_MAX; ++__orm_iLoopVar) {
			arrGuideData[__orm_iLoopVar] = new TGuideData();
		}
	}

	public const int countof_arrGuideData = (int)TCONST.ORM_GUIDE_COUNT_MAX;
	public const int countof_arrFinish = (int)TCONST.ORM_GUIDE_FINISHFLAGARR_LEN;
	public const int countof_szFreeBuff = (int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN;

	public const int MAX_PACKEDSIZE = 4856;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_GUIDE_COUNT_MAX; ++__orm_iLoopVar){arrGuideData[__orm_iLoopVar].init();}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_GUIDE_FINISHFLAGARR_LEN; ++__orm_iLoopVar){arrFinish[__orm_iLoopVar]=0;}
	}
	public bool has_u8GuideCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_u8GuideCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_u8GuideCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_u8GuideCount(byte _u8GuideCount){set_has_u8GuideCount(); u8GuideCount=_u8GuideCount;}
	public byte get_u8GuideCount(){if (has_u8GuideCount()) {return u8GuideCount;} return 0;}

	public bool has_arrGuideData() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrGuideData() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrGuideData() {__orm_has_bits[0] &= ~(0x4u);}
	public TGuideData[] set_arrGuideData(){set_has_arrGuideData(); return arrGuideData;}
	public TGuideData[] get_arrGuideData(){return arrGuideData;}

	public bool has_arrFinish() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrFinish() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrFinish() {__orm_has_bits[0] &= ~(0x10u);}
	public uint[] set_arrFinish(){set_has_arrFinish(); return arrFinish;}
	public uint[] get_arrFinish(){return arrFinish;}

	public bool has_iBuffLen() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iBuffLen() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iBuffLen() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iBuffLen(int _iBuffLen){set_has_iBuffLen(); iBuffLen=_iBuffLen;}
	public int get_iBuffLen(){if (has_iBuffLen()) {return iBuffLen;} return 0;}

	public bool has_szFreeBuff() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_szFreeBuff() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_szFreeBuff() {__orm_has_bits[0] &= ~(0x40u);}
	public byte[] set_szFreeBuff(){set_has_szFreeBuff(); return szFreeBuff;}
	public byte[] get_szFreeBuff(){return szFreeBuff;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u8GuideCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(u8GuideCount);
		};
		if (has_arrGuideData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8GuideCount();
			if (__orm_ReferVar > (int)TCONST.ORM_GUIDE_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_GUIDE_COUNT_MAX) && (__orm_iLoopVar < u8GuideCount); ++__orm_iLoopVar) {
				arrGuideData[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrFinish()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_GUIDE_FINISHFLAGARR_LEN); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_GUIDE_FINISHFLAGARR_LEN); ++__orm_iLoopVar) {
		    oPacker.WriteVarintUINT32(arrFinish[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iBuffLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iBuffLen);
		};
		if (has_szFreeBuff()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iBuffLen();
			if (__orm_ReferVar > (int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN) && (__orm_iLoopVar < iBuffLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(szFreeBuff[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u8GuideCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(u8GuideCount);
		};
		if (has_arrGuideData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8GuideCount();
			if (__orm_ReferVar > (int)TCONST.ORM_GUIDE_COUNT_MAX) {
				oPacker.PushFieldName("u8GuideCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_GUIDE_COUNT_MAX) && (__orm_iLoopVar < u8GuideCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrGuideData[{0}]", __orm_iLoopVar);
				arrGuideData[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrFinish()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_GUIDE_FINISHFLAGARR_LEN); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_GUIDE_FINISHFLAGARR_LEN); ++__orm_iLoopVar) {
		    oPacker.WriteVarintUINT32(arrFinish[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iBuffLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iBuffLen);
		};
		if (has_szFreeBuff()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iBuffLen();
			if (__orm_ReferVar > (int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN) {
				oPacker.PushFieldName("iBuffLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN) && (__orm_iLoopVar < iBuffLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(szFreeBuff[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_u8GuideCount();
				u8GuideCount = oPacker.ReadUINT8();
			}break;
			case 2: {
				set_has_arrGuideData();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8GuideCount=u8GuideCount<__orm_iArrCount ? u8GuideCount:(byte)__orm_iArrCount;
				u8GuideCount=u8GuideCount<(byte)TCONST.ORM_GUIDE_COUNT_MAX ? u8GuideCount:(byte)TCONST.ORM_GUIDE_COUNT_MAX;
				if (u8GuideCount > (int)TCONST.ORM_GUIDE_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8GuideCount; ++__orm_iLoopVar) {
					arrGuideData[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 4: {
				set_has_arrFinish();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)TCONST.ORM_GUIDE_FINISHFLAGARR_LEN ? __orm_iArrCount:(uint)TCONST.ORM_GUIDE_FINISHFLAGARR_LEN;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrFinish[__orm_iLoopVar] = oPacker.ReadVarintUINT32();
				};
			}break;
			case 5: {
				set_has_iBuffLen();
				iBuffLen = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_szFreeBuff();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iBuffLen=iBuffLen<__orm_iArrCount ? iBuffLen:(int)__orm_iArrCount;
				iBuffLen=iBuffLen<(int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN ? iBuffLen:(int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN;
				if (iBuffLen > (int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iBuffLen; ++__orm_iLoopVar) {
					szFreeBuff[__orm_iLoopVar] = oPacker.ReadUINT8();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 更新引导通知
public class TMSG_GUIDE_UPDATE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private byte u8Count;   //引导状态数组数量
	private TGuideData[] arrData = new TGuideData[(int)TCONST.ORM_GUIDE_COUNT_MAX];   //引导状态数组
	public TMSG_GUIDE_UPDATE_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_GUIDE_COUNT_MAX; ++__orm_iLoopVar) {
			arrData[__orm_iLoopVar] = new TGuideData();
		}
	}

	public const int countof_arrData = (int)TCONST.ORM_GUIDE_COUNT_MAX;

	public const int MAX_PACKEDSIZE = 697;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_GUIDE_COUNT_MAX; ++__orm_iLoopVar){arrData[__orm_iLoopVar].init();}
	}
	public bool has_u8Count() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_u8Count() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_u8Count() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_u8Count(byte _u8Count){set_has_u8Count(); u8Count=_u8Count;}
	public byte get_u8Count(){if (has_u8Count()) {return u8Count;} return 0;}

	public bool has_arrData() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrData() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrData() {__orm_has_bits[0] &= ~(0x4u);}
	public TGuideData[] set_arrData(){set_has_arrData(); return arrData;}
	public TGuideData[] get_arrData(){return arrData;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_GUIDE_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_GUIDE_COUNT_MAX) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
				arrData[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_GUIDE_COUNT_MAX) {
				oPacker.PushFieldName("u8Count={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_GUIDE_COUNT_MAX) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrData[{0}]", __orm_iLoopVar);
				arrData[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_u8Count();
				u8Count = oPacker.ReadUINT8();
			}break;
			case 2: {
				set_has_arrData();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8Count=u8Count<__orm_iArrCount ? u8Count:(byte)__orm_iArrCount;
				u8Count=u8Count<(byte)TCONST.ORM_GUIDE_COUNT_MAX ? u8Count:(byte)TCONST.ORM_GUIDE_COUNT_MAX;
				if (u8Count > (int)TCONST.ORM_GUIDE_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8Count; ++__orm_iLoopVar) {
					arrData[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 保存引导进度REQ
public class TMSG_GUIDE_SAVE_PROGRESS_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iGuideID;   //引导ID
	private sbyte iStep;   //引导步骤, -1表示整个引导都完成


	public const int MAX_PACKEDSIZE = 21;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iGuideID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iGuideID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iGuideID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iGuideID(int _iGuideID){set_has_iGuideID(); iGuideID=_iGuideID;}
	public int get_iGuideID(){if (has_iGuideID()) {return iGuideID;} return 0;}

	public bool has_iStep() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iStep() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iStep() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iStep(sbyte _iStep){set_has_iStep(); iStep=_iStep;}
	public sbyte get_iStep(){if (has_iStep()) {return iStep;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iGuideID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iGuideID);
		};
		if (has_iStep()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iStep);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iGuideID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iGuideID);
		};
		if (has_iStep()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iStep);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iGuideID();
				iGuideID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iStep();
				iStep = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 保存引导进度RSP
public class TMSG_GUIDE_SAVE_PROGRESS_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private uint u32ErrCode;   //错误码
	private int iGuideID;   //引导ID
	private sbyte iStep;   //引导步骤


	public const int MAX_PACKEDSIZE = 31;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_u32ErrCode() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_u32ErrCode() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_u32ErrCode() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_u32ErrCode(uint _u32ErrCode){set_has_u32ErrCode(); u32ErrCode=_u32ErrCode;}
	public uint get_u32ErrCode(){if (has_u32ErrCode()) {return u32ErrCode;} return 0;}

	public bool has_iGuideID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iGuideID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iGuideID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iGuideID(int _iGuideID){set_has_iGuideID(); iGuideID=_iGuideID;}
	public int get_iGuideID(){if (has_iGuideID()) {return iGuideID;} return 0;}

	public bool has_iStep() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iStep() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iStep() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iStep(sbyte _iStep){set_has_iStep(); iStep=_iStep;}
	public sbyte get_iStep(){if (has_iStep()) {return iStep;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
		if (has_iGuideID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGuideID);
		};
		if (has_iStep()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(iStep);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
		if (has_iGuideID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGuideID);
		};
		if (has_iStep()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(iStep);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_u32ErrCode();
				u32ErrCode = oPacker.ReadVarintUINT32();
			}break;
			case 2: {
				set_has_iGuideID();
				iGuideID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iStep();
				iStep = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 通知客户端引导触发
public class TMSG_GUIDE_LAUNCH_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iGuideID;   //引导ID
	private int iStep;   //开始触发步骤


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iGuideID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iGuideID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iGuideID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iGuideID(int _iGuideID){set_has_iGuideID(); iGuideID=_iGuideID;}
	public int get_iGuideID(){if (has_iGuideID()) {return iGuideID;} return 0;}

	public bool has_iStep() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iStep() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iStep() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iStep(int _iStep){set_has_iStep(); iStep=_iStep;}
	public int get_iStep(){if (has_iStep()) {return iStep;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iGuideID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iGuideID);
		};
		if (has_iStep()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStep);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iGuideID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iGuideID);
		};
		if (has_iStep()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStep);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iGuideID();
				iGuideID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iStep();
				iStep = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 自由数据保存请求
public class TMSG_GUIDE_SAVE_FREE_BUFF_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iBuffLen;   //长度
	private byte[] szFreeBuff = new byte[(int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN];   //客户端自由数据
	private int iPassback;   //透传整型

	public const int countof_szFreeBuff = (int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN;

	public const int MAX_PACKEDSIZE = 4135;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iBuffLen() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iBuffLen() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iBuffLen() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iBuffLen(int _iBuffLen){set_has_iBuffLen(); iBuffLen=_iBuffLen;}
	public int get_iBuffLen(){if (has_iBuffLen()) {return iBuffLen;} return 0;}

	public bool has_szFreeBuff() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_szFreeBuff() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_szFreeBuff() {__orm_has_bits[0] &= ~(0x4u);}
	public byte[] set_szFreeBuff(){set_has_szFreeBuff(); return szFreeBuff;}
	public byte[] get_szFreeBuff(){return szFreeBuff;}

	public bool has_iPassback() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iPassback() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iPassback() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iPassback(int _iPassback){set_has_iPassback(); iPassback=_iPassback;}
	public int get_iPassback(){if (has_iPassback()) {return iPassback;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iBuffLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iBuffLen);
		};
		if (has_szFreeBuff()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iBuffLen();
			if (__orm_ReferVar > (int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN) && (__orm_iLoopVar < iBuffLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(szFreeBuff[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iPassback);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iBuffLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iBuffLen);
		};
		if (has_szFreeBuff()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iBuffLen();
			if (__orm_ReferVar > (int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN) {
				oPacker.PushFieldName("iBuffLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN) && (__orm_iLoopVar < iBuffLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(szFreeBuff[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iPassback);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iBuffLen();
				iBuffLen = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_szFreeBuff();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iBuffLen=iBuffLen<__orm_iArrCount ? iBuffLen:(int)__orm_iArrCount;
				iBuffLen=iBuffLen<(int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN ? iBuffLen:(int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN;
				if (iBuffLen > (int)TCONST.GUIDE_MAX_CLIENT_FREE_BUFF_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iBuffLen; ++__orm_iLoopVar) {
					szFreeBuff[__orm_iLoopVar] = oPacker.ReadUINT8();
				};
			}break;
			case 3: {
				set_has_iPassback();
				iPassback = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_GUIDE_SAVE_FREE_BUFF_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private uint u32ErrCode;   //错误码
	private int iPassback;   //透传整型


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_u32ErrCode() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_u32ErrCode() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_u32ErrCode() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_u32ErrCode(uint _u32ErrCode){set_has_u32ErrCode(); u32ErrCode=_u32ErrCode;}
	public uint get_u32ErrCode(){if (has_u32ErrCode()) {return u32ErrCode;} return 0;}

	public bool has_iPassback() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iPassback() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iPassback() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iPassback(int _iPassback){set_has_iPassback(); iPassback=_iPassback;}
	public int get_iPassback(){if (has_iPassback()) {return iPassback;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
		if (has_iPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iPassback);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
		if (has_iPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iPassback);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_u32ErrCode();
				u32ErrCode = oPacker.ReadVarintUINT32();
			}break;
			case 2: {
				set_has_iPassback();
				iPassback = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 邮件部件现场
public class TMailPartPrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte bHasUnTreatedMail;   // 1 ：有未处理邮件（未读或未领取附件）;  0：没有未处理邮件


	public const int MAX_PACKEDSIZE = 11;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_bHasUnTreatedMail() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_bHasUnTreatedMail() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_bHasUnTreatedMail() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_bHasUnTreatedMail(sbyte _bHasUnTreatedMail){set_has_bHasUnTreatedMail(); bHasUnTreatedMail=_bHasUnTreatedMail;}
	public sbyte get_bHasUnTreatedMail(){if (has_bHasUnTreatedMail()) {return bHasUnTreatedMail;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bHasUnTreatedMail()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bHasUnTreatedMail);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bHasUnTreatedMail()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bHasUnTreatedMail);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_bHasUnTreatedMail();
				bHasUnTreatedMail = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 离线奖励现场，邮件
public class TOfflinePrizeCxt_Mail
{
	private uint[] __orm_has_bits = new uint[1];
	private int iID;   //
	private int iLen;   //
	private int[] arrPrizeID = new int[(int)10];   //奖励ID
	private int iOsAddReason;   //
	private string szSenderName;   //发送者名字,显示用
	private string szTitle;   //邮件标题
	private string szText;   //邮件正文
	private int iExpireTime;   //有效期（小时）

	public const int countof_arrPrizeID = (int)10;

	public const int MAX_PACKEDSIZE = 635;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iID(int _iID){set_has_iID(); iID=_iID;}
	public int get_iID(){if (has_iID()) {return iID;} return 0;}

	public bool has_iLen() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iLen() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iLen() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iLen(int _iLen){set_has_iLen(); iLen=_iLen;}
	public int get_iLen(){if (has_iLen()) {return iLen;} return 0;}

	public bool has_arrPrizeID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrPrizeID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrPrizeID() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrPrizeID(){set_has_arrPrizeID(); return arrPrizeID;}
	public int[] get_arrPrizeID(){return arrPrizeID;}

	public bool has_iOsAddReason() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iOsAddReason() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iOsAddReason() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iOsAddReason(int _iOsAddReason){set_has_iOsAddReason(); iOsAddReason=_iOsAddReason;}
	public int get_iOsAddReason(){if (has_iOsAddReason()) {return iOsAddReason;} return 0;}

	public bool has_szSenderName() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_szSenderName() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_szSenderName() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_szSenderName(string _szSenderName){set_has_szSenderName(); szSenderName=_szSenderName;}
	public string get_szSenderName(){if (has_szSenderName()) {return szSenderName;} return "";}

	public bool has_szTitle() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_szTitle() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_szTitle() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_szTitle(string _szTitle){set_has_szTitle(); szTitle=_szTitle;}
	public string get_szTitle(){if (has_szTitle()) {return szTitle;} return "";}

	public bool has_szText() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_szText() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_szText() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_szText(string _szText){set_has_szText(); szText=_szText;}
	public string get_szText(){if (has_szText()) {return szText;} return "";}

	public bool has_iExpireTime() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_iExpireTime() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_iExpireTime() {__orm_has_bits[0] &= ~(0x200u);}
	public void set_iExpireTime(int _iExpireTime){set_has_iExpireTime(); iExpireTime=_iExpireTime;}
	public int get_iExpireTime(){if (has_iExpireTime()) {return iExpireTime;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iID);
		};
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iLen);
		};
		if (has_arrPrizeID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)10) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)10) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPrizeID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iOsAddReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iOsAddReason);
		};
		if (has_szSenderName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,3));  // f id
			oPacker.WriteSTRING(szSenderName);
		};
		if (has_szTitle()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szTitle);
		};
		if (has_szText()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,3));  // f id
			oPacker.WriteSTRING(szText);
		};
		if (has_iExpireTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iExpireTime);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iID);
		};
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iLen);
		};
		if (has_arrPrizeID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)10) {
				oPacker.PushFieldName("iLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)10) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPrizeID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iOsAddReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iOsAddReason);
		};
		if (has_szSenderName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,3));  // f id
			oPacker.WriteSTRING(szSenderName);
		};
		if (has_szTitle()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szTitle);
		};
		if (has_szText()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,3));  // f id
			oPacker.WriteSTRING(szText);
		};
		if (has_iExpireTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iExpireTime);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iID();
				iID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iLen();
				iLen = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrPrizeID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iLen=iLen<__orm_iArrCount ? iLen:(int)__orm_iArrCount;
				iLen=iLen<(int)10 ? iLen:(int)10;
				if (iLen > (int)10) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iLen; ++__orm_iLoopVar) {
					arrPrizeID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 4: {
				set_has_iOsAddReason();
				iOsAddReason = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_szSenderName();
				szSenderName = oPacker.ReadSTRING();
			}break;
			case 6: {
				set_has_szTitle();
				szTitle = oPacker.ReadSTRING();
			}break;
			case 7: {
				set_has_szText();
				szText = oPacker.ReadSTRING();
			}break;
			case 9: {
				set_has_iExpireTime();
				iExpireTime = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 发送者
public class TPlayerID
{
	private uint[] __orm_has_bits = new uint[1];
	private byte iType;   //发送者类型,参考EnPlayerType
	private long iSender;   //发送者roleid


	public const int MAX_PACKEDSIZE = 26;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iType() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iType() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iType() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iType(byte _iType){set_has_iType(); iType=_iType;}
	public byte get_iType(){if (has_iType()) {return iType;} return 0;}

	public bool has_iSender() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iSender() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iSender() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iSender(long _iSender){set_has_iSender(); iSender=_iSender;}
	public long get_iSender(){if (has_iSender()) {return iSender;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(iType);
		};
		if (has_iSender()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iSender);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(iType);
		};
		if (has_iSender()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iSender);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iType();
				iType = oPacker.ReadUINT8();
			}break;
			case 3: {
				set_has_iSender();
				iSender = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 附件
public class TMailAttachment
{
	private uint[] __orm_has_bits = new uint[1];
	private byte iType;   //附件类型,参考EN_ATTACHMENT_TYPE
	private ushort iOss_Reason;   //资源添加类型,取值参考EN_ResAddType
	private byte iParamNum;   //参数个数
	private int[] arrParam = new int[(int)TCONST.ORM_MAX_MAIL_PARAM_NUM];   //
	private string arrLuaFun;   //lua函数

	public const int countof_arrParam = (int)TCONST.ORM_MAX_MAIL_PARAM_NUM;

	public const int MAX_PACKEDSIZE = 213;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iType() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iType() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iType() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iType(byte _iType){set_has_iType(); iType=_iType;}
	public byte get_iType(){if (has_iType()) {return iType;} return 0;}

	public bool has_iOss_Reason() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iOss_Reason() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iOss_Reason() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iOss_Reason(ushort _iOss_Reason){set_has_iOss_Reason(); iOss_Reason=_iOss_Reason;}
	public ushort get_iOss_Reason(){if (has_iOss_Reason()) {return iOss_Reason;} return 0;}

	public bool has_iParamNum() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iParamNum() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iParamNum() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iParamNum(byte _iParamNum){set_has_iParamNum(); iParamNum=_iParamNum;}
	public byte get_iParamNum(){if (has_iParamNum()) {return iParamNum;} return 0;}

	public bool has_arrParam() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrParam() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrParam() {__orm_has_bits[0] &= ~(0x10u);}
	public int[] set_arrParam(){set_has_arrParam(); return arrParam;}
	public int[] get_arrParam(){return arrParam;}

	public bool has_arrLuaFun() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_arrLuaFun() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_arrLuaFun() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_arrLuaFun(string _arrLuaFun){set_has_arrLuaFun(); arrLuaFun=_arrLuaFun;}
	public string get_arrLuaFun(){if (has_arrLuaFun()) {return arrLuaFun;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(iType);
		};
		if (has_iOss_Reason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintUINT16(iOss_Reason);
		};
		if (has_iParamNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteUINT8(iParamNum);
		};
		if (has_arrParam()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iParamNum();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_PARAM_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_PARAM_NUM) && (__orm_iLoopVar < iParamNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrParam[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrLuaFun()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,3));  // f id
			oPacker.WriteSTRING(arrLuaFun);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(iType);
		};
		if (has_iOss_Reason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintUINT16(iOss_Reason);
		};
		if (has_iParamNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteUINT8(iParamNum);
		};
		if (has_arrParam()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iParamNum();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_PARAM_NUM) {
				oPacker.PushFieldName("iParamNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_PARAM_NUM) && (__orm_iLoopVar < iParamNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrParam[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrLuaFun()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,3));  // f id
			oPacker.WriteSTRING(arrLuaFun);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iType();
				iType = oPacker.ReadUINT8();
			}break;
			case 2: {
				set_has_iOss_Reason();
				iOss_Reason = oPacker.ReadVarintUINT16();
			}break;
			case 3: {
				set_has_iParamNum();
				iParamNum = oPacker.ReadUINT8();
			}break;
			case 4: {
				set_has_arrParam();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iParamNum=iParamNum<__orm_iArrCount ? iParamNum:(byte)__orm_iArrCount;
				iParamNum=iParamNum<(byte)TCONST.ORM_MAX_MAIL_PARAM_NUM ? iParamNum:(byte)TCONST.ORM_MAX_MAIL_PARAM_NUM;
				if (iParamNum > (int)TCONST.ORM_MAX_MAIL_PARAM_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iParamNum; ++__orm_iLoopVar) {
					arrParam[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 8: {
				set_has_arrLuaFun();
				arrLuaFun = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游戏世界区间
public class TWorldRegion
{
	private uint[] __orm_has_bits = new uint[1];
	private int iStartID;   //区间开始
	private int iEndID;   //区间结束


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iStartID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iStartID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iStartID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iStartID(int _iStartID){set_has_iStartID(); iStartID=_iStartID;}
	public int get_iStartID(){if (has_iStartID()) {return iStartID;} return 0;}

	public bool has_iEndID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iEndID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iEndID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iEndID(int _iEndID){set_has_iEndID(); iEndID=_iEndID;}
	public int get_iEndID(){if (has_iEndID()) {return iEndID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iStartID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iStartID);
		};
		if (has_iEndID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iEndID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iStartID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iStartID);
		};
		if (has_iEndID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iEndID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iStartID();
				iStartID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iEndID();
				iEndID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 邮件具体内容
public class TMailContent
{
	private uint[] __orm_has_bits = new uint[1];
	private int rid;   //rid , 流水号,大厅服动态分配 
	private TPlayerID stSender = new TPlayerID();   //发送者
	private byte bTextIsID;   //文本标识位. 1, 2, 4 三个位分别代表, 名字, 标题,正文是否为id 
	private string szSenderName;   //发送者名字,显示用
	private string szTitle;   //邮件标题
	private string szText;   //邮件正文
	private ushort iFlags;   //多个按位标识, 参考EN_MAIL_FLAG
	private long iSendTime;   //邮件发送时间
	private long iExpireTime;   //过期时间
	private byte bHaveAttach;   //是否有附件, 0：没有  1：有
	private TMailAttachment stAttach = new TMailAttachment();   //附件
	private int iRegionNum;   //游戏世界筛选的区域个数，0时为所有世界 
	private TWorldRegion[] arrRegion = new TWorldRegion[(int)TCONST.ORM_MAX_REGION_COUNT];   //世界区间数组
	private int iVerson;   //版本号.  低于ORM_MAIL_CONTANT_VERSION 的邮件废弃
	public TMailContent() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_MAX_REGION_COUNT; ++__orm_iLoopVar) {
			arrRegion[__orm_iLoopVar] = new TWorldRegion();
		}
	}

	public const int countof_arrRegion = (int)TCONST.ORM_MAX_REGION_COUNT;

	public const int MAX_PACKEDSIZE = 1132;

	public void init() {
		__orm_has_bits[0]=0;
		stSender.init();
		stAttach.init();
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_MAX_REGION_COUNT; ++__orm_iLoopVar){arrRegion[__orm_iLoopVar].init();}
	}
	public bool has_rid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_rid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_rid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_rid(int _rid){set_has_rid(); rid=_rid;}
	public int get_rid(){if (has_rid()) {return rid;} return 0;}

	public bool has_stSender() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stSender() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stSender() {__orm_has_bits[0] &= ~(0x4u);}
	public TPlayerID set_stSender(){set_has_stSender(); return stSender;}
	public TPlayerID get_stSender(){return stSender;}

	public bool has_bTextIsID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_bTextIsID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_bTextIsID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_bTextIsID(byte _bTextIsID){set_has_bTextIsID(); bTextIsID=_bTextIsID;}
	public byte get_bTextIsID(){if (has_bTextIsID()) {return bTextIsID;} return 0;}

	public bool has_szSenderName() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_szSenderName() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_szSenderName() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_szSenderName(string _szSenderName){set_has_szSenderName(); szSenderName=_szSenderName;}
	public string get_szSenderName(){if (has_szSenderName()) {return szSenderName;} return "";}

	public bool has_szTitle() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_szTitle() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_szTitle() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_szTitle(string _szTitle){set_has_szTitle(); szTitle=_szTitle;}
	public string get_szTitle(){if (has_szTitle()) {return szTitle;} return "";}

	public bool has_szText() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_szText() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_szText() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_szText(string _szText){set_has_szText(); szText=_szText;}
	public string get_szText(){if (has_szText()) {return szText;} return "";}

	public bool has_iFlags() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_iFlags() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_iFlags() {__orm_has_bits[0] &= ~(0x200u);}
	public void set_iFlags(ushort _iFlags){set_has_iFlags(); iFlags=_iFlags;}
	public ushort get_iFlags(){if (has_iFlags()) {return iFlags;} return 0;}

	public bool has_iSendTime() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iSendTime() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iSendTime() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iSendTime(long _iSendTime){set_has_iSendTime(); iSendTime=_iSendTime;}
	public long get_iSendTime(){if (has_iSendTime()) {return iSendTime;} return 0;}

	public bool has_iExpireTime() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iExpireTime() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iExpireTime() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iExpireTime(long _iExpireTime){set_has_iExpireTime(); iExpireTime=_iExpireTime;}
	public long get_iExpireTime(){if (has_iExpireTime()) {return iExpireTime;} return 0;}

	public bool has_bHaveAttach() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_bHaveAttach() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_bHaveAttach() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_bHaveAttach(byte _bHaveAttach){set_has_bHaveAttach(); bHaveAttach=_bHaveAttach;}
	public byte get_bHaveAttach(){if (has_bHaveAttach()) {return bHaveAttach;} return 0;}

	public bool has_stAttach() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_stAttach() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_stAttach() {__orm_has_bits[0] &= ~(0x2000u);}
	public TMailAttachment set_stAttach(){set_has_stAttach(); return stAttach;}
	public TMailAttachment get_stAttach(){return stAttach;}

	public bool has_iRegionNum() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_iRegionNum() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_iRegionNum() {__orm_has_bits[0] &= ~(0x4000u);}
	public void set_iRegionNum(int _iRegionNum){set_has_iRegionNum(); iRegionNum=_iRegionNum;}
	public int get_iRegionNum(){if (has_iRegionNum()) {return iRegionNum;} return 0;}

	public bool has_arrRegion() {return (__orm_has_bits[0] & 0x8000u) != 0;}
	public void set_has_arrRegion() {__orm_has_bits[0] |= 0x8000u;}
	public void clear_has_arrRegion() {__orm_has_bits[0] &= ~(0x8000u);}
	public TWorldRegion[] set_arrRegion(){set_has_arrRegion(); return arrRegion;}
	public TWorldRegion[] get_arrRegion(){return arrRegion;}

	public bool has_iVerson() {return (__orm_has_bits[0] & 0x20000u) != 0;}
	public void set_has_iVerson() {__orm_has_bits[0] |= 0x20000u;}
	public void clear_has_iVerson() {__orm_has_bits[0] &= ~(0x20000u);}
	public void set_iVerson(int _iVerson){set_has_iVerson(); iVerson=_iVerson;}
	public int get_iVerson(){if (has_iVerson()) {return iVerson;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_stSender()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stSender.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bTextIsID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteUINT8(bTextIsID);
		};
		if (has_szSenderName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szSenderName);
		};
		if (has_szTitle()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,3));  // f id
			oPacker.WriteSTRING(szTitle);
		};
		if (has_szText()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,3));  // f id
			oPacker.WriteSTRING(szText);
		};
		if (has_iFlags()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintUINT16(iFlags);
		};
		if (has_iSendTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT64(iSendTime);
		};
		if (has_iExpireTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(iExpireTime);
		};
		if (has_bHaveAttach()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,2));  // f id
			oPacker.WriteUINT8(bHaveAttach);
		};
		if (has_stAttach()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stAttach.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iRegionNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintINT32(iRegionNum);
		};
		if (has_arrRegion()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iRegionNum();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_REGION_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_REGION_COUNT) && (__orm_iLoopVar < iRegionNum); ++__orm_iLoopVar) {
				arrRegion[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iVerson()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,0));  // f id
			oPacker.WriteVarintINT32(iVerson);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_stSender()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stSender");
			stSender.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bTextIsID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteUINT8(bTextIsID);
		};
		if (has_szSenderName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szSenderName);
		};
		if (has_szTitle()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,3));  // f id
			oPacker.WriteSTRING(szTitle);
		};
		if (has_szText()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,3));  // f id
			oPacker.WriteSTRING(szText);
		};
		if (has_iFlags()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintUINT16(iFlags);
		};
		if (has_iSendTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT64(iSendTime);
		};
		if (has_iExpireTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(iExpireTime);
		};
		if (has_bHaveAttach()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,2));  // f id
			oPacker.WriteUINT8(bHaveAttach);
		};
		if (has_stAttach()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stAttach");
			stAttach.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iRegionNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintINT32(iRegionNum);
		};
		if (has_arrRegion()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iRegionNum();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_REGION_COUNT) {
				oPacker.PushFieldName("iRegionNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_REGION_COUNT) && (__orm_iLoopVar < iRegionNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrRegion[{0}]", __orm_iLoopVar);
				arrRegion[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iVerson()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,0));  // f id
			oPacker.WriteVarintINT32(iVerson);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_rid();
				rid = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_stSender();
				stSender.Unpack(oPacker);
			}break;
			case 4: {
				set_has_bTextIsID();
				bTextIsID = oPacker.ReadUINT8();
			}break;
			case 6: {
				set_has_szSenderName();
				szSenderName = oPacker.ReadSTRING();
			}break;
			case 7: {
				set_has_szTitle();
				szTitle = oPacker.ReadSTRING();
			}break;
			case 8: {
				set_has_szText();
				szText = oPacker.ReadSTRING();
			}break;
			case 9: {
				set_has_iFlags();
				iFlags = oPacker.ReadVarintUINT16();
			}break;
			case 10: {
				set_has_iSendTime();
				iSendTime = oPacker.ReadVarintINT64();
			}break;
			case 11: {
				set_has_iExpireTime();
				iExpireTime = oPacker.ReadVarintINT64();
			}break;
			case 12: {
				set_has_bHaveAttach();
				bHaveAttach = oPacker.ReadUINT8();
			}break;
			case 13: {
				set_has_stAttach();
				stAttach.Unpack(oPacker);
			}break;
			case 14: {
				set_has_iRegionNum();
				iRegionNum = oPacker.ReadVarintINT32();
			}break;
			case 15: {
				set_has_arrRegion();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iRegionNum=iRegionNum<__orm_iArrCount ? iRegionNum:(int)__orm_iArrCount;
				iRegionNum=iRegionNum<(int)TCONST.ORM_MAX_REGION_COUNT ? iRegionNum:(int)TCONST.ORM_MAX_REGION_COUNT;
				if (iRegionNum > (int)TCONST.ORM_MAX_REGION_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iRegionNum; ++__orm_iLoopVar) {
					arrRegion[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 17: {
				set_has_iVerson();
				iVerson = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 获取邮件列表REQ
public class TMSG_MAIL_GET_LIST_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iStartRid;   //客户端拥有最大的邮件rid.  填写ORM_MAX_MAIL_INVALID_RID会全部发送


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iStartRid() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iStartRid() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iStartRid() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iStartRid(int _iStartRid){set_has_iStartRid(); iStartRid=_iStartRid;}
	public int get_iStartRid(){if (has_iStartRid()) {return iStartRid;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iStartRid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStartRid);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iStartRid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStartRid);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iStartRid();
				iStartRid = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 获取邮件列表RSP
public class TMSG_MAIL_GET_LIST_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private int iStartRid;   //透传
	private byte u8Count;   //实际返回数量
	private TMailContent[] arrMail = new TMailContent[(int)TCONST.ORM_MAX_MAIL_SUMMARY_COUNT];   //邮件数组
	private int nTotalCount;   //玩家邮件总数
	public TMSG_MAIL_GET_LIST_RSP() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_SUMMARY_COUNT; ++__orm_iLoopVar) {
			arrMail[__orm_iLoopVar] = new TMailContent();
		}
	}

	public const int countof_arrMail = (int)TCONST.ORM_MAX_MAIL_SUMMARY_COUNT;

	public const int MAX_PACKEDSIZE = 36279;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_MAX_MAIL_SUMMARY_COUNT; ++__orm_iLoopVar){arrMail[__orm_iLoopVar].init();}
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iStartRid() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iStartRid() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iStartRid() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iStartRid(int _iStartRid){set_has_iStartRid(); iStartRid=_iStartRid;}
	public int get_iStartRid(){if (has_iStartRid()) {return iStartRid;} return 0;}

	public bool has_u8Count() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_u8Count() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_u8Count() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_u8Count(byte _u8Count){set_has_u8Count(); u8Count=_u8Count;}
	public byte get_u8Count(){if (has_u8Count()) {return u8Count;} return 0;}

	public bool has_arrMail() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrMail() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrMail() {__orm_has_bits[0] &= ~(0x10u);}
	public TMailContent[] set_arrMail(){set_has_arrMail(); return arrMail;}
	public TMailContent[] get_arrMail(){return arrMail;}

	public bool has_nTotalCount() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_nTotalCount() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_nTotalCount() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_nTotalCount(int _nTotalCount){set_has_nTotalCount(); nTotalCount=_nTotalCount;}
	public int get_nTotalCount(){if (has_nTotalCount()) {return nTotalCount;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iStartRid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStartRid);
		};
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrMail()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_SUMMARY_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_SUMMARY_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
				arrMail[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_nTotalCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(nTotalCount);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iStartRid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStartRid);
		};
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrMail()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_SUMMARY_COUNT) {
				oPacker.PushFieldName("u8Count={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_SUMMARY_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrMail[{0}]", __orm_iLoopVar);
				arrMail[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_nTotalCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(nTotalCount);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iStartRid();
				iStartRid = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_u8Count();
				u8Count = oPacker.ReadUINT8();
			}break;
			case 4: {
				set_has_arrMail();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8Count=u8Count<__orm_iArrCount ? u8Count:(byte)__orm_iArrCount;
				u8Count=u8Count<(byte)TCONST.ORM_MAX_MAIL_SUMMARY_COUNT ? u8Count:(byte)TCONST.ORM_MAX_MAIL_SUMMARY_COUNT;
				if (u8Count > (int)TCONST.ORM_MAX_MAIL_SUMMARY_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8Count; ++__orm_iLoopVar) {
					arrMail[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 5: {
				set_has_nTotalCount();
				nTotalCount = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 获取邮件详情REQ
public class TMSG_MAIL_OPEN_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int rid;   //邮件id


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_rid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_rid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_rid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_rid(int _rid){set_has_rid(); rid=_rid;}
	public int get_rid(){if (has_rid()) {return rid;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_rid();
				rid = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 获取邮件详情RSP, 目前只会修改完成标记,不需要再返回邮件信息
public class TMSG_MAIL_OPEN_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private int rid;   //透传
	private ushort iNewFlags;   //多个按位标识, 参考EN_MAIL_FLAG


	public const int MAX_PACKEDSIZE = 33;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_rid() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_rid() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_rid() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_rid(int _rid){set_has_rid(); rid=_rid;}
	public int get_rid(){if (has_rid()) {return rid;} return 0;}

	public bool has_iNewFlags() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iNewFlags() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iNewFlags() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iNewFlags(ushort _iNewFlags){set_has_iNewFlags(); iNewFlags=_iNewFlags;}
	public ushort get_iNewFlags(){if (has_iNewFlags()) {return iNewFlags;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_iNewFlags()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintUINT16(iNewFlags);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_iNewFlags()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintUINT16(iNewFlags);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_rid();
				rid = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iNewFlags();
				iNewFlags = oPacker.ReadVarintUINT16();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 删除邮件REQ
public class TMSG_MAIL_DELETE_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private byte u8Count;   //数量
	private int[] arrMailID = new int[(int)TCONST.ORM_MAX_MAIL_COUNT];   //mailid数组

	public const int countof_arrMailID = (int)TCONST.ORM_MAX_MAIL_COUNT;

	public const int MAX_PACKEDSIZE = 275;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_u8Count() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_u8Count() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_u8Count() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_u8Count(byte _u8Count){set_has_u8Count(); u8Count=_u8Count;}
	public byte get_u8Count(){if (has_u8Count()) {return u8Count;} return 0;}

	public bool has_arrMailID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrMailID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrMailID() {__orm_has_bits[0] &= ~(0x4u);}
	public int[] set_arrMailID(){set_has_arrMailID(); return arrMailID;}
	public int[] get_arrMailID(){return arrMailID;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrMailID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrMailID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrMailID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_COUNT) {
				oPacker.PushFieldName("u8Count={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrMailID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_u8Count();
				u8Count = oPacker.ReadUINT8();
			}break;
			case 2: {
				set_has_arrMailID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8Count=u8Count<__orm_iArrCount ? u8Count:(byte)__orm_iArrCount;
				u8Count=u8Count<(byte)TCONST.ORM_MAX_MAIL_COUNT ? u8Count:(byte)TCONST.ORM_MAX_MAIL_COUNT;
				if (u8Count > (int)TCONST.ORM_MAX_MAIL_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8Count; ++__orm_iLoopVar) {
					arrMailID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 删除邮件RSP
public class TMSG_MAIL_DELETE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private uint dwError;   //错误码
	private byte u8Count;   //实际删除的邮件数量
	private int[] arrMailID = new int[(int)TCONST.ORM_MAX_MAIL_COUNT];   //实际删除的邮件

	public const int countof_arrMailID = (int)TCONST.ORM_MAX_MAIL_COUNT;

	public const int MAX_PACKEDSIZE = 285;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_dwError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_dwError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_dwError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_dwError(uint _dwError){set_has_dwError(); dwError=_dwError;}
	public uint get_dwError(){if (has_dwError()) {return dwError;} return 0;}

	public bool has_u8Count() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_u8Count() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_u8Count() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_u8Count(byte _u8Count){set_has_u8Count(); u8Count=_u8Count;}
	public byte get_u8Count(){if (has_u8Count()) {return u8Count;} return 0;}

	public bool has_arrMailID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrMailID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrMailID() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrMailID(){set_has_arrMailID(); return arrMailID;}
	public int[] get_arrMailID(){return arrMailID;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrMailID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrMailID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_dwError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(dwError);
		};
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrMailID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_COUNT) {
				oPacker.PushFieldName("u8Count={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrMailID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_dwError();
				dwError = oPacker.ReadVarintUINT32();
			}break;
			case 2: {
				set_has_u8Count();
				u8Count = oPacker.ReadUINT8();
			}break;
			case 3: {
				set_has_arrMailID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8Count=u8Count<__orm_iArrCount ? u8Count:(byte)__orm_iArrCount;
				u8Count=u8Count<(byte)TCONST.ORM_MAX_MAIL_COUNT ? u8Count:(byte)TCONST.ORM_MAX_MAIL_COUNT;
				if (u8Count > (int)TCONST.ORM_MAX_MAIL_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8Count; ++__orm_iLoopVar) {
					arrMailID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 领取邮件附件REQ
public class TMSG_MAIL_GET_ATTACHMENT_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private byte u8Count;   //数量
	private int[] arrMailID = new int[(int)TCONST.ORM_MAX_MAIL_COUNT];   //mailid数组

	public const int countof_arrMailID = (int)TCONST.ORM_MAX_MAIL_COUNT;

	public const int MAX_PACKEDSIZE = 275;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_u8Count() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_u8Count() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_u8Count() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_u8Count(byte _u8Count){set_has_u8Count(); u8Count=_u8Count;}
	public byte get_u8Count(){if (has_u8Count()) {return u8Count;} return 0;}

	public bool has_arrMailID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrMailID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrMailID() {__orm_has_bits[0] &= ~(0x4u);}
	public int[] set_arrMailID(){set_has_arrMailID(); return arrMailID;}
	public int[] get_arrMailID(){return arrMailID;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrMailID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrMailID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrMailID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_COUNT) {
				oPacker.PushFieldName("u8Count={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrMailID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_u8Count();
				u8Count = oPacker.ReadUINT8();
			}break;
			case 2: {
				set_has_arrMailID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8Count=u8Count<__orm_iArrCount ? u8Count:(byte)__orm_iArrCount;
				u8Count=u8Count<(byte)TCONST.ORM_MAX_MAIL_COUNT ? u8Count:(byte)TCONST.ORM_MAX_MAIL_COUNT;
				if (u8Count > (int)TCONST.ORM_MAX_MAIL_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8Count; ++__orm_iLoopVar) {
					arrMailID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 领取邮件附件RSP
public class TMSG_MAIL_GET_ATTACHMENT_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //错误码
	private byte u8Count;   //数量
	private int[] arrMailID = new int[(int)TCONST.ORM_MAX_MAIL_COUNT];   //mailid数组
	private ushort[] arrFlags = new ushort[(int)TCONST.ORM_MAX_MAIL_COUNT];   //更新后的标记, 参考EN_MAIL_FLAG

	public const int countof_arrMailID = (int)TCONST.ORM_MAX_MAIL_COUNT;
	public const int countof_arrFlags = (int)TCONST.ORM_MAX_MAIL_COUNT;

	public const int MAX_PACKEDSIZE = 449;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_u8Count() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_u8Count() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_u8Count() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_u8Count(byte _u8Count){set_has_u8Count(); u8Count=_u8Count;}
	public byte get_u8Count(){if (has_u8Count()) {return u8Count;} return 0;}

	public bool has_arrMailID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrMailID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrMailID() {__orm_has_bits[0] &= ~(0x20u);}
	public int[] set_arrMailID(){set_has_arrMailID(); return arrMailID;}
	public int[] get_arrMailID(){return arrMailID;}

	public bool has_arrFlags() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_arrFlags() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_arrFlags() {__orm_has_bits[0] &= ~(0x40u);}
	public ushort[] set_arrFlags(){set_has_arrFlags(); return arrFlags;}
	public ushort[] get_arrFlags(){return arrFlags;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrMailID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrMailID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrFlags()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintUINT16(arrFlags[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrMailID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_COUNT) {
				oPacker.PushFieldName("u8Count={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrMailID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrFlags()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_COUNT) {
				oPacker.PushFieldName("u8Count={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintUINT16(arrFlags[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_u8Count();
				u8Count = oPacker.ReadUINT8();
			}break;
			case 5: {
				set_has_arrMailID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8Count=u8Count<__orm_iArrCount ? u8Count:(byte)__orm_iArrCount;
				u8Count=u8Count<(byte)TCONST.ORM_MAX_MAIL_COUNT ? u8Count:(byte)TCONST.ORM_MAX_MAIL_COUNT;
				if (u8Count > (int)TCONST.ORM_MAX_MAIL_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8Count; ++__orm_iLoopVar) {
					arrMailID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 6: {
				set_has_arrFlags();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8Count=u8Count<__orm_iArrCount ? u8Count:(byte)__orm_iArrCount;
				u8Count=u8Count<(byte)TCONST.ORM_MAX_MAIL_COUNT ? u8Count:(byte)TCONST.ORM_MAX_MAIL_COUNT;
				if (u8Count > (int)TCONST.ORM_MAX_MAIL_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8Count; ++__orm_iLoopVar) {
					arrFlags[__orm_iLoopVar] = oPacker.ReadVarintUINT16();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 收到新邮件通知
public class TMSG_MAIL_NEW_MAIL_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iUnreadMailCount;   //未读邮件数量


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iUnreadMailCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iUnreadMailCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iUnreadMailCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iUnreadMailCount(int _iUnreadMailCount){set_has_iUnreadMailCount(); iUnreadMailCount=_iUnreadMailCount;}
	public int get_iUnreadMailCount(){if (has_iUnreadMailCount()) {return iUnreadMailCount;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iUnreadMailCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iUnreadMailCount);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iUnreadMailCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iUnreadMailCount);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iUnreadMailCount();
				iUnreadMailCount = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 删除邮件通知
public class TMSG_MAIL_DELETE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private byte u8Count;   //删除邮件数量
	private int[] arrMailID = new int[(int)TCONST.ORM_MAX_MAIL_COUNT];   //删除邮件数组

	public const int countof_arrMailID = (int)TCONST.ORM_MAX_MAIL_COUNT;

	public const int MAX_PACKEDSIZE = 275;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_u8Count() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_u8Count() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_u8Count() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_u8Count(byte _u8Count){set_has_u8Count(); u8Count=_u8Count;}
	public byte get_u8Count(){if (has_u8Count()) {return u8Count;} return 0;}

	public bool has_arrMailID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrMailID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrMailID() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrMailID(){set_has_arrMailID(); return arrMailID;}
	public int[] get_arrMailID(){return arrMailID;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrMailID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrMailID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u8Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteUINT8(u8Count);
		};
		if (has_arrMailID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Count();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_MAIL_COUNT) {
				oPacker.PushFieldName("u8Count={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_MAIL_COUNT) && (__orm_iLoopVar < u8Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrMailID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_u8Count();
				u8Count = oPacker.ReadUINT8();
			}break;
			case 3: {
				set_has_arrMailID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8Count=u8Count<__orm_iArrCount ? u8Count:(byte)__orm_iArrCount;
				u8Count=u8Count<(byte)TCONST.ORM_MAX_MAIL_COUNT ? u8Count:(byte)TCONST.ORM_MAX_MAIL_COUNT;
				if (u8Count > (int)TCONST.ORM_MAX_MAIL_COUNT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8Count; ++__orm_iLoopVar) {
					arrMailID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 盲盒宝箱信息
public class TLootboxInfo
{
	private uint[] __orm_has_bits = new uint[1];
	private int iId;   //id
	private int iFreeLeft;   //剩余免费开箱次数
	private int[] arrGuaranteeLeft = new int[(int)TCONST.ORM_LOOTBOX_GUARANTEE_NUM_MAX];   //本轮保底剩余次数

	public const int countof_arrGuaranteeLeft = (int)TCONST.ORM_LOOTBOX_GUARANTEE_NUM_MAX;

	public const int MAX_PACKEDSIZE = 54;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_LOOTBOX_GUARANTEE_NUM_MAX; ++__orm_iLoopVar){arrGuaranteeLeft[__orm_iLoopVar]=0;}
	}
	public bool has_iId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iId(int _iId){set_has_iId(); iId=_iId;}
	public int get_iId(){if (has_iId()) {return iId;} return 0;}

	public bool has_iFreeLeft() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iFreeLeft() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iFreeLeft() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iFreeLeft(int _iFreeLeft){set_has_iFreeLeft(); iFreeLeft=_iFreeLeft;}
	public int get_iFreeLeft(){if (has_iFreeLeft()) {return iFreeLeft;} return 0;}

	public bool has_arrGuaranteeLeft() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrGuaranteeLeft() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrGuaranteeLeft() {__orm_has_bits[0] &= ~(0x20u);}
	public int[] set_arrGuaranteeLeft(){set_has_arrGuaranteeLeft(); return arrGuaranteeLeft;}
	public int[] get_arrGuaranteeLeft(){return arrGuaranteeLeft;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iId);
		};
		if (has_iFreeLeft()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iFreeLeft);
		};
		if (has_arrGuaranteeLeft()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_LOOTBOX_GUARANTEE_NUM_MAX); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_LOOTBOX_GUARANTEE_NUM_MAX); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrGuaranteeLeft[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iId);
		};
		if (has_iFreeLeft()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iFreeLeft);
		};
		if (has_arrGuaranteeLeft()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_LOOTBOX_GUARANTEE_NUM_MAX); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_LOOTBOX_GUARANTEE_NUM_MAX); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrGuaranteeLeft[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iId();
				iId = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iFreeLeft();
				iFreeLeft = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_arrGuaranteeLeft();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)TCONST.ORM_LOOTBOX_GUARANTEE_NUM_MAX ? __orm_iArrCount:(uint)TCONST.ORM_LOOTBOX_GUARANTEE_NUM_MAX;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrGuaranteeLeft[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 盲盒部件现场
public class TLootboxPartPrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private int iCount;   //宝箱数量
	private TLootboxInfo[] arrBoxes = new TLootboxInfo[(int)TCONST.ORM_LOOTBOX_NUM];   //所有宝箱
	public TLootboxPartPrivateContext() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_LOOTBOX_NUM; ++__orm_iLoopVar) {
			arrBoxes[__orm_iLoopVar] = new TLootboxInfo();
		}
	}

	public const int countof_arrBoxes = (int)TCONST.ORM_LOOTBOX_NUM;

	public const int MAX_PACKEDSIZE = 137;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_LOOTBOX_NUM; ++__orm_iLoopVar){arrBoxes[__orm_iLoopVar].init();}
	}
	public bool has_iCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iCount(int _iCount){set_has_iCount(); iCount=_iCount;}
	public int get_iCount(){if (has_iCount()) {return iCount;} return 0;}

	public bool has_arrBoxes() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrBoxes() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrBoxes() {__orm_has_bits[0] &= ~(0x4u);}
	public TLootboxInfo[] set_arrBoxes(){set_has_arrBoxes(); return arrBoxes;}
	public TLootboxInfo[] get_arrBoxes(){return arrBoxes;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrBoxes()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_LOOTBOX_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_LOOTBOX_NUM) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				arrBoxes[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrBoxes()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_LOOTBOX_NUM) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_LOOTBOX_NUM) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrBoxes[{0}]", __orm_iLoopVar);
				arrBoxes[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iCount();
				iCount = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrBoxes();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(int)__orm_iArrCount;
				iCount=iCount<(int)TCONST.ORM_LOOTBOX_NUM ? iCount:(int)TCONST.ORM_LOOTBOX_NUM;
				if (iCount > (int)TCONST.ORM_LOOTBOX_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrBoxes[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 盲盒信息变更通知
public class TMSG_LOOTBOX_UPDATE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iCount;   //id
	private TLootboxInfo[] arrBoxes = new TLootboxInfo[(int)TCONST.ORM_LOOTBOX_NUM];   //所有宝箱
	public TMSG_LOOTBOX_UPDATE_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_LOOTBOX_NUM; ++__orm_iLoopVar) {
			arrBoxes[__orm_iLoopVar] = new TLootboxInfo();
		}
	}

	public const int countof_arrBoxes = (int)TCONST.ORM_LOOTBOX_NUM;

	public const int MAX_PACKEDSIZE = 137;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_LOOTBOX_NUM; ++__orm_iLoopVar){arrBoxes[__orm_iLoopVar].init();}
	}
	public bool has_iCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iCount(int _iCount){set_has_iCount(); iCount=_iCount;}
	public int get_iCount(){if (has_iCount()) {return iCount;} return 0;}

	public bool has_arrBoxes() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrBoxes() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrBoxes() {__orm_has_bits[0] &= ~(0x4u);}
	public TLootboxInfo[] set_arrBoxes(){set_has_arrBoxes(); return arrBoxes;}
	public TLootboxInfo[] get_arrBoxes(){return arrBoxes;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrBoxes()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_LOOTBOX_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_LOOTBOX_NUM) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				arrBoxes[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrBoxes()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_LOOTBOX_NUM) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_LOOTBOX_NUM) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrBoxes[{0}]", __orm_iLoopVar);
				arrBoxes[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iCount();
				iCount = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrBoxes();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(int)__orm_iArrCount;
				iCount=iCount<(int)TCONST.ORM_LOOTBOX_NUM ? iCount:(int)TCONST.ORM_LOOTBOX_NUM;
				if (iCount > (int)TCONST.ORM_LOOTBOX_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrBoxes[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 开盲盒-请求
public class TMSG_LOOTBOX_OPEN_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iBoxId;   //id
	private int iOpenNum;   //开盒数量 最大10
	private int iSpendType;   //花费类型 对应EnLootboxSpendType


	public const int MAX_PACKEDSIZE = 35;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iBoxId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iBoxId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iBoxId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iBoxId(int _iBoxId){set_has_iBoxId(); iBoxId=_iBoxId;}
	public int get_iBoxId(){if (has_iBoxId()) {return iBoxId;} return 0;}

	public bool has_iOpenNum() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iOpenNum() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iOpenNum() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iOpenNum(int _iOpenNum){set_has_iOpenNum(); iOpenNum=_iOpenNum;}
	public int get_iOpenNum(){if (has_iOpenNum()) {return iOpenNum;} return 0;}

	public bool has_iSpendType() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iSpendType() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iSpendType() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iSpendType(int _iSpendType){set_has_iSpendType(); iSpendType=_iSpendType;}
	public int get_iSpendType(){if (has_iSpendType()) {return iSpendType;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iBoxId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iBoxId);
		};
		if (has_iOpenNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iOpenNum);
		};
		if (has_iSpendType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iSpendType);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iBoxId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iBoxId);
		};
		if (has_iOpenNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iOpenNum);
		};
		if (has_iSpendType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iSpendType);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iBoxId();
				iBoxId = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iOpenNum();
				iOpenNum = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iSpendType();
				iSpendType = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 开盲盒-回复
public class TMSG_LOOTBOX_OPEN_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private int iBoxId;   //id


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iBoxId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iBoxId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iBoxId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iBoxId(int _iBoxId){set_has_iBoxId(); iBoxId=_iBoxId;}
	public int get_iBoxId(){if (has_iBoxId()) {return iBoxId;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iBoxId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iBoxId);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iBoxId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iBoxId);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iBoxId();
				iBoxId = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 实体属性定义
public class TEntityProp
{
	private uint[] __orm_has_bits = new uint[1];
	private ushort nID;   //属性id, 取值以协议应用场景来定, 可能是 EnRoleProp/EnHeroProp '
	private int nVal;   //属性值


	public const int MAX_PACKEDSIZE = 23;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_nID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_nID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_nID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_nID(ushort _nID){set_has_nID(); nID=_nID;}
	public ushort get_nID(){if (has_nID()) {return nID;} return 0;}

	public bool has_nVal() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_nVal() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_nVal() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_nVal(int _nVal){set_has_nVal(); nVal=_nVal;}
	public int get_nVal(){if (has_nVal()) {return nVal;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_nID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT16(nID);
		};
		if (has_nVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(nVal);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_nID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT16(nID);
		};
		if (has_nVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(nVal);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_nID();
				nID = oPacker.ReadVarintUINT16();
			}break;
			case 2: {
				set_has_nVal();
				nVal = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 64位实体属性定义
public class TEntityProp64
{
	private uint[] __orm_has_bits = new uint[1];
	private ushort nID;   //属性id, 取值以协议应用场景来定
	private long nVal;   //属性值


	public const int MAX_PACKEDSIZE = 28;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_nID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_nID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_nID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_nID(ushort _nID){set_has_nID(); nID=_nID;}
	public ushort get_nID(){if (has_nID()) {return nID;} return 0;}

	public bool has_nVal() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_nVal() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_nVal() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_nVal(long _nVal){set_has_nVal(); nVal=_nVal;}
	public long get_nVal(){if (has_nVal()) {return nVal;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_nID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT16(nID);
		};
		if (has_nVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(nVal);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_nID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT16(nID);
		};
		if (has_nVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(nVal);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_nID();
				nID = oPacker.ReadVarintUINT16();
			}break;
			case 2: {
				set_has_nVal();
				nVal = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 背包部件数据(私有)
public class TPackagePartPrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private uint dwSkepID;   //篮子的id


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_dwSkepID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_dwSkepID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_dwSkepID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_dwSkepID(uint _dwSkepID){set_has_dwSkepID(); dwSkepID=_dwSkepID;}
	public uint get_dwSkepID(){if (has_dwSkepID()) {return dwSkepID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_dwSkepID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(dwSkepID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_dwSkepID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(dwSkepID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_dwSkepID();
				dwSkepID = oPacker.ReadVarintUINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 人物私有数据
public class TRolePrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private string szName;   //角色名字
	private byte u8PropCount;   //属性数量
	private int[] arrNumProp = new int[(int)EnRoleProp.ROLE_PROP_PRIVATE];   //属性
	private byte u8Prop64Count;   //64位属性数量
	private long[] arrNumProp64 = new long[(int)EnRoleProp64.ROLE_PROP64_PRIVATE];   //64位属性

	public const int countof_arrNumProp = (int)EnRoleProp.ROLE_PROP_PRIVATE;
	public const int countof_arrNumProp64 = (int)EnRoleProp64.ROLE_PROP64_PRIVATE;

	public const int MAX_PACKEDSIZE = 272;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_szName() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_szName() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_szName() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_szName(string _szName){set_has_szName(); szName=_szName;}
	public string get_szName(){if (has_szName()) {return szName;} return "";}

	public bool has_u8PropCount() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_u8PropCount() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_u8PropCount() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_u8PropCount(byte _u8PropCount){set_has_u8PropCount(); u8PropCount=_u8PropCount;}
	public byte get_u8PropCount(){if (has_u8PropCount()) {return u8PropCount;} return 0;}

	public bool has_arrNumProp() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrNumProp() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrNumProp() {__orm_has_bits[0] &= ~(0x20u);}
	public int[] set_arrNumProp(){set_has_arrNumProp(); return arrNumProp;}
	public int[] get_arrNumProp(){return arrNumProp;}

	public bool has_u8Prop64Count() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_u8Prop64Count() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_u8Prop64Count() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_u8Prop64Count(byte _u8Prop64Count){set_has_u8Prop64Count(); u8Prop64Count=_u8Prop64Count;}
	public byte get_u8Prop64Count(){if (has_u8Prop64Count()) {return u8Prop64Count;} return 0;}

	public bool has_arrNumProp64() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_arrNumProp64() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_arrNumProp64() {__orm_has_bits[0] &= ~(0x80u);}
	public long[] set_arrNumProp64(){set_has_arrNumProp64(); return arrNumProp64;}
	public long[] get_arrNumProp64(){return arrNumProp64;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szName);
		};
		if (has_u8PropCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteUINT8(u8PropCount);
		};
		if (has_arrNumProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8PropCount();
			if (__orm_ReferVar > (int)EnRoleProp.ROLE_PROP_PRIVATE) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnRoleProp.ROLE_PROP_PRIVATE) && (__orm_iLoopVar < u8PropCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrNumProp[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_u8Prop64Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteUINT8(u8Prop64Count);
		};
		if (has_arrNumProp64()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Prop64Count();
			if (__orm_ReferVar > (int)EnRoleProp64.ROLE_PROP64_PRIVATE) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnRoleProp64.ROLE_PROP64_PRIVATE) && (__orm_iLoopVar < u8Prop64Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrNumProp64[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szName);
		};
		if (has_u8PropCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteUINT8(u8PropCount);
		};
		if (has_arrNumProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8PropCount();
			if (__orm_ReferVar > (int)EnRoleProp.ROLE_PROP_PRIVATE) {
				oPacker.PushFieldName("u8PropCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnRoleProp.ROLE_PROP_PRIVATE) && (__orm_iLoopVar < u8PropCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrNumProp[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_u8Prop64Count()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteUINT8(u8Prop64Count);
		};
		if (has_arrNumProp64()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Prop64Count();
			if (__orm_ReferVar > (int)EnRoleProp64.ROLE_PROP64_PRIVATE) {
				oPacker.PushFieldName("u8Prop64Count={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnRoleProp64.ROLE_PROP64_PRIVATE) && (__orm_iLoopVar < u8Prop64Count); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrNumProp64[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_szName();
				szName = oPacker.ReadSTRING();
			}break;
			case 4: {
				set_has_u8PropCount();
				u8PropCount = oPacker.ReadUINT8();
			}break;
			case 5: {
				set_has_arrNumProp();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8PropCount=u8PropCount<__orm_iArrCount ? u8PropCount:(byte)__orm_iArrCount;
				u8PropCount=u8PropCount<(byte)EnRoleProp.ROLE_PROP_PRIVATE ? u8PropCount:(byte)EnRoleProp.ROLE_PROP_PRIVATE;
				if (u8PropCount > (int)EnRoleProp.ROLE_PROP_PRIVATE) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8PropCount; ++__orm_iLoopVar) {
					arrNumProp[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 6: {
				set_has_u8Prop64Count();
				u8Prop64Count = oPacker.ReadUINT8();
			}break;
			case 7: {
				set_has_arrNumProp64();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8Prop64Count=u8Prop64Count<__orm_iArrCount ? u8Prop64Count:(byte)__orm_iArrCount;
				u8Prop64Count=u8Prop64Count<(byte)EnRoleProp64.ROLE_PROP64_PRIVATE ? u8Prop64Count:(byte)EnRoleProp64.ROLE_PROP64_PRIVATE;
				if (u8Prop64Count > (int)EnRoleProp64.ROLE_PROP64_PRIVATE) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8Prop64Count; ++__orm_iLoopVar) {
					arrNumProp64[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 角色部件私有现场
public class TRolePartPrivateContext
{
	private uint[] __orm_has_bits = new uint[1];
	private TPackagePartPrivateContext stPackagePart = new TPackagePartPrivateContext();   //背包现场
	private TSeedlingPartPrivateContext stSeedingPart = new TSeedlingPartPrivateContext();   //胚子现场
	private TDisciplePartPrivateContext stDisciplePart = new TDisciplePartPrivateContext();   //弟子现场
	private TSectPartPrivateContext stSectPart = new TSectPartPrivateContext();   //宗门现场
	private TWanderPartPrivateContext stWanderPart = new TWanderPartPrivateContext();   //游历现场
	private TAntiquePartPrivateContext stAntiquePart = new TAntiquePartPrivateContext();   //古宝现场
	private TStaminaPartPrivateContext stStaminaPart = new TStaminaPartPrivateContext();   //体力系统现场
	private TGuidePartPrivateContext stGuidePartData = new TGuidePartPrivateContext();   //引导系统现场
	private TSectFormationPartPrivateContext stSectFormPart = new TSectFormationPartPrivateContext();   //宗门大阵现场
	private TPeriodPrizePartPrivateContext stPeriodPrizePart = new TPeriodPrizePartPrivateContext();   //时长奖励
	private TMailPartPrivateContext stMailPart = new TMailPartPrivateContext();   //邮件部件
	private TLootboxPartPrivateContext stLootboxPart = new TLootboxPartPrivateContext();   //盲盒部件


	public const int MAX_PACKEDSIZE = 557010;

	public void init() {
		__orm_has_bits[0]=0;
		stPackagePart.init();
		stSeedingPart.init();
		stDisciplePart.init();
		stSectPart.init();
		stWanderPart.init();
		stAntiquePart.init();
		stStaminaPart.init();
		stGuidePartData.init();
		stSectFormPart.init();
		stPeriodPrizePart.init();
		stMailPart.init();
		stLootboxPart.init();
	}
	public bool has_stPackagePart() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_stPackagePart() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_stPackagePart() {__orm_has_bits[0] &= ~(0x2u);}
	public TPackagePartPrivateContext set_stPackagePart(){set_has_stPackagePart(); return stPackagePart;}
	public TPackagePartPrivateContext get_stPackagePart(){return stPackagePart;}

	public bool has_stSeedingPart() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stSeedingPart() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stSeedingPart() {__orm_has_bits[0] &= ~(0x4u);}
	public TSeedlingPartPrivateContext set_stSeedingPart(){set_has_stSeedingPart(); return stSeedingPart;}
	public TSeedlingPartPrivateContext get_stSeedingPart(){return stSeedingPart;}

	public bool has_stDisciplePart() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_stDisciplePart() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_stDisciplePart() {__orm_has_bits[0] &= ~(0x8u);}
	public TDisciplePartPrivateContext set_stDisciplePart(){set_has_stDisciplePart(); return stDisciplePart;}
	public TDisciplePartPrivateContext get_stDisciplePart(){return stDisciplePart;}

	public bool has_stSectPart() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_stSectPart() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_stSectPart() {__orm_has_bits[0] &= ~(0x10u);}
	public TSectPartPrivateContext set_stSectPart(){set_has_stSectPart(); return stSectPart;}
	public TSectPartPrivateContext get_stSectPart(){return stSectPart;}

	public bool has_stWanderPart() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_stWanderPart() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_stWanderPart() {__orm_has_bits[0] &= ~(0x20u);}
	public TWanderPartPrivateContext set_stWanderPart(){set_has_stWanderPart(); return stWanderPart;}
	public TWanderPartPrivateContext get_stWanderPart(){return stWanderPart;}

	public bool has_stAntiquePart() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_stAntiquePart() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_stAntiquePart() {__orm_has_bits[0] &= ~(0x40u);}
	public TAntiquePartPrivateContext set_stAntiquePart(){set_has_stAntiquePart(); return stAntiquePart;}
	public TAntiquePartPrivateContext get_stAntiquePart(){return stAntiquePart;}

	public bool has_stStaminaPart() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_stStaminaPart() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_stStaminaPart() {__orm_has_bits[0] &= ~(0x80u);}
	public TStaminaPartPrivateContext set_stStaminaPart(){set_has_stStaminaPart(); return stStaminaPart;}
	public TStaminaPartPrivateContext get_stStaminaPart(){return stStaminaPart;}

	public bool has_stGuidePartData() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_stGuidePartData() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_stGuidePartData() {__orm_has_bits[0] &= ~(0x100u);}
	public TGuidePartPrivateContext set_stGuidePartData(){set_has_stGuidePartData(); return stGuidePartData;}
	public TGuidePartPrivateContext get_stGuidePartData(){return stGuidePartData;}

	public bool has_stSectFormPart() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_stSectFormPart() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_stSectFormPart() {__orm_has_bits[0] &= ~(0x200u);}
	public TSectFormationPartPrivateContext set_stSectFormPart(){set_has_stSectFormPart(); return stSectFormPart;}
	public TSectFormationPartPrivateContext get_stSectFormPart(){return stSectFormPart;}

	public bool has_stPeriodPrizePart() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_stPeriodPrizePart() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_stPeriodPrizePart() {__orm_has_bits[0] &= ~(0x1000u);}
	public TPeriodPrizePartPrivateContext set_stPeriodPrizePart(){set_has_stPeriodPrizePart(); return stPeriodPrizePart;}
	public TPeriodPrizePartPrivateContext get_stPeriodPrizePart(){return stPeriodPrizePart;}

	public bool has_stMailPart() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_stMailPart() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_stMailPart() {__orm_has_bits[0] &= ~(0x2000u);}
	public TMailPartPrivateContext set_stMailPart(){set_has_stMailPart(); return stMailPart;}
	public TMailPartPrivateContext get_stMailPart(){return stMailPart;}

	public bool has_stLootboxPart() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_stLootboxPart() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_stLootboxPart() {__orm_has_bits[0] &= ~(0x4000u);}
	public TLootboxPartPrivateContext set_stLootboxPart(){set_has_stLootboxPart(); return stLootboxPart;}
	public TLootboxPartPrivateContext get_stLootboxPart(){return stLootboxPart;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stPackagePart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stPackagePart.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stSeedingPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stSeedingPart.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stDisciplePart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stDisciplePart.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stSectPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stSectPart.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stWanderPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stWanderPart.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stAntiquePart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stAntiquePart.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stStaminaPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stStaminaPart.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stGuidePartData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stGuidePartData.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stSectFormPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stSectFormPart.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stPeriodPrizePart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stPeriodPrizePart.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stMailPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stMailPart.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stLootboxPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stLootboxPart.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stPackagePart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stPackagePart");
			stPackagePart.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stSeedingPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stSeedingPart");
			stSeedingPart.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stDisciplePart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stDisciplePart");
			stDisciplePart.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stSectPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stSectPart");
			stSectPart.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stWanderPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stWanderPart");
			stWanderPart.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stAntiquePart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stAntiquePart");
			stAntiquePart.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stStaminaPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stStaminaPart");
			stStaminaPart.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stGuidePartData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stGuidePartData");
			stGuidePartData.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stSectFormPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stSectFormPart");
			stSectFormPart.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stPeriodPrizePart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stPeriodPrizePart");
			stPeriodPrizePart.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stMailPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stMailPart");
			stMailPart.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stLootboxPart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stLootboxPart");
			stLootboxPart.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_stPackagePart();
				stPackagePart.Unpack(oPacker);
			}break;
			case 2: {
				set_has_stSeedingPart();
				stSeedingPart.Unpack(oPacker);
			}break;
			case 3: {
				set_has_stDisciplePart();
				stDisciplePart.Unpack(oPacker);
			}break;
			case 4: {
				set_has_stSectPart();
				stSectPart.Unpack(oPacker);
			}break;
			case 5: {
				set_has_stWanderPart();
				stWanderPart.Unpack(oPacker);
			}break;
			case 6: {
				set_has_stAntiquePart();
				stAntiquePart.Unpack(oPacker);
			}break;
			case 7: {
				set_has_stStaminaPart();
				stStaminaPart.Unpack(oPacker);
			}break;
			case 8: {
				set_has_stGuidePartData();
				stGuidePartData.Unpack(oPacker);
			}break;
			case 9: {
				set_has_stSectFormPart();
				stSectFormPart.Unpack(oPacker);
			}break;
			case 12: {
				set_has_stPeriodPrizePart();
				stPeriodPrizePart.Unpack(oPacker);
			}break;
			case 13: {
				set_has_stMailPart();
				stMailPart.Unpack(oPacker);
			}break;
			case 14: {
				set_has_stLootboxPart();
				stLootboxPart.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// Person的公有属性(用于广播)
public class TRolePublicContext
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 角色部件现场(公有)
public class TRolePartPublicContext
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 物品公有现场
public class TLeechdomPublicContext
{
	private uint[] __orm_has_bits = new uint[1];
	private int sid;   //物品唯一序号
	private int iGoodsID;   //物品ID
	private uint iNums;   //数量
	private int iBindFlags;   //绑定标志
	private uint dwHashIDCard;   //IDCard Hash
	private byte u8ExtDataLen;   //导出数量长度
	private sbyte[] arrExtData = new sbyte[(int)TCONST.ORM_LEECHDOM_EXTDATA_LEN];   //导出数据

	public const int countof_arrExtData = (int)TCONST.ORM_LEECHDOM_EXTDATA_LEN;

	public const int MAX_PACKEDSIZE = 91;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_sid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_sid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_sid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_sid(int _sid){set_has_sid(); sid=_sid;}
	public int get_sid(){if (has_sid()) {return sid;} return 0;}

	public bool has_iGoodsID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iGoodsID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iGoodsID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iGoodsID(int _iGoodsID){set_has_iGoodsID(); iGoodsID=_iGoodsID;}
	public int get_iGoodsID(){if (has_iGoodsID()) {return iGoodsID;} return 0;}

	public bool has_iNums() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iNums() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iNums() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iNums(uint _iNums){set_has_iNums(); iNums=_iNums;}
	public uint get_iNums(){if (has_iNums()) {return iNums;} return 0;}

	public bool has_iBindFlags() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iBindFlags() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iBindFlags() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iBindFlags(int _iBindFlags){set_has_iBindFlags(); iBindFlags=_iBindFlags;}
	public int get_iBindFlags(){if (has_iBindFlags()) {return iBindFlags;} return 0;}

	public bool has_dwHashIDCard() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_dwHashIDCard() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_dwHashIDCard() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_dwHashIDCard(uint _dwHashIDCard){set_has_dwHashIDCard(); dwHashIDCard=_dwHashIDCard;}
	public uint get_dwHashIDCard(){if (has_dwHashIDCard()) {return dwHashIDCard;} return 0;}

	public bool has_u8ExtDataLen() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_u8ExtDataLen() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_u8ExtDataLen() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_u8ExtDataLen(byte _u8ExtDataLen){set_has_u8ExtDataLen(); u8ExtDataLen=_u8ExtDataLen;}
	public byte get_u8ExtDataLen(){if (has_u8ExtDataLen()) {return u8ExtDataLen;} return 0;}

	public bool has_arrExtData() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_arrExtData() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_arrExtData() {__orm_has_bits[0] &= ~(0x100u);}
	public sbyte[] set_arrExtData(){set_has_arrExtData(); return arrExtData;}
	public sbyte[] get_arrExtData(){return arrExtData;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_sid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(sid);
		};
		if (has_iGoodsID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGoodsID);
		};
		if (has_iNums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintUINT32(iNums);
		};
		if (has_iBindFlags()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iBindFlags);
		};
		if (has_dwHashIDCard()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintUINT32(dwHashIDCard);
		};
		if (has_u8ExtDataLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteUINT8(u8ExtDataLen);
		};
		if (has_arrExtData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8ExtDataLen();
			if (__orm_ReferVar > (int)TCONST.ORM_LEECHDOM_EXTDATA_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_LEECHDOM_EXTDATA_LEN) && (__orm_iLoopVar < u8ExtDataLen); ++__orm_iLoopVar) {
		    oPacker.WriteINT8(arrExtData[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_sid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(sid);
		};
		if (has_iGoodsID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGoodsID);
		};
		if (has_iNums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintUINT32(iNums);
		};
		if (has_iBindFlags()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iBindFlags);
		};
		if (has_dwHashIDCard()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintUINT32(dwHashIDCard);
		};
		if (has_u8ExtDataLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteUINT8(u8ExtDataLen);
		};
		if (has_arrExtData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8ExtDataLen();
			if (__orm_ReferVar > (int)TCONST.ORM_LEECHDOM_EXTDATA_LEN) {
				oPacker.PushFieldName("u8ExtDataLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_LEECHDOM_EXTDATA_LEN) && (__orm_iLoopVar < u8ExtDataLen); ++__orm_iLoopVar) {
		    oPacker.WriteINT8(arrExtData[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_sid();
				sid = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iGoodsID();
				iGoodsID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iNums();
				iNums = oPacker.ReadVarintUINT32();
			}break;
			case 4: {
				set_has_iBindFlags();
				iBindFlags = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_dwHashIDCard();
				dwHashIDCard = oPacker.ReadVarintUINT32();
			}break;
			case 7: {
				set_has_u8ExtDataLen();
				u8ExtDataLen = oPacker.ReadUINT8();
			}break;
			case 8: {
				set_has_arrExtData();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8ExtDataLen=u8ExtDataLen<__orm_iArrCount ? u8ExtDataLen:(byte)__orm_iArrCount;
				u8ExtDataLen=u8ExtDataLen<(byte)TCONST.ORM_LEECHDOM_EXTDATA_LEN ? u8ExtDataLen:(byte)TCONST.ORM_LEECHDOM_EXTDATA_LEN;
				if (u8ExtDataLen > (int)TCONST.ORM_LEECHDOM_EXTDATA_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8ExtDataLen; ++__orm_iLoopVar) {
					arrExtData[__orm_iLoopVar] = oPacker.ReadINT8();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 创建主角通知
public class TMSG_ENTITY_CREATE_ROLE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private uint sid;   //sid
	private TRolePrivateContext stPrivateContext = new TRolePrivateContext();   //详细数据
	private long i64Time;   //服务器时间
	private long iTickTime;   //服务器时间 毫秒


	public const int MAX_PACKEDSIZE = 326;

	public void init() {
		__orm_has_bits[0]=0;
		stPrivateContext.init();
	}
	public bool has_sid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_sid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_sid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_sid(uint _sid){set_has_sid(); sid=_sid;}
	public uint get_sid(){if (has_sid()) {return sid;} return 0;}

	public bool has_stPrivateContext() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stPrivateContext() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stPrivateContext() {__orm_has_bits[0] &= ~(0x4u);}
	public TRolePrivateContext set_stPrivateContext(){set_has_stPrivateContext(); return stPrivateContext;}
	public TRolePrivateContext get_stPrivateContext(){return stPrivateContext;}

	public bool has_i64Time() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_i64Time() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_i64Time() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_i64Time(long _i64Time){set_has_i64Time(); i64Time=_i64Time;}
	public long get_i64Time(){if (has_i64Time()) {return i64Time;} return 0;}

	public bool has_iTickTime() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iTickTime() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iTickTime() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iTickTime(long _iTickTime){set_has_iTickTime(); iTickTime=_iTickTime;}
	public long get_iTickTime(){if (has_iTickTime()) {return iTickTime;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_sid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(sid);
		};
		if (has_stPrivateContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stPrivateContext.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64Time()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(i64Time);
		};
		if (has_iTickTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iTickTime);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_sid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(sid);
		};
		if (has_stPrivateContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stPrivateContext");
			stPrivateContext.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64Time()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(i64Time);
		};
		if (has_iTickTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iTickTime);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_sid();
				sid = oPacker.ReadVarintUINT32();
			}break;
			case 2: {
				set_has_stPrivateContext();
				stPrivateContext.Unpack(oPacker);
			}break;
			case 3: {
				set_has_i64Time();
				i64Time = oPacker.ReadVarintINT64();
			}break;
			case 4: {
				set_has_iTickTime();
				iTickTime = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 创建部件通知
public class TMSG_ENTITY_CREATE_ROLE_PART_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private uint sid;   //sid
	private TRolePartPrivateContext stPartContext = new TRolePartPrivateContext();   //角色部件私有现场


	public const int MAX_PACKEDSIZE = 557034;

	public void init() {
		__orm_has_bits[0]=0;
		stPartContext.init();
	}
	public bool has_sid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_sid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_sid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_sid(uint _sid){set_has_sid(); sid=_sid;}
	public uint get_sid(){if (has_sid()) {return sid;} return 0;}

	public bool has_stPartContext() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stPartContext() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stPartContext() {__orm_has_bits[0] &= ~(0x4u);}
	public TRolePartPrivateContext set_stPartContext(){set_has_stPartContext(); return stPartContext;}
	public TRolePartPrivateContext get_stPartContext(){return stPartContext;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_sid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(sid);
		};
		if (has_stPartContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stPartContext.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_sid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(sid);
		};
		if (has_stPartContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stPartContext");
			stPartContext.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_sid();
				sid = oPacker.ReadVarintUINT32();
			}break;
			case 2: {
				set_has_stPartContext();
				stPartContext.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 通知客户端创建人物(非主角)
public class TMSG_ENTITY_CREATE_PERSON_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private byte iNums;   //实体个数
	private uint[] arrSID = new uint[(int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM];   //sid数组
	private TRolePublicContext[] arrPublicData = new TRolePublicContext[(int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM];   //角色数据
	private TRolePartPublicContext[] arrPartData = new TRolePartPublicContext[(int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM];   //部件数据
	public TMSG_ENTITY_CREATE_PERSON_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM; ++__orm_iLoopVar) {
			arrPublicData[__orm_iLoopVar] = new TRolePublicContext();
		}
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM; ++__orm_iLoopVar) {
			arrPartData[__orm_iLoopVar] = new TRolePartPublicContext();
		}
	}

	public const int countof_arrSID = (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM;
	public const int countof_arrPublicData = (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM;
	public const int countof_arrPartData = (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM;

	public const int MAX_PACKEDSIZE = 1553;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM; ++__orm_iLoopVar){arrPublicData[__orm_iLoopVar].init();}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM; ++__orm_iLoopVar){arrPartData[__orm_iLoopVar].init();}
	}
	public bool has_iNums() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iNums() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iNums() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iNums(byte _iNums){set_has_iNums(); iNums=_iNums;}
	public byte get_iNums(){if (has_iNums()) {return iNums;} return 0;}

	public bool has_arrSID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrSID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrSID() {__orm_has_bits[0] &= ~(0x4u);}
	public uint[] set_arrSID(){set_has_arrSID(); return arrSID;}
	public uint[] get_arrSID(){return arrSID;}

	public bool has_arrPublicData() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrPublicData() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrPublicData() {__orm_has_bits[0] &= ~(0x8u);}
	public TRolePublicContext[] set_arrPublicData(){set_has_arrPublicData(); return arrPublicData;}
	public TRolePublicContext[] get_arrPublicData(){return arrPublicData;}

	public bool has_arrPartData() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrPartData() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrPartData() {__orm_has_bits[0] &= ~(0x10u);}
	public TRolePartPublicContext[] set_arrPartData(){set_has_arrPartData(); return arrPartData;}
	public TRolePartPublicContext[] get_arrPartData(){return arrPartData;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(iNums);
		};
		if (has_arrSID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNums();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) && (__orm_iLoopVar < iNums); ++__orm_iLoopVar) {
		    oPacker.WriteVarintUINT32(arrSID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrPublicData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNums();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) && (__orm_iLoopVar < iNums); ++__orm_iLoopVar) {
				arrPublicData[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrPartData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNums();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) && (__orm_iLoopVar < iNums); ++__orm_iLoopVar) {
				arrPartData[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(iNums);
		};
		if (has_arrSID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNums();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) {
				oPacker.PushFieldName("iNums={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) && (__orm_iLoopVar < iNums); ++__orm_iLoopVar) {
		    oPacker.WriteVarintUINT32(arrSID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrPublicData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNums();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) {
				oPacker.PushFieldName("iNums={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) && (__orm_iLoopVar < iNums); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrPublicData[{0}]", __orm_iLoopVar);
				arrPublicData[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrPartData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNums();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) {
				oPacker.PushFieldName("iNums={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) && (__orm_iLoopVar < iNums); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrPartData[{0}]", __orm_iLoopVar);
				arrPartData[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iNums();
				iNums = oPacker.ReadUINT8();
			}break;
			case 2: {
				set_has_arrSID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iNums=iNums<__orm_iArrCount ? iNums:(byte)__orm_iArrCount;
				iNums=iNums<(byte)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM ? iNums:(byte)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM;
				if (iNums > (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iNums; ++__orm_iLoopVar) {
					arrSID[__orm_iLoopVar] = oPacker.ReadVarintUINT32();
				};
			}break;
			case 3: {
				set_has_arrPublicData();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iNums=iNums<__orm_iArrCount ? iNums:(byte)__orm_iArrCount;
				iNums=iNums<(byte)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM ? iNums:(byte)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM;
				if (iNums > (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iNums; ++__orm_iLoopVar) {
					arrPublicData[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 4: {
				set_has_arrPartData();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iNums=iNums<__orm_iArrCount ? iNums:(byte)__orm_iArrCount;
				iNums=iNums<(byte)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM ? iNums:(byte)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM;
				if (iNums > (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iNums; ++__orm_iLoopVar) {
					arrPartData[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 通知客户端创建Leechdom(药品)
public class TMSG_ENTITY_CREATE_LEECHDOM_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private byte iNums;   //实体个数
	private TLeechdomPublicContext[] arrPubContext = new TLeechdomPublicContext[(int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM];   //本体数据
	public TMSG_ENTITY_CREATE_LEECHDOM_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM; ++__orm_iLoopVar) {
			arrPubContext[__orm_iLoopVar] = new TLeechdomPublicContext();
		}
	}

	public const int countof_arrPubContext = (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM;

	public const int MAX_PACKEDSIZE = 9125;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM; ++__orm_iLoopVar){arrPubContext[__orm_iLoopVar].init();}
	}
	public bool has_iNums() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iNums() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iNums() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iNums(byte _iNums){set_has_iNums(); iNums=_iNums;}
	public byte get_iNums(){if (has_iNums()) {return iNums;} return 0;}

	public bool has_arrPubContext() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrPubContext() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrPubContext() {__orm_has_bits[0] &= ~(0x4u);}
	public TLeechdomPublicContext[] set_arrPubContext(){set_has_arrPubContext(); return arrPubContext;}
	public TLeechdomPublicContext[] get_arrPubContext(){return arrPubContext;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(iNums);
		};
		if (has_arrPubContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNums();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) && (__orm_iLoopVar < iNums); ++__orm_iLoopVar) {
				arrPubContext[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(iNums);
		};
		if (has_arrPubContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNums();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) {
				oPacker.PushFieldName("iNums={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) && (__orm_iLoopVar < iNums); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrPubContext[{0}]", __orm_iLoopVar);
				arrPubContext[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iNums();
				iNums = oPacker.ReadUINT8();
			}break;
			case 2: {
				set_has_arrPubContext();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iNums=iNums<__orm_iArrCount ? iNums:(byte)__orm_iArrCount;
				iNums=iNums<(byte)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM ? iNums:(byte)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM;
				if (iNums > (int)TCONST.ORM_MAX_BATCH_CREATE_ENTITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iNums; ++__orm_iLoopVar) {
					arrPubContext[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 通知客户端删除实体
public class TMSG_ENTITY_DESTROY_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private byte iNums;   //实体数量
	private uint[] arrSID = new uint[(int)TCONST.ORM_MAX_BATCH_DESTROY_ENTITY_NUM];   //需要删除的实体对象的sid

	public const int countof_arrSID = (int)TCONST.ORM_MAX_BATCH_DESTROY_ENTITY_NUM;

	public const int MAX_PACKEDSIZE = 1300;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iNums() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iNums() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iNums() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iNums(byte _iNums){set_has_iNums(); iNums=_iNums;}
	public byte get_iNums(){if (has_iNums()) {return iNums;} return 0;}

	public bool has_arrSID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrSID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrSID() {__orm_has_bits[0] &= ~(0x4u);}
	public uint[] set_arrSID(){set_has_arrSID(); return arrSID;}
	public uint[] get_arrSID(){return arrSID;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(iNums);
		};
		if (has_arrSID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNums();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_BATCH_DESTROY_ENTITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_BATCH_DESTROY_ENTITY_NUM) && (__orm_iLoopVar < iNums); ++__orm_iLoopVar) {
		    oPacker.WriteVarintUINT32(arrSID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(iNums);
		};
		if (has_arrSID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNums();
			if (__orm_ReferVar > (int)TCONST.ORM_MAX_BATCH_DESTROY_ENTITY_NUM) {
				oPacker.PushFieldName("iNums={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_MAX_BATCH_DESTROY_ENTITY_NUM) && (__orm_iLoopVar < iNums); ++__orm_iLoopVar) {
		    oPacker.WriteVarintUINT32(arrSID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iNums();
				iNums = oPacker.ReadUINT8();
			}break;
			case 2: {
				set_has_arrSID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iNums=iNums<__orm_iArrCount ? iNums:(byte)__orm_iArrCount;
				iNums=iNums<(byte)TCONST.ORM_MAX_BATCH_DESTROY_ENTITY_NUM ? iNums:(byte)TCONST.ORM_MAX_BATCH_DESTROY_ENTITY_NUM;
				if (iNums > (int)TCONST.ORM_MAX_BATCH_DESTROY_ENTITY_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iNums; ++__orm_iLoopVar) {
					arrSID[__orm_iLoopVar] = oPacker.ReadVarintUINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 实体属性更新
public class TMSG_ENTITY_UPDATE_PROP_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private uint sid;   //需要更新的实体对象
	private byte iPropNums;   //属性数量
	private TEntityProp[] arrProperty = new TEntityProp[(int)EnRoleProp.ROLE_PROP_MAXID];   //需更新的实体属性
	private byte u8Prop64Nums;   //属性数量
	private TEntityProp64[] arrProp64 = new TEntityProp64[(int)EnRoleProp64.ROLE_PROP64_MAXID];   //需更新的64位实体属性
	private string szPassback;   //透传参数
	public TMSG_ENTITY_UPDATE_PROP_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)EnRoleProp.ROLE_PROP_MAXID; ++__orm_iLoopVar) {
			arrProperty[__orm_iLoopVar] = new TEntityProp();
		}
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)EnRoleProp64.ROLE_PROP64_MAXID; ++__orm_iLoopVar) {
			arrProp64[__orm_iLoopVar] = new TEntityProp64();
		}
	}

	public const int countof_arrProperty = (int)EnRoleProp.ROLE_PROP_MAXID;
	public const int countof_arrProp64 = (int)EnRoleProp64.ROLE_PROP64_MAXID;

	public const int MAX_PACKEDSIZE = 843;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)EnRoleProp.ROLE_PROP_MAXID; ++__orm_iLoopVar){arrProperty[__orm_iLoopVar].init();}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)EnRoleProp64.ROLE_PROP64_MAXID; ++__orm_iLoopVar){arrProp64[__orm_iLoopVar].init();}
	}
	public bool has_sid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_sid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_sid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_sid(uint _sid){set_has_sid(); sid=_sid;}
	public uint get_sid(){if (has_sid()) {return sid;} return 0;}

	public bool has_iPropNums() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iPropNums() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iPropNums() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iPropNums(byte _iPropNums){set_has_iPropNums(); iPropNums=_iPropNums;}
	public byte get_iPropNums(){if (has_iPropNums()) {return iPropNums;} return 0;}

	public bool has_arrProperty() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrProperty() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrProperty() {__orm_has_bits[0] &= ~(0x8u);}
	public TEntityProp[] set_arrProperty(){set_has_arrProperty(); return arrProperty;}
	public TEntityProp[] get_arrProperty(){return arrProperty;}

	public bool has_u8Prop64Nums() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_u8Prop64Nums() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_u8Prop64Nums() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_u8Prop64Nums(byte _u8Prop64Nums){set_has_u8Prop64Nums(); u8Prop64Nums=_u8Prop64Nums;}
	public byte get_u8Prop64Nums(){if (has_u8Prop64Nums()) {return u8Prop64Nums;} return 0;}

	public bool has_arrProp64() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrProp64() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrProp64() {__orm_has_bits[0] &= ~(0x20u);}
	public TEntityProp64[] set_arrProp64(){set_has_arrProp64(); return arrProp64;}
	public TEntityProp64[] get_arrProp64(){return arrProp64;}

	public bool has_szPassback() {return (__orm_has_bits[0] & 0x40000u) != 0;}
	public void set_has_szPassback() {__orm_has_bits[0] |= 0x40000u;}
	public void clear_has_szPassback() {__orm_has_bits[0] &= ~(0x40000u);}
	public void set_szPassback(string _szPassback){set_has_szPassback(); szPassback=_szPassback;}
	public string get_szPassback(){if (has_szPassback()) {return szPassback;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_sid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(sid);
		};
		if (has_iPropNums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteUINT8(iPropNums);
		};
		if (has_arrProperty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropNums();
			if (__orm_ReferVar > (int)EnRoleProp.ROLE_PROP_MAXID) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnRoleProp.ROLE_PROP_MAXID) && (__orm_iLoopVar < iPropNums); ++__orm_iLoopVar) {
				arrProperty[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_u8Prop64Nums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteUINT8(u8Prop64Nums);
		};
		if (has_arrProp64()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Prop64Nums();
			if (__orm_ReferVar > (int)EnRoleProp64.ROLE_PROP64_MAXID) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnRoleProp64.ROLE_PROP64_MAXID) && (__orm_iLoopVar < u8Prop64Nums); ++__orm_iLoopVar) {
				arrProp64[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_sid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(sid);
		};
		if (has_iPropNums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteUINT8(iPropNums);
		};
		if (has_arrProperty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropNums();
			if (__orm_ReferVar > (int)EnRoleProp.ROLE_PROP_MAXID) {
				oPacker.PushFieldName("iPropNums={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnRoleProp.ROLE_PROP_MAXID) && (__orm_iLoopVar < iPropNums); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrProperty[{0}]", __orm_iLoopVar);
				arrProperty[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_u8Prop64Nums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteUINT8(u8Prop64Nums);
		};
		if (has_arrProp64()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_u8Prop64Nums();
			if (__orm_ReferVar > (int)EnRoleProp64.ROLE_PROP64_MAXID) {
				oPacker.PushFieldName("u8Prop64Nums={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnRoleProp64.ROLE_PROP64_MAXID) && (__orm_iLoopVar < u8Prop64Nums); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrProp64[{0}]", __orm_iLoopVar);
				arrProp64[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_sid();
				sid = oPacker.ReadVarintUINT32();
			}break;
			case 2: {
				set_has_iPropNums();
				iPropNums = oPacker.ReadUINT8();
			}break;
			case 3: {
				set_has_arrProperty();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPropNums=iPropNums<__orm_iArrCount ? iPropNums:(byte)__orm_iArrCount;
				iPropNums=iPropNums<(byte)EnRoleProp.ROLE_PROP_MAXID ? iPropNums:(byte)EnRoleProp.ROLE_PROP_MAXID;
				if (iPropNums > (int)EnRoleProp.ROLE_PROP_MAXID) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPropNums; ++__orm_iLoopVar) {
					arrProperty[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 4: {
				set_has_u8Prop64Nums();
				u8Prop64Nums = oPacker.ReadUINT8();
			}break;
			case 5: {
				set_has_arrProp64();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				u8Prop64Nums=u8Prop64Nums<__orm_iArrCount ? u8Prop64Nums:(byte)__orm_iArrCount;
				u8Prop64Nums=u8Prop64Nums<(byte)EnRoleProp64.ROLE_PROP64_MAXID ? u8Prop64Nums:(byte)EnRoleProp64.ROLE_PROP64_MAXID;
				if (u8Prop64Nums > (int)EnRoleProp64.ROLE_PROP64_MAXID) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < u8Prop64Nums; ++__orm_iLoopVar) {
					arrProp64[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 18: {
				set_has_szPassback();
				szPassback = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 实体属性更新
public class TMSG_ENTITY_SET_PROP_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iRoleID;   //需要修改属性的角色, 可以改别人的
	private ushort iPropNums;   //属性数量
	private TEntityProp[] arrProperty = new TEntityProp[(int)EnRoleProp.ROLE_PROP_MAXID];   //需更新的实体属性
	private ushort iProp64Nums;   //属性数量
	private TEntityProp64[] arrProp64 = new TEntityProp64[(int)EnRoleProp64.ROLE_PROP64_MAXID];   //需更新的64位实体属性
	private string szPassback;   //透传参数
	public TMSG_ENTITY_SET_PROP_REQ() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)EnRoleProp.ROLE_PROP_MAXID; ++__orm_iLoopVar) {
			arrProperty[__orm_iLoopVar] = new TEntityProp();
		}
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)EnRoleProp64.ROLE_PROP64_MAXID; ++__orm_iLoopVar) {
			arrProp64[__orm_iLoopVar] = new TEntityProp64();
		}
	}

	public const int countof_arrProperty = (int)EnRoleProp.ROLE_PROP_MAXID;
	public const int countof_arrProp64 = (int)EnRoleProp64.ROLE_PROP64_MAXID;

	public const int MAX_PACKEDSIZE = 852;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)EnRoleProp.ROLE_PROP_MAXID; ++__orm_iLoopVar){arrProperty[__orm_iLoopVar].init();}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)EnRoleProp64.ROLE_PROP64_MAXID; ++__orm_iLoopVar){arrProp64[__orm_iLoopVar].init();}
	}
	public bool has_iRoleID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iRoleID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iRoleID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iRoleID(long _iRoleID){set_has_iRoleID(); iRoleID=_iRoleID;}
	public long get_iRoleID(){if (has_iRoleID()) {return iRoleID;} return 0;}

	public bool has_iPropNums() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iPropNums() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iPropNums() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iPropNums(ushort _iPropNums){set_has_iPropNums(); iPropNums=_iPropNums;}
	public ushort get_iPropNums(){if (has_iPropNums()) {return iPropNums;} return 0;}

	public bool has_arrProperty() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_arrProperty() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_arrProperty() {__orm_has_bits[0] &= ~(0x800u);}
	public TEntityProp[] set_arrProperty(){set_has_arrProperty(); return arrProperty;}
	public TEntityProp[] get_arrProperty(){return arrProperty;}

	public bool has_iProp64Nums() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_iProp64Nums() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_iProp64Nums() {__orm_has_bits[0] &= ~(0x2000u);}
	public void set_iProp64Nums(ushort _iProp64Nums){set_has_iProp64Nums(); iProp64Nums=_iProp64Nums;}
	public ushort get_iProp64Nums(){if (has_iProp64Nums()) {return iProp64Nums;} return 0;}

	public bool has_arrProp64() {return (__orm_has_bits[0] & 0x8000u) != 0;}
	public void set_has_arrProp64() {__orm_has_bits[0] |= 0x8000u;}
	public void clear_has_arrProp64() {__orm_has_bits[0] &= ~(0x8000u);}
	public TEntityProp64[] set_arrProp64(){set_has_arrProp64(); return arrProp64;}
	public TEntityProp64[] get_arrProp64(){return arrProp64;}

	public bool has_szPassback() {return (__orm_has_bits[0] & 0x40000u) != 0;}
	public void set_has_szPassback() {__orm_has_bits[0] |= 0x40000u;}
	public void clear_has_szPassback() {__orm_has_bits[0] &= ~(0x40000u);}
	public void set_szPassback(string _szPassback){set_has_szPassback(); szPassback=_szPassback;}
	public string get_szPassback(){if (has_szPassback()) {return szPassback;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iRoleID);
		};
		if (has_iPropNums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintUINT16(iPropNums);
		};
		if (has_arrProperty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropNums();
			if (__orm_ReferVar > (int)EnRoleProp.ROLE_PROP_MAXID) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnRoleProp.ROLE_PROP_MAXID) && (__orm_iLoopVar < iPropNums); ++__orm_iLoopVar) {
				arrProperty[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iProp64Nums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintUINT16(iProp64Nums);
		};
		if (has_arrProp64()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iProp64Nums();
			if (__orm_ReferVar > (int)EnRoleProp64.ROLE_PROP64_MAXID) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnRoleProp64.ROLE_PROP64_MAXID) && (__orm_iLoopVar < iProp64Nums); ++__orm_iLoopVar) {
				arrProp64[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iRoleID);
		};
		if (has_iPropNums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintUINT16(iPropNums);
		};
		if (has_arrProperty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropNums();
			if (__orm_ReferVar > (int)EnRoleProp.ROLE_PROP_MAXID) {
				oPacker.PushFieldName("iPropNums={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnRoleProp.ROLE_PROP_MAXID) && (__orm_iLoopVar < iPropNums); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrProperty[{0}]", __orm_iLoopVar);
				arrProperty[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iProp64Nums()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintUINT16(iProp64Nums);
		};
		if (has_arrProp64()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iProp64Nums();
			if (__orm_ReferVar > (int)EnRoleProp64.ROLE_PROP64_MAXID) {
				oPacker.PushFieldName("iProp64Nums={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnRoleProp64.ROLE_PROP64_MAXID) && (__orm_iLoopVar < iProp64Nums); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrProp64[{0}]", __orm_iLoopVar);
				arrProp64[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iRoleID();
				iRoleID = oPacker.ReadVarintINT64();
			}break;
			case 8: {
				set_has_iPropNums();
				iPropNums = oPacker.ReadVarintUINT16();
			}break;
			case 11: {
				set_has_arrProperty();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPropNums=iPropNums<__orm_iArrCount ? iPropNums:(ushort)__orm_iArrCount;
				iPropNums=iPropNums<(ushort)EnRoleProp.ROLE_PROP_MAXID ? iPropNums:(ushort)EnRoleProp.ROLE_PROP_MAXID;
				if (iPropNums > (int)EnRoleProp.ROLE_PROP_MAXID) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPropNums; ++__orm_iLoopVar) {
					arrProperty[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 13: {
				set_has_iProp64Nums();
				iProp64Nums = oPacker.ReadVarintUINT16();
			}break;
			case 15: {
				set_has_arrProp64();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iProp64Nums=iProp64Nums<__orm_iArrCount ? iProp64Nums:(ushort)__orm_iArrCount;
				iProp64Nums=iProp64Nums<(ushort)EnRoleProp64.ROLE_PROP64_MAXID ? iProp64Nums:(ushort)EnRoleProp64.ROLE_PROP64_MAXID;
				if (iProp64Nums > (int)EnRoleProp64.ROLE_PROP64_MAXID) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iProp64Nums; ++__orm_iLoopVar) {
					arrProp64[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 18: {
				set_has_szPassback();
				szPassback = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_ENTITY_SET_PROP_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long iRoleID;   //从req传入
	private string szPassback;   //透传参数


	public const int MAX_PACKEDSIZE = 168;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iRoleID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iRoleID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iRoleID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iRoleID(long _iRoleID){set_has_iRoleID(); iRoleID=_iRoleID;}
	public long get_iRoleID(){if (has_iRoleID()) {return iRoleID;} return 0;}

	public bool has_szPassback() {return (__orm_has_bits[0] & 0x40000u) != 0;}
	public void set_has_szPassback() {__orm_has_bits[0] |= 0x40000u;}
	public void clear_has_szPassback() {__orm_has_bits[0] &= ~(0x40000u);}
	public void set_szPassback(string _szPassback){set_has_szPassback(); szPassback=_szPassback;}
	public string get_szPassback(){if (has_szPassback()) {return szPassback;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iRoleID);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iRoleID);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iRoleID();
				iRoleID = oPacker.ReadVarintINT64();
			}break;
			case 18: {
				set_has_szPassback();
				szPassback = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 角色改名
public class TMSG_ENTITY_RENAME_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private string szName;   //角色名字


	public const int MAX_PACKEDSIZE = 47;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_szName() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_szName() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_szName() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_szName(string _szName){set_has_szName(); szName=_szName;}
	public string get_szName(){if (has_szName()) {return szName;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szName);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szName);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_szName();
				szName = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_ENTITY_RENAME_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private string szName;   //角色名字


	public const int MAX_PACKEDSIZE = 57;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_szName() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_szName() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_szName() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_szName(string _szName){set_has_szName(); szName=_szName;}
	public string get_szName(){if (has_szName()) {return szName;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szName);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szName);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_szName();
				szName = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 字符串key val
public class TKStrVStr
{
	private uint[] __orm_has_bits = new uint[1];
	private string strKey;   //属性名
	private string strVal;   //属性


	public const int MAX_PACKEDSIZE = 153;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_strKey() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_strKey() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_strKey() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_strKey(string _strKey){set_has_strKey(); strKey=_strKey;}
	public string get_strKey(){if (has_strKey()) {return strKey;} return "";}

	public bool has_strVal() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_strVal() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_strVal() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_strVal(string _strVal){set_has_strVal(); strVal=_strVal;}
	public string get_strVal(){if (has_strVal()) {return strVal;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_strKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(strKey);
		};
		if (has_strVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(strVal);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_strKey()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(strKey);
		};
		if (has_strVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(strVal);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_strKey();
				strKey = oPacker.ReadSTRING();
			}break;
			case 2: {
				set_has_strVal();
				strVal = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端登录上报打点信息
public class TMSG_CLIENT_LOGIN_OSS_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iLen;   //数量
	private TKStrVStr[] arrParam = new TKStrVStr[(int)TCONST.ORM_OSS_DATA_SIZE_MAX];   //上报信息
	public TMSG_CLIENT_LOGIN_OSS_REQ() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_OSS_DATA_SIZE_MAX; ++__orm_iLoopVar) {
			arrParam[__orm_iLoopVar] = new TKStrVStr();
		}
	}

	public const int countof_arrParam = (int)TCONST.ORM_OSS_DATA_SIZE_MAX;

	public const int MAX_PACKEDSIZE = 9821;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_OSS_DATA_SIZE_MAX; ++__orm_iLoopVar){arrParam[__orm_iLoopVar].init();}
	}
	public bool has_iLen() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLen() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLen() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLen(int _iLen){set_has_iLen(); iLen=_iLen;}
	public int get_iLen(){if (has_iLen()) {return iLen;} return 0;}

	public bool has_arrParam() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrParam() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrParam() {__orm_has_bits[0] &= ~(0x4u);}
	public TKStrVStr[] set_arrParam(){set_has_arrParam(); return arrParam;}
	public TKStrVStr[] get_arrParam(){return arrParam;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLen);
		};
		if (has_arrParam()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)TCONST.ORM_OSS_DATA_SIZE_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_OSS_DATA_SIZE_MAX) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
				arrParam[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLen);
		};
		if (has_arrParam()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)TCONST.ORM_OSS_DATA_SIZE_MAX) {
				oPacker.PushFieldName("iLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_OSS_DATA_SIZE_MAX) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrParam[{0}]", __orm_iLoopVar);
				arrParam[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLen();
				iLen = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_arrParam();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iLen=iLen<__orm_iArrCount ? iLen:(int)__orm_iArrCount;
				iLen=iLen<(int)TCONST.ORM_OSS_DATA_SIZE_MAX ? iLen:(int)TCONST.ORM_OSS_DATA_SIZE_MAX;
				if (iLen > (int)TCONST.ORM_OSS_DATA_SIZE_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iLen; ++__orm_iLoopVar) {
					arrParam[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_CLIENT_LOGIN_OSS_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端请求服务器事件
public class TMSG_SERVER_TIME_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private string szPassback;   //透传参数
	private long i64Passback;   //透传参数2


	public const int MAX_PACKEDSIZE = 158;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_szPassback() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_szPassback() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_szPassback() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_szPassback(string _szPassback){set_has_szPassback(); szPassback=_szPassback;}
	public string get_szPassback(){if (has_szPassback()) {return szPassback;} return "";}

	public bool has_i64Passback() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_i64Passback() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_i64Passback() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_i64Passback(long _i64Passback){set_has_i64Passback(); i64Passback=_i64Passback;}
	public long get_i64Passback(){if (has_i64Passback()) {return i64Passback;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
		if (has_i64Passback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(i64Passback);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
		if (has_i64Passback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(i64Passback);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_szPassback();
				szPassback = oPacker.ReadSTRING();
			}break;
			case 2: {
				set_has_i64Passback();
				i64Passback = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_SERVER_TIME_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private string szPassback;   //透传参数
	private long i64Passback;   //透传参数2
	private long iServerTime;   //服务器当前时间 秒
	private long iTickCount;   //服务器当前时间 毫秒


	public const int MAX_PACKEDSIZE = 198;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_szPassback() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_szPassback() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_szPassback() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_szPassback(string _szPassback){set_has_szPassback(); szPassback=_szPassback;}
	public string get_szPassback(){if (has_szPassback()) {return szPassback;} return "";}

	public bool has_i64Passback() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_i64Passback() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_i64Passback() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_i64Passback(long _i64Passback){set_has_i64Passback(); i64Passback=_i64Passback;}
	public long get_i64Passback(){if (has_i64Passback()) {return i64Passback;} return 0;}

	public bool has_iServerTime() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iServerTime() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iServerTime() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iServerTime(long _iServerTime){set_has_iServerTime(); iServerTime=_iServerTime;}
	public long get_iServerTime(){if (has_iServerTime()) {return iServerTime;} return 0;}

	public bool has_iTickCount() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iTickCount() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iTickCount() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iTickCount(long _iTickCount){set_has_iTickCount(); iTickCount=_iTickCount;}
	public long get_iTickCount(){if (has_iTickCount()) {return iTickCount;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
		if (has_i64Passback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(i64Passback);
		};
		if (has_iServerTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT64(iServerTime);
		};
		if (has_iTickCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(iTickCount);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
		if (has_i64Passback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(i64Passback);
		};
		if (has_iServerTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT64(iServerTime);
		};
		if (has_iTickCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(iTickCount);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_szPassback();
				szPassback = oPacker.ReadSTRING();
			}break;
			case 5: {
				set_has_i64Passback();
				i64Passback = oPacker.ReadVarintINT64();
			}break;
			case 7: {
				set_has_iServerTime();
				iServerTime = oPacker.ReadVarintINT64();
			}break;
			case 8: {
				set_has_iTickCount();
				iTickCount = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 房间描述
public class TGameRoom
{
	private uint[] __orm_has_bits = new uint[1];
	private int iRoomID;   //id, 取值 [1, MAX_ROOM_NUM] 
	private int iRoleNum;   //当前人数
	private long[] arrRoleID = new long[(int)TCONST.MAX_PERSON_IN_ROOM_NUM];   //房间中的人数
	private int[] arrPlayerIdx = new int[(int)TCONST.MAX_PERSON_IN_ROOM_NUM];   //进入房间序号, 自增不重用

	public const int countof_arrRoleID = (int)TCONST.MAX_PERSON_IN_ROOM_NUM;
	public const int countof_arrPlayerIdx = (int)TCONST.MAX_PERSON_IN_ROOM_NUM;

	public const int MAX_PACKEDSIZE = 1013;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRoomID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRoomID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRoomID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRoomID(int _iRoomID){set_has_iRoomID(); iRoomID=_iRoomID;}
	public int get_iRoomID(){if (has_iRoomID()) {return iRoomID;} return 0;}

	public bool has_iRoleNum() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iRoleNum() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iRoleNum() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iRoleNum(int _iRoleNum){set_has_iRoleNum(); iRoleNum=_iRoleNum;}
	public int get_iRoleNum(){if (has_iRoleNum()) {return iRoleNum;} return 0;}

	public bool has_arrRoleID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_arrRoleID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_arrRoleID() {__orm_has_bits[0] &= ~(0x100u);}
	public long[] set_arrRoleID(){set_has_arrRoleID(); return arrRoleID;}
	public long[] get_arrRoleID(){return arrRoleID;}

	public bool has_arrPlayerIdx() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_arrPlayerIdx() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_arrPlayerIdx() {__orm_has_bits[0] &= ~(0x200u);}
	public int[] set_arrPlayerIdx(){set_has_arrPlayerIdx(); return arrPlayerIdx;}
	public int[] get_arrPlayerIdx(){return arrPlayerIdx;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
		if (has_iRoleNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iRoleNum);
		};
		if (has_arrRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iRoleNum();
			if (__orm_ReferVar > (int)TCONST.MAX_PERSON_IN_ROOM_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.MAX_PERSON_IN_ROOM_NUM) && (__orm_iLoopVar < iRoleNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrRoleID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrPlayerIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iRoleNum();
			if (__orm_ReferVar > (int)TCONST.MAX_PERSON_IN_ROOM_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.MAX_PERSON_IN_ROOM_NUM) && (__orm_iLoopVar < iRoleNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPlayerIdx[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
		if (has_iRoleNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iRoleNum);
		};
		if (has_arrRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iRoleNum();
			if (__orm_ReferVar > (int)TCONST.MAX_PERSON_IN_ROOM_NUM) {
				oPacker.PushFieldName("iRoleNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.MAX_PERSON_IN_ROOM_NUM) && (__orm_iLoopVar < iRoleNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrRoleID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrPlayerIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iRoleNum();
			if (__orm_ReferVar > (int)TCONST.MAX_PERSON_IN_ROOM_NUM) {
				oPacker.PushFieldName("iRoleNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.MAX_PERSON_IN_ROOM_NUM) && (__orm_iLoopVar < iRoleNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPlayerIdx[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iRoomID();
				iRoomID = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iRoleNum();
				iRoleNum = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_arrRoleID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iRoleNum=iRoleNum<__orm_iArrCount ? iRoleNum:(int)__orm_iArrCount;
				iRoleNum=iRoleNum<(int)TCONST.MAX_PERSON_IN_ROOM_NUM ? iRoleNum:(int)TCONST.MAX_PERSON_IN_ROOM_NUM;
				if (iRoleNum > (int)TCONST.MAX_PERSON_IN_ROOM_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iRoleNum; ++__orm_iLoopVar) {
					arrRoleID[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			case 9: {
				set_has_arrPlayerIdx();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iRoleNum=iRoleNum<__orm_iArrCount ? iRoleNum:(int)__orm_iArrCount;
				iRoleNum=iRoleNum<(int)TCONST.MAX_PERSON_IN_ROOM_NUM ? iRoleNum:(int)TCONST.MAX_PERSON_IN_ROOM_NUM;
				if (iRoleNum > (int)TCONST.MAX_PERSON_IN_ROOM_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iRoleNum; ++__orm_iLoopVar) {
					arrPlayerIdx[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 进入房间req
public class TMSG_ROOM_USER_ENTER_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iRoomID;   // id, 取值 [1, MAX_ROOM_NUM]  


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRoomID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRoomID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRoomID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRoomID(int _iRoomID){set_has_iRoomID(); iRoomID=_iRoomID;}
	public int get_iRoomID(){if (has_iRoomID()) {return iRoomID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iRoomID();
				iRoomID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_ROOM_USER_ENTER_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private TGameRoom stRoomInfo = new TGameRoom();   // 
	private long i64SelfRoleID;   //自己的roleid
	private int iPlayerIdx;   //进入房间序号, 从0开始自增, 重进房间不重用. 


	public const int MAX_PACKEDSIZE = 1062;

	public void init() {
		__orm_has_bits[0]=0;
		stRoomInfo.init();
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_stRoomInfo() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_stRoomInfo() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_stRoomInfo() {__orm_has_bits[0] &= ~(0x10u);}
	public TGameRoom set_stRoomInfo(){set_has_stRoomInfo(); return stRoomInfo;}
	public TGameRoom get_stRoomInfo(){return stRoomInfo;}

	public bool has_i64SelfRoleID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_i64SelfRoleID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_i64SelfRoleID() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_i64SelfRoleID(long _i64SelfRoleID){set_has_i64SelfRoleID(); i64SelfRoleID=_i64SelfRoleID;}
	public long get_i64SelfRoleID(){if (has_i64SelfRoleID()) {return i64SelfRoleID;} return 0;}

	public bool has_iPlayerIdx() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iPlayerIdx() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iPlayerIdx() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iPlayerIdx(int _iPlayerIdx){set_has_iPlayerIdx(); iPlayerIdx=_iPlayerIdx;}
	public int get_iPlayerIdx(){if (has_iPlayerIdx()) {return iPlayerIdx;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_stRoomInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stRoomInfo.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64SelfRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(i64SelfRoleID);
		};
		if (has_iPlayerIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iPlayerIdx);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_stRoomInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stRoomInfo");
			stRoomInfo.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64SelfRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(i64SelfRoleID);
		};
		if (has_iPlayerIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iPlayerIdx);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_stRoomInfo();
				stRoomInfo.Unpack(oPacker);
			}break;
			case 5: {
				set_has_i64SelfRoleID();
				i64SelfRoleID = oPacker.ReadVarintINT64();
			}break;
			case 6: {
				set_has_iPlayerIdx();
				iPlayerIdx = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 进入房间完成
public class TMSG_ROOM_USER_ENTER_COMPLETE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long i64SelfRoleID;   //自己的roleid
	private int iPlayerIdx;   //进入房间序号, 从0开始自增, 重进房间不重用. 


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_i64SelfRoleID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_i64SelfRoleID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_i64SelfRoleID() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_i64SelfRoleID(long _i64SelfRoleID){set_has_i64SelfRoleID(); i64SelfRoleID=_i64SelfRoleID;}
	public long get_i64SelfRoleID(){if (has_i64SelfRoleID()) {return i64SelfRoleID;} return 0;}

	public bool has_iPlayerIdx() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iPlayerIdx() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iPlayerIdx() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iPlayerIdx(int _iPlayerIdx){set_has_iPlayerIdx(); iPlayerIdx=_iPlayerIdx;}
	public int get_iPlayerIdx(){if (has_iPlayerIdx()) {return iPlayerIdx;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64SelfRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(i64SelfRoleID);
		};
		if (has_iPlayerIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iPlayerIdx);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64SelfRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(i64SelfRoleID);
		};
		if (has_iPlayerIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iPlayerIdx);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 5: {
				set_has_i64SelfRoleID();
				i64SelfRoleID = oPacker.ReadVarintINT64();
			}break;
			case 6: {
				set_has_iPlayerIdx();
				iPlayerIdx = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_ROOM_USER_ENTER_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iRoomID;   // 
	private long i64RoleID;   //用户id
	private int iPlayerIdx;   //用户序号, 从0开始自增,不重用. 


	public const int MAX_PACKEDSIZE = 40;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRoomID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRoomID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRoomID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRoomID(int _iRoomID){set_has_iRoomID(); iRoomID=_iRoomID;}
	public int get_iRoomID(){if (has_iRoomID()) {return iRoomID;} return 0;}

	public bool has_i64RoleID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_i64RoleID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_i64RoleID() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_i64RoleID(long _i64RoleID){set_has_i64RoleID(); i64RoleID=_i64RoleID;}
	public long get_i64RoleID(){if (has_i64RoleID()) {return i64RoleID;} return 0;}

	public bool has_iPlayerIdx() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_iPlayerIdx() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_iPlayerIdx() {__orm_has_bits[0] &= ~(0x200u);}
	public void set_iPlayerIdx(int _iPlayerIdx){set_has_iPlayerIdx(); iPlayerIdx=_iPlayerIdx;}
	public int get_iPlayerIdx(){if (has_iPlayerIdx()) {return iPlayerIdx;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_iPlayerIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iPlayerIdx);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_iPlayerIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iPlayerIdx);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iRoomID();
				iRoomID = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_i64RoleID();
				i64RoleID = oPacker.ReadVarintINT64();
			}break;
			case 9: {
				set_has_iPlayerIdx();
				iPlayerIdx = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 离开房间req
public class TMSG_ROOM_USER_LEAVE_REQ
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_ROOM_USER_LEAVE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private int iRoomID;   //


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iRoomID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRoomID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRoomID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRoomID(int _iRoomID){set_has_iRoomID(); iRoomID=_iRoomID;}
	public int get_iRoomID(){if (has_iRoomID()) {return iRoomID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iRoomID();
				iRoomID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_ROOM_USER_LEAVE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iRoomID;   //id 
	private long i64RoleID;   //角色id


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRoomID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRoomID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRoomID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRoomID(int _iRoomID){set_has_iRoomID(); iRoomID=_iRoomID;}
	public int get_iRoomID(){if (has_iRoomID()) {return iRoomID;} return 0;}

	public bool has_i64RoleID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_i64RoleID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_i64RoleID() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_i64RoleID(long _i64RoleID){set_has_i64RoleID(); i64RoleID=_i64RoleID;}
	public long get_i64RoleID(){if (has_i64RoleID()) {return i64RoleID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iRoomID();
				iRoomID = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_i64RoleID();
				i64RoleID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 查找房间req
public class TMSG_ROOM_SEARCH_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iSearchType;   //查找类型.   0, 无效;  1, 按人数查找;  
	private int iRoleNumVal;   //角色数量
	private string szRoleLogicOperator;   //角色数量操作符,   >, <, ==, !=, ...


	public const int MAX_PACKEDSIZE = 38;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iSearchType() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iSearchType() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iSearchType() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iSearchType(int _iSearchType){set_has_iSearchType(); iSearchType=_iSearchType;}
	public int get_iSearchType(){if (has_iSearchType()) {return iSearchType;} return 0;}

	public bool has_iRoleNumVal() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iRoleNumVal() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iRoleNumVal() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iRoleNumVal(int _iRoleNumVal){set_has_iRoleNumVal(); iRoleNumVal=_iRoleNumVal;}
	public int get_iRoleNumVal(){if (has_iRoleNumVal()) {return iRoleNumVal;} return 0;}

	public bool has_szRoleLogicOperator() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_szRoleLogicOperator() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_szRoleLogicOperator() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_szRoleLogicOperator(string _szRoleLogicOperator){set_has_szRoleLogicOperator(); szRoleLogicOperator=_szRoleLogicOperator;}
	public string get_szRoleLogicOperator(){if (has_szRoleLogicOperator()) {return szRoleLogicOperator;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSearchType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iSearchType);
		};
		if (has_iRoleNumVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iRoleNumVal);
		};
		if (has_szRoleLogicOperator()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,3));  // f id
			oPacker.WriteSTRING(szRoleLogicOperator);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSearchType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iSearchType);
		};
		if (has_iRoleNumVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iRoleNumVal);
		};
		if (has_szRoleLogicOperator()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,3));  // f id
			oPacker.WriteSTRING(szRoleLogicOperator);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iSearchType();
				iSearchType = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iRoleNumVal();
				iRoleNumVal = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_szRoleLogicOperator();
				szRoleLogicOperator = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_ROOM_SEARCH_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private int iRoomID;   //


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iRoomID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRoomID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRoomID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRoomID(int _iRoomID){set_has_iRoomID(); iRoomID=_iRoomID;}
	public int get_iRoomID(){if (has_iRoomID()) {return iRoomID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iRoomID();
				iRoomID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 获取房间信息req
public class TMSG_ROOM_GET_ROOMDESC_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iRoomID;   // 


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRoomID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRoomID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRoomID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRoomID(int _iRoomID){set_has_iRoomID(); iRoomID=_iRoomID;}
	public int get_iRoomID(){if (has_iRoomID()) {return iRoomID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iRoomID();
				iRoomID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_ROOM_GET_ROOMDESC_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private TGameRoom stRoomInfo = new TGameRoom();   // 


	public const int MAX_PACKEDSIZE = 1037;

	public void init() {
		__orm_has_bits[0]=0;
		stRoomInfo.init();
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_stRoomInfo() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_stRoomInfo() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_stRoomInfo() {__orm_has_bits[0] &= ~(0x20u);}
	public TGameRoom set_stRoomInfo(){set_has_stRoomInfo(); return stRoomInfo;}
	public TGameRoom get_stRoomInfo(){return stRoomInfo;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_stRoomInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stRoomInfo.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_stRoomInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stRoomInfo");
			stRoomInfo.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_stRoomInfo();
				stRoomInfo.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 数据集
public class TAbsValue
{
	private uint[] __orm_has_bits = new uint[1];
	private long iVal;   //整形数值
	private float fVal;   //浮点数值
	private string sVal;   //字符串
	private TVector3 vec3 = new TVector3();   //3d
	private byte iIntValNum;   //Int数组长度
	private int[] arrIntVal = new int[(int)TCONST.PROP_VAL_ARR_LEN];   //整形数组
	private byte iFloatValNum;   //Float数组长度
	private float[] arrFloatVal = new float[(int)TCONST.PROP_VAL_ARR_LEN];   //浮点数组

	public const int countof_arrIntVal = (int)TCONST.PROP_VAL_ARR_LEN;
	public const int countof_arrFloatVal = (int)TCONST.PROP_VAL_ARR_LEN;

	public const int MAX_PACKEDSIZE = 1019;

	public void init() {
		__orm_has_bits[0]=0;
		vec3.init();
	}
	public bool has_iVal() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iVal() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iVal() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iVal(long _iVal){set_has_iVal(); iVal=_iVal;}
	public long get_iVal(){if (has_iVal()) {return iVal;} return 0;}

	public bool has_fVal() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_fVal() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_fVal() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_fVal(float _fVal){set_has_fVal(); fVal=_fVal;}
	public float get_fVal(){if (has_fVal()) {return fVal;} return 0;}

	public bool has_sVal() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_sVal() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_sVal() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_sVal(string _sVal){set_has_sVal(); sVal=_sVal;}
	public string get_sVal(){if (has_sVal()) {return sVal;} return "";}

	public bool has_vec3() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_vec3() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_vec3() {__orm_has_bits[0] &= ~(0x10u);}
	public TVector3 set_vec3(){set_has_vec3(); return vec3;}
	public TVector3 get_vec3(){return vec3;}

	public bool has_iIntValNum() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iIntValNum() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iIntValNum() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iIntValNum(byte _iIntValNum){set_has_iIntValNum(); iIntValNum=_iIntValNum;}
	public byte get_iIntValNum(){if (has_iIntValNum()) {return iIntValNum;} return 0;}

	public bool has_arrIntVal() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_arrIntVal() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_arrIntVal() {__orm_has_bits[0] &= ~(0x40u);}
	public int[] set_arrIntVal(){set_has_arrIntVal(); return arrIntVal;}
	public int[] get_arrIntVal(){return arrIntVal;}

	public bool has_iFloatValNum() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iFloatValNum() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iFloatValNum() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iFloatValNum(byte _iFloatValNum){set_has_iFloatValNum(); iFloatValNum=_iFloatValNum;}
	public byte get_iFloatValNum(){if (has_iFloatValNum()) {return iFloatValNum;} return 0;}

	public bool has_arrFloatVal() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_arrFloatVal() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_arrFloatVal() {__orm_has_bits[0] &= ~(0x100u);}
	public float[] set_arrFloatVal(){set_has_arrFloatVal(); return arrFloatVal;}
	public float[] get_arrFloatVal(){return arrFloatVal;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iVal);
		};
		if (has_fVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteFLOAT(fVal);
		};
		if (has_sVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(sVal);
		};
		if (has_vec3()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			vec3.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iIntValNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,2));  // f id
			oPacker.WriteUINT8(iIntValNum);
		};
		if (has_arrIntVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iIntValNum();
			if (__orm_ReferVar > (int)TCONST.PROP_VAL_ARR_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.PROP_VAL_ARR_LEN) && (__orm_iLoopVar < iIntValNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrIntVal[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iFloatValNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteUINT8(iFloatValNum);
		};
		if (has_arrFloatVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iFloatValNum();
			if (__orm_ReferVar > (int)TCONST.PROP_VAL_ARR_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.PROP_VAL_ARR_LEN) && (__orm_iLoopVar < iFloatValNum); ++__orm_iLoopVar) {
		    oPacker.WriteFLOAT(arrFloatVal[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iVal);
		};
		if (has_fVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteFLOAT(fVal);
		};
		if (has_sVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(sVal);
		};
		if (has_vec3()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("vec3");
			vec3.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iIntValNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,2));  // f id
			oPacker.WriteUINT8(iIntValNum);
		};
		if (has_arrIntVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iIntValNum();
			if (__orm_ReferVar > (int)TCONST.PROP_VAL_ARR_LEN) {
				oPacker.PushFieldName("iIntValNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.PROP_VAL_ARR_LEN) && (__orm_iLoopVar < iIntValNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrIntVal[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iFloatValNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteUINT8(iFloatValNum);
		};
		if (has_arrFloatVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iFloatValNum();
			if (__orm_ReferVar > (int)TCONST.PROP_VAL_ARR_LEN) {
				oPacker.PushFieldName("iFloatValNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.PROP_VAL_ARR_LEN) && (__orm_iLoopVar < iFloatValNum); ++__orm_iLoopVar) {
		    oPacker.WriteFLOAT(arrFloatVal[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iVal();
				iVal = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_fVal();
				fVal = oPacker.ReadFLOAT();
			}break;
			case 3: {
				set_has_sVal();
				sVal = oPacker.ReadSTRING();
			}break;
			case 4: {
				set_has_vec3();
				vec3.Unpack(oPacker);
			}break;
			case 5: {
				set_has_iIntValNum();
				iIntValNum = oPacker.ReadUINT8();
			}break;
			case 6: {
				set_has_arrIntVal();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iIntValNum=iIntValNum<__orm_iArrCount ? iIntValNum:(byte)__orm_iArrCount;
				iIntValNum=iIntValNum<(byte)TCONST.PROP_VAL_ARR_LEN ? iIntValNum:(byte)TCONST.PROP_VAL_ARR_LEN;
				if (iIntValNum > (int)TCONST.PROP_VAL_ARR_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iIntValNum; ++__orm_iLoopVar) {
					arrIntVal[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 7: {
				set_has_iFloatValNum();
				iFloatValNum = oPacker.ReadUINT8();
			}break;
			case 8: {
				set_has_arrFloatVal();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iFloatValNum=iFloatValNum<__orm_iArrCount ? iFloatValNum:(byte)__orm_iArrCount;
				iFloatValNum=iFloatValNum<(byte)TCONST.PROP_VAL_ARR_LEN ? iFloatValNum:(byte)TCONST.PROP_VAL_ARR_LEN;
				if (iFloatValNum > (int)TCONST.PROP_VAL_ARR_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iFloatValNum; ++__orm_iLoopVar) {
					arrFloatVal[__orm_iLoopVar] = oPacker.ReadFLOAT();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 属性集
public class TPropertySet
{
	private uint[] __orm_has_bits = new uint[1];
	private int iBookID;   //属性集的id
	private int iNum;   //属性数量
	private int[] arrID = new int[(int)TCONST.PROP_NUM_IN_BATCH];   //属性id
	private TAbsValue[] arrVal = new TAbsValue[(int)TCONST.PROP_NUM_IN_BATCH];   //val
	public TPropertySet() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.PROP_NUM_IN_BATCH; ++__orm_iLoopVar) {
			arrVal[__orm_iLoopVar] = new TAbsValue();
		}
	}

	public const int countof_arrID = (int)TCONST.PROP_NUM_IN_BATCH;
	public const int countof_arrVal = (int)TCONST.PROP_NUM_IN_BATCH;

	public const int MAX_PACKEDSIZE = 262197;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.PROP_NUM_IN_BATCH; ++__orm_iLoopVar){arrVal[__orm_iLoopVar].init();}
	}
	public bool has_iBookID() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iBookID() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iBookID() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iBookID(int _iBookID){set_has_iBookID(); iBookID=_iBookID;}
	public int get_iBookID(){if (has_iBookID()) {return iBookID;} return 0;}

	public bool has_iNum() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iNum() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iNum() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iNum(int _iNum){set_has_iNum(); iNum=_iNum;}
	public int get_iNum(){if (has_iNum()) {return iNum;} return 0;}

	public bool has_arrID() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_arrID() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_arrID() {__orm_has_bits[0] &= ~(0x4000u);}
	public int[] set_arrID(){set_has_arrID(); return arrID;}
	public int[] get_arrID(){return arrID;}

	public bool has_arrVal() {return (__orm_has_bits[0] & 0x8000u) != 0;}
	public void set_has_arrVal() {__orm_has_bits[0] |= 0x8000u;}
	public void clear_has_arrVal() {__orm_has_bits[0] &= ~(0x8000u);}
	public TAbsValue[] set_arrVal(){set_has_arrVal(); return arrVal;}
	public TAbsValue[] get_arrVal(){return arrVal;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iBookID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iBookID);
		};
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
		if (has_arrID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)TCONST.PROP_NUM_IN_BATCH) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.PROP_NUM_IN_BATCH) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)TCONST.PROP_NUM_IN_BATCH) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.PROP_NUM_IN_BATCH) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
				arrVal[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iBookID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iBookID);
		};
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
		if (has_arrID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)TCONST.PROP_NUM_IN_BATCH) {
				oPacker.PushFieldName("iNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.PROP_NUM_IN_BATCH) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)TCONST.PROP_NUM_IN_BATCH) {
				oPacker.PushFieldName("iNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.PROP_NUM_IN_BATCH) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrVal[{0}]", __orm_iLoopVar);
				arrVal[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 10: {
				set_has_iBookID();
				iBookID = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_iNum();
				iNum = oPacker.ReadVarintINT32();
			}break;
			case 14: {
				set_has_arrID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iNum=iNum<__orm_iArrCount ? iNum:(int)__orm_iArrCount;
				iNum=iNum<(int)TCONST.PROP_NUM_IN_BATCH ? iNum:(int)TCONST.PROP_NUM_IN_BATCH;
				if (iNum > (int)TCONST.PROP_NUM_IN_BATCH) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iNum; ++__orm_iLoopVar) {
					arrID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 15: {
				set_has_arrVal();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iNum=iNum<__orm_iArrCount ? iNum:(int)__orm_iArrCount;
				iNum=iNum<(int)TCONST.PROP_NUM_IN_BATCH ? iNum:(int)TCONST.PROP_NUM_IN_BATCH;
				if (iNum > (int)TCONST.PROP_NUM_IN_BATCH) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iNum; ++__orm_iLoopVar) {
					arrVal[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 设置属性req
public class TMSG_MINIGAME_SET_PROP_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iType;   //取值于EnPropType
	private long i64RoleID;   //仅在enPT_Role 时有效
	private TPropertySet stProperty = new TPropertySet();   //属性数据
	private sbyte bCheckVer;   //是否检查版本号
	private long iClientVer;   //bCheckVer为true时, 需要填写
	private string szPassback;   //透传


	public const int MAX_PACKEDSIZE = 262391;

	public void init() {
		__orm_has_bits[0]=0;
		stProperty.init();
	}
	public bool has_iType() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iType() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iType() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iType(sbyte _iType){set_has_iType(); iType=_iType;}
	public sbyte get_iType(){if (has_iType()) {return iType;} return 0;}

	public bool has_i64RoleID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_i64RoleID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_i64RoleID() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_i64RoleID(long _i64RoleID){set_has_i64RoleID(); i64RoleID=_i64RoleID;}
	public long get_i64RoleID(){if (has_i64RoleID()) {return i64RoleID;} return 0;}

	public bool has_stProperty() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_stProperty() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_stProperty() {__orm_has_bits[0] &= ~(0x200u);}
	public TPropertySet set_stProperty(){set_has_stProperty(); return stProperty;}
	public TPropertySet get_stProperty(){return stProperty;}

	public bool has_bCheckVer() {return (__orm_has_bits[0] & 0x100000u) != 0;}
	public void set_has_bCheckVer() {__orm_has_bits[0] |= 0x100000u;}
	public void clear_has_bCheckVer() {__orm_has_bits[0] &= ~(0x100000u);}
	public void set_bCheckVer(sbyte _bCheckVer){set_has_bCheckVer(); bCheckVer=_bCheckVer;}
	public sbyte get_bCheckVer(){if (has_bCheckVer()) {return bCheckVer;} return 0;}

	public bool has_iClientVer() {return (__orm_has_bits[0] & 0x200000u) != 0;}
	public void set_has_iClientVer() {__orm_has_bits[0] |= 0x200000u;}
	public void clear_has_iClientVer() {__orm_has_bits[0] &= ~(0x200000u);}
	public void set_iClientVer(long _iClientVer){set_has_iClientVer(); iClientVer=_iClientVer;}
	public long get_iClientVer(){if (has_iClientVer()) {return iClientVer;} return 0;}

	public bool has_szPassback() {return (__orm_has_bits[0] & 0x40000000u) != 0;}
	public void set_has_szPassback() {__orm_has_bits[0] |= 0x40000000u;}
	public void clear_has_szPassback() {__orm_has_bits[0] &= ~(0x40000000u);}
	public void set_szPassback(string _szPassback){set_has_szPassback(); szPassback=_szPassback;}
	public string get_szPassback(){if (has_szPassback()) {return szPassback;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iType);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_stProperty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stProperty.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bCheckVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(20,2));  // f id
			oPacker.WriteINT8(bCheckVer);
		};
		if (has_iClientVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(21,0));  // f id
			oPacker.WriteVarintINT64(iClientVer);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iType);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_stProperty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stProperty");
			stProperty.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bCheckVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(20,2));  // f id
			oPacker.WriteINT8(bCheckVer);
		};
		if (has_iClientVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(21,0));  // f id
			oPacker.WriteVarintINT64(iClientVer);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iType();
				iType = oPacker.ReadINT8();
			}break;
			case 8: {
				set_has_i64RoleID();
				i64RoleID = oPacker.ReadVarintINT64();
			}break;
			case 9: {
				set_has_stProperty();
				stProperty.Unpack(oPacker);
			}break;
			case 20: {
				set_has_bCheckVer();
				bCheckVer = oPacker.ReadINT8();
			}break;
			case 21: {
				set_has_iClientVer();
				iClientVer = oPacker.ReadVarintINT64();
			}break;
			case 30: {
				set_has_szPassback();
				szPassback = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_MINIGAME_SET_PROP_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private sbyte iType;   //取值于EnPropType
	private long i64RoleID;   //仅在enPT_Role 时有效
	private TPropertySet stProperty = new TPropertySet();   //属性数据. 如果修改不成功, 本值无效
	private long iVer;   //数据集新版本号
	private string szPassback;   //透传


	public const int MAX_PACKEDSIZE = 262395;

	public void init() {
		__orm_has_bits[0]=0;
		stProperty.init();
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iType() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iType() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iType() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iType(sbyte _iType){set_has_iType(); iType=_iType;}
	public sbyte get_iType(){if (has_iType()) {return iType;} return 0;}

	public bool has_i64RoleID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_i64RoleID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_i64RoleID() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_i64RoleID(long _i64RoleID){set_has_i64RoleID(); i64RoleID=_i64RoleID;}
	public long get_i64RoleID(){if (has_i64RoleID()) {return i64RoleID;} return 0;}

	public bool has_stProperty() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_stProperty() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_stProperty() {__orm_has_bits[0] &= ~(0x200u);}
	public TPropertySet set_stProperty(){set_has_stProperty(); return stProperty;}
	public TPropertySet get_stProperty(){return stProperty;}

	public bool has_iVer() {return (__orm_has_bits[0] & 0x200000u) != 0;}
	public void set_has_iVer() {__orm_has_bits[0] |= 0x200000u;}
	public void clear_has_iVer() {__orm_has_bits[0] &= ~(0x200000u);}
	public void set_iVer(long _iVer){set_has_iVer(); iVer=_iVer;}
	public long get_iVer(){if (has_iVer()) {return iVer;} return 0;}

	public bool has_szPassback() {return (__orm_has_bits[0] & 0x40000000u) != 0;}
	public void set_has_szPassback() {__orm_has_bits[0] |= 0x40000000u;}
	public void clear_has_szPassback() {__orm_has_bits[0] &= ~(0x40000000u);}
	public void set_szPassback(string _szPassback){set_has_szPassback(); szPassback=_szPassback;}
	public string get_szPassback(){if (has_szPassback()) {return szPassback;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iType);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_stProperty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stProperty.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(21,0));  // f id
			oPacker.WriteVarintINT64(iVer);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iType);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_stProperty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stProperty");
			stProperty.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(21,0));  // f id
			oPacker.WriteVarintINT64(iVer);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iType();
				iType = oPacker.ReadINT8();
			}break;
			case 8: {
				set_has_i64RoleID();
				i64RoleID = oPacker.ReadVarintINT64();
			}break;
			case 9: {
				set_has_stProperty();
				stProperty.Unpack(oPacker);
			}break;
			case 21: {
				set_has_iVer();
				iVer = oPacker.ReadVarintINT64();
			}break;
			case 30: {
				set_has_szPassback();
				szPassback = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 获取属性req
public class TMSG_MINIGAME_GET_PROP_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iType;   //取值于EnPropType
	private long i64RoleID;   //仅在enPT_Role 时有效
	private string szPassback;   //透传


	public const int MAX_PACKEDSIZE = 164;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iType() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iType() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iType() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iType(sbyte _iType){set_has_iType(); iType=_iType;}
	public sbyte get_iType(){if (has_iType()) {return iType;} return 0;}

	public bool has_i64RoleID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_i64RoleID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_i64RoleID() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_i64RoleID(long _i64RoleID){set_has_i64RoleID(); i64RoleID=_i64RoleID;}
	public long get_i64RoleID(){if (has_i64RoleID()) {return i64RoleID;} return 0;}

	public bool has_szPassback() {return (__orm_has_bits[0] & 0x40000000u) != 0;}
	public void set_has_szPassback() {__orm_has_bits[0] |= 0x40000000u;}
	public void clear_has_szPassback() {__orm_has_bits[0] &= ~(0x40000000u);}
	public void set_szPassback(string _szPassback){set_has_szPassback(); szPassback=_szPassback;}
	public string get_szPassback(){if (has_szPassback()) {return szPassback;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iType);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iType);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iType();
				iType = oPacker.ReadINT8();
			}break;
			case 8: {
				set_has_i64RoleID();
				i64RoleID = oPacker.ReadVarintINT64();
			}break;
			case 30: {
				set_has_szPassback();
				szPassback = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_MINIGAME_GET_PROP_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //always 0
	private sbyte iType;   //取值于EnPropType
	private long i64RoleID;   //仅在enPT_Role 时有效
	private string szPassback;   //透传


	public const int MAX_PACKEDSIZE = 174;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iType() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iType() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iType() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iType(sbyte _iType){set_has_iType(); iType=_iType;}
	public sbyte get_iType(){if (has_iType()) {return iType;} return 0;}

	public bool has_i64RoleID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_i64RoleID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_i64RoleID() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_i64RoleID(long _i64RoleID){set_has_i64RoleID(); i64RoleID=_i64RoleID;}
	public long get_i64RoleID(){if (has_i64RoleID()) {return i64RoleID;} return 0;}

	public bool has_szPassback() {return (__orm_has_bits[0] & 0x40000000u) != 0;}
	public void set_has_szPassback() {__orm_has_bits[0] |= 0x40000000u;}
	public void clear_has_szPassback() {__orm_has_bits[0] &= ~(0x40000000u);}
	public void set_szPassback(string _szPassback){set_has_szPassback(); szPassback=_szPassback;}
	public string get_szPassback(){if (has_szPassback()) {return szPassback;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iType);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iType);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iType();
				iType = oPacker.ReadINT8();
			}break;
			case 8: {
				set_has_i64RoleID();
				i64RoleID = oPacker.ReadVarintINT64();
			}break;
			case 30: {
				set_has_szPassback();
				szPassback = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 属性变更通知
public class TMSG_MINIGAME_PROP_UPDATED_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iType;   //取值于EnPropType
	private long iOwnerRoleID;   //仅在enPT_Role 时有效
	private TPropertySet stProperty = new TPropertySet();   //属性数据
	private long iVer;   //数据集新版本号
	private long iModifier;   //修改者的roleid
	private string szPassback;   //透传


	public const int MAX_PACKEDSIZE = 262400;

	public void init() {
		__orm_has_bits[0]=0;
		stProperty.init();
	}
	public bool has_iType() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iType() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iType() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iType(sbyte _iType){set_has_iType(); iType=_iType;}
	public sbyte get_iType(){if (has_iType()) {return iType;} return 0;}

	public bool has_iOwnerRoleID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iOwnerRoleID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iOwnerRoleID() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iOwnerRoleID(long _iOwnerRoleID){set_has_iOwnerRoleID(); iOwnerRoleID=_iOwnerRoleID;}
	public long get_iOwnerRoleID(){if (has_iOwnerRoleID()) {return iOwnerRoleID;} return 0;}

	public bool has_stProperty() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_stProperty() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_stProperty() {__orm_has_bits[0] &= ~(0x200u);}
	public TPropertySet set_stProperty(){set_has_stProperty(); return stProperty;}
	public TPropertySet get_stProperty(){return stProperty;}

	public bool has_iVer() {return (__orm_has_bits[0] & 0x200000u) != 0;}
	public void set_has_iVer() {__orm_has_bits[0] |= 0x200000u;}
	public void clear_has_iVer() {__orm_has_bits[0] &= ~(0x200000u);}
	public void set_iVer(long _iVer){set_has_iVer(); iVer=_iVer;}
	public long get_iVer(){if (has_iVer()) {return iVer;} return 0;}

	public bool has_iModifier() {return (__orm_has_bits[0] & 0x800000u) != 0;}
	public void set_has_iModifier() {__orm_has_bits[0] |= 0x800000u;}
	public void clear_has_iModifier() {__orm_has_bits[0] &= ~(0x800000u);}
	public void set_iModifier(long _iModifier){set_has_iModifier(); iModifier=_iModifier;}
	public long get_iModifier(){if (has_iModifier()) {return iModifier;} return 0;}

	public bool has_szPassback() {return (__orm_has_bits[0] & 0x40000000u) != 0;}
	public void set_has_szPassback() {__orm_has_bits[0] |= 0x40000000u;}
	public void clear_has_szPassback() {__orm_has_bits[0] &= ~(0x40000000u);}
	public void set_szPassback(string _szPassback){set_has_szPassback(); szPassback=_szPassback;}
	public string get_szPassback(){if (has_szPassback()) {return szPassback;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iType);
		};
		if (has_iOwnerRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(iOwnerRoleID);
		};
		if (has_stProperty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stProperty.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(21,0));  // f id
			oPacker.WriteVarintINT64(iVer);
		};
		if (has_iModifier()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(23,0));  // f id
			oPacker.WriteVarintINT64(iModifier);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iType);
		};
		if (has_iOwnerRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(iOwnerRoleID);
		};
		if (has_stProperty()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stProperty");
			stProperty.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(21,0));  // f id
			oPacker.WriteVarintINT64(iVer);
		};
		if (has_iModifier()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(23,0));  // f id
			oPacker.WriteVarintINT64(iModifier);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iType();
				iType = oPacker.ReadINT8();
			}break;
			case 8: {
				set_has_iOwnerRoleID();
				iOwnerRoleID = oPacker.ReadVarintINT64();
			}break;
			case 9: {
				set_has_stProperty();
				stProperty.Unpack(oPacker);
			}break;
			case 21: {
				set_has_iVer();
				iVer = oPacker.ReadVarintINT64();
			}break;
			case 23: {
				set_has_iModifier();
				iModifier = oPacker.ReadVarintINT64();
			}break;
			case 30: {
				set_has_szPassback();
				szPassback = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// (复位)清除房间属性
public class TMSG_MINIGAME_RESET_ROOM_PROP_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iRoomID;   //取值于EnPropType
	private sbyte bPropertySet;   //是否清除属性集
	private sbyte bNetObj;   //是否清除netobj


	public const int MAX_PACKEDSIZE = 27;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRoomID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRoomID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRoomID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRoomID(int _iRoomID){set_has_iRoomID(); iRoomID=_iRoomID;}
	public int get_iRoomID(){if (has_iRoomID()) {return iRoomID;} return 0;}

	public bool has_bPropertySet() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_bPropertySet() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_bPropertySet() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_bPropertySet(sbyte _bPropertySet){set_has_bPropertySet(); bPropertySet=_bPropertySet;}
	public sbyte get_bPropertySet(){if (has_bPropertySet()) {return bPropertySet;} return 0;}

	public bool has_bNetObj() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_bNetObj() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_bNetObj() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_bNetObj(sbyte _bNetObj){set_has_bNetObj(); bNetObj=_bNetObj;}
	public sbyte get_bNetObj(){if (has_bNetObj()) {return bNetObj;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
		if (has_bPropertySet()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteINT8(bPropertySet);
		};
		if (has_bNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteINT8(bNetObj);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
		if (has_bPropertySet()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteINT8(bPropertySet);
		};
		if (has_bNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteINT8(bNetObj);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iRoomID();
				iRoomID = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_bPropertySet();
				bPropertySet = oPacker.ReadINT8();
			}break;
			case 7: {
				set_has_bNetObj();
				bNetObj = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_MINIGAME_RESET_ROOM_PROP_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //always 0
	private int iRoomID;   //
	private sbyte bPropertySet;   //是否清除属性集
	private sbyte bNetObj;   //是否清除netobj


	public const int MAX_PACKEDSIZE = 37;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iRoomID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRoomID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRoomID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRoomID(int _iRoomID){set_has_iRoomID(); iRoomID=_iRoomID;}
	public int get_iRoomID(){if (has_iRoomID()) {return iRoomID;} return 0;}

	public bool has_bPropertySet() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_bPropertySet() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_bPropertySet() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_bPropertySet(sbyte _bPropertySet){set_has_bPropertySet(); bPropertySet=_bPropertySet;}
	public sbyte get_bPropertySet(){if (has_bPropertySet()) {return bPropertySet;} return 0;}

	public bool has_bNetObj() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_bNetObj() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_bNetObj() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_bNetObj(sbyte _bNetObj){set_has_bNetObj(); bNetObj=_bNetObj;}
	public sbyte get_bNetObj(){if (has_bNetObj()) {return bNetObj;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
		if (has_bPropertySet()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteINT8(bPropertySet);
		};
		if (has_bNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteINT8(bNetObj);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRoomID);
		};
		if (has_bPropertySet()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteINT8(bPropertySet);
		};
		if (has_bNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteINT8(bNetObj);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iRoomID();
				iRoomID = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_bPropertySet();
				bPropertySet = oPacker.ReadINT8();
			}break;
			case 7: {
				set_has_bNetObj();
				bNetObj = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 客户端收到这个消息后, 应该将本地数据删除掉
public class TMSG_MINIGAME_RESET_ROOM_PROP_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iRoomID;   //取值于EnPropType
	private sbyte bPropertySet;   //是否清除属性集
	private sbyte bNetObj;   //是否清除netobj


	public const int MAX_PACKEDSIZE = 23;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRoomID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRoomID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRoomID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRoomID(sbyte _iRoomID){set_has_iRoomID(); iRoomID=_iRoomID;}
	public sbyte get_iRoomID(){if (has_iRoomID()) {return iRoomID;} return 0;}

	public bool has_bPropertySet() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_bPropertySet() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_bPropertySet() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_bPropertySet(sbyte _bPropertySet){set_has_bPropertySet(); bPropertySet=_bPropertySet;}
	public sbyte get_bPropertySet(){if (has_bPropertySet()) {return bPropertySet;} return 0;}

	public bool has_bNetObj() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_bNetObj() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_bNetObj() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_bNetObj(sbyte _bNetObj){set_has_bNetObj(); bNetObj=_bNetObj;}
	public sbyte get_bNetObj(){if (has_bNetObj()) {return bNetObj;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iRoomID);
		};
		if (has_bPropertySet()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteINT8(bPropertySet);
		};
		if (has_bNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteINT8(bNetObj);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoomID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iRoomID);
		};
		if (has_bPropertySet()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteINT8(bPropertySet);
		};
		if (has_bNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteINT8(bNetObj);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iRoomID();
				iRoomID = oPacker.ReadINT8();
			}break;
			case 6: {
				set_has_bPropertySet();
				bPropertySet = oPacker.ReadINT8();
			}break;
			case 7: {
				set_has_bNetObj();
				bNetObj = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 玩法消息广播
public class TMSG_MINIGAME_BROADCAST_MSG_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte bStart;   //
	private sbyte bEnd;   //打包后的玩法消息
	private int iLen;   //
	private byte[] arrPacked = new byte[(int)65536];   //打包后的玩法消息
	private sbyte bSendToSelf;   //上述消息是否需要发给自己

	public const int countof_arrPacked = (int)65536;

	public const int MAX_PACKEDSIZE = 65583;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_bStart() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_bStart() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_bStart() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_bStart(sbyte _bStart){set_has_bStart(); bStart=_bStart;}
	public sbyte get_bStart(){if (has_bStart()) {return bStart;} return 0;}

	public bool has_bEnd() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_bEnd() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_bEnd() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_bEnd(sbyte _bEnd){set_has_bEnd(); bEnd=_bEnd;}
	public sbyte get_bEnd(){if (has_bEnd()) {return bEnd;} return 0;}

	public bool has_iLen() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iLen() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iLen() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iLen(int _iLen){set_has_iLen(); iLen=_iLen;}
	public int get_iLen(){if (has_iLen()) {return iLen;} return 0;}

	public bool has_arrPacked() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_arrPacked() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_arrPacked() {__orm_has_bits[0] &= ~(0x100u);}
	public byte[] set_arrPacked(){set_has_arrPacked(); return arrPacked;}
	public byte[] get_arrPacked(){return arrPacked;}

	public bool has_bSendToSelf() {return (__orm_has_bits[0] & 0x200000u) != 0;}
	public void set_has_bSendToSelf() {__orm_has_bits[0] |= 0x200000u;}
	public void clear_has_bSendToSelf() {__orm_has_bits[0] &= ~(0x200000u);}
	public void set_bSendToSelf(sbyte _bSendToSelf){set_has_bSendToSelf(); bSendToSelf=_bSendToSelf;}
	public sbyte get_bSendToSelf(){if (has_bSendToSelf()) {return bSendToSelf;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bStart);
		};
		if (has_bEnd()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(bEnd);
		};
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iLen);
		};
		if (has_arrPacked()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)65536) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)65536) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrPacked[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bSendToSelf()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(21,2));  // f id
			oPacker.WriteINT8(bSendToSelf);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bStart);
		};
		if (has_bEnd()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(bEnd);
		};
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iLen);
		};
		if (has_arrPacked()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)65536) {
				oPacker.PushFieldName("iLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)65536) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrPacked[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bSendToSelf()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(21,2));  // f id
			oPacker.WriteINT8(bSendToSelf);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 3: {
				set_has_bStart();
				bStart = oPacker.ReadINT8();
			}break;
			case 4: {
				set_has_bEnd();
				bEnd = oPacker.ReadINT8();
			}break;
			case 6: {
				set_has_iLen();
				iLen = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_arrPacked();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iLen=iLen<__orm_iArrCount ? iLen:(int)__orm_iArrCount;
				iLen=iLen<(int)65536 ? iLen:(int)65536;
				if (iLen > (int)65536) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iLen; ++__orm_iLoopVar) {
					arrPacked[__orm_iLoopVar] = oPacker.ReadUINT8();
				};
			}break;
			case 21: {
				set_has_bSendToSelf();
				bSendToSelf = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_MINIGAME_BROADCAST_MSG_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //有房间的话, 总是成功


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_MINIGAME_BROADCAST_MSG_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iSender;   //发送者roleid
	private int bStart;   //
	private int bEnd;   //打包后的玩法消息
	private int iLen;   //
	private byte[] arrPacked = new byte[(int)65536];   //打包后的玩法消息

	public const int countof_arrPacked = (int)65536;

	public const int MAX_PACKEDSIZE = 65600;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iSender() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iSender() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iSender() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iSender(long _iSender){set_has_iSender(); iSender=_iSender;}
	public long get_iSender(){if (has_iSender()) {return iSender;} return 0;}

	public bool has_bStart() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_bStart() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_bStart() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_bStart(int _bStart){set_has_bStart(); bStart=_bStart;}
	public int get_bStart(){if (has_bStart()) {return bStart;} return 0;}

	public bool has_bEnd() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_bEnd() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_bEnd() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_bEnd(int _bEnd){set_has_bEnd(); bEnd=_bEnd;}
	public int get_bEnd(){if (has_bEnd()) {return bEnd;} return 0;}

	public bool has_iLen() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iLen() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iLen() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iLen(int _iLen){set_has_iLen(); iLen=_iLen;}
	public int get_iLen(){if (has_iLen()) {return iLen;} return 0;}

	public bool has_arrPacked() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_arrPacked() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_arrPacked() {__orm_has_bits[0] &= ~(0x100u);}
	public byte[] set_arrPacked(){set_has_arrPacked(); return arrPacked;}
	public byte[] get_arrPacked(){return arrPacked;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSender()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iSender);
		};
		if (has_bStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(bStart);
		};
		if (has_bEnd()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(bEnd);
		};
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iLen);
		};
		if (has_arrPacked()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)65536) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)65536) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrPacked[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSender()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iSender);
		};
		if (has_bStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(bStart);
		};
		if (has_bEnd()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(bEnd);
		};
		if (has_iLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iLen);
		};
		if (has_arrPacked()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iLen();
			if (__orm_ReferVar > (int)65536) {
				oPacker.PushFieldName("iLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)65536) && (__orm_iLoopVar < iLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrPacked[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iSender();
				iSender = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_bStart();
				bStart = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_bEnd();
				bEnd = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iLen();
				iLen = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_arrPacked();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iLen=iLen<__orm_iArrCount ? iLen:(int)__orm_iArrCount;
				iLen=iLen<(int)65536 ? iLen:(int)65536;
				if (iLen > (int)65536) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iLen; ++__orm_iLoopVar) {
					arrPacked[__orm_iLoopVar] = oPacker.ReadUINT8();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 属性集
public class TEntityContext
{
	private uint[] __orm_has_bits = new uint[1];
	private ulong iEntID;   //实体ID
	private int iType;   //实体类型
	private int iConfigID;   //配置ID
	private string szResPath;   //资源路径


	public const int MAX_PACKEDSIZE = 305;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iEntID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iEntID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iEntID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iEntID(ulong _iEntID){set_has_iEntID(); iEntID=_iEntID;}
	public ulong get_iEntID(){if (has_iEntID()) {return iEntID;} return 0;}

	public bool has_iType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iType(int _iType){set_has_iType(); iType=_iType;}
	public int get_iType(){if (has_iType()) {return iType;} return 0;}

	public bool has_iConfigID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iConfigID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iConfigID() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iConfigID(int _iConfigID){set_has_iConfigID(); iConfigID=_iConfigID;}
	public int get_iConfigID(){if (has_iConfigID()) {return iConfigID;} return 0;}

	public bool has_szResPath() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_szResPath() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_szResPath() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_szResPath(string _szResPath){set_has_szResPath(); szResPath=_szResPath;}
	public string get_szResPath(){if (has_szResPath()) {return szResPath;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iEntID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT64(iEntID);
		};
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iType);
		};
		if (has_iConfigID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iConfigID);
		};
		if (has_szResPath()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,3));  // f id
			oPacker.WriteSTRING(szResPath);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iEntID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT64(iEntID);
		};
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iType);
		};
		if (has_iConfigID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iConfigID);
		};
		if (has_szResPath()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,3));  // f id
			oPacker.WriteSTRING(szResPath);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iEntID();
				iEntID = oPacker.ReadVarintUINT64();
			}break;
			case 2: {
				set_has_iType();
				iType = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iConfigID();
				iConfigID = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_szResPath();
				szResPath = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// NetObject创建通知
public class TMSG_NET_OBJ_CREATE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte bIsRoomNetObj;   //1表示为公共对象, 0为role个人对象
	private ulong iNetID;   //网络ID
	private TEntityContext stEntityContext = new TEntityContext();   //对应的实体信息
	private TPropertySet stPropertySet = new TPropertySet();   //属性数据


	public const int MAX_PACKEDSIZE = 262546;

	public void init() {
		__orm_has_bits[0]=0;
		stEntityContext.init();
		stPropertySet.init();
	}
	public bool has_bIsRoomNetObj() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_bIsRoomNetObj() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_bIsRoomNetObj() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_bIsRoomNetObj(sbyte _bIsRoomNetObj){set_has_bIsRoomNetObj(); bIsRoomNetObj=_bIsRoomNetObj;}
	public sbyte get_bIsRoomNetObj(){if (has_bIsRoomNetObj()) {return bIsRoomNetObj;} return 0;}

	public bool has_iNetID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iNetID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iNetID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iNetID(ulong _iNetID){set_has_iNetID(); iNetID=_iNetID;}
	public ulong get_iNetID(){if (has_iNetID()) {return iNetID;} return 0;}

	public bool has_stEntityContext() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_stEntityContext() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_stEntityContext() {__orm_has_bits[0] &= ~(0x20u);}
	public TEntityContext set_stEntityContext(){set_has_stEntityContext(); return stEntityContext;}
	public TEntityContext get_stEntityContext(){return stEntityContext;}

	public bool has_stPropertySet() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_stPropertySet() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_stPropertySet() {__orm_has_bits[0] &= ~(0x40u);}
	public TPropertySet set_stPropertySet(){set_has_stPropertySet(); return stPropertySet;}
	public TPropertySet get_stPropertySet(){return stPropertySet;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bIsRoomNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bIsRoomNetObj);
		};
		if (has_iNetID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintUINT64(iNetID);
		};
		if (has_stEntityContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stEntityContext.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stPropertySet()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stPropertySet.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bIsRoomNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bIsRoomNetObj);
		};
		if (has_iNetID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintUINT64(iNetID);
		};
		if (has_stEntityContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stEntityContext");
			stEntityContext.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stPropertySet()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stPropertySet");
			stPropertySet.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_bIsRoomNetObj();
				bIsRoomNetObj = oPacker.ReadINT8();
			}break;
			case 4: {
				set_has_iNetID();
				iNetID = oPacker.ReadVarintUINT64();
			}break;
			case 5: {
				set_has_stEntityContext();
				stEntityContext.Unpack(oPacker);
			}break;
			case 6: {
				set_has_stPropertySet();
				stPropertySet.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 属性变更通知
public class TMSG_NET_OBJ_PROP_UPDATED_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte bIsRoomNetObj;   //1表示为公共对象, 0为role个人对象
	private ulong iNetID;   //网络ID
	private TPropertySet stPropertySet = new TPropertySet();   //属性数据


	public const int MAX_PACKEDSIZE = 262232;

	public void init() {
		__orm_has_bits[0]=0;
		stPropertySet.init();
	}
	public bool has_bIsRoomNetObj() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_bIsRoomNetObj() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_bIsRoomNetObj() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_bIsRoomNetObj(sbyte _bIsRoomNetObj){set_has_bIsRoomNetObj(); bIsRoomNetObj=_bIsRoomNetObj;}
	public sbyte get_bIsRoomNetObj(){if (has_bIsRoomNetObj()) {return bIsRoomNetObj;} return 0;}

	public bool has_iNetID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iNetID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iNetID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iNetID(ulong _iNetID){set_has_iNetID(); iNetID=_iNetID;}
	public ulong get_iNetID(){if (has_iNetID()) {return iNetID;} return 0;}

	public bool has_stPropertySet() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_stPropertySet() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_stPropertySet() {__orm_has_bits[0] &= ~(0x20u);}
	public TPropertySet set_stPropertySet(){set_has_stPropertySet(); return stPropertySet;}
	public TPropertySet get_stPropertySet(){return stPropertySet;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bIsRoomNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bIsRoomNetObj);
		};
		if (has_iNetID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintUINT64(iNetID);
		};
		if (has_stPropertySet()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stPropertySet.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bIsRoomNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bIsRoomNetObj);
		};
		if (has_iNetID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintUINT64(iNetID);
		};
		if (has_stPropertySet()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stPropertySet");
			stPropertySet.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_bIsRoomNetObj();
				bIsRoomNetObj = oPacker.ReadINT8();
			}break;
			case 4: {
				set_has_iNetID();
				iNetID = oPacker.ReadVarintUINT64();
			}break;
			case 5: {
				set_has_stPropertySet();
				stPropertySet.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 属性修改请求
public class TMSG_NET_OBJ_PROP_CHANGE_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private ulong iNetID;   //网络ID
	private long iSrcRoleID;   //发起角色
	private long iTagetRoleID;   //目标角色
	private TPropertySet stPropertySet = new TPropertySet();   //属性数据,此时存放的都是增量值


	public const int MAX_PACKEDSIZE = 262256;

	public void init() {
		__orm_has_bits[0]=0;
		stPropertySet.init();
	}
	public bool has_iNetID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iNetID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iNetID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iNetID(ulong _iNetID){set_has_iNetID(); iNetID=_iNetID;}
	public ulong get_iNetID(){if (has_iNetID()) {return iNetID;} return 0;}

	public bool has_iSrcRoleID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iSrcRoleID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iSrcRoleID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iSrcRoleID(long _iSrcRoleID){set_has_iSrcRoleID(); iSrcRoleID=_iSrcRoleID;}
	public long get_iSrcRoleID(){if (has_iSrcRoleID()) {return iSrcRoleID;} return 0;}

	public bool has_iTagetRoleID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iTagetRoleID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iTagetRoleID() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iTagetRoleID(long _iTagetRoleID){set_has_iTagetRoleID(); iTagetRoleID=_iTagetRoleID;}
	public long get_iTagetRoleID(){if (has_iTagetRoleID()) {return iTagetRoleID;} return 0;}

	public bool has_stPropertySet() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_stPropertySet() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_stPropertySet() {__orm_has_bits[0] &= ~(0x10u);}
	public TPropertySet set_stPropertySet(){set_has_stPropertySet(); return stPropertySet;}
	public TPropertySet get_stPropertySet(){return stPropertySet;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNetID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT64(iNetID);
		};
		if (has_iSrcRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iSrcRoleID);
		};
		if (has_iTagetRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iTagetRoleID);
		};
		if (has_stPropertySet()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stPropertySet.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNetID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT64(iNetID);
		};
		if (has_iSrcRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iSrcRoleID);
		};
		if (has_iTagetRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iTagetRoleID);
		};
		if (has_stPropertySet()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stPropertySet");
			stPropertySet.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iNetID();
				iNetID = oPacker.ReadVarintUINT64();
			}break;
			case 2: {
				set_has_iSrcRoleID();
				iSrcRoleID = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_iTagetRoleID();
				iTagetRoleID = oPacker.ReadVarintINT64();
			}break;
			case 4: {
				set_has_stPropertySet();
				stPropertySet.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// NetObject销毁(1个)通知
public class TMSG_NET_OBJ_DESTROY_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte bIsRoomNetObj;   //1表示为公共对象, 0为role个人对象
	private ulong iNetID;   //网络ID
	private ulong iEntID;   //实体ID


	public const int MAX_PACKEDSIZE = 41;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_bIsRoomNetObj() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_bIsRoomNetObj() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_bIsRoomNetObj() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_bIsRoomNetObj(sbyte _bIsRoomNetObj){set_has_bIsRoomNetObj(); bIsRoomNetObj=_bIsRoomNetObj;}
	public sbyte get_bIsRoomNetObj(){if (has_bIsRoomNetObj()) {return bIsRoomNetObj;} return 0;}

	public bool has_iNetID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iNetID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iNetID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iNetID(ulong _iNetID){set_has_iNetID(); iNetID=_iNetID;}
	public ulong get_iNetID(){if (has_iNetID()) {return iNetID;} return 0;}

	public bool has_iEntID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iEntID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iEntID() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iEntID(ulong _iEntID){set_has_iEntID(); iEntID=_iEntID;}
	public ulong get_iEntID(){if (has_iEntID()) {return iEntID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bIsRoomNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bIsRoomNetObj);
		};
		if (has_iNetID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintUINT64(iNetID);
		};
		if (has_iEntID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintUINT64(iEntID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bIsRoomNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bIsRoomNetObj);
		};
		if (has_iNetID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintUINT64(iNetID);
		};
		if (has_iEntID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintUINT64(iEntID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_bIsRoomNetObj();
				bIsRoomNetObj = oPacker.ReadINT8();
			}break;
			case 4: {
				set_has_iNetID();
				iNetID = oPacker.ReadVarintUINT64();
			}break;
			case 5: {
				set_has_iEntID();
				iEntID = oPacker.ReadVarintUINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// NetObject销毁通知 (按人) 
public class TMSG_NET_OBJ_DESTROY_BY_ROLE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte bIsRoomNetObj;   //1表示为公共对象, 0为role个人对象
	private long iRoleID;   //网络ID


	public const int MAX_PACKEDSIZE = 26;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_bIsRoomNetObj() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_bIsRoomNetObj() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_bIsRoomNetObj() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_bIsRoomNetObj(sbyte _bIsRoomNetObj){set_has_bIsRoomNetObj(); bIsRoomNetObj=_bIsRoomNetObj;}
	public sbyte get_bIsRoomNetObj(){if (has_bIsRoomNetObj()) {return bIsRoomNetObj;} return 0;}

	public bool has_iRoleID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRoleID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRoleID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRoleID(long _iRoleID){set_has_iRoleID(); iRoleID=_iRoleID;}
	public long get_iRoleID(){if (has_iRoleID()) {return iRoleID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bIsRoomNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bIsRoomNetObj);
		};
		if (has_iRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iRoleID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bIsRoomNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bIsRoomNetObj);
		};
		if (has_iRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iRoleID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_bIsRoomNetObj();
				bIsRoomNetObj = oPacker.ReadINT8();
			}break;
			case 4: {
				set_has_iRoleID();
				iRoleID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// NetObject 同步状态(开始/结束)通知
public class TMSG_NET_OBJ_SYNC_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte bStart;   //1 为开始, 0为结束


	public const int MAX_PACKEDSIZE = 11;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_bStart() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_bStart() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_bStart() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_bStart(sbyte _bStart){set_has_bStart(); bStart=_bStart;}
	public sbyte get_bStart(){if (has_bStart()) {return bStart;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bStart);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bStart);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_bStart();
				bStart = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// NetObject 单一实体(开始/结束) 通知
public class TMSG_NET_OBJ_SYNC_ELEMENT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte bStart;   //1 为开始, 0为结束
	private sbyte bIsRoomNetObj;   //1表示为公共对象, 0为role个人对象
	private long iOwnerRoleID;   //同步哪个角色的net obj


	public const int MAX_PACKEDSIZE = 32;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_bStart() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_bStart() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_bStart() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_bStart(sbyte _bStart){set_has_bStart(); bStart=_bStart;}
	public sbyte get_bStart(){if (has_bStart()) {return bStart;} return 0;}

	public bool has_bIsRoomNetObj() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_bIsRoomNetObj() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_bIsRoomNetObj() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_bIsRoomNetObj(sbyte _bIsRoomNetObj){set_has_bIsRoomNetObj(); bIsRoomNetObj=_bIsRoomNetObj;}
	public sbyte get_bIsRoomNetObj(){if (has_bIsRoomNetObj()) {return bIsRoomNetObj;} return 0;}

	public bool has_iOwnerRoleID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iOwnerRoleID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iOwnerRoleID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iOwnerRoleID(long _iOwnerRoleID){set_has_iOwnerRoleID(); iOwnerRoleID=_iOwnerRoleID;}
	public long get_iOwnerRoleID(){if (has_iOwnerRoleID()) {return iOwnerRoleID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bStart);
		};
		if (has_bIsRoomNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bIsRoomNetObj);
		};
		if (has_iOwnerRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iOwnerRoleID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(bStart);
		};
		if (has_bIsRoomNetObj()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bIsRoomNetObj);
		};
		if (has_iOwnerRoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iOwnerRoleID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_bStart();
				bStart = oPacker.ReadINT8();
			}break;
			case 3: {
				set_has_bIsRoomNetObj();
				bIsRoomNetObj = oPacker.ReadINT8();
			}break;
			case 4: {
				set_has_iOwnerRoleID();
				iOwnerRoleID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗回合输入
public class TBattleRoundInput
{
	private uint[] __orm_has_bits = new uint[1];
	private int iLocalID;   //唯一id
	private int enType;   //战斗输入类型EnBattleInputType
	private int iParamNum;   //
	private int[] arrParam = new int[(int)TCONST.BATTLE_INPUT_MAX];   //战斗操作参数传技能id#目标id，逃跑不需要

	public const int countof_arrParam = (int)TCONST.BATTLE_INPUT_MAX;

	public const int MAX_PACKEDSIZE = 59;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLocalID(int _iLocalID){set_has_iLocalID(); iLocalID=_iLocalID;}
	public int get_iLocalID(){if (has_iLocalID()) {return iLocalID;} return 0;}

	public bool has_enType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_enType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_enType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_enType(int _enType){set_has_enType(); enType=_enType;}
	public int get_enType(){if (has_enType()) {return enType;} return 0;}

	public bool has_iParamNum() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iParamNum() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iParamNum() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iParamNum(int _iParamNum){set_has_iParamNum(); iParamNum=_iParamNum;}
	public int get_iParamNum(){if (has_iParamNum()) {return iParamNum;} return 0;}

	public bool has_arrParam() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrParam() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrParam() {__orm_has_bits[0] &= ~(0x10u);}
	public int[] set_arrParam(){set_has_arrParam(); return arrParam;}
	public int[] get_arrParam(){return arrParam;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLocalID);
		};
		if (has_enType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(enType);
		};
		if (has_iParamNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iParamNum);
		};
		if (has_arrParam()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iParamNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_INPUT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_INPUT_MAX) && (__orm_iLoopVar < iParamNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrParam[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLocalID);
		};
		if (has_enType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(enType);
		};
		if (has_iParamNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iParamNum);
		};
		if (has_arrParam()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iParamNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_INPUT_MAX) {
				oPacker.PushFieldName("iParamNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_INPUT_MAX) && (__orm_iLoopVar < iParamNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrParam[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLocalID();
				iLocalID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_enType();
				enType = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iParamNum();
				iParamNum = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_arrParam();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iParamNum=iParamNum<__orm_iArrCount ? iParamNum:(int)__orm_iArrCount;
				iParamNum=iParamNum<(int)TCONST.BATTLE_INPUT_MAX ? iParamNum:(int)TCONST.BATTLE_INPUT_MAX;
				if (iParamNum > (int)TCONST.BATTLE_INPUT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iParamNum; ++__orm_iLoopVar) {
					arrParam[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 主动技能及其使用情况
public class TBattleSkillStatus
{
	private uint[] __orm_has_bits = new uint[1];
	private int iPos;   //位置1-4
	private int iSkillID;   //技能id
	private int iUsageCount;   //技能使用次数


	public const int MAX_PACKEDSIZE = 35;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iPos() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iPos() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iPos() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iPos(int _iPos){set_has_iPos(); iPos=_iPos;}
	public int get_iPos(){if (has_iPos()) {return iPos;} return 0;}

	public bool has_iSkillID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iSkillID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iSkillID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iSkillID(int _iSkillID){set_has_iSkillID(); iSkillID=_iSkillID;}
	public int get_iSkillID(){if (has_iSkillID()) {return iSkillID;} return 0;}

	public bool has_iUsageCount() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iUsageCount() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iUsageCount() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iUsageCount(int _iUsageCount){set_has_iUsageCount(); iUsageCount=_iUsageCount;}
	public int get_iUsageCount(){if (has_iUsageCount()) {return iUsageCount;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iPos()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iPos);
		};
		if (has_iSkillID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSkillID);
		};
		if (has_iUsageCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iUsageCount);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iPos()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iPos);
		};
		if (has_iSkillID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSkillID);
		};
		if (has_iUsageCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iUsageCount);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iPos();
				iPos = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iSkillID();
				iSkillID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iUsageCount();
				iUsageCount = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// BUFF技能及其使用情况
public class TBattleBuffStatus
{
	private uint[] __orm_has_bits = new uint[1];
	private int iSkillID;   //技能id
	private int iRound;   //无效的回合数


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iSkillID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iSkillID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iSkillID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iSkillID(int _iSkillID){set_has_iSkillID(); iSkillID=_iSkillID;}
	public int get_iSkillID(){if (has_iSkillID()) {return iSkillID;} return 0;}

	public bool has_iRound() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iRound() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iRound() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iRound(int _iRound){set_has_iRound(); iRound=_iRound;}
	public int get_iRound(){if (has_iRound()) {return iRound;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSkillID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iSkillID);
		};
		if (has_iRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iRound);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iSkillID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iSkillID);
		};
		if (has_iRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iRound);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iSkillID();
				iSkillID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iRound();
				iRound = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 最小战斗单元
public class TBattleUnit
{
	private uint[] __orm_has_bits = new uint[1];
	private int iLocalID;   //战斗单元唯一id
	private int[] arrProp = new int[(int)EnBattleUnitProp.BATTLE_UNIT_PROP_MAXID];   //战斗单元属性
	private int iSkillNum;   //主动技能数量
	private TBattleSkillStatus[] arrSkill = new TBattleSkillStatus[(int)TCONST.BATTLE_SKILL_MAX];   //技能使用情况
	public TBattleUnit() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.BATTLE_SKILL_MAX; ++__orm_iLoopVar) {
			arrSkill[__orm_iLoopVar] = new TBattleSkillStatus();
		}
	}

	public const int countof_arrProp = (int)EnBattleUnitProp.BATTLE_UNIT_PROP_MAXID;
	public const int countof_arrSkill = (int)TCONST.BATTLE_SKILL_MAX;

	public const int MAX_PACKEDSIZE = 283;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)EnBattleUnitProp.BATTLE_UNIT_PROP_MAXID; ++__orm_iLoopVar){arrProp[__orm_iLoopVar]=0;}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.BATTLE_SKILL_MAX; ++__orm_iLoopVar){arrSkill[__orm_iLoopVar].init();}
	}
	public bool has_iLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLocalID(int _iLocalID){set_has_iLocalID(); iLocalID=_iLocalID;}
	public int get_iLocalID(){if (has_iLocalID()) {return iLocalID;} return 0;}

	public bool has_arrProp() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrProp() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrProp() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrProp(){set_has_arrProp(); return arrProp;}
	public int[] get_arrProp(){return arrProp;}

	public bool has_iSkillNum() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iSkillNum() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iSkillNum() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iSkillNum(int _iSkillNum){set_has_iSkillNum(); iSkillNum=_iSkillNum;}
	public int get_iSkillNum(){if (has_iSkillNum()) {return iSkillNum;} return 0;}

	public bool has_arrSkill() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_arrSkill() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_arrSkill() {__orm_has_bits[0] &= ~(0x40u);}
	public TBattleSkillStatus[] set_arrSkill(){set_has_arrSkill(); return arrSkill;}
	public TBattleSkillStatus[] get_arrSkill(){return arrSkill;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLocalID);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)EnBattleUnitProp.BATTLE_UNIT_PROP_MAXID); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnBattleUnitProp.BATTLE_UNIT_PROP_MAXID); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrProp[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iSkillNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iSkillNum);
		};
		if (has_arrSkill()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSkillNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_SKILL_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_SKILL_MAX) && (__orm_iLoopVar < iSkillNum); ++__orm_iLoopVar) {
				arrSkill[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLocalID);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)EnBattleUnitProp.BATTLE_UNIT_PROP_MAXID); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnBattleUnitProp.BATTLE_UNIT_PROP_MAXID); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrProp[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iSkillNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iSkillNum);
		};
		if (has_arrSkill()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSkillNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_SKILL_MAX) {
				oPacker.PushFieldName("iSkillNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_SKILL_MAX) && (__orm_iLoopVar < iSkillNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrSkill[{0}]", __orm_iLoopVar);
				arrSkill[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLocalID();
				iLocalID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrProp();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)EnBattleUnitProp.BATTLE_UNIT_PROP_MAXID ? __orm_iArrCount:(uint)EnBattleUnitProp.BATTLE_UNIT_PROP_MAXID;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrProp[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 5: {
				set_has_iSkillNum();
				iSkillNum = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_arrSkill();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iSkillNum=iSkillNum<__orm_iArrCount ? iSkillNum:(int)__orm_iArrCount;
				iSkillNum=iSkillNum<(int)TCONST.BATTLE_SKILL_MAX ? iSkillNum:(int)TCONST.BATTLE_SKILL_MAX;
				if (iSkillNum > (int)TCONST.BATTLE_SKILL_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iSkillNum; ++__orm_iLoopVar) {
					arrSkill[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗初始现场
public class TBattleInitContext
{
	private uint[] __orm_has_bits = new uint[1];
	private long i64BattleSN;   //每场战斗唯一识别码
	private TBattleUnit[] arrUnit = new TBattleUnit[(int)TCONST.BATTLE_ALL_SIDE_SUM];   //攻/守方角色
	public TBattleInitContext() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.BATTLE_ALL_SIDE_SUM; ++__orm_iLoopVar) {
			arrUnit[__orm_iLoopVar] = new TBattleUnit();
		}
	}

	public const int countof_arrUnit = (int)TCONST.BATTLE_ALL_SIDE_SUM;

	public const int MAX_PACKEDSIZE = 3430;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.BATTLE_ALL_SIDE_SUM; ++__orm_iLoopVar){arrUnit[__orm_iLoopVar].init();}
	}
	public bool has_i64BattleSN() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_i64BattleSN() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_i64BattleSN() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_i64BattleSN(long _i64BattleSN){set_has_i64BattleSN(); i64BattleSN=_i64BattleSN;}
	public long get_i64BattleSN(){if (has_i64BattleSN()) {return i64BattleSN;} return 0;}

	public bool has_arrUnit() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrUnit() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrUnit() {__orm_has_bits[0] &= ~(0x4u);}
	public TBattleUnit[] set_arrUnit(){set_has_arrUnit(); return arrUnit;}
	public TBattleUnit[] get_arrUnit(){return arrUnit;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
		if (has_arrUnit()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.BATTLE_ALL_SIDE_SUM); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ALL_SIDE_SUM); ++__orm_iLoopVar) {
				arrUnit[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
		if (has_arrUnit()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.BATTLE_ALL_SIDE_SUM); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ALL_SIDE_SUM); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrUnit[{0}]", __orm_iLoopVar);
				arrUnit[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_i64BattleSN();
				i64BattleSN = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_arrUnit();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)TCONST.BATTLE_ALL_SIDE_SUM ? __orm_iArrCount:(uint)TCONST.BATTLE_ALL_SIDE_SUM;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrUnit[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗开始现场通知，暂不考虑复杂战斗场景
public class TMSG_BATTLE_INIT_CONTEXT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long iDiscipleLocalID;   //弟子id
	private long iEnemyID;   //敌人表id
	private TBattleInitContext stBattleContext = new TBattleInitContext();   //战斗现场
	private string szBattleTag;   //战场标签
	private int iBattleTag;   //战场标签


	public const int MAX_PACKEDSIZE = 3750;

	public void init() {
		__orm_has_bits[0]=0;
		stBattleContext.init();
	}
	public bool has_iDiscipleLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleLocalID(long _iDiscipleLocalID){set_has_iDiscipleLocalID(); iDiscipleLocalID=_iDiscipleLocalID;}
	public long get_iDiscipleLocalID(){if (has_iDiscipleLocalID()) {return iDiscipleLocalID;} return 0;}

	public bool has_iEnemyID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iEnemyID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iEnemyID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iEnemyID(long _iEnemyID){set_has_iEnemyID(); iEnemyID=_iEnemyID;}
	public long get_iEnemyID(){if (has_iEnemyID()) {return iEnemyID;} return 0;}

	public bool has_stBattleContext() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_stBattleContext() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_stBattleContext() {__orm_has_bits[0] &= ~(0x8u);}
	public TBattleInitContext set_stBattleContext(){set_has_stBattleContext(); return stBattleContext;}
	public TBattleInitContext get_stBattleContext(){return stBattleContext;}

	public bool has_szBattleTag() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_szBattleTag() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_szBattleTag() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_szBattleTag(string _szBattleTag){set_has_szBattleTag(); szBattleTag=_szBattleTag;}
	public string get_szBattleTag(){if (has_szBattleTag()) {return szBattleTag;} return "";}

	public bool has_iBattleTag() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iBattleTag() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iBattleTag() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iBattleTag(int _iBattleTag){set_has_iBattleTag(); iBattleTag=_iBattleTag;}
	public int get_iBattleTag(){if (has_iBattleTag()) {return iBattleTag;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iEnemyID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iEnemyID);
		};
		if (has_stBattleContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stBattleContext.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,3));  // f id
			oPacker.WriteSTRING(szBattleTag);
		};
		if (has_iBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iBattleTag);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLocalID);
		};
		if (has_iEnemyID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iEnemyID);
		};
		if (has_stBattleContext()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stBattleContext");
			stBattleContext.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,3));  // f id
			oPacker.WriteSTRING(szBattleTag);
		};
		if (has_iBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iBattleTag);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleLocalID();
				iDiscipleLocalID = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iEnemyID();
				iEnemyID = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_stBattleContext();
				stBattleContext.Unpack(oPacker);
			}break;
			case 4: {
				set_has_szBattleTag();
				szBattleTag = oPacker.ReadSTRING();
			}break;
			case 5: {
				set_has_iBattleTag();
				iBattleTag = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 游历-战斗指令输入-请求
public class TMSG_BATTLE_INPUT_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iInputNum;   //输入数量
	private TBattleRoundInput[] stInput = new TBattleRoundInput[(int)TCONST.BATTLE_INPUT_MAX];   //操作输入
	private long i64BattleSN;   //每场战斗唯一识别码
	public TMSG_BATTLE_INPUT_REQ() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.BATTLE_INPUT_MAX; ++__orm_iLoopVar) {
			stInput[__orm_iLoopVar] = new TBattleRoundInput();
		}
	}

	public const int countof_stInput = (int)TCONST.BATTLE_INPUT_MAX;

	public const int MAX_PACKEDSIZE = 162;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.BATTLE_INPUT_MAX; ++__orm_iLoopVar){stInput[__orm_iLoopVar].init();}
	}
	public bool has_iInputNum() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iInputNum() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iInputNum() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iInputNum(int _iInputNum){set_has_iInputNum(); iInputNum=_iInputNum;}
	public int get_iInputNum(){if (has_iInputNum()) {return iInputNum;} return 0;}

	public bool has_stInput() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stInput() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stInput() {__orm_has_bits[0] &= ~(0x4u);}
	public TBattleRoundInput[] set_stInput(){set_has_stInput(); return stInput;}
	public TBattleRoundInput[] get_stInput(){return stInput;}

	public bool has_i64BattleSN() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_i64BattleSN() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_i64BattleSN() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_i64BattleSN(long _i64BattleSN){set_has_i64BattleSN(); i64BattleSN=_i64BattleSN;}
	public long get_i64BattleSN(){if (has_i64BattleSN()) {return i64BattleSN;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iInputNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iInputNum);
		};
		if (has_stInput()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iInputNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_INPUT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_INPUT_MAX) && (__orm_iLoopVar < iInputNum); ++__orm_iLoopVar) {
				stInput[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iInputNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iInputNum);
		};
		if (has_stInput()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iInputNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_INPUT_MAX) {
				oPacker.PushFieldName("iInputNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_INPUT_MAX) && (__orm_iLoopVar < iInputNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("stInput[{0}]", __orm_iLoopVar);
				stInput[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iInputNum();
				iInputNum = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_stInput();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iInputNum=iInputNum<__orm_iArrCount ? iInputNum:(int)__orm_iArrCount;
				iInputNum=iInputNum<(int)TCONST.BATTLE_INPUT_MAX ? iInputNum:(int)TCONST.BATTLE_INPUT_MAX;
				if (iInputNum > (int)TCONST.BATTLE_INPUT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iInputNum; ++__orm_iLoopVar) {
					stInput[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 3: {
				set_has_i64BattleSN();
				i64BattleSN = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_BATTLE_INPUT_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x1u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x1u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x1u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(0,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 0: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 当前战斗回合结束了,转战斗输入
public class TMSG_BATTLE_ROUND_OVER_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long i64BattleSN;   //战斗唯一id
	private int iRoundID;   //当前回合


	public const int MAX_PACKEDSIZE = 30;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_i64BattleSN() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_i64BattleSN() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_i64BattleSN() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_i64BattleSN(long _i64BattleSN){set_has_i64BattleSN(); i64BattleSN=_i64BattleSN;}
	public long get_i64BattleSN(){if (has_i64BattleSN()) {return i64BattleSN;} return 0;}

	public bool has_iRoundID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iRoundID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iRoundID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iRoundID(int _iRoundID){set_has_iRoundID(); iRoundID=_iRoundID;}
	public int get_iRoundID(){if (has_iRoundID()) {return iRoundID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
		if (has_iRoundID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iRoundID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
		if (has_iRoundID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iRoundID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_i64BattleSN();
				i64BattleSN = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iRoundID();
				iRoundID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗属性变更-通知
public class TMSG_BATTLE_PROP_UPDATED_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iLocalID;   //唯一id
	private int iPropType;   //战斗单元属性EnBattleUnitProp
	private int iValue;   //属性变化后的值同步
	private long i64BattleSN;   //每场战斗唯一识别码


	public const int MAX_PACKEDSIZE = 50;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLocalID(int _iLocalID){set_has_iLocalID(); iLocalID=_iLocalID;}
	public int get_iLocalID(){if (has_iLocalID()) {return iLocalID;} return 0;}

	public bool has_iPropType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iPropType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iPropType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iPropType(int _iPropType){set_has_iPropType(); iPropType=_iPropType;}
	public int get_iPropType(){if (has_iPropType()) {return iPropType;} return 0;}

	public bool has_iValue() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iValue() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iValue() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iValue(int _iValue){set_has_iValue(); iValue=_iValue;}
	public int get_iValue(){if (has_iValue()) {return iValue;} return 0;}

	public bool has_i64BattleSN() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_i64BattleSN() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_i64BattleSN() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_i64BattleSN(long _i64BattleSN){set_has_i64BattleSN(); i64BattleSN=_i64BattleSN;}
	public long get_i64BattleSN(){if (has_i64BattleSN()) {return i64BattleSN;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLocalID);
		};
		if (has_iPropType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iPropType);
		};
		if (has_iValue()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iValue);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLocalID);
		};
		if (has_iPropType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iPropType);
		};
		if (has_iValue()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iValue);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLocalID();
				iLocalID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iPropType();
				iPropType = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iValue();
				iValue = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_i64BattleSN();
				i64BattleSN = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗技能变更-通知
public class TMSG_BATTLE_SKILL_UPDATED_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iLocalID;   //唯一id
	private TBattleSkillStatus stSkill = new TBattleSkillStatus();   //技能使用次数同步
	private long i64BattleSN;   //每场战斗唯一识别码


	public const int MAX_PACKEDSIZE = 74;

	public void init() {
		__orm_has_bits[0]=0;
		stSkill.init();
	}
	public bool has_iLocalID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLocalID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLocalID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLocalID(int _iLocalID){set_has_iLocalID(); iLocalID=_iLocalID;}
	public int get_iLocalID(){if (has_iLocalID()) {return iLocalID;} return 0;}

	public bool has_stSkill() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stSkill() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stSkill() {__orm_has_bits[0] &= ~(0x4u);}
	public TBattleSkillStatus set_stSkill(){set_has_stSkill(); return stSkill;}
	public TBattleSkillStatus get_stSkill(){return stSkill;}

	public bool has_i64BattleSN() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_i64BattleSN() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_i64BattleSN() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_i64BattleSN(long _i64BattleSN){set_has_i64BattleSN(); i64BattleSN=_i64BattleSN;}
	public long get_i64BattleSN(){if (has_i64BattleSN()) {return i64BattleSN;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLocalID);
		};
		if (has_stSkill()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stSkill.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLocalID);
		};
		if (has_stSkill()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stSkill");
			stSkill.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLocalID();
				iLocalID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_stSkill();
				stSkill.Unpack(oPacker);
			}break;
			case 3: {
				set_has_i64BattleSN();
				i64BattleSN = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗结果
public class TMSG_BATTLE_RESULT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long i64BattleSN;   //战斗唯一id
	private int iRoundID;   //当前回合
	private int iWinSide;   //是否战斗结束 未结束0 左胜1 右胜2


	public const int MAX_PACKEDSIZE = 40;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_i64BattleSN() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_i64BattleSN() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_i64BattleSN() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_i64BattleSN(long _i64BattleSN){set_has_i64BattleSN(); i64BattleSN=_i64BattleSN;}
	public long get_i64BattleSN(){if (has_i64BattleSN()) {return i64BattleSN;} return 0;}

	public bool has_iRoundID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iRoundID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iRoundID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iRoundID(int _iRoundID){set_has_iRoundID(); iRoundID=_iRoundID;}
	public int get_iRoundID(){if (has_iRoundID()) {return iRoundID;} return 0;}

	public bool has_iWinSide() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iWinSide() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iWinSide() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iWinSide(int _iWinSide){set_has_iWinSide(); iWinSide=_iWinSide;}
	public int get_iWinSide(){if (has_iWinSide()) {return iWinSide;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
		if (has_iRoundID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iRoundID);
		};
		if (has_iWinSide()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iWinSide);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
		if (has_iRoundID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iRoundID);
		};
		if (has_iWinSide()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iWinSide);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_i64BattleSN();
				i64BattleSN = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iRoundID();
				iRoundID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iWinSide();
				iWinSide = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗行动通知-使用技能
public class TMSG_BATTLE_ACTION_USE_SKILL_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iRoundID;   //当前回合
	private int iActiveID;   //行动方localid
	private int iSkillID;   //技能id
	private int iTargetNum;   //目标
	private int[] arrTargetID = new int[(int)TCONST.BATTLE_ACTION_PARAM_MAX];   //受击方localid
	private long i64BattleSN;   //每场战斗唯一识别码

	public const int countof_arrTargetID = (int)TCONST.BATTLE_ACTION_PARAM_MAX;

	public const int MAX_PACKEDSIZE = 94;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRoundID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iRoundID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iRoundID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iRoundID(int _iRoundID){set_has_iRoundID(); iRoundID=_iRoundID;}
	public int get_iRoundID(){if (has_iRoundID()) {return iRoundID;} return 0;}

	public bool has_iActiveID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iActiveID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iActiveID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iActiveID(int _iActiveID){set_has_iActiveID(); iActiveID=_iActiveID;}
	public int get_iActiveID(){if (has_iActiveID()) {return iActiveID;} return 0;}

	public bool has_iSkillID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iSkillID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iSkillID() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iSkillID(int _iSkillID){set_has_iSkillID(); iSkillID=_iSkillID;}
	public int get_iSkillID(){if (has_iSkillID()) {return iSkillID;} return 0;}

	public bool has_iTargetNum() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iTargetNum() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iTargetNum() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iTargetNum(int _iTargetNum){set_has_iTargetNum(); iTargetNum=_iTargetNum;}
	public int get_iTargetNum(){if (has_iTargetNum()) {return iTargetNum;} return 0;}

	public bool has_arrTargetID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrTargetID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrTargetID() {__orm_has_bits[0] &= ~(0x20u);}
	public int[] set_arrTargetID(){set_has_arrTargetID(); return arrTargetID;}
	public int[] get_arrTargetID(){return arrTargetID;}

	public bool has_i64BattleSN() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_i64BattleSN() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_i64BattleSN() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_i64BattleSN(long _i64BattleSN){set_has_i64BattleSN(); i64BattleSN=_i64BattleSN;}
	public long get_i64BattleSN(){if (has_i64BattleSN()) {return i64BattleSN;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoundID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRoundID);
		};
		if (has_iActiveID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iActiveID);
		};
		if (has_iSkillID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iSkillID);
		};
		if (has_iTargetNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iTargetNum);
		};
		if (has_arrTargetID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iTargetNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ACTION_PARAM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ACTION_PARAM_MAX) && (__orm_iLoopVar < iTargetNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrTargetID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoundID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRoundID);
		};
		if (has_iActiveID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iActiveID);
		};
		if (has_iSkillID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iSkillID);
		};
		if (has_iTargetNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iTargetNum);
		};
		if (has_arrTargetID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iTargetNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ACTION_PARAM_MAX) {
				oPacker.PushFieldName("iTargetNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ACTION_PARAM_MAX) && (__orm_iLoopVar < iTargetNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrTargetID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iRoundID();
				iRoundID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iActiveID();
				iActiveID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iSkillID();
				iSkillID = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iTargetNum();
				iTargetNum = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_arrTargetID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iTargetNum=iTargetNum<__orm_iArrCount ? iTargetNum:(int)__orm_iArrCount;
				iTargetNum=iTargetNum<(int)TCONST.BATTLE_ACTION_PARAM_MAX ? iTargetNum:(int)TCONST.BATTLE_ACTION_PARAM_MAX;
				if (iTargetNum > (int)TCONST.BATTLE_ACTION_PARAM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iTargetNum; ++__orm_iLoopVar) {
					arrTargetID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 6: {
				set_has_i64BattleSN();
				i64BattleSN = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗行动通知-受伤
public class TMSG_BATTLE_ACTION_INJURED_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iRoundID;   //当前回合
	private int iReason;   //受伤的原因 EnInjuredReasonType
	private int iActiveID;   //受伤方localid
	private int iValue;   //扣除的血量
	private int iSourceID;   //受伤的来源 （暂）攻击方id
	private long i64BattleSN;   //每场战斗唯一识别码


	public const int MAX_PACKEDSIZE = 70;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRoundID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iRoundID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iRoundID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iRoundID(int _iRoundID){set_has_iRoundID(); iRoundID=_iRoundID;}
	public int get_iRoundID(){if (has_iRoundID()) {return iRoundID;} return 0;}

	public bool has_iReason() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iReason() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iReason() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iReason(int _iReason){set_has_iReason(); iReason=_iReason;}
	public int get_iReason(){if (has_iReason()) {return iReason;} return 0;}

	public bool has_iActiveID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iActiveID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iActiveID() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iActiveID(int _iActiveID){set_has_iActiveID(); iActiveID=_iActiveID;}
	public int get_iActiveID(){if (has_iActiveID()) {return iActiveID;} return 0;}

	public bool has_iValue() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iValue() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iValue() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iValue(int _iValue){set_has_iValue(); iValue=_iValue;}
	public int get_iValue(){if (has_iValue()) {return iValue;} return 0;}

	public bool has_iSourceID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iSourceID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iSourceID() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iSourceID(int _iSourceID){set_has_iSourceID(); iSourceID=_iSourceID;}
	public int get_iSourceID(){if (has_iSourceID()) {return iSourceID;} return 0;}

	public bool has_i64BattleSN() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_i64BattleSN() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_i64BattleSN() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_i64BattleSN(long _i64BattleSN){set_has_i64BattleSN(); i64BattleSN=_i64BattleSN;}
	public long get_i64BattleSN(){if (has_i64BattleSN()) {return i64BattleSN;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoundID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRoundID);
		};
		if (has_iReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iReason);
		};
		if (has_iActiveID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iActiveID);
		};
		if (has_iValue()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iValue);
		};
		if (has_iSourceID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iSourceID);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoundID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRoundID);
		};
		if (has_iReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iReason);
		};
		if (has_iActiveID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iActiveID);
		};
		if (has_iValue()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iValue);
		};
		if (has_iSourceID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iSourceID);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iRoundID();
				iRoundID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iReason();
				iReason = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iActiveID();
				iActiveID = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iValue();
				iValue = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iSourceID();
				iSourceID = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_i64BattleSN();
				i64BattleSN = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗行动通知-死亡
public class TMSG_BATTLE_ACTION_DEATH_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iRoundID;   //当前回合
	private int iActiveID;   //行动方localid
	private long i64BattleSN;   //每场战斗唯一识别码


	public const int MAX_PACKEDSIZE = 40;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRoundID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iRoundID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iRoundID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iRoundID(int _iRoundID){set_has_iRoundID(); iRoundID=_iRoundID;}
	public int get_iRoundID(){if (has_iRoundID()) {return iRoundID;} return 0;}

	public bool has_iActiveID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iActiveID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iActiveID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iActiveID(int _iActiveID){set_has_iActiveID(); iActiveID=_iActiveID;}
	public int get_iActiveID(){if (has_iActiveID()) {return iActiveID;} return 0;}

	public bool has_i64BattleSN() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_i64BattleSN() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_i64BattleSN() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_i64BattleSN(long _i64BattleSN){set_has_i64BattleSN(); i64BattleSN=_i64BattleSN;}
	public long get_i64BattleSN(){if (has_i64BattleSN()) {return i64BattleSN;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoundID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRoundID);
		};
		if (has_iActiveID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iActiveID);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoundID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRoundID);
		};
		if (has_iActiveID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iActiveID);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iRoundID();
				iRoundID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iActiveID();
				iActiveID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_i64BattleSN();
				i64BattleSN = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 阵法布局
public class TFormLayout
{
	private uint[] __orm_has_bits = new uint[1];
	private long[] arrHeroLID = new long[(int)TCONST.ORM_FORMATION_POS_MAX];   //英雄列表, 0代表位置上没人

	public const int countof_arrHeroLID = (int)TCONST.ORM_FORMATION_POS_MAX;

	public const int MAX_PACKEDSIZE = 79;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_FORMATION_POS_MAX; ++__orm_iLoopVar){arrHeroLID[__orm_iLoopVar]=0;}
	}
	public bool has_arrHeroLID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrHeroLID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrHeroLID() {__orm_has_bits[0] &= ~(0x4u);}
	public long[] set_arrHeroLID(){set_has_arrHeroLID(); return arrHeroLID;}
	public long[] get_arrHeroLID(){return arrHeroLID;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_arrHeroLID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_FORMATION_POS_MAX); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_FORMATION_POS_MAX); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrHeroLID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_arrHeroLID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)TCONST.ORM_FORMATION_POS_MAX); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_FORMATION_POS_MAX); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrHeroLID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_arrHeroLID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)TCONST.ORM_FORMATION_POS_MAX ? __orm_iArrCount:(uint)TCONST.ORM_FORMATION_POS_MAX;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrHeroLID[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 设置阵法英雄req
public class TMSG_FORMATION_SET_LAYOUT_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int id;   //阵法id
	private TFormLayout stLayout = new TFormLayout();   //英雄SID


	public const int MAX_PACKEDSIZE = 103;

	public void init() {
		__orm_has_bits[0]=0;
		stLayout.init();
	}
	public bool has_id() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_id() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_id() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_id(int _id){set_has_id(); id=_id;}
	public int get_id(){if (has_id()) {return id;} return 0;}

	public bool has_stLayout() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stLayout() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stLayout() {__orm_has_bits[0] &= ~(0x4u);}
	public TFormLayout set_stLayout(){set_has_stLayout(); return stLayout;}
	public TFormLayout get_stLayout(){return stLayout;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_id()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(id);
		};
		if (has_stLayout()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stLayout.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_id()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(id);
		};
		if (has_stLayout()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stLayout");
			stLayout.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_id();
				id = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_stLayout();
				stLayout.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 设置阵法英雄rsp
public class TMSG_FORMATION_SET_LAYOUT_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private uint u32ErrCode;   //错误码
	private int id;   //阵法id


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_u32ErrCode() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_u32ErrCode() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_u32ErrCode() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_u32ErrCode(uint _u32ErrCode){set_has_u32ErrCode(); u32ErrCode=_u32ErrCode;}
	public uint get_u32ErrCode(){if (has_u32ErrCode()) {return u32ErrCode;} return 0;}

	public bool has_id() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_id() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_id() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_id(int _id){set_has_id(); id=_id;}
	public int get_id(){if (has_id()) {return id;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
		if (has_id()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(id);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
		if (has_id()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(id);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_u32ErrCode();
				u32ErrCode = oPacker.ReadVarintUINT32();
			}break;
			case 2: {
				set_has_id();
				id = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 阵法更新NTF
public class TMSG_FORMATION_UPDATE_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private byte iCount;   //
	private int[] arrID = new int[(int)TCONST.ORM_FORMATION_NUM_PER_TYPE];   //
	private TFormLayout[] arrLayout = new TFormLayout[(int)TCONST.ORM_FORMATION_NUM_PER_TYPE];   //
	public TMSG_FORMATION_UPDATE_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_FORMATION_NUM_PER_TYPE; ++__orm_iLoopVar) {
			arrLayout[__orm_iLoopVar] = new TFormLayout();
		}
	}

	public const int countof_arrID = (int)TCONST.ORM_FORMATION_NUM_PER_TYPE;
	public const int countof_arrLayout = (int)TCONST.ORM_FORMATION_NUM_PER_TYPE;

	public const int MAX_PACKEDSIZE = 5415;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_FORMATION_NUM_PER_TYPE; ++__orm_iLoopVar){arrLayout[__orm_iLoopVar].init();}
	}
	public bool has_iCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iCount(byte _iCount){set_has_iCount(); iCount=_iCount;}
	public byte get_iCount(){if (has_iCount()) {return iCount;} return 0;}

	public bool has_arrID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrID() {__orm_has_bits[0] &= ~(0x4u);}
	public int[] set_arrID(){set_has_arrID(); return arrID;}
	public int[] get_arrID(){return arrID;}

	public bool has_arrLayout() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrLayout() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrLayout() {__orm_has_bits[0] &= ~(0x8u);}
	public TFormLayout[] set_arrLayout(){set_has_arrLayout(); return arrLayout;}
	public TFormLayout[] get_arrLayout(){return arrLayout;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(iCount);
		};
		if (has_arrID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_FORMATION_NUM_PER_TYPE) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_FORMATION_NUM_PER_TYPE) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrLayout()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_FORMATION_NUM_PER_TYPE) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_FORMATION_NUM_PER_TYPE) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				arrLayout[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteUINT8(iCount);
		};
		if (has_arrID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_FORMATION_NUM_PER_TYPE) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_FORMATION_NUM_PER_TYPE) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrLayout()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_FORMATION_NUM_PER_TYPE) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_FORMATION_NUM_PER_TYPE) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrLayout[{0}]", __orm_iLoopVar);
				arrLayout[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iCount();
				iCount = oPacker.ReadUINT8();
			}break;
			case 2: {
				set_has_arrID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(byte)__orm_iArrCount;
				iCount=iCount<(byte)TCONST.ORM_FORMATION_NUM_PER_TYPE ? iCount:(byte)TCONST.ORM_FORMATION_NUM_PER_TYPE;
				if (iCount > (int)TCONST.ORM_FORMATION_NUM_PER_TYPE) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 3: {
				set_has_arrLayout();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(byte)__orm_iArrCount;
				iCount=iCount<(byte)TCONST.ORM_FORMATION_NUM_PER_TYPE ? iCount:(byte)TCONST.ORM_FORMATION_NUM_PER_TYPE;
				if (iCount > (int)TCONST.ORM_FORMATION_NUM_PER_TYPE) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrLayout[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 设置阵法英雄req
public class TMSG_FORMATION_LOAD_LAYOUT_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int id;   //阵法id
	private sbyte bLoadByPrimID;   //通过primID加载, 返回该id的全部布局


	public const int MAX_PACKEDSIZE = 21;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_id() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_id() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_id() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_id(int _id){set_has_id(); id=_id;}
	public int get_id(){if (has_id()) {return id;} return 0;}

	public bool has_bLoadByPrimID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_bLoadByPrimID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_bLoadByPrimID() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_bLoadByPrimID(sbyte _bLoadByPrimID){set_has_bLoadByPrimID(); bLoadByPrimID=_bLoadByPrimID;}
	public sbyte get_bLoadByPrimID(){if (has_bLoadByPrimID()) {return bLoadByPrimID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_id()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(id);
		};
		if (has_bLoadByPrimID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bLoadByPrimID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_id()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(id);
		};
		if (has_bLoadByPrimID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bLoadByPrimID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_id();
				id = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_bLoadByPrimID();
				bLoadByPrimID = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 加载阵法rsp
public class TMSG_FORMATION_LOAD_LAYOUT_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private uint u32ErrCode;   //错误码
	private int id;   //req透传
	private sbyte bLoadByPrimID;   //req透传


	public const int MAX_PACKEDSIZE = 31;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_u32ErrCode() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_u32ErrCode() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_u32ErrCode() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_u32ErrCode(uint _u32ErrCode){set_has_u32ErrCode(); u32ErrCode=_u32ErrCode;}
	public uint get_u32ErrCode(){if (has_u32ErrCode()) {return u32ErrCode;} return 0;}

	public bool has_id() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_id() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_id() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_id(int _id){set_has_id(); id=_id;}
	public int get_id(){if (has_id()) {return id;} return 0;}

	public bool has_bLoadByPrimID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_bLoadByPrimID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_bLoadByPrimID() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_bLoadByPrimID(sbyte _bLoadByPrimID){set_has_bLoadByPrimID(); bLoadByPrimID=_bLoadByPrimID;}
	public sbyte get_bLoadByPrimID(){if (has_bLoadByPrimID()) {return bLoadByPrimID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
		if (has_id()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(id);
		};
		if (has_bLoadByPrimID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bLoadByPrimID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_u32ErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintUINT32(u32ErrCode);
		};
		if (has_id()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(id);
		};
		if (has_bLoadByPrimID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bLoadByPrimID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_u32ErrCode();
				u32ErrCode = oPacker.ReadVarintUINT32();
			}break;
			case 2: {
				set_has_id();
				id = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_bLoadByPrimID();
				bLoadByPrimID = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战场参数配置
public class TBattleConfig
{
	private uint[] __orm_has_bits = new uint[2];
	private int iMaxRound;   //最大回合数
	private int iTickPerFrame;   //每帧多少个tick (ms)
	private int iRndSeed;   //随机种子
	private int iMaxComboRate;   //最大连击率, misc.2027
	private int iMaxComboCount;   //最大连击次数    misc 2100 
	private int iMaxCriticalRate;   //最大爆击率 misc2023
	private int iMaxDodgeRate;   //最大闪避率 misc2024
	private int iMaxDizzyRate;   //最大眩晕率 misc2025
	private int iDizzyRound;   //眩晕持续回合 misc 2101
	private int iMaxCounterRate;   //最大反击率 misc2026
	private int iCriticalDamageInc;   //爆击增伤base     misc 2021 
	private int iMinCriticalDamageInc;   //爆击增伤min     misc2022
	private int iSubFormularMinDamageRate;   //减法公式最低伤害     misc 2019 
	private int iAbsorbHpProbabilityMax;   //吸血概率上限     misc 2034 
	private int iAbsorbHpRateBase;   //吸血比例基准    misc 2035 
	private int iAbsorbHpRateMin;   //吸血比例min      misc 2036 
	private int iAbsorbHpRateMax;   //吸血比例max     misc 2037 
	private int iCriticalHitInRound;   //本回合爆击次数     misc 2310 
	private int iDizzyHitInRound;   //本回合击晕次数    misc 2311 
	private int iCounterHitInRound;   //本回合反击次数      misc 2312 
	private int iDodgeHitInRound;   //本回合躲闪次数     misc 2313 
	private int iHealStrengthenMin;   //治疗增强      misc 2032 
	private int iHealStrengthenMax;   //     misc 2033 


	public const int MAX_PACKEDSIZE = 235;

	public void init() {
		for (int __orm_iLoopVar=0; __orm_iLoopVar<2; ++__orm_iLoopVar) {__orm_has_bits[__orm_iLoopVar]=0;};
	}
	public bool has_iMaxRound() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iMaxRound() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iMaxRound() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iMaxRound(int _iMaxRound){set_has_iMaxRound(); iMaxRound=_iMaxRound;}
	public int get_iMaxRound(){if (has_iMaxRound()) {return iMaxRound;} return 30;}

	public bool has_iTickPerFrame() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iTickPerFrame() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iTickPerFrame() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iTickPerFrame(int _iTickPerFrame){set_has_iTickPerFrame(); iTickPerFrame=_iTickPerFrame;}
	public int get_iTickPerFrame(){if (has_iTickPerFrame()) {return iTickPerFrame;} return 40;}

	public bool has_iRndSeed() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iRndSeed() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iRndSeed() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iRndSeed(int _iRndSeed){set_has_iRndSeed(); iRndSeed=_iRndSeed;}
	public int get_iRndSeed(){if (has_iRndSeed()) {return iRndSeed;} return 0;}

	public bool has_iMaxComboRate() {return (__orm_has_bits[0] & 0x100000u) != 0;}
	public void set_has_iMaxComboRate() {__orm_has_bits[0] |= 0x100000u;}
	public void clear_has_iMaxComboRate() {__orm_has_bits[0] &= ~(0x100000u);}
	public void set_iMaxComboRate(int _iMaxComboRate){set_has_iMaxComboRate(); iMaxComboRate=_iMaxComboRate;}
	public int get_iMaxComboRate(){if (has_iMaxComboRate()) {return iMaxComboRate;} return 0;}

	public bool has_iMaxComboCount() {return (__orm_has_bits[0] & 0x400000u) != 0;}
	public void set_has_iMaxComboCount() {__orm_has_bits[0] |= 0x400000u;}
	public void clear_has_iMaxComboCount() {__orm_has_bits[0] &= ~(0x400000u);}
	public void set_iMaxComboCount(int _iMaxComboCount){set_has_iMaxComboCount(); iMaxComboCount=_iMaxComboCount;}
	public int get_iMaxComboCount(){if (has_iMaxComboCount()) {return iMaxComboCount;} return 0;}

	public bool has_iMaxCriticalRate() {return (__orm_has_bits[0] & 0x1000000u) != 0;}
	public void set_has_iMaxCriticalRate() {__orm_has_bits[0] |= 0x1000000u;}
	public void clear_has_iMaxCriticalRate() {__orm_has_bits[0] &= ~(0x1000000u);}
	public void set_iMaxCriticalRate(int _iMaxCriticalRate){set_has_iMaxCriticalRate(); iMaxCriticalRate=_iMaxCriticalRate;}
	public int get_iMaxCriticalRate(){if (has_iMaxCriticalRate()) {return iMaxCriticalRate;} return 0;}

	public bool has_iMaxDodgeRate() {return (__orm_has_bits[0] & 0x4000000u) != 0;}
	public void set_has_iMaxDodgeRate() {__orm_has_bits[0] |= 0x4000000u;}
	public void clear_has_iMaxDodgeRate() {__orm_has_bits[0] &= ~(0x4000000u);}
	public void set_iMaxDodgeRate(int _iMaxDodgeRate){set_has_iMaxDodgeRate(); iMaxDodgeRate=_iMaxDodgeRate;}
	public int get_iMaxDodgeRate(){if (has_iMaxDodgeRate()) {return iMaxDodgeRate;} return 0;}

	public bool has_iMaxDizzyRate() {return (__orm_has_bits[0] & 0x10000000u) != 0;}
	public void set_has_iMaxDizzyRate() {__orm_has_bits[0] |= 0x10000000u;}
	public void clear_has_iMaxDizzyRate() {__orm_has_bits[0] &= ~(0x10000000u);}
	public void set_iMaxDizzyRate(int _iMaxDizzyRate){set_has_iMaxDizzyRate(); iMaxDizzyRate=_iMaxDizzyRate;}
	public int get_iMaxDizzyRate(){if (has_iMaxDizzyRate()) {return iMaxDizzyRate;} return 0;}

	public bool has_iDizzyRound() {return (__orm_has_bits[0] & 0x20000000u) != 0;}
	public void set_has_iDizzyRound() {__orm_has_bits[0] |= 0x20000000u;}
	public void clear_has_iDizzyRound() {__orm_has_bits[0] &= ~(0x20000000u);}
	public void set_iDizzyRound(int _iDizzyRound){set_has_iDizzyRound(); iDizzyRound=_iDizzyRound;}
	public int get_iDizzyRound(){if (has_iDizzyRound()) {return iDizzyRound;} return 0;}

	public bool has_iMaxCounterRate() {return (__orm_has_bits[0] & 0x40000000u) != 0;}
	public void set_has_iMaxCounterRate() {__orm_has_bits[0] |= 0x40000000u;}
	public void clear_has_iMaxCounterRate() {__orm_has_bits[0] &= ~(0x40000000u);}
	public void set_iMaxCounterRate(int _iMaxCounterRate){set_has_iMaxCounterRate(); iMaxCounterRate=_iMaxCounterRate;}
	public int get_iMaxCounterRate(){if (has_iMaxCounterRate()) {return iMaxCounterRate;} return 0;}

	public bool has_iCriticalDamageInc() {return (__orm_has_bits[1] & 0x1u) != 0;}
	public void set_has_iCriticalDamageInc() {__orm_has_bits[1] |= 0x1u;}
	public void clear_has_iCriticalDamageInc() {__orm_has_bits[1] &= ~(0x1u);}
	public void set_iCriticalDamageInc(int _iCriticalDamageInc){set_has_iCriticalDamageInc(); iCriticalDamageInc=_iCriticalDamageInc;}
	public int get_iCriticalDamageInc(){if (has_iCriticalDamageInc()) {return iCriticalDamageInc;} return 0;}

	public bool has_iMinCriticalDamageInc() {return (__orm_has_bits[1] & 0x4u) != 0;}
	public void set_has_iMinCriticalDamageInc() {__orm_has_bits[1] |= 0x4u;}
	public void clear_has_iMinCriticalDamageInc() {__orm_has_bits[1] &= ~(0x4u);}
	public void set_iMinCriticalDamageInc(int _iMinCriticalDamageInc){set_has_iMinCriticalDamageInc(); iMinCriticalDamageInc=_iMinCriticalDamageInc;}
	public int get_iMinCriticalDamageInc(){if (has_iMinCriticalDamageInc()) {return iMinCriticalDamageInc;} return 0;}

	public bool has_iSubFormularMinDamageRate() {return (__orm_has_bits[1] & 0x10u) != 0;}
	public void set_has_iSubFormularMinDamageRate() {__orm_has_bits[1] |= 0x10u;}
	public void clear_has_iSubFormularMinDamageRate() {__orm_has_bits[1] &= ~(0x10u);}
	public void set_iSubFormularMinDamageRate(int _iSubFormularMinDamageRate){set_has_iSubFormularMinDamageRate(); iSubFormularMinDamageRate=_iSubFormularMinDamageRate;}
	public int get_iSubFormularMinDamageRate(){if (has_iSubFormularMinDamageRate()) {return iSubFormularMinDamageRate;} return 1000;}

	public bool has_iAbsorbHpProbabilityMax() {return (__orm_has_bits[1] & 0x40u) != 0;}
	public void set_has_iAbsorbHpProbabilityMax() {__orm_has_bits[1] |= 0x40u;}
	public void clear_has_iAbsorbHpProbabilityMax() {__orm_has_bits[1] &= ~(0x40u);}
	public void set_iAbsorbHpProbabilityMax(int _iAbsorbHpProbabilityMax){set_has_iAbsorbHpProbabilityMax(); iAbsorbHpProbabilityMax=_iAbsorbHpProbabilityMax;}
	public int get_iAbsorbHpProbabilityMax(){if (has_iAbsorbHpProbabilityMax()) {return iAbsorbHpProbabilityMax;} return 0;}

	public bool has_iAbsorbHpRateBase() {return (__orm_has_bits[1] & 0x80u) != 0;}
	public void set_has_iAbsorbHpRateBase() {__orm_has_bits[1] |= 0x80u;}
	public void clear_has_iAbsorbHpRateBase() {__orm_has_bits[1] &= ~(0x80u);}
	public void set_iAbsorbHpRateBase(int _iAbsorbHpRateBase){set_has_iAbsorbHpRateBase(); iAbsorbHpRateBase=_iAbsorbHpRateBase;}
	public int get_iAbsorbHpRateBase(){if (has_iAbsorbHpRateBase()) {return iAbsorbHpRateBase;} return 0;}

	public bool has_iAbsorbHpRateMin() {return (__orm_has_bits[1] & 0x100u) != 0;}
	public void set_has_iAbsorbHpRateMin() {__orm_has_bits[1] |= 0x100u;}
	public void clear_has_iAbsorbHpRateMin() {__orm_has_bits[1] &= ~(0x100u);}
	public void set_iAbsorbHpRateMin(int _iAbsorbHpRateMin){set_has_iAbsorbHpRateMin(); iAbsorbHpRateMin=_iAbsorbHpRateMin;}
	public int get_iAbsorbHpRateMin(){if (has_iAbsorbHpRateMin()) {return iAbsorbHpRateMin;} return 0;}

	public bool has_iAbsorbHpRateMax() {return (__orm_has_bits[1] & 0x200u) != 0;}
	public void set_has_iAbsorbHpRateMax() {__orm_has_bits[1] |= 0x200u;}
	public void clear_has_iAbsorbHpRateMax() {__orm_has_bits[1] &= ~(0x200u);}
	public void set_iAbsorbHpRateMax(int _iAbsorbHpRateMax){set_has_iAbsorbHpRateMax(); iAbsorbHpRateMax=_iAbsorbHpRateMax;}
	public int get_iAbsorbHpRateMax(){if (has_iAbsorbHpRateMax()) {return iAbsorbHpRateMax;} return 0;}

	public bool has_iCriticalHitInRound() {return (__orm_has_bits[1] & 0x1000u) != 0;}
	public void set_has_iCriticalHitInRound() {__orm_has_bits[1] |= 0x1000u;}
	public void clear_has_iCriticalHitInRound() {__orm_has_bits[1] &= ~(0x1000u);}
	public void set_iCriticalHitInRound(int _iCriticalHitInRound){set_has_iCriticalHitInRound(); iCriticalHitInRound=_iCriticalHitInRound;}
	public int get_iCriticalHitInRound(){if (has_iCriticalHitInRound()) {return iCriticalHitInRound;} return 10;}

	public bool has_iDizzyHitInRound() {return (__orm_has_bits[1] & 0x2000u) != 0;}
	public void set_has_iDizzyHitInRound() {__orm_has_bits[1] |= 0x2000u;}
	public void clear_has_iDizzyHitInRound() {__orm_has_bits[1] &= ~(0x2000u);}
	public void set_iDizzyHitInRound(int _iDizzyHitInRound){set_has_iDizzyHitInRound(); iDizzyHitInRound=_iDizzyHitInRound;}
	public int get_iDizzyHitInRound(){if (has_iDizzyHitInRound()) {return iDizzyHitInRound;} return 10;}

	public bool has_iCounterHitInRound() {return (__orm_has_bits[1] & 0x4000u) != 0;}
	public void set_has_iCounterHitInRound() {__orm_has_bits[1] |= 0x4000u;}
	public void clear_has_iCounterHitInRound() {__orm_has_bits[1] &= ~(0x4000u);}
	public void set_iCounterHitInRound(int _iCounterHitInRound){set_has_iCounterHitInRound(); iCounterHitInRound=_iCounterHitInRound;}
	public int get_iCounterHitInRound(){if (has_iCounterHitInRound()) {return iCounterHitInRound;} return 10;}

	public bool has_iDodgeHitInRound() {return (__orm_has_bits[1] & 0x8000u) != 0;}
	public void set_has_iDodgeHitInRound() {__orm_has_bits[1] |= 0x8000u;}
	public void clear_has_iDodgeHitInRound() {__orm_has_bits[1] &= ~(0x8000u);}
	public void set_iDodgeHitInRound(int _iDodgeHitInRound){set_has_iDodgeHitInRound(); iDodgeHitInRound=_iDodgeHitInRound;}
	public int get_iDodgeHitInRound(){if (has_iDodgeHitInRound()) {return iDodgeHitInRound;} return 10;}

	public bool has_iHealStrengthenMin() {return (__orm_has_bits[1] & 0x20000u) != 0;}
	public void set_has_iHealStrengthenMin() {__orm_has_bits[1] |= 0x20000u;}
	public void clear_has_iHealStrengthenMin() {__orm_has_bits[1] &= ~(0x20000u);}
	public void set_iHealStrengthenMin(int _iHealStrengthenMin){set_has_iHealStrengthenMin(); iHealStrengthenMin=_iHealStrengthenMin;}
	public int get_iHealStrengthenMin(){if (has_iHealStrengthenMin()) {return iHealStrengthenMin;} return 0;}

	public bool has_iHealStrengthenMax() {return (__orm_has_bits[1] & 0x40000u) != 0;}
	public void set_has_iHealStrengthenMax() {__orm_has_bits[1] |= 0x40000u;}
	public void clear_has_iHealStrengthenMax() {__orm_has_bits[1] &= ~(0x40000u);}
	public void set_iHealStrengthenMax(int _iHealStrengthenMax){set_has_iHealStrengthenMax(); iHealStrengthenMax=_iHealStrengthenMax;}
	public int get_iHealStrengthenMax(){if (has_iHealStrengthenMax()) {return iHealStrengthenMax;} return 15000;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMaxRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iMaxRound);
		};
		if (has_iTickPerFrame()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iTickPerFrame);
		};
		if (has_iRndSeed()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iRndSeed);
		};
		if (has_iMaxComboRate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(20,0));  // f id
			oPacker.WriteVarintINT32(iMaxComboRate);
		};
		if (has_iMaxComboCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(22,0));  // f id
			oPacker.WriteVarintINT32(iMaxComboCount);
		};
		if (has_iMaxCriticalRate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(24,0));  // f id
			oPacker.WriteVarintINT32(iMaxCriticalRate);
		};
		if (has_iMaxDodgeRate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(26,0));  // f id
			oPacker.WriteVarintINT32(iMaxDodgeRate);
		};
		if (has_iMaxDizzyRate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(28,0));  // f id
			oPacker.WriteVarintINT32(iMaxDizzyRate);
		};
		if (has_iDizzyRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(29,0));  // f id
			oPacker.WriteVarintINT32(iDizzyRound);
		};
		if (has_iMaxCounterRate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,0));  // f id
			oPacker.WriteVarintINT32(iMaxCounterRate);
		};
		if (has_iCriticalDamageInc()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(32,0));  // f id
			oPacker.WriteVarintINT32(iCriticalDamageInc);
		};
		if (has_iMinCriticalDamageInc()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(34,0));  // f id
			oPacker.WriteVarintINT32(iMinCriticalDamageInc);
		};
		if (has_iSubFormularMinDamageRate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(36,0));  // f id
			oPacker.WriteVarintINT32(iSubFormularMinDamageRate);
		};
		if (has_iAbsorbHpProbabilityMax()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(38,0));  // f id
			oPacker.WriteVarintINT32(iAbsorbHpProbabilityMax);
		};
		if (has_iAbsorbHpRateBase()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(39,0));  // f id
			oPacker.WriteVarintINT32(iAbsorbHpRateBase);
		};
		if (has_iAbsorbHpRateMin()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(40,0));  // f id
			oPacker.WriteVarintINT32(iAbsorbHpRateMin);
		};
		if (has_iAbsorbHpRateMax()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(41,0));  // f id
			oPacker.WriteVarintINT32(iAbsorbHpRateMax);
		};
		if (has_iCriticalHitInRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(44,0));  // f id
			oPacker.WriteVarintINT32(iCriticalHitInRound);
		};
		if (has_iDizzyHitInRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(45,0));  // f id
			oPacker.WriteVarintINT32(iDizzyHitInRound);
		};
		if (has_iCounterHitInRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(46,0));  // f id
			oPacker.WriteVarintINT32(iCounterHitInRound);
		};
		if (has_iDodgeHitInRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(47,0));  // f id
			oPacker.WriteVarintINT32(iDodgeHitInRound);
		};
		if (has_iHealStrengthenMin()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(49,0));  // f id
			oPacker.WriteVarintINT32(iHealStrengthenMin);
		};
		if (has_iHealStrengthenMax()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(50,0));  // f id
			oPacker.WriteVarintINT32(iHealStrengthenMax);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMaxRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iMaxRound);
		};
		if (has_iTickPerFrame()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iTickPerFrame);
		};
		if (has_iRndSeed()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iRndSeed);
		};
		if (has_iMaxComboRate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(20,0));  // f id
			oPacker.WriteVarintINT32(iMaxComboRate);
		};
		if (has_iMaxComboCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(22,0));  // f id
			oPacker.WriteVarintINT32(iMaxComboCount);
		};
		if (has_iMaxCriticalRate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(24,0));  // f id
			oPacker.WriteVarintINT32(iMaxCriticalRate);
		};
		if (has_iMaxDodgeRate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(26,0));  // f id
			oPacker.WriteVarintINT32(iMaxDodgeRate);
		};
		if (has_iMaxDizzyRate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(28,0));  // f id
			oPacker.WriteVarintINT32(iMaxDizzyRate);
		};
		if (has_iDizzyRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(29,0));  // f id
			oPacker.WriteVarintINT32(iDizzyRound);
		};
		if (has_iMaxCounterRate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,0));  // f id
			oPacker.WriteVarintINT32(iMaxCounterRate);
		};
		if (has_iCriticalDamageInc()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(32,0));  // f id
			oPacker.WriteVarintINT32(iCriticalDamageInc);
		};
		if (has_iMinCriticalDamageInc()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(34,0));  // f id
			oPacker.WriteVarintINT32(iMinCriticalDamageInc);
		};
		if (has_iSubFormularMinDamageRate()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(36,0));  // f id
			oPacker.WriteVarintINT32(iSubFormularMinDamageRate);
		};
		if (has_iAbsorbHpProbabilityMax()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(38,0));  // f id
			oPacker.WriteVarintINT32(iAbsorbHpProbabilityMax);
		};
		if (has_iAbsorbHpRateBase()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(39,0));  // f id
			oPacker.WriteVarintINT32(iAbsorbHpRateBase);
		};
		if (has_iAbsorbHpRateMin()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(40,0));  // f id
			oPacker.WriteVarintINT32(iAbsorbHpRateMin);
		};
		if (has_iAbsorbHpRateMax()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(41,0));  // f id
			oPacker.WriteVarintINT32(iAbsorbHpRateMax);
		};
		if (has_iCriticalHitInRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(44,0));  // f id
			oPacker.WriteVarintINT32(iCriticalHitInRound);
		};
		if (has_iDizzyHitInRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(45,0));  // f id
			oPacker.WriteVarintINT32(iDizzyHitInRound);
		};
		if (has_iCounterHitInRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(46,0));  // f id
			oPacker.WriteVarintINT32(iCounterHitInRound);
		};
		if (has_iDodgeHitInRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(47,0));  // f id
			oPacker.WriteVarintINT32(iDodgeHitInRound);
		};
		if (has_iHealStrengthenMin()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(49,0));  // f id
			oPacker.WriteVarintINT32(iHealStrengthenMin);
		};
		if (has_iHealStrengthenMax()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(50,0));  // f id
			oPacker.WriteVarintINT32(iHealStrengthenMax);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 6: {
				set_has_iMaxRound();
				iMaxRound = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iTickPerFrame();
				iTickPerFrame = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_iRndSeed();
				iRndSeed = oPacker.ReadVarintINT32();
			}break;
			case 20: {
				set_has_iMaxComboRate();
				iMaxComboRate = oPacker.ReadVarintINT32();
			}break;
			case 22: {
				set_has_iMaxComboCount();
				iMaxComboCount = oPacker.ReadVarintINT32();
			}break;
			case 24: {
				set_has_iMaxCriticalRate();
				iMaxCriticalRate = oPacker.ReadVarintINT32();
			}break;
			case 26: {
				set_has_iMaxDodgeRate();
				iMaxDodgeRate = oPacker.ReadVarintINT32();
			}break;
			case 28: {
				set_has_iMaxDizzyRate();
				iMaxDizzyRate = oPacker.ReadVarintINT32();
			}break;
			case 29: {
				set_has_iDizzyRound();
				iDizzyRound = oPacker.ReadVarintINT32();
			}break;
			case 30: {
				set_has_iMaxCounterRate();
				iMaxCounterRate = oPacker.ReadVarintINT32();
			}break;
			case 32: {
				set_has_iCriticalDamageInc();
				iCriticalDamageInc = oPacker.ReadVarintINT32();
			}break;
			case 34: {
				set_has_iMinCriticalDamageInc();
				iMinCriticalDamageInc = oPacker.ReadVarintINT32();
			}break;
			case 36: {
				set_has_iSubFormularMinDamageRate();
				iSubFormularMinDamageRate = oPacker.ReadVarintINT32();
			}break;
			case 38: {
				set_has_iAbsorbHpProbabilityMax();
				iAbsorbHpProbabilityMax = oPacker.ReadVarintINT32();
			}break;
			case 39: {
				set_has_iAbsorbHpRateBase();
				iAbsorbHpRateBase = oPacker.ReadVarintINT32();
			}break;
			case 40: {
				set_has_iAbsorbHpRateMin();
				iAbsorbHpRateMin = oPacker.ReadVarintINT32();
			}break;
			case 41: {
				set_has_iAbsorbHpRateMax();
				iAbsorbHpRateMax = oPacker.ReadVarintINT32();
			}break;
			case 44: {
				set_has_iCriticalHitInRound();
				iCriticalHitInRound = oPacker.ReadVarintINT32();
			}break;
			case 45: {
				set_has_iDizzyHitInRound();
				iDizzyHitInRound = oPacker.ReadVarintINT32();
			}break;
			case 46: {
				set_has_iCounterHitInRound();
				iCounterHitInRound = oPacker.ReadVarintINT32();
			}break;
			case 47: {
				set_has_iDodgeHitInRound();
				iDodgeHitInRound = oPacker.ReadVarintINT32();
			}break;
			case 49: {
				set_has_iHealStrengthenMin();
				iHealStrengthenMin = oPacker.ReadVarintINT32();
			}break;
			case 50: {
				set_has_iHealStrengthenMax();
				iHealStrengthenMax = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 装备定义
public class TBattleEquip
{
	private uint[] __orm_has_bits = new uint[1];
	private long iLocalId;   //本地id
	private int iEquipId;   //装备id
	private int iPos;   //位置
	private int iRot;   //旋转


	public const int MAX_PACKEDSIZE = 50;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLocalId(long _iLocalId){set_has_iLocalId(); iLocalId=_iLocalId;}
	public long get_iLocalId(){if (has_iLocalId()) {return iLocalId;} return 0;}

	public bool has_iEquipId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iEquipId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iEquipId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iEquipId(int _iEquipId){set_has_iEquipId(); iEquipId=_iEquipId;}
	public int get_iEquipId(){if (has_iEquipId()) {return iEquipId;} return 0;}

	public bool has_iPos() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iPos() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iPos() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iPos(int _iPos){set_has_iPos(); iPos=_iPos;}
	public int get_iPos(){if (has_iPos()) {return iPos;} return -1;}

	public bool has_iRot() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRot() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRot() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRot(int _iRot){set_has_iRot(); iRot=_iRot;}
	public int get_iRot(){if (has_iRot()) {return iRot;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_iEquipId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iEquipId);
		};
		if (has_iPos()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iPos);
		};
		if (has_iRot()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRot);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_iEquipId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iEquipId);
		};
		if (has_iPos()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iPos);
		};
		if (has_iRot()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRot);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLocalId();
				iLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iEquipId();
				iEquipId = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iPos();
				iPos = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iRot();
				iRot = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗技能定义
public class TBattleSkillInfo
{
	private uint[] __orm_has_bits = new uint[1];
	private int iLocalId;   //技能唯一id
	private int iSkillId;   //技能表id
	private long iEquipLid;   //对应的装备id
	private int iPropNum;   //使用该技能时,提升的瞬间提升的能力
	private TK32V32[] arrProp = new TK32V32[(int)16];   //EnBatEntityProp 
	public TBattleSkillInfo() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)16; ++__orm_iLoopVar) {
			arrProp[__orm_iLoopVar] = new TK32V32();
		}
	}

	public const int countof_arrProp = (int)16;

	public const int MAX_PACKEDSIZE = 464;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)16; ++__orm_iLoopVar){arrProp[__orm_iLoopVar].init();}
	}
	public bool has_iLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLocalId(int _iLocalId){set_has_iLocalId(); iLocalId=_iLocalId;}
	public int get_iLocalId(){if (has_iLocalId()) {return iLocalId;} return 0;}

	public bool has_iSkillId() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iSkillId() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iSkillId() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iSkillId(int _iSkillId){set_has_iSkillId(); iSkillId=_iSkillId;}
	public int get_iSkillId(){if (has_iSkillId()) {return iSkillId;} return 0;}

	public bool has_iEquipLid() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iEquipLid() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iEquipLid() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iEquipLid(long _iEquipLid){set_has_iEquipLid(); iEquipLid=_iEquipLid;}
	public long get_iEquipLid(){if (has_iEquipLid()) {return iEquipLid;} return 0;}

	public bool has_iPropNum() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iPropNum() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iPropNum() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iPropNum(int _iPropNum){set_has_iPropNum(); iPropNum=_iPropNum;}
	public int get_iPropNum(){if (has_iPropNum()) {return iPropNum;} return 0;}

	public bool has_arrProp() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrProp() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrProp() {__orm_has_bits[0] &= ~(0x20u);}
	public TK32V32[] set_arrProp(){set_has_arrProp(); return arrProp;}
	public TK32V32[] get_arrProp(){return arrProp;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLocalId);
		};
		if (has_iSkillId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSkillId);
		};
		if (has_iEquipLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iEquipLid);
		};
		if (has_iPropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPropNum);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropNum();
			if (__orm_ReferVar > (int)16) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)16) && (__orm_iLoopVar < iPropNum); ++__orm_iLoopVar) {
				arrProp[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLocalId);
		};
		if (has_iSkillId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSkillId);
		};
		if (has_iEquipLid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iEquipLid);
		};
		if (has_iPropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPropNum);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropNum();
			if (__orm_ReferVar > (int)16) {
				oPacker.PushFieldName("iPropNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)16) && (__orm_iLoopVar < iPropNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrProp[{0}]", __orm_iLoopVar);
				arrProp[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLocalId();
				iLocalId = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iSkillId();
				iSkillId = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iEquipLid();
				iEquipLid = oPacker.ReadVarintINT64();
			}break;
			case 4: {
				set_has_iPropNum();
				iPropNum = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_arrProp();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPropNum=iPropNum<__orm_iArrCount ? iPropNum:(int)__orm_iArrCount;
				iPropNum=iPropNum<(int)16 ? iPropNum:(int)16;
				if (iPropNum > (int)16) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPropNum; ++__orm_iLoopVar) {
					arrProp[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// buffer
public class TBuffer
{
	private uint[] __orm_has_bits = new uint[1];
	private int iBufferID;   //
	private short iRemainRound;   //剩余回合
	private short iLayer;   //层数


	public const int MAX_PACKEDSIZE = 31;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iBufferID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iBufferID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iBufferID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iBufferID(int _iBufferID){set_has_iBufferID(); iBufferID=_iBufferID;}
	public int get_iBufferID(){if (has_iBufferID()) {return iBufferID;} return 0;}

	public bool has_iRemainRound() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iRemainRound() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iRemainRound() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iRemainRound(short _iRemainRound){set_has_iRemainRound(); iRemainRound=_iRemainRound;}
	public short get_iRemainRound(){if (has_iRemainRound()) {return iRemainRound;} return 0;}

	public bool has_iLayer() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iLayer() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iLayer() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iLayer(short _iLayer){set_has_iLayer(); iLayer=_iLayer;}
	public short get_iLayer(){if (has_iLayer()) {return iLayer;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
		if (has_iRemainRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT16(iRemainRound);
		};
		if (has_iLayer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT16(iLayer);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
		if (has_iRemainRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT16(iRemainRound);
		};
		if (has_iLayer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT16(iLayer);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iBufferID();
				iBufferID = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iRemainRound();
				iRemainRound = oPacker.ReadVarintINT16();
			}break;
			case 6: {
				set_has_iLayer();
				iLayer = oPacker.ReadVarintINT16();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// buffer 列表
public class TBufferList
{
	private uint[] __orm_has_bits = new uint[1];
	private int iNum;   //
	private TBuffer[] arrBuffer = new TBuffer[(int)TCONST.BATTLE_BUFFERNUM_IN_LIST];   //
	public TBufferList() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.BATTLE_BUFFERNUM_IN_LIST; ++__orm_iLoopVar) {
			arrBuffer[__orm_iLoopVar] = new TBuffer();
		}
	}

	public const int countof_arrBuffer = (int)TCONST.BATTLE_BUFFERNUM_IN_LIST;

	public const int MAX_PACKEDSIZE = 1021;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.BATTLE_BUFFERNUM_IN_LIST; ++__orm_iLoopVar){arrBuffer[__orm_iLoopVar].init();}
	}
	public bool has_iNum() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iNum() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iNum() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iNum(int _iNum){set_has_iNum(); iNum=_iNum;}
	public int get_iNum(){if (has_iNum()) {return iNum;} return 0;}

	public bool has_arrBuffer() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrBuffer() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrBuffer() {__orm_has_bits[0] &= ~(0x10u);}
	public TBuffer[] set_arrBuffer(){set_has_arrBuffer(); return arrBuffer;}
	public TBuffer[] get_arrBuffer(){return arrBuffer;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
		if (has_arrBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_BUFFERNUM_IN_LIST) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_BUFFERNUM_IN_LIST) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
				arrBuffer[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
		if (has_arrBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_BUFFERNUM_IN_LIST) {
				oPacker.PushFieldName("iNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_BUFFERNUM_IN_LIST) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrBuffer[{0}]", __orm_iLoopVar);
				arrBuffer[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iNum();
				iNum = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_arrBuffer();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iNum=iNum<__orm_iArrCount ? iNum:(int)__orm_iArrCount;
				iNum=iNum<(int)TCONST.BATTLE_BUFFERNUM_IN_LIST ? iNum:(int)TCONST.BATTLE_BUFFERNUM_IN_LIST;
				if (iNum > (int)TCONST.BATTLE_BUFFERNUM_IN_LIST) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iNum; ++__orm_iLoopVar) {
					arrBuffer[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 冷却项
public class TColdingItem2
{
	private uint[] __orm_has_bits = new uint[1];
	private int iGroup;   //分组,  技能/ai /...
	private int iID;   //冷却项ID,  
	private int iRound;   //


	public const int MAX_PACKEDSIZE = 35;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iGroup() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iGroup() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iGroup() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iGroup(int _iGroup){set_has_iGroup(); iGroup=_iGroup;}
	public int get_iGroup(){if (has_iGroup()) {return iGroup;} return 0;}

	public bool has_iID() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iID() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iID() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iID(int _iID){set_has_iID(); iID=_iID;}
	public int get_iID(){if (has_iID()) {return iID;} return 0;}

	public bool has_iRound() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iRound() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iRound() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iRound(int _iRound){set_has_iRound(); iRound=_iRound;}
	public int get_iRound(){if (has_iRound()) {return iRound;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iGroup()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGroup);
		};
		if (has_iID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iID);
		};
		if (has_iRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iRound);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iGroup()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGroup);
		};
		if (has_iID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iID);
		};
		if (has_iRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iRound);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iGroup();
				iGroup = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iID();
				iID = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iRound();
				iRound = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 冷却列表
public class TColdingList
{
	private uint[] __orm_has_bits = new uint[1];
	private int iNum;   //
	private TColdingItem2[] arrItem = new TColdingItem2[(int)64];   //
	public TColdingList() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)64; ++__orm_iLoopVar) {
			arrItem[__orm_iLoopVar] = new TColdingItem2();
		}
	}

	public const int countof_arrItem = (int)64;

	public const int MAX_PACKEDSIZE = 2269;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)64; ++__orm_iLoopVar){arrItem[__orm_iLoopVar].init();}
	}
	public bool has_iNum() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iNum() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iNum() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iNum(int _iNum){set_has_iNum(); iNum=_iNum;}
	public int get_iNum(){if (has_iNum()) {return iNum;} return 0;}

	public bool has_arrItem() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrItem() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrItem() {__orm_has_bits[0] &= ~(0x10u);}
	public TColdingItem2[] set_arrItem(){set_has_arrItem(); return arrItem;}
	public TColdingItem2[] get_arrItem(){return arrItem;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
		if (has_arrItem()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)64) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)64) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
				arrItem[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
		if (has_arrItem()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)64) {
				oPacker.PushFieldName("iNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)64) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrItem[{0}]", __orm_iLoopVar);
				arrItem[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iNum();
				iNum = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_arrItem();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iNum=iNum<__orm_iArrCount ? iNum:(int)__orm_iArrCount;
				iNum=iNum<(int)64 ? iNum:(int)64;
				if (iNum > (int)64) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iNum; ++__orm_iLoopVar) {
					arrItem[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 实体透传数据
public class TEntityPass
{
	private uint[] __orm_has_bits = new uint[2];
	private string szName;   //名称
	private int iGodExam;   //渡劫成功次数
	private int iIsPlayer;   //0  怪物角色; 1   是玩家角色
	private int iCreatureID;   //代表生物配置,例如怪物ID,弟子ID等
	private int iSkin_Upper;   //上身衣服
	private int iSkin_Lower;   //下身衣服
	private int iSkin_OutFit;   //套装
	private int iSkin_Hair;   //头发
	private int iSkin_Eye;   //眼睛
	private int iSkin_Weapon;   //武器
	private int iSkin_Body;   //身体
	private int iSkin_Mouth;   //嘴+鼻子
	private int iDisplayer;   //外观.   
	private int iTechnique;   //功法属性
	private int iLevel;   //等级
	private int iPower;   //弟子战力
	private int iWanderPackageLevel;   //背包等级
	private int[] arrTechniqueElement = new int[(int)EnTechniqueElement.TechniqueElement_MAX];   //属性共鸣值
	private int[] arrWeaponForm = new int[(int)EnWeaponForm.WeaponForm_MAX];   //形态共鸣值
	private int iAbilityNum;   //词条数量
	private int[] arrAbility = new int[(int)TCONST.BATTLE_ENTITY_ABILITY_MAX];   //词条
	private long[] arrLevelUnlocked = new long[(int)1];   //被解锁的背包等级，位图

	public const int countof_arrTechniqueElement = (int)EnTechniqueElement.TechniqueElement_MAX;
	public const int countof_arrWeaponForm = (int)EnWeaponForm.WeaponForm_MAX;
	public const int countof_arrAbility = (int)TCONST.BATTLE_ENTITY_ABILITY_MAX;
	public const int countof_arrLevelUnlocked = (int)1;

	public const int MAX_PACKEDSIZE = 428;

	public void init() {
		for (int __orm_iLoopVar=0; __orm_iLoopVar<2; ++__orm_iLoopVar) {__orm_has_bits[__orm_iLoopVar]=0;};
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)EnTechniqueElement.TechniqueElement_MAX; ++__orm_iLoopVar){arrTechniqueElement[__orm_iLoopVar]=0;}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)EnWeaponForm.WeaponForm_MAX; ++__orm_iLoopVar){arrWeaponForm[__orm_iLoopVar]=0;}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)1; ++__orm_iLoopVar){arrLevelUnlocked[__orm_iLoopVar]=0;}
	}
	public bool has_szName() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_szName() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_szName() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_szName(string _szName){set_has_szName(); szName=_szName;}
	public string get_szName(){if (has_szName()) {return szName;} return "";}

	public bool has_iGodExam() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iGodExam() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iGodExam() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iGodExam(int _iGodExam){set_has_iGodExam(); iGodExam=_iGodExam;}
	public int get_iGodExam(){if (has_iGodExam()) {return iGodExam;} return 0;}

	public bool has_iIsPlayer() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iIsPlayer() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iIsPlayer() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iIsPlayer(int _iIsPlayer){set_has_iIsPlayer(); iIsPlayer=_iIsPlayer;}
	public int get_iIsPlayer(){if (has_iIsPlayer()) {return iIsPlayer;} return 0;}

	public bool has_iCreatureID() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iCreatureID() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iCreatureID() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iCreatureID(int _iCreatureID){set_has_iCreatureID(); iCreatureID=_iCreatureID;}
	public int get_iCreatureID(){if (has_iCreatureID()) {return iCreatureID;} return 0;}

	public bool has_iSkin_Upper() {return (__orm_has_bits[0] & 0x10000u) != 0;}
	public void set_has_iSkin_Upper() {__orm_has_bits[0] |= 0x10000u;}
	public void clear_has_iSkin_Upper() {__orm_has_bits[0] &= ~(0x10000u);}
	public void set_iSkin_Upper(int _iSkin_Upper){set_has_iSkin_Upper(); iSkin_Upper=_iSkin_Upper;}
	public int get_iSkin_Upper(){if (has_iSkin_Upper()) {return iSkin_Upper;} return 0;}

	public bool has_iSkin_Lower() {return (__orm_has_bits[0] & 0x20000u) != 0;}
	public void set_has_iSkin_Lower() {__orm_has_bits[0] |= 0x20000u;}
	public void clear_has_iSkin_Lower() {__orm_has_bits[0] &= ~(0x20000u);}
	public void set_iSkin_Lower(int _iSkin_Lower){set_has_iSkin_Lower(); iSkin_Lower=_iSkin_Lower;}
	public int get_iSkin_Lower(){if (has_iSkin_Lower()) {return iSkin_Lower;} return 0;}

	public bool has_iSkin_OutFit() {return (__orm_has_bits[0] & 0x40000u) != 0;}
	public void set_has_iSkin_OutFit() {__orm_has_bits[0] |= 0x40000u;}
	public void clear_has_iSkin_OutFit() {__orm_has_bits[0] &= ~(0x40000u);}
	public void set_iSkin_OutFit(int _iSkin_OutFit){set_has_iSkin_OutFit(); iSkin_OutFit=_iSkin_OutFit;}
	public int get_iSkin_OutFit(){if (has_iSkin_OutFit()) {return iSkin_OutFit;} return 0;}

	public bool has_iSkin_Hair() {return (__orm_has_bits[0] & 0x80000u) != 0;}
	public void set_has_iSkin_Hair() {__orm_has_bits[0] |= 0x80000u;}
	public void clear_has_iSkin_Hair() {__orm_has_bits[0] &= ~(0x80000u);}
	public void set_iSkin_Hair(int _iSkin_Hair){set_has_iSkin_Hair(); iSkin_Hair=_iSkin_Hair;}
	public int get_iSkin_Hair(){if (has_iSkin_Hair()) {return iSkin_Hair;} return 0;}

	public bool has_iSkin_Eye() {return (__orm_has_bits[0] & 0x100000u) != 0;}
	public void set_has_iSkin_Eye() {__orm_has_bits[0] |= 0x100000u;}
	public void clear_has_iSkin_Eye() {__orm_has_bits[0] &= ~(0x100000u);}
	public void set_iSkin_Eye(int _iSkin_Eye){set_has_iSkin_Eye(); iSkin_Eye=_iSkin_Eye;}
	public int get_iSkin_Eye(){if (has_iSkin_Eye()) {return iSkin_Eye;} return 0;}

	public bool has_iSkin_Weapon() {return (__orm_has_bits[0] & 0x200000u) != 0;}
	public void set_has_iSkin_Weapon() {__orm_has_bits[0] |= 0x200000u;}
	public void clear_has_iSkin_Weapon() {__orm_has_bits[0] &= ~(0x200000u);}
	public void set_iSkin_Weapon(int _iSkin_Weapon){set_has_iSkin_Weapon(); iSkin_Weapon=_iSkin_Weapon;}
	public int get_iSkin_Weapon(){if (has_iSkin_Weapon()) {return iSkin_Weapon;} return 0;}

	public bool has_iSkin_Body() {return (__orm_has_bits[0] & 0x400000u) != 0;}
	public void set_has_iSkin_Body() {__orm_has_bits[0] |= 0x400000u;}
	public void clear_has_iSkin_Body() {__orm_has_bits[0] &= ~(0x400000u);}
	public void set_iSkin_Body(int _iSkin_Body){set_has_iSkin_Body(); iSkin_Body=_iSkin_Body;}
	public int get_iSkin_Body(){if (has_iSkin_Body()) {return iSkin_Body;} return 0;}

	public bool has_iSkin_Mouth() {return (__orm_has_bits[0] & 0x800000u) != 0;}
	public void set_has_iSkin_Mouth() {__orm_has_bits[0] |= 0x800000u;}
	public void clear_has_iSkin_Mouth() {__orm_has_bits[0] &= ~(0x800000u);}
	public void set_iSkin_Mouth(int _iSkin_Mouth){set_has_iSkin_Mouth(); iSkin_Mouth=_iSkin_Mouth;}
	public int get_iSkin_Mouth(){if (has_iSkin_Mouth()) {return iSkin_Mouth;} return 0;}

	public bool has_iDisplayer() {return (__orm_has_bits[0] & 0x40000000u) != 0;}
	public void set_has_iDisplayer() {__orm_has_bits[0] |= 0x40000000u;}
	public void clear_has_iDisplayer() {__orm_has_bits[0] &= ~(0x40000000u);}
	public void set_iDisplayer(int _iDisplayer){set_has_iDisplayer(); iDisplayer=_iDisplayer;}
	public int get_iDisplayer(){if (has_iDisplayer()) {return iDisplayer;} return 0;}

	public bool has_iTechnique() {return (__orm_has_bits[1] & 0x1u) != 0;}
	public void set_has_iTechnique() {__orm_has_bits[1] |= 0x1u;}
	public void clear_has_iTechnique() {__orm_has_bits[1] &= ~(0x1u);}
	public void set_iTechnique(int _iTechnique){set_has_iTechnique(); iTechnique=_iTechnique;}
	public int get_iTechnique(){if (has_iTechnique()) {return iTechnique;} return 0;}

	public bool has_iLevel() {return (__orm_has_bits[1] & 0x4u) != 0;}
	public void set_has_iLevel() {__orm_has_bits[1] |= 0x4u;}
	public void clear_has_iLevel() {__orm_has_bits[1] &= ~(0x4u);}
	public void set_iLevel(int _iLevel){set_has_iLevel(); iLevel=_iLevel;}
	public int get_iLevel(){if (has_iLevel()) {return iLevel;} return 0;}

	public bool has_iPower() {return (__orm_has_bits[1] & 0x10u) != 0;}
	public void set_has_iPower() {__orm_has_bits[1] |= 0x10u;}
	public void clear_has_iPower() {__orm_has_bits[1] &= ~(0x10u);}
	public void set_iPower(int _iPower){set_has_iPower(); iPower=_iPower;}
	public int get_iPower(){if (has_iPower()) {return iPower;} return 0;}

	public bool has_iWanderPackageLevel() {return (__orm_has_bits[1] & 0x40u) != 0;}
	public void set_has_iWanderPackageLevel() {__orm_has_bits[1] |= 0x40u;}
	public void clear_has_iWanderPackageLevel() {__orm_has_bits[1] &= ~(0x40u);}
	public void set_iWanderPackageLevel(int _iWanderPackageLevel){set_has_iWanderPackageLevel(); iWanderPackageLevel=_iWanderPackageLevel;}
	public int get_iWanderPackageLevel(){if (has_iWanderPackageLevel()) {return iWanderPackageLevel;} return 0;}

	public bool has_arrTechniqueElement() {return (__orm_has_bits[1] & 0x80u) != 0;}
	public void set_has_arrTechniqueElement() {__orm_has_bits[1] |= 0x80u;}
	public void clear_has_arrTechniqueElement() {__orm_has_bits[1] &= ~(0x80u);}
	public int[] set_arrTechniqueElement(){set_has_arrTechniqueElement(); return arrTechniqueElement;}
	public int[] get_arrTechniqueElement(){return arrTechniqueElement;}

	public bool has_arrWeaponForm() {return (__orm_has_bits[1] & 0x100u) != 0;}
	public void set_has_arrWeaponForm() {__orm_has_bits[1] |= 0x100u;}
	public void clear_has_arrWeaponForm() {__orm_has_bits[1] &= ~(0x100u);}
	public int[] set_arrWeaponForm(){set_has_arrWeaponForm(); return arrWeaponForm;}
	public int[] get_arrWeaponForm(){return arrWeaponForm;}

	public bool has_iAbilityNum() {return (__orm_has_bits[1] & 0x200u) != 0;}
	public void set_has_iAbilityNum() {__orm_has_bits[1] |= 0x200u;}
	public void clear_has_iAbilityNum() {__orm_has_bits[1] &= ~(0x200u);}
	public void set_iAbilityNum(int _iAbilityNum){set_has_iAbilityNum(); iAbilityNum=_iAbilityNum;}
	public int get_iAbilityNum(){if (has_iAbilityNum()) {return iAbilityNum;} return 0;}

	public bool has_arrAbility() {return (__orm_has_bits[1] & 0x400u) != 0;}
	public void set_has_arrAbility() {__orm_has_bits[1] |= 0x400u;}
	public void clear_has_arrAbility() {__orm_has_bits[1] &= ~(0x400u);}
	public int[] set_arrAbility(){set_has_arrAbility(); return arrAbility;}
	public int[] get_arrAbility(){return arrAbility;}

	public bool has_arrLevelUnlocked() {return (__orm_has_bits[1] & 0x800u) != 0;}
	public void set_has_arrLevelUnlocked() {__orm_has_bits[1] |= 0x800u;}
	public void clear_has_arrLevelUnlocked() {__orm_has_bits[1] &= ~(0x800u);}
	public long[] set_arrLevelUnlocked(){set_has_arrLevelUnlocked(); return arrLevelUnlocked;}
	public long[] get_arrLevelUnlocked(){return arrLevelUnlocked;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,3));  // f id
			oPacker.WriteSTRING(szName);
		};
		if (has_iGodExam()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iGodExam);
		};
		if (has_iIsPlayer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iIsPlayer);
		};
		if (has_iCreatureID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iCreatureID);
		};
		if (has_iSkin_Upper()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Upper);
		};
		if (has_iSkin_Lower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Lower);
		};
		if (has_iSkin_OutFit()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,0));  // f id
			oPacker.WriteVarintINT32(iSkin_OutFit);
		};
		if (has_iSkin_Hair()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(19,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Hair);
		};
		if (has_iSkin_Eye()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(20,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Eye);
		};
		if (has_iSkin_Weapon()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(21,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Weapon);
		};
		if (has_iSkin_Body()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(22,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Body);
		};
		if (has_iSkin_Mouth()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(23,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Mouth);
		};
		if (has_iDisplayer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,0));  // f id
			oPacker.WriteVarintINT32(iDisplayer);
		};
		if (has_iTechnique()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(32,0));  // f id
			oPacker.WriteVarintINT32(iTechnique);
		};
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(34,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
		if (has_iPower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(36,0));  // f id
			oPacker.WriteVarintINT32(iPower);
		};
		if (has_iWanderPackageLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(38,0));  // f id
			oPacker.WriteVarintINT32(iWanderPackageLevel);
		};
		if (has_arrTechniqueElement()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(39,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)EnTechniqueElement.TechniqueElement_MAX); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnTechniqueElement.TechniqueElement_MAX); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrTechniqueElement[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrWeaponForm()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(40,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)EnWeaponForm.WeaponForm_MAX); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnWeaponForm.WeaponForm_MAX); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrWeaponForm[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iAbilityNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(41,0));  // f id
			oPacker.WriteVarintINT32(iAbilityNum);
		};
		if (has_arrAbility()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(42,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iAbilityNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_ABILITY_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_ABILITY_MAX) && (__orm_iLoopVar < iAbilityNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrAbility[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrLevelUnlocked()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(43,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)1); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)1); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrLevelUnlocked[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,3));  // f id
			oPacker.WriteSTRING(szName);
		};
		if (has_iGodExam()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iGodExam);
		};
		if (has_iIsPlayer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iIsPlayer);
		};
		if (has_iCreatureID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iCreatureID);
		};
		if (has_iSkin_Upper()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Upper);
		};
		if (has_iSkin_Lower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Lower);
		};
		if (has_iSkin_OutFit()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,0));  // f id
			oPacker.WriteVarintINT32(iSkin_OutFit);
		};
		if (has_iSkin_Hair()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(19,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Hair);
		};
		if (has_iSkin_Eye()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(20,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Eye);
		};
		if (has_iSkin_Weapon()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(21,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Weapon);
		};
		if (has_iSkin_Body()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(22,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Body);
		};
		if (has_iSkin_Mouth()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(23,0));  // f id
			oPacker.WriteVarintINT32(iSkin_Mouth);
		};
		if (has_iDisplayer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(30,0));  // f id
			oPacker.WriteVarintINT32(iDisplayer);
		};
		if (has_iTechnique()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(32,0));  // f id
			oPacker.WriteVarintINT32(iTechnique);
		};
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(34,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
		if (has_iPower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(36,0));  // f id
			oPacker.WriteVarintINT32(iPower);
		};
		if (has_iWanderPackageLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(38,0));  // f id
			oPacker.WriteVarintINT32(iWanderPackageLevel);
		};
		if (has_arrTechniqueElement()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(39,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)EnTechniqueElement.TechniqueElement_MAX); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnTechniqueElement.TechniqueElement_MAX); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrTechniqueElement[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrWeaponForm()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(40,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)EnWeaponForm.WeaponForm_MAX); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnWeaponForm.WeaponForm_MAX); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrWeaponForm[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iAbilityNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(41,0));  // f id
			oPacker.WriteVarintINT32(iAbilityNum);
		};
		if (has_arrAbility()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(42,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iAbilityNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_ABILITY_MAX) {
				oPacker.PushFieldName("iAbilityNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_ABILITY_MAX) && (__orm_iLoopVar < iAbilityNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrAbility[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrLevelUnlocked()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(43,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)1); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)1); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrLevelUnlocked[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 7: {
				set_has_szName();
				szName = oPacker.ReadSTRING();
			}break;
			case 8: {
				set_has_iGodExam();
				iGodExam = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_iIsPlayer();
				iIsPlayer = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_iCreatureID();
				iCreatureID = oPacker.ReadVarintINT32();
			}break;
			case 16: {
				set_has_iSkin_Upper();
				iSkin_Upper = oPacker.ReadVarintINT32();
			}break;
			case 17: {
				set_has_iSkin_Lower();
				iSkin_Lower = oPacker.ReadVarintINT32();
			}break;
			case 18: {
				set_has_iSkin_OutFit();
				iSkin_OutFit = oPacker.ReadVarintINT32();
			}break;
			case 19: {
				set_has_iSkin_Hair();
				iSkin_Hair = oPacker.ReadVarintINT32();
			}break;
			case 20: {
				set_has_iSkin_Eye();
				iSkin_Eye = oPacker.ReadVarintINT32();
			}break;
			case 21: {
				set_has_iSkin_Weapon();
				iSkin_Weapon = oPacker.ReadVarintINT32();
			}break;
			case 22: {
				set_has_iSkin_Body();
				iSkin_Body = oPacker.ReadVarintINT32();
			}break;
			case 23: {
				set_has_iSkin_Mouth();
				iSkin_Mouth = oPacker.ReadVarintINT32();
			}break;
			case 30: {
				set_has_iDisplayer();
				iDisplayer = oPacker.ReadVarintINT32();
			}break;
			case 32: {
				set_has_iTechnique();
				iTechnique = oPacker.ReadVarintINT32();
			}break;
			case 34: {
				set_has_iLevel();
				iLevel = oPacker.ReadVarintINT32();
			}break;
			case 36: {
				set_has_iPower();
				iPower = oPacker.ReadVarintINT32();
			}break;
			case 38: {
				set_has_iWanderPackageLevel();
				iWanderPackageLevel = oPacker.ReadVarintINT32();
			}break;
			case 39: {
				set_has_arrTechniqueElement();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)EnTechniqueElement.TechniqueElement_MAX ? __orm_iArrCount:(uint)EnTechniqueElement.TechniqueElement_MAX;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrTechniqueElement[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 40: {
				set_has_arrWeaponForm();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)EnWeaponForm.WeaponForm_MAX ? __orm_iArrCount:(uint)EnWeaponForm.WeaponForm_MAX;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrWeaponForm[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 41: {
				set_has_iAbilityNum();
				iAbilityNum = oPacker.ReadVarintINT32();
			}break;
			case 42: {
				set_has_arrAbility();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iAbilityNum=iAbilityNum<__orm_iArrCount ? iAbilityNum:(int)__orm_iArrCount;
				iAbilityNum=iAbilityNum<(int)TCONST.BATTLE_ENTITY_ABILITY_MAX ? iAbilityNum:(int)TCONST.BATTLE_ENTITY_ABILITY_MAX;
				if (iAbilityNum > (int)TCONST.BATTLE_ENTITY_ABILITY_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iAbilityNum; ++__orm_iLoopVar) {
					arrAbility[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 43: {
				set_has_arrLevelUnlocked();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)1 ? __orm_iArrCount:(uint)1;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrLevelUnlocked[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗单元  初始化参数 
public class TBatEntInit
{
	private uint[] __orm_has_bits = new uint[1];
	private long iBindID;   //透传绑定标识. 用于app与战斗内核间关联实体
	private TEntityPass stPassData = new TEntityPass();   //透传数据, 传给外部
	private int iPropNum;   //属性值
	private int[] arrProp = new int[(int)EnBatEntityProp.BENT_PROP_INIT_END];   //属性数组,与EnBatEntityProp对应
	private int iSkillNum;   //技能个数
	private TBattleSkillInfo[] arrSkill = new TBattleSkillInfo[(int)TCONST.BATTLE_ENTITY_SKILL_MAX];   //技能列表
	private int iBattleEquipCount;   //装备数量
	private TBattleEquip[] arrBattleEquip = new TBattleEquip[(int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX];   //
	private sbyte bLegacy;   //是否为上一回合的遗留角色
	private TBufferList stInitBuffer = new TBufferList();   //初始buff
	private TColdingList stInitColding = new TColdingList();   //初始冷却
	public TBatEntInit() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_SKILL_MAX; ++__orm_iLoopVar) {
			arrSkill[__orm_iLoopVar] = new TBattleSkillInfo();
		}
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX; ++__orm_iLoopVar) {
			arrBattleEquip[__orm_iLoopVar] = new TBattleEquip();
		}
	}

	public const int countof_arrProp = (int)EnBatEntityProp.BENT_PROP_INIT_END;
	public const int countof_arrSkill = (int)TCONST.BATTLE_ENTITY_SKILL_MAX;
	public const int countof_arrBattleEquip = (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX;

	public const int MAX_PACKEDSIZE = 24618;

	public void init() {
		__orm_has_bits[0]=0;
		stPassData.init();
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.BATTLE_ENTITY_SKILL_MAX; ++__orm_iLoopVar){arrSkill[__orm_iLoopVar].init();}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX; ++__orm_iLoopVar){arrBattleEquip[__orm_iLoopVar].init();}
		stInitBuffer.init();
		stInitColding.init();
	}
	public bool has_iBindID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iBindID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iBindID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iBindID(long _iBindID){set_has_iBindID(); iBindID=_iBindID;}
	public long get_iBindID(){if (has_iBindID()) {return iBindID;} return 0;}

	public bool has_stPassData() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_stPassData() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_stPassData() {__orm_has_bits[0] &= ~(0x8u);}
	public TEntityPass set_stPassData(){set_has_stPassData(); return stPassData;}
	public TEntityPass get_stPassData(){return stPassData;}

	public bool has_iPropNum() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iPropNum() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iPropNum() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iPropNum(int _iPropNum){set_has_iPropNum(); iPropNum=_iPropNum;}
	public int get_iPropNum(){if (has_iPropNum()) {return iPropNum;} return 0;}

	public bool has_arrProp() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrProp() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrProp() {__orm_has_bits[0] &= ~(0x20u);}
	public int[] set_arrProp(){set_has_arrProp(); return arrProp;}
	public int[] get_arrProp(){return arrProp;}

	public bool has_iSkillNum() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iSkillNum() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iSkillNum() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iSkillNum(int _iSkillNum){set_has_iSkillNum(); iSkillNum=_iSkillNum;}
	public int get_iSkillNum(){if (has_iSkillNum()) {return iSkillNum;} return 0;}

	public bool has_arrSkill() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_arrSkill() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_arrSkill() {__orm_has_bits[0] &= ~(0x200u);}
	public TBattleSkillInfo[] set_arrSkill(){set_has_arrSkill(); return arrSkill;}
	public TBattleSkillInfo[] get_arrSkill(){return arrSkill;}

	public bool has_iBattleEquipCount() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iBattleEquipCount() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iBattleEquipCount() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iBattleEquipCount(int _iBattleEquipCount){set_has_iBattleEquipCount(); iBattleEquipCount=_iBattleEquipCount;}
	public int get_iBattleEquipCount(){if (has_iBattleEquipCount()) {return iBattleEquipCount;} return 0;}

	public bool has_arrBattleEquip() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_arrBattleEquip() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_arrBattleEquip() {__orm_has_bits[0] &= ~(0x1000u);}
	public TBattleEquip[] set_arrBattleEquip(){set_has_arrBattleEquip(); return arrBattleEquip;}
	public TBattleEquip[] get_arrBattleEquip(){return arrBattleEquip;}

	public bool has_bLegacy() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_bLegacy() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_bLegacy() {__orm_has_bits[0] &= ~(0x4000u);}
	public void set_bLegacy(sbyte _bLegacy){set_has_bLegacy(); bLegacy=_bLegacy;}
	public sbyte get_bLegacy(){if (has_bLegacy()) {return bLegacy;} return 0;}

	public bool has_stInitBuffer() {return (__orm_has_bits[0] & 0x8000u) != 0;}
	public void set_has_stInitBuffer() {__orm_has_bits[0] |= 0x8000u;}
	public void clear_has_stInitBuffer() {__orm_has_bits[0] &= ~(0x8000u);}
	public TBufferList set_stInitBuffer(){set_has_stInitBuffer(); return stInitBuffer;}
	public TBufferList get_stInitBuffer(){return stInitBuffer;}

	public bool has_stInitColding() {return (__orm_has_bits[0] & 0x40000u) != 0;}
	public void set_has_stInitColding() {__orm_has_bits[0] |= 0x40000u;}
	public void clear_has_stInitColding() {__orm_has_bits[0] &= ~(0x40000u);}
	public TColdingList set_stInitColding(){set_has_stInitColding(); return stInitColding;}
	public TColdingList get_stInitColding(){return stInitColding;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iBindID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iBindID);
		};
		if (has_stPassData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stPassData.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iPropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPropNum);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropNum();
			if (__orm_ReferVar > (int)EnBatEntityProp.BENT_PROP_INIT_END) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnBatEntityProp.BENT_PROP_INIT_END) && (__orm_iLoopVar < iPropNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrProp[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iSkillNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iSkillNum);
		};
		if (has_arrSkill()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSkillNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_SKILL_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_SKILL_MAX) && (__orm_iLoopVar < iSkillNum); ++__orm_iLoopVar) {
				arrSkill[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iBattleEquipCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iBattleEquipCount);
		};
		if (has_arrBattleEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iBattleEquipCount();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX) && (__orm_iLoopVar < iBattleEquipCount); ++__orm_iLoopVar) {
				arrBattleEquip[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bLegacy()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,2));  // f id
			oPacker.WriteINT8(bLegacy);
		};
		if (has_stInitBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stInitBuffer.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stInitColding()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stInitColding.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iBindID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iBindID);
		};
		if (has_stPassData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stPassData");
			stPassData.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iPropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPropNum);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropNum();
			if (__orm_ReferVar > (int)EnBatEntityProp.BENT_PROP_INIT_END) {
				oPacker.PushFieldName("iPropNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)EnBatEntityProp.BENT_PROP_INIT_END) && (__orm_iLoopVar < iPropNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrProp[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iSkillNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iSkillNum);
		};
		if (has_arrSkill()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSkillNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_SKILL_MAX) {
				oPacker.PushFieldName("iSkillNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_SKILL_MAX) && (__orm_iLoopVar < iSkillNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrSkill[{0}]", __orm_iLoopVar);
				arrSkill[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iBattleEquipCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iBattleEquipCount);
		};
		if (has_arrBattleEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iBattleEquipCount();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX) {
				oPacker.PushFieldName("iBattleEquipCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX) && (__orm_iLoopVar < iBattleEquipCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrBattleEquip[{0}]", __orm_iLoopVar);
				arrBattleEquip[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bLegacy()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,2));  // f id
			oPacker.WriteINT8(bLegacy);
		};
		if (has_stInitBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stInitBuffer");
			stInitBuffer.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stInitColding()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stInitColding");
			stInitColding.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iBindID();
				iBindID = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_stPassData();
				stPassData.Unpack(oPacker);
			}break;
			case 4: {
				set_has_iPropNum();
				iPropNum = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_arrProp();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPropNum=iPropNum<__orm_iArrCount ? iPropNum:(int)__orm_iArrCount;
				iPropNum=iPropNum<(int)EnBatEntityProp.BENT_PROP_INIT_END ? iPropNum:(int)EnBatEntityProp.BENT_PROP_INIT_END;
				if (iPropNum > (int)EnBatEntityProp.BENT_PROP_INIT_END) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPropNum; ++__orm_iLoopVar) {
					arrProp[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 8: {
				set_has_iSkillNum();
				iSkillNum = oPacker.ReadVarintINT32();
			}break;
			case 9: {
				set_has_arrSkill();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iSkillNum=iSkillNum<__orm_iArrCount ? iSkillNum:(int)__orm_iArrCount;
				iSkillNum=iSkillNum<(int)TCONST.BATTLE_ENTITY_SKILL_MAX ? iSkillNum:(int)TCONST.BATTLE_ENTITY_SKILL_MAX;
				if (iSkillNum > (int)TCONST.BATTLE_ENTITY_SKILL_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iSkillNum; ++__orm_iLoopVar) {
					arrSkill[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 11: {
				set_has_iBattleEquipCount();
				iBattleEquipCount = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_arrBattleEquip();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iBattleEquipCount=iBattleEquipCount<__orm_iArrCount ? iBattleEquipCount:(int)__orm_iArrCount;
				iBattleEquipCount=iBattleEquipCount<(int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX ? iBattleEquipCount:(int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX;
				if (iBattleEquipCount > (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iBattleEquipCount; ++__orm_iLoopVar) {
					arrBattleEquip[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 14: {
				set_has_bLegacy();
				bLegacy = oPacker.ReadINT8();
			}break;
			case 15: {
				set_has_stInitBuffer();
				stInitBuffer.Unpack(oPacker);
			}break;
			case 18: {
				set_has_stInitColding();
				stInitColding.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗单元定义
public class TBattleEntity
{
	private uint[] __orm_has_bits = new uint[1];
	private int uid;   //单元标识, 全战场唯一,由战斗核心分配.  初始化时无须传入.
	private TEntityPass stPassData = new TEntityPass();   //透传数据, 传给外部
	private int iPropNum;   //属性值
	private TK32V32[] arrProp = new TK32V32[(int)32];   //属性数组,与EnBatEntityProp对应
	private int iSkillNum;   //技能个数
	private TBattleSkillInfo[] arrSkill = new TBattleSkillInfo[(int)TCONST.BATTLE_ENTITY_SKILL_MAX];   //技能列表
	private int iBattleEquipCount;   //装备数量
	private TBattleEquip[] arrBattleEquip = new TBattleEquip[(int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX];   //
	public TBattleEntity() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)32; ++__orm_iLoopVar) {
			arrProp[__orm_iLoopVar] = new TK32V32();
		}
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_SKILL_MAX; ++__orm_iLoopVar) {
			arrSkill[__orm_iLoopVar] = new TBattleSkillInfo();
		}
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX; ++__orm_iLoopVar) {
			arrBattleEquip[__orm_iLoopVar] = new TBattleEquip();
		}
	}

	public const int countof_arrProp = (int)32;
	public const int countof_arrSkill = (int)TCONST.BATTLE_ENTITY_SKILL_MAX;
	public const int countof_arrBattleEquip = (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX;

	public const int MAX_PACKEDSIZE = 21684;

	public void init() {
		__orm_has_bits[0]=0;
		stPassData.init();
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)32; ++__orm_iLoopVar){arrProp[__orm_iLoopVar].init();}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.BATTLE_ENTITY_SKILL_MAX; ++__orm_iLoopVar){arrSkill[__orm_iLoopVar].init();}
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX; ++__orm_iLoopVar){arrBattleEquip[__orm_iLoopVar].init();}
	}
	public bool has_uid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_uid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_uid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_uid(int _uid){set_has_uid(); uid=_uid;}
	public int get_uid(){if (has_uid()) {return uid;} return 0;}

	public bool has_stPassData() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_stPassData() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_stPassData() {__orm_has_bits[0] &= ~(0x8u);}
	public TEntityPass set_stPassData(){set_has_stPassData(); return stPassData;}
	public TEntityPass get_stPassData(){return stPassData;}

	public bool has_iPropNum() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iPropNum() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iPropNum() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iPropNum(int _iPropNum){set_has_iPropNum(); iPropNum=_iPropNum;}
	public int get_iPropNum(){if (has_iPropNum()) {return iPropNum;} return 0;}

	public bool has_arrProp() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrProp() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrProp() {__orm_has_bits[0] &= ~(0x20u);}
	public TK32V32[] set_arrProp(){set_has_arrProp(); return arrProp;}
	public TK32V32[] get_arrProp(){return arrProp;}

	public bool has_iSkillNum() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iSkillNum() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iSkillNum() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iSkillNum(int _iSkillNum){set_has_iSkillNum(); iSkillNum=_iSkillNum;}
	public int get_iSkillNum(){if (has_iSkillNum()) {return iSkillNum;} return 0;}

	public bool has_arrSkill() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_arrSkill() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_arrSkill() {__orm_has_bits[0] &= ~(0x200u);}
	public TBattleSkillInfo[] set_arrSkill(){set_has_arrSkill(); return arrSkill;}
	public TBattleSkillInfo[] get_arrSkill(){return arrSkill;}

	public bool has_iBattleEquipCount() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iBattleEquipCount() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iBattleEquipCount() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iBattleEquipCount(int _iBattleEquipCount){set_has_iBattleEquipCount(); iBattleEquipCount=_iBattleEquipCount;}
	public int get_iBattleEquipCount(){if (has_iBattleEquipCount()) {return iBattleEquipCount;} return 0;}

	public bool has_arrBattleEquip() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_arrBattleEquip() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_arrBattleEquip() {__orm_has_bits[0] &= ~(0x1000u);}
	public TBattleEquip[] set_arrBattleEquip(){set_has_arrBattleEquip(); return arrBattleEquip;}
	public TBattleEquip[] get_arrBattleEquip(){return arrBattleEquip;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uid);
		};
		if (has_stPassData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stPassData.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iPropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPropNum);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropNum();
			if (__orm_ReferVar > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iPropNum); ++__orm_iLoopVar) {
				arrProp[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iSkillNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iSkillNum);
		};
		if (has_arrSkill()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSkillNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_SKILL_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_SKILL_MAX) && (__orm_iLoopVar < iSkillNum); ++__orm_iLoopVar) {
				arrSkill[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iBattleEquipCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iBattleEquipCount);
		};
		if (has_arrBattleEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iBattleEquipCount();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX) && (__orm_iLoopVar < iBattleEquipCount); ++__orm_iLoopVar) {
				arrBattleEquip[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uid);
		};
		if (has_stPassData()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stPassData");
			stPassData.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iPropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPropNum);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropNum();
			if (__orm_ReferVar > (int)32) {
				oPacker.PushFieldName("iPropNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iPropNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrProp[{0}]", __orm_iLoopVar);
				arrProp[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iSkillNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iSkillNum);
		};
		if (has_arrSkill()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iSkillNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_SKILL_MAX) {
				oPacker.PushFieldName("iSkillNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_SKILL_MAX) && (__orm_iLoopVar < iSkillNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrSkill[{0}]", __orm_iLoopVar);
				arrSkill[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iBattleEquipCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iBattleEquipCount);
		};
		if (has_arrBattleEquip()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iBattleEquipCount();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX) {
				oPacker.PushFieldName("iBattleEquipCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX) && (__orm_iLoopVar < iBattleEquipCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrBattleEquip[{0}]", __orm_iLoopVar);
				arrBattleEquip[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_uid();
				uid = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_stPassData();
				stPassData.Unpack(oPacker);
			}break;
			case 4: {
				set_has_iPropNum();
				iPropNum = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_arrProp();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPropNum=iPropNum<__orm_iArrCount ? iPropNum:(int)__orm_iArrCount;
				iPropNum=iPropNum<(int)32 ? iPropNum:(int)32;
				if (iPropNum > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPropNum; ++__orm_iLoopVar) {
					arrProp[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 8: {
				set_has_iSkillNum();
				iSkillNum = oPacker.ReadVarintINT32();
			}break;
			case 9: {
				set_has_arrSkill();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iSkillNum=iSkillNum<__orm_iArrCount ? iSkillNum:(int)__orm_iArrCount;
				iSkillNum=iSkillNum<(int)TCONST.BATTLE_ENTITY_SKILL_MAX ? iSkillNum:(int)TCONST.BATTLE_ENTITY_SKILL_MAX;
				if (iSkillNum > (int)TCONST.BATTLE_ENTITY_SKILL_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iSkillNum; ++__orm_iLoopVar) {
					arrSkill[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 11: {
				set_has_iBattleEquipCount();
				iBattleEquipCount = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_arrBattleEquip();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iBattleEquipCount=iBattleEquipCount<__orm_iArrCount ? iBattleEquipCount:(int)__orm_iArrCount;
				iBattleEquipCount=iBattleEquipCount<(int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX ? iBattleEquipCount:(int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX;
				if (iBattleEquipCount > (int)TCONST.BATTLE_ENTITY_EQUIP_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iBattleEquipCount; ++__orm_iLoopVar) {
					arrBattleEquip[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗单元 状态
public class TBattleEntityFinalState
{
	private uint[] __orm_has_bits = new uint[1];
	private int uid;   //单元标识
	private long iBindID;   //透传标识. 用于app与战斗内核间关联实体
	private int iPropNum;   //属性数量
	private TK32V32[] arrProp = new TK32V32[(int)16];   //属性数组,与EnBatEntityProp对应
	private TBufferList stInheritableBuffer = new TBufferList();   //可继承的buffer
	private TColdingList stInheritableColding = new TColdingList();   //初始冷却
	public TBattleEntityFinalState() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)16; ++__orm_iLoopVar) {
			arrProp[__orm_iLoopVar] = new TK32V32();
		}
	}

	public const int countof_arrProp = (int)16;

	public const int MAX_PACKEDSIZE = 3762;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)16; ++__orm_iLoopVar){arrProp[__orm_iLoopVar].init();}
		stInheritableBuffer.init();
		stInheritableColding.init();
	}
	public bool has_uid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_uid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_uid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_uid(int _uid){set_has_uid(); uid=_uid;}
	public int get_uid(){if (has_uid()) {return uid;} return 0;}

	public bool has_iBindID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iBindID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iBindID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iBindID(long _iBindID){set_has_iBindID(); iBindID=_iBindID;}
	public long get_iBindID(){if (has_iBindID()) {return iBindID;} return 0;}

	public bool has_iPropNum() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iPropNum() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iPropNum() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iPropNum(int _iPropNum){set_has_iPropNum(); iPropNum=_iPropNum;}
	public int get_iPropNum(){if (has_iPropNum()) {return iPropNum;} return 0;}

	public bool has_arrProp() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrProp() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrProp() {__orm_has_bits[0] &= ~(0x20u);}
	public TK32V32[] set_arrProp(){set_has_arrProp(); return arrProp;}
	public TK32V32[] get_arrProp(){return arrProp;}

	public bool has_stInheritableBuffer() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_stInheritableBuffer() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_stInheritableBuffer() {__orm_has_bits[0] &= ~(0x80u);}
	public TBufferList set_stInheritableBuffer(){set_has_stInheritableBuffer(); return stInheritableBuffer;}
	public TBufferList get_stInheritableBuffer(){return stInheritableBuffer;}

	public bool has_stInheritableColding() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_stInheritableColding() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_stInheritableColding() {__orm_has_bits[0] &= ~(0x200u);}
	public TColdingList set_stInheritableColding(){set_has_stInheritableColding(); return stInheritableColding;}
	public TColdingList get_stInheritableColding(){return stInheritableColding;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uid);
		};
		if (has_iBindID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iBindID);
		};
		if (has_iPropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPropNum);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropNum();
			if (__orm_ReferVar > (int)16) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)16) && (__orm_iLoopVar < iPropNum); ++__orm_iLoopVar) {
				arrProp[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stInheritableBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stInheritableBuffer.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stInheritableColding()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stInheritableColding.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uid);
		};
		if (has_iBindID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iBindID);
		};
		if (has_iPropNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPropNum);
		};
		if (has_arrProp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropNum();
			if (__orm_ReferVar > (int)16) {
				oPacker.PushFieldName("iPropNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)16) && (__orm_iLoopVar < iPropNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrProp[{0}]", __orm_iLoopVar);
				arrProp[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stInheritableBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stInheritableBuffer");
			stInheritableBuffer.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stInheritableColding()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stInheritableColding");
			stInheritableColding.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_uid();
				uid = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iBindID();
				iBindID = oPacker.ReadVarintINT64();
			}break;
			case 4: {
				set_has_iPropNum();
				iPropNum = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_arrProp();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPropNum=iPropNum<__orm_iArrCount ? iPropNum:(int)__orm_iArrCount;
				iPropNum=iPropNum<(int)16 ? iPropNum:(int)16;
				if (iPropNum > (int)16) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPropNum; ++__orm_iLoopVar) {
					arrProp[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 7: {
				set_has_stInheritableBuffer();
				stInheritableBuffer.Unpack(oPacker);
			}break;
			case 9: {
				set_has_stInheritableColding();
				stInheritableColding.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 子弹定义
public class TBulletEntity
{
	private uint[] __orm_has_bits = new uint[1];
	private int uid;   //子弹uid, 全战场唯一
	private int iSourceEntUID;   //施放者 entity uid
	private int iBulletID;   //子弹id
	private int iTargetUID;   //目标entity的uid


	public const int MAX_PACKEDSIZE = 45;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_uid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_uid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_uid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_uid(int _uid){set_has_uid(); uid=_uid;}
	public int get_uid(){if (has_uid()) {return uid;} return 0;}

	public bool has_iSourceEntUID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iSourceEntUID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iSourceEntUID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iSourceEntUID(int _iSourceEntUID){set_has_iSourceEntUID(); iSourceEntUID=_iSourceEntUID;}
	public int get_iSourceEntUID(){if (has_iSourceEntUID()) {return iSourceEntUID;} return 0;}

	public bool has_iBulletID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iBulletID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iBulletID() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iBulletID(int _iBulletID){set_has_iBulletID(); iBulletID=_iBulletID;}
	public int get_iBulletID(){if (has_iBulletID()) {return iBulletID;} return 0;}

	public bool has_iTargetUID() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iTargetUID() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iTargetUID() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iTargetUID(int _iTargetUID){set_has_iTargetUID(); iTargetUID=_iTargetUID;}
	public int get_iTargetUID(){if (has_iTargetUID()) {return iTargetUID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uid);
		};
		if (has_iSourceEntUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSourceEntUID);
		};
		if (has_iBulletID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iBulletID);
		};
		if (has_iTargetUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iTargetUID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uid);
		};
		if (has_iSourceEntUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iSourceEntUID);
		};
		if (has_iBulletID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iBulletID);
		};
		if (has_iTargetUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iTargetUID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_uid();
				uid = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iSourceEntUID();
				iSourceEntUID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iBulletID();
				iBulletID = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iTargetUID();
				iTargetUID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 全局ai定义
public class TGlobalAi
{
	private uint[] __orm_has_bits = new uint[1];
	private int iNum;   //
	private int[] arrRound = new int[(int)TCONST.BATTLE_GLOBAL_AI_NUM];   //触发回合
	private int[] arrAddTo = new int[(int)TCONST.BATTLE_GLOBAL_AI_NUM];   //添加目标.   -1 (双方)  0  (攻)  1 (守)
	private int[] arrBuffID = new int[(int)TCONST.BATTLE_GLOBAL_AI_NUM];   //bufferid

	public const int countof_arrRound = (int)TCONST.BATTLE_GLOBAL_AI_NUM;
	public const int countof_arrAddTo = (int)TCONST.BATTLE_GLOBAL_AI_NUM;
	public const int countof_arrBuffID = (int)TCONST.BATTLE_GLOBAL_AI_NUM;

	public const int MAX_PACKEDSIZE = 1017;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iNum() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iNum() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iNum() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iNum(int _iNum){set_has_iNum(); iNum=_iNum;}
	public int get_iNum(){if (has_iNum()) {return iNum;} return 0;}

	public bool has_arrRound() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrRound() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrRound() {__orm_has_bits[0] &= ~(0x10u);}
	public int[] set_arrRound(){set_has_arrRound(); return arrRound;}
	public int[] get_arrRound(){return arrRound;}

	public bool has_arrAddTo() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrAddTo() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrAddTo() {__orm_has_bits[0] &= ~(0x20u);}
	public int[] set_arrAddTo(){set_has_arrAddTo(); return arrAddTo;}
	public int[] get_arrAddTo(){return arrAddTo;}

	public bool has_arrBuffID() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_arrBuffID() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_arrBuffID() {__orm_has_bits[0] &= ~(0x80u);}
	public int[] set_arrBuffID(){set_has_arrBuffID(); return arrBuffID;}
	public int[] get_arrBuffID(){return arrBuffID;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
		if (has_arrRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_GLOBAL_AI_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_GLOBAL_AI_NUM) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrRound[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrAddTo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_GLOBAL_AI_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_GLOBAL_AI_NUM) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrAddTo[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrBuffID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_GLOBAL_AI_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_GLOBAL_AI_NUM) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrBuffID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iNum);
		};
		if (has_arrRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_GLOBAL_AI_NUM) {
				oPacker.PushFieldName("iNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_GLOBAL_AI_NUM) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrRound[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrAddTo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_GLOBAL_AI_NUM) {
				oPacker.PushFieldName("iNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_GLOBAL_AI_NUM) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrAddTo[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrBuffID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_GLOBAL_AI_NUM) {
				oPacker.PushFieldName("iNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_GLOBAL_AI_NUM) && (__orm_iLoopVar < iNum); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrBuffID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iNum();
				iNum = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_arrRound();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iNum=iNum<__orm_iArrCount ? iNum:(int)__orm_iArrCount;
				iNum=iNum<(int)TCONST.BATTLE_GLOBAL_AI_NUM ? iNum:(int)TCONST.BATTLE_GLOBAL_AI_NUM;
				if (iNum > (int)TCONST.BATTLE_GLOBAL_AI_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iNum; ++__orm_iLoopVar) {
					arrRound[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 5: {
				set_has_arrAddTo();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iNum=iNum<__orm_iArrCount ? iNum:(int)__orm_iArrCount;
				iNum=iNum<(int)TCONST.BATTLE_GLOBAL_AI_NUM ? iNum:(int)TCONST.BATTLE_GLOBAL_AI_NUM;
				if (iNum > (int)TCONST.BATTLE_GLOBAL_AI_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iNum; ++__orm_iLoopVar) {
					arrAddTo[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 7: {
				set_has_arrBuffID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iNum=iNum<__orm_iArrCount ? iNum:(int)__orm_iArrCount;
				iNum=iNum<(int)TCONST.BATTLE_GLOBAL_AI_NUM ? iNum:(int)TCONST.BATTLE_GLOBAL_AI_NUM;
				if (iNum > (int)TCONST.BATTLE_GLOBAL_AI_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iNum; ++__orm_iLoopVar) {
					arrBuffID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战场初始化用到的参数
public class TBattleInitParam
{
	private uint[] __orm_has_bits = new uint[1];
	private int iProgLogicVer;   //程序逻辑版本
	private TBattleConfig stBatConfig = new TBattleConfig();   //战场配置
	private int iStartRound;   //开始回合
	private int iUnitNum;   //unit 数量
	private TBatEntInit[] arrUnit = new TBatEntInit[(int)TCONST.BATTLE_ENTITY_NUM_MAX];   //
	private TGlobalAi stGlobalAI = new TGlobalAi();   //
	private int iCustomInfoLen;   //
	private byte[] arrCustom = new byte[(int)512];   //应用层信息
	public TBattleInitParam() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_NUM_MAX; ++__orm_iLoopVar) {
			arrUnit[__orm_iLoopVar] = new TBatEntInit();
		}
	}

	public const int countof_arrUnit = (int)TCONST.BATTLE_ENTITY_NUM_MAX;
	public const int countof_arrCustom = (int)512;

	public const int MAX_PACKEDSIZE = 51091;

	public void init() {
		__orm_has_bits[0]=0;
		stBatConfig.init();
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.BATTLE_ENTITY_NUM_MAX; ++__orm_iLoopVar){arrUnit[__orm_iLoopVar].init();}
		stGlobalAI.init();
	}
	public bool has_iProgLogicVer() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iProgLogicVer() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iProgLogicVer() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iProgLogicVer(int _iProgLogicVer){set_has_iProgLogicVer(); iProgLogicVer=_iProgLogicVer;}
	public int get_iProgLogicVer(){if (has_iProgLogicVer()) {return iProgLogicVer;} return 0;}

	public bool has_stBatConfig() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_stBatConfig() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_stBatConfig() {__orm_has_bits[0] &= ~(0x8u);}
	public TBattleConfig set_stBatConfig(){set_has_stBatConfig(); return stBatConfig;}
	public TBattleConfig get_stBatConfig(){return stBatConfig;}

	public bool has_iStartRound() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iStartRound() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iStartRound() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iStartRound(int _iStartRound){set_has_iStartRound(); iStartRound=_iStartRound;}
	public int get_iStartRound(){if (has_iStartRound()) {return iStartRound;} return 0;}

	public bool has_iUnitNum() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iUnitNum() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iUnitNum() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iUnitNum(int _iUnitNum){set_has_iUnitNum(); iUnitNum=_iUnitNum;}
	public int get_iUnitNum(){if (has_iUnitNum()) {return iUnitNum;} return 0;}

	public bool has_arrUnit() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_arrUnit() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_arrUnit() {__orm_has_bits[0] &= ~(0x80u);}
	public TBatEntInit[] set_arrUnit(){set_has_arrUnit(); return arrUnit;}
	public TBatEntInit[] get_arrUnit(){return arrUnit;}

	public bool has_stGlobalAI() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_stGlobalAI() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_stGlobalAI() {__orm_has_bits[0] &= ~(0x200u);}
	public TGlobalAi set_stGlobalAI(){set_has_stGlobalAI(); return stGlobalAI;}
	public TGlobalAi get_stGlobalAI(){return stGlobalAI;}

	public bool has_iCustomInfoLen() {return (__orm_has_bits[0] & 0x1000000u) != 0;}
	public void set_has_iCustomInfoLen() {__orm_has_bits[0] |= 0x1000000u;}
	public void clear_has_iCustomInfoLen() {__orm_has_bits[0] &= ~(0x1000000u);}
	public void set_iCustomInfoLen(int _iCustomInfoLen){set_has_iCustomInfoLen(); iCustomInfoLen=_iCustomInfoLen;}
	public int get_iCustomInfoLen(){if (has_iCustomInfoLen()) {return iCustomInfoLen;} return 0;}

	public bool has_arrCustom() {return (__orm_has_bits[0] & 0x2000000u) != 0;}
	public void set_has_arrCustom() {__orm_has_bits[0] |= 0x2000000u;}
	public void clear_has_arrCustom() {__orm_has_bits[0] &= ~(0x2000000u);}
	public byte[] set_arrCustom(){set_has_arrCustom(); return arrCustom;}
	public byte[] get_arrCustom(){return arrCustom;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iProgLogicVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iProgLogicVer);
		};
		if (has_stBatConfig()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stBatConfig.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iStartRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iStartRound);
		};
		if (has_iUnitNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iUnitNum);
		};
		if (has_arrUnit()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iUnitNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_NUM_MAX) && (__orm_iLoopVar < iUnitNum); ++__orm_iLoopVar) {
				arrUnit[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stGlobalAI()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stGlobalAI.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iCustomInfoLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(24,0));  // f id
			oPacker.WriteVarintINT32(iCustomInfoLen);
		};
		if (has_arrCustom()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(25,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCustomInfoLen();
			if (__orm_ReferVar > (int)512) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)512) && (__orm_iLoopVar < iCustomInfoLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrCustom[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iProgLogicVer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iProgLogicVer);
		};
		if (has_stBatConfig()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stBatConfig");
			stBatConfig.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iStartRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iStartRound);
		};
		if (has_iUnitNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iUnitNum);
		};
		if (has_arrUnit()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iUnitNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_NUM_MAX) {
				oPacker.PushFieldName("iUnitNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_NUM_MAX) && (__orm_iLoopVar < iUnitNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrUnit[{0}]", __orm_iLoopVar);
				arrUnit[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stGlobalAI()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stGlobalAI");
			stGlobalAI.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iCustomInfoLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(24,0));  // f id
			oPacker.WriteVarintINT32(iCustomInfoLen);
		};
		if (has_arrCustom()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(25,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCustomInfoLen();
			if (__orm_ReferVar > (int)512) {
				oPacker.PushFieldName("iCustomInfoLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)512) && (__orm_iLoopVar < iCustomInfoLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrCustom[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iProgLogicVer();
				iProgLogicVer = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_stBatConfig();
				stBatConfig.Unpack(oPacker);
			}break;
			case 4: {
				set_has_iStartRound();
				iStartRound = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iUnitNum();
				iUnitNum = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_arrUnit();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iUnitNum=iUnitNum<__orm_iArrCount ? iUnitNum:(int)__orm_iArrCount;
				iUnitNum=iUnitNum<(int)TCONST.BATTLE_ENTITY_NUM_MAX ? iUnitNum:(int)TCONST.BATTLE_ENTITY_NUM_MAX;
				if (iUnitNum > (int)TCONST.BATTLE_ENTITY_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iUnitNum; ++__orm_iLoopVar) {
					arrUnit[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 9: {
				set_has_stGlobalAI();
				stGlobalAI.Unpack(oPacker);
			}break;
			case 24: {
				set_has_iCustomInfoLen();
				iCustomInfoLen = oPacker.ReadVarintINT32();
			}break;
			case 25: {
				set_has_arrCustom();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCustomInfoLen=iCustomInfoLen<__orm_iArrCount ? iCustomInfoLen:(int)__orm_iArrCount;
				iCustomInfoLen=iCustomInfoLen<(int)512 ? iCustomInfoLen:(int)512;
				if (iCustomInfoLen > (int)512) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCustomInfoLen; ++__orm_iLoopVar) {
					arrCustom[__orm_iLoopVar] = oPacker.ReadUINT8();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 完整战报下发
public class TMSG_BATTLE_CONTEXT_PACK_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private long i64BattleSN;   //唯一序号
	private int iStartFlag;   //是否开始
	private int iEndFlag;   //是否结束
	private int iPackLen;   //TBattleMessage整包pack长度
	private byte[] arrLogPack = new byte[(int)TCONST.BATTLE_LOG_PACK_LEN];   //战斗TBattleMessage整包pack
	private string szBattleTag;   //战场标签
	private int iBattleTag;   //战场标签
	private int iCurRound;   //当前回合, 从0开始 
	private int iTotalRound;   //战斗总回合.   以后有扩展玩法, 这个数可能不固定.
	private int iDescLen;   //战场描述
	private sbyte[] arrDesc = new sbyte[(int)512];   //应用决定.  可能是战斗单元的name, face,level

	public const int countof_arrLogPack = (int)TCONST.BATTLE_LOG_PACK_LEN;
	public const int countof_arrDesc = (int)512;

	public const int MAX_PACKEDSIZE = 63232;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_i64BattleSN() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_i64BattleSN() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_i64BattleSN() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_i64BattleSN(long _i64BattleSN){set_has_i64BattleSN(); i64BattleSN=_i64BattleSN;}
	public long get_i64BattleSN(){if (has_i64BattleSN()) {return i64BattleSN;} return 0;}

	public bool has_iStartFlag() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iStartFlag() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iStartFlag() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iStartFlag(int _iStartFlag){set_has_iStartFlag(); iStartFlag=_iStartFlag;}
	public int get_iStartFlag(){if (has_iStartFlag()) {return iStartFlag;} return 0;}

	public bool has_iEndFlag() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iEndFlag() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iEndFlag() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iEndFlag(int _iEndFlag){set_has_iEndFlag(); iEndFlag=_iEndFlag;}
	public int get_iEndFlag(){if (has_iEndFlag()) {return iEndFlag;} return 0;}

	public bool has_iPackLen() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iPackLen() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iPackLen() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iPackLen(int _iPackLen){set_has_iPackLen(); iPackLen=_iPackLen;}
	public int get_iPackLen(){if (has_iPackLen()) {return iPackLen;} return 0;}

	public bool has_arrLogPack() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_arrLogPack() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_arrLogPack() {__orm_has_bits[0] &= ~(0x20u);}
	public byte[] set_arrLogPack(){set_has_arrLogPack(); return arrLogPack;}
	public byte[] get_arrLogPack(){return arrLogPack;}

	public bool has_szBattleTag() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_szBattleTag() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_szBattleTag() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_szBattleTag(string _szBattleTag){set_has_szBattleTag(); szBattleTag=_szBattleTag;}
	public string get_szBattleTag(){if (has_szBattleTag()) {return szBattleTag;} return "";}

	public bool has_iBattleTag() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iBattleTag() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iBattleTag() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iBattleTag(int _iBattleTag){set_has_iBattleTag(); iBattleTag=_iBattleTag;}
	public int get_iBattleTag(){if (has_iBattleTag()) {return iBattleTag;} return 0;}

	public bool has_iCurRound() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iCurRound() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iCurRound() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iCurRound(int _iCurRound){set_has_iCurRound(); iCurRound=_iCurRound;}
	public int get_iCurRound(){if (has_iCurRound()) {return iCurRound;} return 0;}

	public bool has_iTotalRound() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_iTotalRound() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_iTotalRound() {__orm_has_bits[0] &= ~(0x2000u);}
	public void set_iTotalRound(int _iTotalRound){set_has_iTotalRound(); iTotalRound=_iTotalRound;}
	public int get_iTotalRound(){if (has_iTotalRound()) {return iTotalRound;} return 0;}

	public bool has_iDescLen() {return (__orm_has_bits[0] & 0x10000u) != 0;}
	public void set_has_iDescLen() {__orm_has_bits[0] |= 0x10000u;}
	public void clear_has_iDescLen() {__orm_has_bits[0] &= ~(0x10000u);}
	public void set_iDescLen(int _iDescLen){set_has_iDescLen(); iDescLen=_iDescLen;}
	public int get_iDescLen(){if (has_iDescLen()) {return iDescLen;} return 0;}

	public bool has_arrDesc() {return (__orm_has_bits[0] & 0x20000u) != 0;}
	public void set_has_arrDesc() {__orm_has_bits[0] |= 0x20000u;}
	public void clear_has_arrDesc() {__orm_has_bits[0] &= ~(0x20000u);}
	public sbyte[] set_arrDesc(){set_has_arrDesc(); return arrDesc;}
	public sbyte[] get_arrDesc(){return arrDesc;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
		if (has_iStartFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStartFlag);
		};
		if (has_iEndFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iEndFlag);
		};
		if (has_iPackLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPackLen);
		};
		if (has_arrLogPack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPackLen();
			if (__orm_ReferVar > (int)TCONST.BATTLE_LOG_PACK_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_LOG_PACK_LEN) && (__orm_iLoopVar < iPackLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrLogPack[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szBattleTag);
		};
		if (has_iBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iBattleTag);
		};
		if (has_iCurRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iCurRound);
		};
		if (has_iTotalRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(iTotalRound);
		};
		if (has_iDescLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,0));  // f id
			oPacker.WriteVarintINT32(iDescLen);
		};
		if (has_arrDesc()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDescLen();
			if (__orm_ReferVar > (int)512) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)512) && (__orm_iLoopVar < iDescLen); ++__orm_iLoopVar) {
		    oPacker.WriteINT8(arrDesc[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
		if (has_iStartFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iStartFlag);
		};
		if (has_iEndFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iEndFlag);
		};
		if (has_iPackLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iPackLen);
		};
		if (has_arrLogPack()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPackLen();
			if (__orm_ReferVar > (int)TCONST.BATTLE_LOG_PACK_LEN) {
				oPacker.PushFieldName("iPackLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_LOG_PACK_LEN) && (__orm_iLoopVar < iPackLen); ++__orm_iLoopVar) {
		    oPacker.WriteUINT8(arrLogPack[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szBattleTag);
		};
		if (has_iBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iBattleTag);
		};
		if (has_iCurRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iCurRound);
		};
		if (has_iTotalRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(iTotalRound);
		};
		if (has_iDescLen()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,0));  // f id
			oPacker.WriteVarintINT32(iDescLen);
		};
		if (has_arrDesc()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDescLen();
			if (__orm_ReferVar > (int)512) {
				oPacker.PushFieldName("iDescLen={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)512) && (__orm_iLoopVar < iDescLen); ++__orm_iLoopVar) {
		    oPacker.WriteINT8(arrDesc[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_i64BattleSN();
				i64BattleSN = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iStartFlag();
				iStartFlag = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iEndFlag();
				iEndFlag = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iPackLen();
				iPackLen = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_arrLogPack();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPackLen=iPackLen<__orm_iArrCount ? iPackLen:(int)__orm_iArrCount;
				iPackLen=iPackLen<(int)TCONST.BATTLE_LOG_PACK_LEN ? iPackLen:(int)TCONST.BATTLE_LOG_PACK_LEN;
				if (iPackLen > (int)TCONST.BATTLE_LOG_PACK_LEN) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPackLen; ++__orm_iLoopVar) {
					arrLogPack[__orm_iLoopVar] = oPacker.ReadUINT8();
				};
			}break;
			case 6: {
				set_has_szBattleTag();
				szBattleTag = oPacker.ReadSTRING();
			}break;
			case 7: {
				set_has_iBattleTag();
				iBattleTag = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_iCurRound();
				iCurRound = oPacker.ReadVarintINT32();
			}break;
			case 13: {
				set_has_iTotalRound();
				iTotalRound = oPacker.ReadVarintINT32();
			}break;
			case 16: {
				set_has_iDescLen();
				iDescLen = oPacker.ReadVarintINT32();
			}break;
			case 17: {
				set_has_arrDesc();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iDescLen=iDescLen<__orm_iArrCount ? iDescLen:(int)__orm_iArrCount;
				iDescLen=iDescLen<(int)512 ? iDescLen:(int)512;
				if (iDescLen > (int)512) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iDescLen; ++__orm_iLoopVar) {
					arrDesc[__orm_iLoopVar] = oPacker.ReadINT8();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 请求战斗结果（播完战报之后）
public class TMSG_BATTLE_CONFIRM_RESULT_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long i64BattleSN;   //唯一序号
	private string szBattleTag;   //战场标签, 透传
	private int iBattleTag;   //战场标签, 透传
	private int iRound;   //确认的回合.   -1 表示跳过所有战斗 


	public const int MAX_PACKEDSIZE = 178;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_i64BattleSN() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_i64BattleSN() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_i64BattleSN() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_i64BattleSN(long _i64BattleSN){set_has_i64BattleSN(); i64BattleSN=_i64BattleSN;}
	public long get_i64BattleSN(){if (has_i64BattleSN()) {return i64BattleSN;} return 0;}

	public bool has_szBattleTag() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_szBattleTag() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_szBattleTag() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_szBattleTag(string _szBattleTag){set_has_szBattleTag(); szBattleTag=_szBattleTag;}
	public string get_szBattleTag(){if (has_szBattleTag()) {return szBattleTag;} return "";}

	public bool has_iBattleTag() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iBattleTag() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iBattleTag() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iBattleTag(int _iBattleTag){set_has_iBattleTag(); iBattleTag=_iBattleTag;}
	public int get_iBattleTag(){if (has_iBattleTag()) {return iBattleTag;} return 0;}

	public bool has_iRound() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iRound() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iRound() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iRound(int _iRound){set_has_iRound(); iRound=_iRound;}
	public int get_iRound(){if (has_iRound()) {return iRound;} return -1;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
		if (has_szBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szBattleTag);
		};
		if (has_iBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iBattleTag);
		};
		if (has_iRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iRound);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
		if (has_szBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szBattleTag);
		};
		if (has_iBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iBattleTag);
		};
		if (has_iRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iRound);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_i64BattleSN();
				i64BattleSN = oPacker.ReadVarintINT64();
			}break;
			case 6: {
				set_has_szBattleTag();
				szBattleTag = oPacker.ReadSTRING();
			}break;
			case 7: {
				set_has_iBattleTag();
				iBattleTag = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_iRound();
				iRound = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_BATTLE_CONFIRM_RESULT_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private long i64BattleSN;   //唯一序号
	private string szBattleTag;   //战场标签, 透传
	private int iBattleTag;   //战场标签, 透传
	private int iRound;   //确认的回合


	public const int MAX_PACKEDSIZE = 188;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_i64BattleSN() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_i64BattleSN() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_i64BattleSN() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_i64BattleSN(long _i64BattleSN){set_has_i64BattleSN(); i64BattleSN=_i64BattleSN;}
	public long get_i64BattleSN(){if (has_i64BattleSN()) {return i64BattleSN;} return 0;}

	public bool has_szBattleTag() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_szBattleTag() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_szBattleTag() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_szBattleTag(string _szBattleTag){set_has_szBattleTag(); szBattleTag=_szBattleTag;}
	public string get_szBattleTag(){if (has_szBattleTag()) {return szBattleTag;} return "";}

	public bool has_iBattleTag() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iBattleTag() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iBattleTag() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iBattleTag(int _iBattleTag){set_has_iBattleTag(); iBattleTag=_iBattleTag;}
	public int get_iBattleTag(){if (has_iBattleTag()) {return iBattleTag;} return 0;}

	public bool has_iRound() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iRound() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iRound() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iRound(int _iRound){set_has_iRound(); iRound=_iRound;}
	public int get_iRound(){if (has_iRound()) {return iRound;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
		if (has_szBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szBattleTag);
		};
		if (has_iBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iBattleTag);
		};
		if (has_iRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iRound);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_i64BattleSN()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(i64BattleSN);
		};
		if (has_szBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szBattleTag);
		};
		if (has_iBattleTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iBattleTag);
		};
		if (has_iRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iRound);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_i64BattleSN();
				i64BattleSN = oPacker.ReadVarintINT64();
			}break;
			case 6: {
				set_has_szBattleTag();
				szBattleTag = oPacker.ReadSTRING();
			}break;
			case 7: {
				set_has_iBattleTag();
				iBattleTag = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_iRound();
				iRound = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 日志信息
public class TMSG_BATTLE_LOG
{
	private uint[] __orm_has_bits = new uint[1];
	private int iLevel;   //日志等级.  0 错误.  1  警告   2 日志....
	private string szMsg;   //


	public const int MAX_PACKEDSIZE = 1049;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iLevel() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLevel() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLevel() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLevel(int _iLevel){set_has_iLevel(); iLevel=_iLevel;}
	public int get_iLevel(){if (has_iLevel()) {return iLevel;} return 0;}

	public bool has_szMsg() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_szMsg() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_szMsg() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_szMsg(string _szMsg){set_has_szMsg(); szMsg=_szMsg;}
	public string get_szMsg(){if (has_szMsg()) {return szMsg;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
		if (has_szMsg()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szMsg);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLevel()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iLevel);
		};
		if (has_szMsg()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,3));  // f id
			oPacker.WriteSTRING(szMsg);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLevel();
				iLevel = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_szMsg();
				szMsg = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战场背景
public class TBattleBackground
{
	private uint[] __orm_has_bits = new uint[1];
	private int iCurRound;   //当前回合
	private int iMaxRound;   //最大回合


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iCurRound() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iCurRound() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iCurRound() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iCurRound(int _iCurRound){set_has_iCurRound(); iCurRound=_iCurRound;}
	public int get_iCurRound(){if (has_iCurRound()) {return iCurRound;} return 0;}

	public bool has_iMaxRound() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iMaxRound() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iMaxRound() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iMaxRound(int _iMaxRound){set_has_iMaxRound(); iMaxRound=_iMaxRound;}
	public int get_iMaxRound(){if (has_iMaxRound()) {return iMaxRound;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCurRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iCurRound);
		};
		if (has_iMaxRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iMaxRound);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCurRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iCurRound);
		};
		if (has_iMaxRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iMaxRound);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iCurRound();
				iCurRound = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iMaxRound();
				iMaxRound = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// battle start
public class TMSG_BATTLE_START
{
	private uint[] __orm_has_bits = new uint[1];
	private int iUnitNum;   //unit 数量
	private TBattleEntity[] arrUnit = new TBattleEntity[(int)TCONST.BATTLE_ENTITY_NUM_MAX];   //战斗单元
	private TBattleBackground stBackgroud = new TBattleBackground();   //战斗单元
	public TMSG_BATTLE_START() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_NUM_MAX; ++__orm_iLoopVar) {
			arrUnit[__orm_iLoopVar] = new TBattleEntity();
		}
	}

	public const int countof_arrUnit = (int)TCONST.BATTLE_ENTITY_NUM_MAX;

	public const int MAX_PACKEDSIZE = 43431;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.BATTLE_ENTITY_NUM_MAX; ++__orm_iLoopVar){arrUnit[__orm_iLoopVar].init();}
		stBackgroud.init();
	}
	public bool has_iUnitNum() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iUnitNum() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iUnitNum() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iUnitNum(int _iUnitNum){set_has_iUnitNum(); iUnitNum=_iUnitNum;}
	public int get_iUnitNum(){if (has_iUnitNum()) {return iUnitNum;} return 0;}

	public bool has_arrUnit() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrUnit() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrUnit() {__orm_has_bits[0] &= ~(0x8u);}
	public TBattleEntity[] set_arrUnit(){set_has_arrUnit(); return arrUnit;}
	public TBattleEntity[] get_arrUnit(){return arrUnit;}

	public bool has_stBackgroud() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_stBackgroud() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_stBackgroud() {__orm_has_bits[0] &= ~(0x40u);}
	public TBattleBackground set_stBackgroud(){set_has_stBackgroud(); return stBackgroud;}
	public TBattleBackground get_stBackgroud(){return stBackgroud;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iUnitNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iUnitNum);
		};
		if (has_arrUnit()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iUnitNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_NUM_MAX) && (__orm_iLoopVar < iUnitNum); ++__orm_iLoopVar) {
				arrUnit[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stBackgroud()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stBackgroud.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iUnitNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iUnitNum);
		};
		if (has_arrUnit()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iUnitNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_NUM_MAX) {
				oPacker.PushFieldName("iUnitNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_NUM_MAX) && (__orm_iLoopVar < iUnitNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrUnit[{0}]", __orm_iLoopVar);
				arrUnit[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stBackgroud()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stBackgroud");
			stBackgroud.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iUnitNum();
				iUnitNum = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrUnit();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iUnitNum=iUnitNum<__orm_iArrCount ? iUnitNum:(int)__orm_iArrCount;
				iUnitNum=iUnitNum<(int)TCONST.BATTLE_ENTITY_NUM_MAX ? iUnitNum:(int)TCONST.BATTLE_ENTITY_NUM_MAX;
				if (iUnitNum > (int)TCONST.BATTLE_ENTITY_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iUnitNum; ++__orm_iLoopVar) {
					arrUnit[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 6: {
				set_has_stBackgroud();
				stBackgroud.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// battle end
public class TMSG_BATTLE_END
{
	private uint[] __orm_has_bits = new uint[1];


	public const int MAX_PACKEDSIZE = 5;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 存活的实体列表
public class TEntityAliveList
{
	private uint[] __orm_has_bits = new uint[1];
	private int iAliveUnitNum;   //存活unit数量
	private TBattleEntityFinalState[] arrEntState = new TBattleEntityFinalState[(int)TCONST.BATTLE_ENTITY_NUM_MAX];   //
	public TEntityAliveList() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_NUM_MAX; ++__orm_iLoopVar) {
			arrEntState[__orm_iLoopVar] = new TBattleEntityFinalState();
		}
	}

	public const int countof_arrEntState = (int)TCONST.BATTLE_ENTITY_NUM_MAX;

	public const int MAX_PACKEDSIZE = 7553;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.BATTLE_ENTITY_NUM_MAX; ++__orm_iLoopVar){arrEntState[__orm_iLoopVar].init();}
	}
	public bool has_iAliveUnitNum() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iAliveUnitNum() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iAliveUnitNum() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iAliveUnitNum(int _iAliveUnitNum){set_has_iAliveUnitNum(); iAliveUnitNum=_iAliveUnitNum;}
	public int get_iAliveUnitNum(){if (has_iAliveUnitNum()) {return iAliveUnitNum;} return 0;}

	public bool has_arrEntState() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_arrEntState() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_arrEntState() {__orm_has_bits[0] &= ~(0x40u);}
	public TBattleEntityFinalState[] set_arrEntState(){set_has_arrEntState(); return arrEntState;}
	public TBattleEntityFinalState[] get_arrEntState(){return arrEntState;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iAliveUnitNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iAliveUnitNum);
		};
		if (has_arrEntState()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iAliveUnitNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_NUM_MAX) && (__orm_iLoopVar < iAliveUnitNum); ++__orm_iLoopVar) {
				arrEntState[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iAliveUnitNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iAliveUnitNum);
		};
		if (has_arrEntState()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iAliveUnitNum();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_NUM_MAX) {
				oPacker.PushFieldName("iAliveUnitNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_NUM_MAX) && (__orm_iLoopVar < iAliveUnitNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrEntState[{0}]", __orm_iLoopVar);
				arrEntState[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 3: {
				set_has_iAliveUnitNum();
				iAliveUnitNum = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_arrEntState();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iAliveUnitNum=iAliveUnitNum<__orm_iArrCount ? iAliveUnitNum:(int)__orm_iArrCount;
				iAliveUnitNum=iAliveUnitNum<(int)TCONST.BATTLE_ENTITY_NUM_MAX ? iAliveUnitNum:(int)TCONST.BATTLE_ENTITY_NUM_MAX;
				if (iAliveUnitNum > (int)TCONST.BATTLE_ENTITY_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iAliveUnitNum; ++__orm_iLoopVar) {
					arrEntState[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// battle 结果
public class TMSG_BATTLE_RESULT
{
	private uint[] __orm_has_bits = new uint[1];
	private int iWinner;   //胜利方阵营id
	private int iCurRound;   //当前回合 
	private TEntityAliveList lsAliveEntity = new TEntityAliveList();   //存活实体的状态


	public const int MAX_PACKEDSIZE = 7587;

	public void init() {
		__orm_has_bits[0]=0;
		lsAliveEntity.init();
	}
	public bool has_iWinner() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iWinner() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iWinner() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iWinner(int _iWinner){set_has_iWinner(); iWinner=_iWinner;}
	public int get_iWinner(){if (has_iWinner()) {return iWinner;} return 0;}

	public bool has_iCurRound() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iCurRound() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iCurRound() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iCurRound(int _iCurRound){set_has_iCurRound(); iCurRound=_iCurRound;}
	public int get_iCurRound(){if (has_iCurRound()) {return iCurRound;} return 0;}

	public bool has_lsAliveEntity() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_lsAliveEntity() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_lsAliveEntity() {__orm_has_bits[0] &= ~(0x80u);}
	public TEntityAliveList set_lsAliveEntity(){set_has_lsAliveEntity(); return lsAliveEntity;}
	public TEntityAliveList get_lsAliveEntity(){return lsAliveEntity;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iWinner()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iWinner);
		};
		if (has_iCurRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iCurRound);
		};
		if (has_lsAliveEntity()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			lsAliveEntity.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iWinner()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iWinner);
		};
		if (has_iCurRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iCurRound);
		};
		if (has_lsAliveEntity()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("lsAliveEntity");
			lsAliveEntity.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 3: {
				set_has_iWinner();
				iWinner = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iCurRound();
				iCurRound = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_lsAliveEntity();
				lsAliveEntity.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// frame start
public class TMSG_ROUND_START
{
	private uint[] __orm_has_bits = new uint[1];
	private int iRoundIdx;   //回合序号


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRoundIdx() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iRoundIdx() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iRoundIdx() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iRoundIdx(int _iRoundIdx){set_has_iRoundIdx(); iRoundIdx=_iRoundIdx;}
	public int get_iRoundIdx(){if (has_iRoundIdx()) {return iRoundIdx;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoundIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRoundIdx);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoundIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRoundIdx);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iRoundIdx();
				iRoundIdx = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// frame end
public class TMSG_ROUND_END
{
	private uint[] __orm_has_bits = new uint[1];
	private int iRoundIdx;   //回合序号


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRoundIdx() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iRoundIdx() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iRoundIdx() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iRoundIdx(int _iRoundIdx){set_has_iRoundIdx(); iRoundIdx=_iRoundIdx;}
	public int get_iRoundIdx(){if (has_iRoundIdx()) {return iRoundIdx;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoundIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRoundIdx);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoundIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRoundIdx);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iRoundIdx();
				iRoundIdx = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 实体使用技能
public class TMSG_ENTITY_SKILL_START
{
	private uint[] __orm_has_bits = new uint[1];
	private int rid;   //技能流水号. 自增, 代表一个运行中的技能
	private int srcuid;   //发起攻击者
	private int iSkillSid;   //技能sid
	private int iSkillID;   //技能ID, 表格配置
	private int iTargetCount;   //目标个数
	private int[] arrTarget = new int[(int)TCONST.BATTLE_ENTITY_NUM_MAX];   //目标uid

	public const int countof_arrTarget = (int)TCONST.BATTLE_ENTITY_NUM_MAX;

	public const int MAX_PACKEDSIZE = 79;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_rid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_rid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_rid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_rid(int _rid){set_has_rid(); rid=_rid;}
	public int get_rid(){if (has_rid()) {return rid;} return 0;}

	public bool has_srcuid() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_srcuid() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_srcuid() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_srcuid(int _srcuid){set_has_srcuid(); srcuid=_srcuid;}
	public int get_srcuid(){if (has_srcuid()) {return srcuid;} return 0;}

	public bool has_iSkillSid() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iSkillSid() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iSkillSid() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iSkillSid(int _iSkillSid){set_has_iSkillSid(); iSkillSid=_iSkillSid;}
	public int get_iSkillSid(){if (has_iSkillSid()) {return iSkillSid;} return 0;}

	public bool has_iSkillID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iSkillID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iSkillID() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iSkillID(int _iSkillID){set_has_iSkillID(); iSkillID=_iSkillID;}
	public int get_iSkillID(){if (has_iSkillID()) {return iSkillID;} return 0;}

	public bool has_iTargetCount() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iTargetCount() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iTargetCount() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iTargetCount(int _iTargetCount){set_has_iTargetCount(); iTargetCount=_iTargetCount;}
	public int get_iTargetCount(){if (has_iTargetCount()) {return iTargetCount;} return 0;}

	public bool has_arrTarget() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_arrTarget() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_arrTarget() {__orm_has_bits[0] &= ~(0x2000u);}
	public int[] set_arrTarget(){set_has_arrTarget(); return arrTarget;}
	public int[] get_arrTarget(){return arrTarget;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_srcuid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(srcuid);
		};
		if (has_iSkillSid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iSkillSid);
		};
		if (has_iSkillID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iSkillID);
		};
		if (has_iTargetCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iTargetCount);
		};
		if (has_arrTarget()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iTargetCount();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_NUM_MAX) && (__orm_iLoopVar < iTargetCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrTarget[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_srcuid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(srcuid);
		};
		if (has_iSkillSid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iSkillSid);
		};
		if (has_iSkillID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iSkillID);
		};
		if (has_iTargetCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iTargetCount);
		};
		if (has_arrTarget()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iTargetCount();
			if (__orm_ReferVar > (int)TCONST.BATTLE_ENTITY_NUM_MAX) {
				oPacker.PushFieldName("iTargetCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.BATTLE_ENTITY_NUM_MAX) && (__orm_iLoopVar < iTargetCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrTarget[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_rid();
				rid = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_srcuid();
				srcuid = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iSkillSid();
				iSkillSid = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iSkillID();
				iSkillID = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_iTargetCount();
				iTargetCount = oPacker.ReadVarintINT32();
			}break;
			case 13: {
				set_has_arrTarget();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iTargetCount=iTargetCount<__orm_iArrCount ? iTargetCount:(int)__orm_iArrCount;
				iTargetCount=iTargetCount<(int)TCONST.BATTLE_ENTITY_NUM_MAX ? iTargetCount:(int)TCONST.BATTLE_ENTITY_NUM_MAX;
				if (iTargetCount > (int)TCONST.BATTLE_ENTITY_NUM_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iTargetCount; ++__orm_iLoopVar) {
					arrTarget[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 实体使用技能结束
public class TMSG_ENTITY_SKILL_END
{
	private uint[] __orm_has_bits = new uint[1];
	private int rid;   //技能流水号. 自增, 代表一个运行中的技能
	private int srcuid;   //发起攻击者
	private int iSkillSid;   //技能id
	private int iReason;   //结束原因, 取值EnSkillEndReason


	public const int MAX_PACKEDSIZE = 45;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_rid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_rid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_rid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_rid(int _rid){set_has_rid(); rid=_rid;}
	public int get_rid(){if (has_rid()) {return rid;} return 0;}

	public bool has_srcuid() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_srcuid() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_srcuid() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_srcuid(int _srcuid){set_has_srcuid(); srcuid=_srcuid;}
	public int get_srcuid(){if (has_srcuid()) {return srcuid;} return 0;}

	public bool has_iSkillSid() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iSkillSid() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iSkillSid() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iSkillSid(int _iSkillSid){set_has_iSkillSid(); iSkillSid=_iSkillSid;}
	public int get_iSkillSid(){if (has_iSkillSid()) {return iSkillSid;} return 0;}

	public bool has_iReason() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iReason() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iReason() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iReason(int _iReason){set_has_iReason(); iReason=_iReason;}
	public int get_iReason(){if (has_iReason()) {return iReason;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_srcuid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(srcuid);
		};
		if (has_iSkillSid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iSkillSid);
		};
		if (has_iReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iReason);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_srcuid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(srcuid);
		};
		if (has_iSkillSid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iSkillSid);
		};
		if (has_iReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iReason);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_rid();
				rid = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_srcuid();
				srcuid = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iSkillSid();
				iSkillSid = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iReason();
				iReason = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 攻击开始
public class TMSG_ENTITY_SKILL_HIT_START
{
	private uint[] __orm_has_bits = new uint[1];
	private int rid;   //技能流水号. 自增, 代表一个运行中的技能
	private int srcuid;   //发起攻击者
	private int iBulletUID;   //
	private int iBulletID ;   //子弹uid
	private int iExplorationTime;   //爆炸时间


	public const int MAX_PACKEDSIZE = 55;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_rid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_rid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_rid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_rid(int _rid){set_has_rid(); rid=_rid;}
	public int get_rid(){if (has_rid()) {return rid;} return 0;}

	public bool has_srcuid() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_srcuid() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_srcuid() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_srcuid(int _srcuid){set_has_srcuid(); srcuid=_srcuid;}
	public int get_srcuid(){if (has_srcuid()) {return srcuid;} return 0;}

	public bool has_iBulletUID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iBulletUID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iBulletUID() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iBulletUID(int _iBulletUID){set_has_iBulletUID(); iBulletUID=_iBulletUID;}
	public int get_iBulletUID(){if (has_iBulletUID()) {return iBulletUID;} return 0;}

	public bool has_iBulletID () {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iBulletID () {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iBulletID () {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iBulletID (int _iBulletID ){set_has_iBulletID (); iBulletID =_iBulletID ;}
	public int get_iBulletID (){if (has_iBulletID ()) {return iBulletID ;} return 0;}

	public bool has_iExplorationTime() {return (__orm_has_bits[0] & 0x8000u) != 0;}
	public void set_has_iExplorationTime() {__orm_has_bits[0] |= 0x8000u;}
	public void clear_has_iExplorationTime() {__orm_has_bits[0] &= ~(0x8000u);}
	public void set_iExplorationTime(int _iExplorationTime){set_has_iExplorationTime(); iExplorationTime=_iExplorationTime;}
	public int get_iExplorationTime(){if (has_iExplorationTime()) {return iExplorationTime;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_srcuid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(srcuid);
		};
		if (has_iBulletUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iBulletUID);
		};
		if (has_iBulletID ()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iBulletID );
		};
		if (has_iExplorationTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,0));  // f id
			oPacker.WriteVarintINT32(iExplorationTime);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_srcuid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(srcuid);
		};
		if (has_iBulletUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iBulletUID);
		};
		if (has_iBulletID ()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iBulletID );
		};
		if (has_iExplorationTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,0));  // f id
			oPacker.WriteVarintINT32(iExplorationTime);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_rid();
				rid = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_srcuid();
				srcuid = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iBulletUID();
				iBulletUID = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iBulletID ();
				iBulletID  = oPacker.ReadVarintINT32();
			}break;
			case 15: {
				set_has_iExplorationTime();
				iExplorationTime = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 技能命中
public class TMSG_ENTITY_SKILL_HIT
{
	private uint[] __orm_has_bits = new uint[1];
	private int rid;   //技能流水号. 自增, 代表一个运行中的技能
	private int srcuid;   //发起者
	private int iTargetId;   //受击者id
	private int iBulletID ;   //子弹uid
	private int iBulletUID;   //子弹uid
	private sbyte iHitType;   //命中类型, 参考EnHitType
	private int iHpChanged;   //hp 变化值, 正数加血, 负数伤害
	private int bIsHeal;   //是否为治疗


	public const int MAX_PACKEDSIZE = 81;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_rid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_rid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_rid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_rid(int _rid){set_has_rid(); rid=_rid;}
	public int get_rid(){if (has_rid()) {return rid;} return 0;}

	public bool has_srcuid() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_srcuid() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_srcuid() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_srcuid(int _srcuid){set_has_srcuid(); srcuid=_srcuid;}
	public int get_srcuid(){if (has_srcuid()) {return srcuid;} return 0;}

	public bool has_iTargetId() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iTargetId() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iTargetId() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iTargetId(int _iTargetId){set_has_iTargetId(); iTargetId=_iTargetId;}
	public int get_iTargetId(){if (has_iTargetId()) {return iTargetId;} return 0;}

	public bool has_iBulletID () {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iBulletID () {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iBulletID () {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iBulletID (int _iBulletID ){set_has_iBulletID (); iBulletID =_iBulletID ;}
	public int get_iBulletID (){if (has_iBulletID ()) {return iBulletID ;} return 0;}

	public bool has_iBulletUID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iBulletUID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iBulletUID() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iBulletUID(int _iBulletUID){set_has_iBulletUID(); iBulletUID=_iBulletUID;}
	public int get_iBulletUID(){if (has_iBulletUID()) {return iBulletUID;} return 0;}

	public bool has_iHitType() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iHitType() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iHitType() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iHitType(sbyte _iHitType){set_has_iHitType(); iHitType=_iHitType;}
	public sbyte get_iHitType(){if (has_iHitType()) {return iHitType;} return 0;}

	public bool has_iHpChanged() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iHpChanged() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iHpChanged() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iHpChanged(int _iHpChanged){set_has_iHpChanged(); iHpChanged=_iHpChanged;}
	public int get_iHpChanged(){if (has_iHpChanged()) {return iHpChanged;} return 0;}

	public bool has_bIsHeal() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_bIsHeal() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_bIsHeal() {__orm_has_bits[0] &= ~(0x4000u);}
	public void set_bIsHeal(int _bIsHeal){set_has_bIsHeal(); bIsHeal=_bIsHeal;}
	public int get_bIsHeal(){if (has_bIsHeal()) {return bIsHeal;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_srcuid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(srcuid);
		};
		if (has_iTargetId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iTargetId);
		};
		if (has_iBulletID ()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iBulletID );
		};
		if (has_iBulletUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iBulletUID);
		};
		if (has_iHitType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,2));  // f id
			oPacker.WriteINT8(iHitType);
		};
		if (has_iHpChanged()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iHpChanged);
		};
		if (has_bIsHeal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintINT32(bIsHeal);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_srcuid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(srcuid);
		};
		if (has_iTargetId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iTargetId);
		};
		if (has_iBulletID ()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iBulletID );
		};
		if (has_iBulletUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iBulletUID);
		};
		if (has_iHitType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,2));  // f id
			oPacker.WriteINT8(iHitType);
		};
		if (has_iHpChanged()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iHpChanged);
		};
		if (has_bIsHeal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintINT32(bIsHeal);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_rid();
				rid = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_srcuid();
				srcuid = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iTargetId();
				iTargetId = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iBulletID ();
				iBulletID  = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iBulletUID();
				iBulletUID = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_iHitType();
				iHitType = oPacker.ReadINT8();
			}break;
			case 12: {
				set_has_iHpChanged();
				iHpChanged = oPacker.ReadVarintINT32();
			}break;
			case 14: {
				set_has_bIsHeal();
				bIsHeal = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 子弹创建 开始  
public class TMSG_ENTITY_BULLET_CREATE_START
{
	private uint[] __orm_has_bits = new uint[1];
	private int rid;   //技能流水号. 自增, 代表一个运行中的技能
	private int iCreatorUID;   //创建者
	private sbyte bCombo;   //
	private int iComboIdx;   //当前combo索引
	private int iTotalCombo;   //连击总次数


	public const int MAX_PACKEDSIZE = 51;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_rid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_rid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_rid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_rid(int _rid){set_has_rid(); rid=_rid;}
	public int get_rid(){if (has_rid()) {return rid;} return 0;}

	public bool has_iCreatorUID() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iCreatorUID() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iCreatorUID() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iCreatorUID(int _iCreatorUID){set_has_iCreatorUID(); iCreatorUID=_iCreatorUID;}
	public int get_iCreatorUID(){if (has_iCreatorUID()) {return iCreatorUID;} return 0;}

	public bool has_bCombo() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_bCombo() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_bCombo() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_bCombo(sbyte _bCombo){set_has_bCombo(); bCombo=_bCombo;}
	public sbyte get_bCombo(){if (has_bCombo()) {return bCombo;} return 0;}

	public bool has_iComboIdx() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iComboIdx() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iComboIdx() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iComboIdx(int _iComboIdx){set_has_iComboIdx(); iComboIdx=_iComboIdx;}
	public int get_iComboIdx(){if (has_iComboIdx()) {return iComboIdx;} return 0;}

	public bool has_iTotalCombo() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iTotalCombo() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iTotalCombo() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iTotalCombo(int _iTotalCombo){set_has_iTotalCombo(); iTotalCombo=_iTotalCombo;}
	public int get_iTotalCombo(){if (has_iTotalCombo()) {return iTotalCombo;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_iCreatorUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iCreatorUID);
		};
		if (has_bCombo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,2));  // f id
			oPacker.WriteINT8(bCombo);
		};
		if (has_iComboIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iComboIdx);
		};
		if (has_iTotalCombo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iTotalCombo);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_iCreatorUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iCreatorUID);
		};
		if (has_bCombo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,2));  // f id
			oPacker.WriteINT8(bCombo);
		};
		if (has_iComboIdx()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iComboIdx);
		};
		if (has_iTotalCombo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iTotalCombo);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_rid();
				rid = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iCreatorUID();
				iCreatorUID = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_bCombo();
				bCombo = oPacker.ReadINT8();
			}break;
			case 11: {
				set_has_iComboIdx();
				iComboIdx = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_iTotalCombo();
				iTotalCombo = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 子弹创建
public class TMSG_ENTITY_BULLET_CREATE
{
	private uint[] __orm_has_bits = new uint[1];
	private int rid;   //技能流水号. 自增, 代表一个运行中的技能
	private int iCreatorUID;   //创建者
	private byte iCount;   //子弹的数量
	private TBulletEntity[] arrBulletEntity = new TBulletEntity[(int)16];   //子弹现场
	private sbyte bCombo;   //是否连击, 连击标记暂时放这.  日后增加一个COMBO_STAGE后, 这个标记可能删除
	public TMSG_ENTITY_BULLET_CREATE() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)16; ++__orm_iLoopVar) {
			arrBulletEntity[__orm_iLoopVar] = new TBulletEntity();
		}
	}

	public const int countof_arrBulletEntity = (int)16;

	public const int MAX_PACKEDSIZE = 771;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)16; ++__orm_iLoopVar){arrBulletEntity[__orm_iLoopVar].init();}
	}
	public bool has_rid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_rid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_rid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_rid(int _rid){set_has_rid(); rid=_rid;}
	public int get_rid(){if (has_rid()) {return rid;} return 0;}

	public bool has_iCreatorUID() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iCreatorUID() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iCreatorUID() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iCreatorUID(int _iCreatorUID){set_has_iCreatorUID(); iCreatorUID=_iCreatorUID;}
	public int get_iCreatorUID(){if (has_iCreatorUID()) {return iCreatorUID;} return 0;}

	public bool has_iCount() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iCount() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iCount() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iCount(byte _iCount){set_has_iCount(); iCount=_iCount;}
	public byte get_iCount(){if (has_iCount()) {return iCount;} return 0;}

	public bool has_arrBulletEntity() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_arrBulletEntity() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_arrBulletEntity() {__orm_has_bits[0] &= ~(0x100u);}
	public TBulletEntity[] set_arrBulletEntity(){set_has_arrBulletEntity(); return arrBulletEntity;}
	public TBulletEntity[] get_arrBulletEntity(){return arrBulletEntity;}

	public bool has_bCombo() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_bCombo() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_bCombo() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_bCombo(sbyte _bCombo){set_has_bCombo(); bCombo=_bCombo;}
	public sbyte get_bCombo(){if (has_bCombo()) {return bCombo;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_iCreatorUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iCreatorUID);
		};
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteUINT8(iCount);
		};
		if (has_arrBulletEntity()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)16) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)16) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				arrBulletEntity[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bCombo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,2));  // f id
			oPacker.WriteINT8(bCombo);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_iCreatorUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iCreatorUID);
		};
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteUINT8(iCount);
		};
		if (has_arrBulletEntity()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)16) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)16) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrBulletEntity[{0}]", __orm_iLoopVar);
				arrBulletEntity[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bCombo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,2));  // f id
			oPacker.WriteINT8(bCombo);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_rid();
				rid = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iCreatorUID();
				iCreatorUID = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iCount();
				iCount = oPacker.ReadUINT8();
			}break;
			case 8: {
				set_has_arrBulletEntity();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(byte)__orm_iArrCount;
				iCount=iCount<(byte)16 ? iCount:(byte)16;
				if (iCount > (int)16) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrBulletEntity[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 10: {
				set_has_bCombo();
				bCombo = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 子弹销毁
public class TMSG_ENTITY_BULLET_DESTROY
{
	private uint[] __orm_has_bits = new uint[1];
	private int rid;   //技能流水号. 自增, 代表一个运行中的技能
	private int iCreatorUID;   //创建者
	private int iBulletUID;   //子弹uid


	public const int MAX_PACKEDSIZE = 35;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_rid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_rid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_rid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_rid(int _rid){set_has_rid(); rid=_rid;}
	public int get_rid(){if (has_rid()) {return rid;} return 0;}

	public bool has_iCreatorUID() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iCreatorUID() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iCreatorUID() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iCreatorUID(int _iCreatorUID){set_has_iCreatorUID(); iCreatorUID=_iCreatorUID;}
	public int get_iCreatorUID(){if (has_iCreatorUID()) {return iCreatorUID;} return 0;}

	public bool has_iBulletUID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iBulletUID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iBulletUID() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iBulletUID(int _iBulletUID){set_has_iBulletUID(); iBulletUID=_iBulletUID;}
	public int get_iBulletUID(){if (has_iBulletUID()) {return iBulletUID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_iCreatorUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iCreatorUID);
		};
		if (has_iBulletUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iBulletUID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_rid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(rid);
		};
		if (has_iCreatorUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iCreatorUID);
		};
		if (has_iBulletUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iBulletUID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_rid();
				rid = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iCreatorUID();
				iCreatorUID = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iBulletUID();
				iBulletUID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 新实体创建 , (保留)  
public class TMSG_ENTITY_CREATE
{
	private uint[] __orm_has_bits = new uint[1];
	private int iCreatorUID;   //创建者
	private TBattleEntity stNewEntity = new TBattleEntity();   //新实体


	public const int MAX_PACKEDSIZE = 21708;

	public void init() {
		__orm_has_bits[0]=0;
		stNewEntity.init();
	}
	public bool has_iCreatorUID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iCreatorUID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iCreatorUID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iCreatorUID(int _iCreatorUID){set_has_iCreatorUID(); iCreatorUID=_iCreatorUID;}
	public int get_iCreatorUID(){if (has_iCreatorUID()) {return iCreatorUID;} return 0;}

	public bool has_stNewEntity() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stNewEntity() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stNewEntity() {__orm_has_bits[0] &= ~(0x4u);}
	public TBattleEntity set_stNewEntity(){set_has_stNewEntity(); return stNewEntity;}
	public TBattleEntity get_stNewEntity(){return stNewEntity;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCreatorUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iCreatorUID);
		};
		if (has_stNewEntity()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stNewEntity.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iCreatorUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iCreatorUID);
		};
		if (has_stNewEntity()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stNewEntity");
			stNewEntity.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iCreatorUID();
				iCreatorUID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_stNewEntity();
				stNewEntity.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 实体销毁 (保留) 
public class TMSG_ENTITY_DESTROY
{
	private uint[] __orm_has_bits = new uint[1];
	private int uid;   //实体id
	private int iReason;   //销毁原因, 参考EnEntityDestroyReason


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_uid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_uid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_uid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_uid(int _uid){set_has_uid(); uid=_uid;}
	public int get_uid(){if (has_uid()) {return uid;} return 0;}

	public bool has_iReason() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iReason() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iReason() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iReason(int _iReason){set_has_iReason(); iReason=_iReason;}
	public int get_iReason(){if (has_iReason()) {return iReason;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uid);
		};
		if (has_iReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iReason);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uid);
		};
		if (has_iReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iReason);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_uid();
				uid = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iReason();
				iReason = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 实体状态变更
public class TMSG_ENTITY_STATE_CHANGED
{
	private uint[] __orm_has_bits = new uint[1];
	private int uid;   //实体id
	private int iOldState;   //旧状态, 取值EnEntityState
	private int iNewState;   //新状态, 取值EnEntityState


	public const int MAX_PACKEDSIZE = 35;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_uid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_uid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_uid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_uid(int _uid){set_has_uid(); uid=_uid;}
	public int get_uid(){if (has_uid()) {return uid;} return 0;}

	public bool has_iOldState() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iOldState() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iOldState() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iOldState(int _iOldState){set_has_iOldState(); iOldState=_iOldState;}
	public int get_iOldState(){if (has_iOldState()) {return iOldState;} return 0;}

	public bool has_iNewState() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iNewState() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iNewState() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iNewState(int _iNewState){set_has_iNewState(); iNewState=_iNewState;}
	public int get_iNewState(){if (has_iNewState()) {return iNewState;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uid);
		};
		if (has_iOldState()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iOldState);
		};
		if (has_iNewState()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iNewState);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uid);
		};
		if (has_iOldState()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iOldState);
		};
		if (has_iNewState()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iNewState);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_uid();
				uid = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iOldState();
				iOldState = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iNewState();
				iNewState = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 实体属性改变
public class TMSG_ENTITY_PROP_CHANGED
{
	private uint[] __orm_has_bits = new uint[1];
	private int uid;   //实体对象
	private byte iPropCount;   //变更属性的个数
	private int[] arrPropID = new int[(int)16];   //变更的属性
	private int[] arrPropVal = new int[(int)16];   //变更的属性

	public const int countof_arrPropID = (int)16;
	public const int countof_arrPropVal = (int)16;

	public const int MAX_PACKEDSIZE = 209;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_uid() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_uid() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_uid() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_uid(int _uid){set_has_uid(); uid=_uid;}
	public int get_uid(){if (has_uid()) {return uid;} return 0;}

	public bool has_iPropCount() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iPropCount() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iPropCount() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iPropCount(byte _iPropCount){set_has_iPropCount(); iPropCount=_iPropCount;}
	public byte get_iPropCount(){if (has_iPropCount()) {return iPropCount;} return 0;}

	public bool has_arrPropID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrPropID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrPropID() {__orm_has_bits[0] &= ~(0x8u);}
	public int[] set_arrPropID(){set_has_arrPropID(); return arrPropID;}
	public int[] get_arrPropID(){return arrPropID;}

	public bool has_arrPropVal() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrPropVal() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrPropVal() {__orm_has_bits[0] &= ~(0x10u);}
	public int[] set_arrPropVal(){set_has_arrPropVal(); return arrPropVal;}
	public int[] get_arrPropVal(){return arrPropVal;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uid);
		};
		if (has_iPropCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteUINT8(iPropCount);
		};
		if (has_arrPropID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropCount();
			if (__orm_ReferVar > (int)16) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)16) && (__orm_iLoopVar < iPropCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPropID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrPropVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropCount();
			if (__orm_ReferVar > (int)16) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)16) && (__orm_iLoopVar < iPropCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPropVal[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uid);
		};
		if (has_iPropCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteUINT8(iPropCount);
		};
		if (has_arrPropID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropCount();
			if (__orm_ReferVar > (int)16) {
				oPacker.PushFieldName("iPropCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)16) && (__orm_iLoopVar < iPropCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPropID[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrPropVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropCount();
			if (__orm_ReferVar > (int)16) {
				oPacker.PushFieldName("iPropCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)16) && (__orm_iLoopVar < iPropCount); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPropVal[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_uid();
				uid = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iPropCount();
				iPropCount = oPacker.ReadUINT8();
			}break;
			case 3: {
				set_has_arrPropID();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPropCount=iPropCount<__orm_iArrCount ? iPropCount:(byte)__orm_iArrCount;
				iPropCount=iPropCount<(byte)16 ? iPropCount:(byte)16;
				if (iPropCount > (int)16) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPropCount; ++__orm_iLoopVar) {
					arrPropID[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			case 4: {
				set_has_arrPropVal();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPropCount=iPropCount<__orm_iArrCount ? iPropCount:(byte)__orm_iArrCount;
				iPropCount=iPropCount<(byte)16 ? iPropCount:(byte)16;
				if (iPropCount > (int)16) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPropCount; ++__orm_iLoopVar) {
					arrPropVal[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// buffer开始
public class TMSG_ENTITY_BUFFER_START
{
	private uint[] __orm_has_bits = new uint[1];
	private int uidBuffer;   //buffer 流水号
	private int iMasterUID;   //主人
	private int iAdderUID;   //添加者
	private int iBufferID;   //bufferid
	private int iLayer;   //层数
	private int iEndRound;   //结束回合


	public const int MAX_PACKEDSIZE = 65;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_uidBuffer() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_uidBuffer() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_uidBuffer() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_uidBuffer(int _uidBuffer){set_has_uidBuffer(); uidBuffer=_uidBuffer;}
	public int get_uidBuffer(){if (has_uidBuffer()) {return uidBuffer;} return 0;}

	public bool has_iMasterUID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iMasterUID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iMasterUID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iMasterUID(int _iMasterUID){set_has_iMasterUID(); iMasterUID=_iMasterUID;}
	public int get_iMasterUID(){if (has_iMasterUID()) {return iMasterUID;} return 0;}

	public bool has_iAdderUID() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iAdderUID() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iAdderUID() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iAdderUID(int _iAdderUID){set_has_iAdderUID(); iAdderUID=_iAdderUID;}
	public int get_iAdderUID(){if (has_iAdderUID()) {return iAdderUID;} return 0;}

	public bool has_iBufferID() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iBufferID() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iBufferID() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iBufferID(int _iBufferID){set_has_iBufferID(); iBufferID=_iBufferID;}
	public int get_iBufferID(){if (has_iBufferID()) {return iBufferID;} return 0;}

	public bool has_iLayer() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iLayer() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iLayer() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iLayer(int _iLayer){set_has_iLayer(); iLayer=_iLayer;}
	public int get_iLayer(){if (has_iLayer()) {return iLayer;} return 0;}

	public bool has_iEndRound() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iEndRound() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iEndRound() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iEndRound(int _iEndRound){set_has_iEndRound(); iEndRound=_iEndRound;}
	public int get_iEndRound(){if (has_iEndRound()) {return iEndRound;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uidBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uidBuffer);
		};
		if (has_iMasterUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iMasterUID);
		};
		if (has_iAdderUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iAdderUID);
		};
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
		if (has_iLayer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iLayer);
		};
		if (has_iEndRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iEndRound);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uidBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(uidBuffer);
		};
		if (has_iMasterUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iMasterUID);
		};
		if (has_iAdderUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iAdderUID);
		};
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
		if (has_iLayer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iLayer);
		};
		if (has_iEndRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iEndRound);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_uidBuffer();
				uidBuffer = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iMasterUID();
				iMasterUID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iAdderUID();
				iAdderUID = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iBufferID();
				iBufferID = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iLayer();
				iLayer = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iEndRound();
				iEndRound = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// buffer结束
public class TMSG_ENTITY_BUFFER_END
{
	private uint[] __orm_has_bits = new uint[1];
	private int iMasterUID;   //主人
	private int uidBuffer;   //buff  流水号
	private int iBufferID;   //bufferid


	public const int MAX_PACKEDSIZE = 35;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iMasterUID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iMasterUID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iMasterUID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iMasterUID(int _iMasterUID){set_has_iMasterUID(); iMasterUID=_iMasterUID;}
	public int get_iMasterUID(){if (has_iMasterUID()) {return iMasterUID;} return 0;}

	public bool has_uidBuffer() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_uidBuffer() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_uidBuffer() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_uidBuffer(int _uidBuffer){set_has_uidBuffer(); uidBuffer=_uidBuffer;}
	public int get_uidBuffer(){if (has_uidBuffer()) {return uidBuffer;} return 0;}

	public bool has_iBufferID() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iBufferID() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iBufferID() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iBufferID(int _iBufferID){set_has_iBufferID(); iBufferID=_iBufferID;}
	public int get_iBufferID(){if (has_iBufferID()) {return iBufferID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMasterUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iMasterUID);
		};
		if (has_uidBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(uidBuffer);
		};
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMasterUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iMasterUID);
		};
		if (has_uidBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(uidBuffer);
		};
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iMasterUID();
				iMasterUID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_uidBuffer();
				uidBuffer = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iBufferID();
				iBufferID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// effect (buffer) 命中
public class TMSG_ENTITY_EFFECT_HIT
{
	private uint[] __orm_has_bits = new uint[1];
	private int uidBuffer;   //buff  流水号
	private int srcuid;   //effect发起者
	private int iTargetId;   //受击者uid
	private int iBufferID;   //effectid 
	private int iHpChanged;   //hp 变化值, 正数加血, 负数伤害
	private int iDamageType;   //伤害类型,参考 EnBulletDamageType


	public const int MAX_PACKEDSIZE = 65;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_uidBuffer() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_uidBuffer() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_uidBuffer() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_uidBuffer(int _uidBuffer){set_has_uidBuffer(); uidBuffer=_uidBuffer;}
	public int get_uidBuffer(){if (has_uidBuffer()) {return uidBuffer;} return 0;}

	public bool has_srcuid() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_srcuid() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_srcuid() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_srcuid(int _srcuid){set_has_srcuid(); srcuid=_srcuid;}
	public int get_srcuid(){if (has_srcuid()) {return srcuid;} return 0;}

	public bool has_iTargetId() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iTargetId() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iTargetId() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iTargetId(int _iTargetId){set_has_iTargetId(); iTargetId=_iTargetId;}
	public int get_iTargetId(){if (has_iTargetId()) {return iTargetId;} return 0;}

	public bool has_iBufferID() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iBufferID() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iBufferID() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iBufferID(int _iBufferID){set_has_iBufferID(); iBufferID=_iBufferID;}
	public int get_iBufferID(){if (has_iBufferID()) {return iBufferID;} return 0;}

	public bool has_iHpChanged() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_iHpChanged() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_iHpChanged() {__orm_has_bits[0] &= ~(0x4000u);}
	public void set_iHpChanged(int _iHpChanged){set_has_iHpChanged(); iHpChanged=_iHpChanged;}
	public int get_iHpChanged(){if (has_iHpChanged()) {return iHpChanged;} return 0;}

	public bool has_iDamageType() {return (__orm_has_bits[0] & 0x8000u) != 0;}
	public void set_has_iDamageType() {__orm_has_bits[0] |= 0x8000u;}
	public void clear_has_iDamageType() {__orm_has_bits[0] &= ~(0x8000u);}
	public void set_iDamageType(int _iDamageType){set_has_iDamageType(); iDamageType=_iDamageType;}
	public int get_iDamageType(){if (has_iDamageType()) {return iDamageType;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uidBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(uidBuffer);
		};
		if (has_srcuid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(srcuid);
		};
		if (has_iTargetId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iTargetId);
		};
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
		if (has_iHpChanged()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintINT32(iHpChanged);
		};
		if (has_iDamageType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,0));  // f id
			oPacker.WriteVarintINT32(iDamageType);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uidBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(uidBuffer);
		};
		if (has_srcuid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(srcuid);
		};
		if (has_iTargetId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iTargetId);
		};
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
		if (has_iHpChanged()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintINT32(iHpChanged);
		};
		if (has_iDamageType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,0));  // f id
			oPacker.WriteVarintINT32(iDamageType);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_uidBuffer();
				uidBuffer = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_srcuid();
				srcuid = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iTargetId();
				iTargetId = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_iBufferID();
				iBufferID = oPacker.ReadVarintINT32();
			}break;
			case 14: {
				set_has_iHpChanged();
				iHpChanged = oPacker.ReadVarintINT32();
			}break;
			case 15: {
				set_has_iDamageType();
				iDamageType = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// effect 激活
public class TMSG_ENTITY_EFFECT_ACTIVE
{
	private uint[] __orm_has_bits = new uint[1];
	private int uidBuffer;   //buff  流水号
	private int srcuid;   //effect发起者
	private int iTargetId;   //受击者uid
	private int iBufferID;   //effectid 


	public const int MAX_PACKEDSIZE = 45;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_uidBuffer() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_uidBuffer() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_uidBuffer() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_uidBuffer(int _uidBuffer){set_has_uidBuffer(); uidBuffer=_uidBuffer;}
	public int get_uidBuffer(){if (has_uidBuffer()) {return uidBuffer;} return 0;}

	public bool has_srcuid() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_srcuid() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_srcuid() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_srcuid(int _srcuid){set_has_srcuid(); srcuid=_srcuid;}
	public int get_srcuid(){if (has_srcuid()) {return srcuid;} return 0;}

	public bool has_iTargetId() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iTargetId() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iTargetId() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iTargetId(int _iTargetId){set_has_iTargetId(); iTargetId=_iTargetId;}
	public int get_iTargetId(){if (has_iTargetId()) {return iTargetId;} return 0;}

	public bool has_iBufferID() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iBufferID() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iBufferID() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iBufferID(int _iBufferID){set_has_iBufferID(); iBufferID=_iBufferID;}
	public int get_iBufferID(){if (has_iBufferID()) {return iBufferID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uidBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(uidBuffer);
		};
		if (has_srcuid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(srcuid);
		};
		if (has_iTargetId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iTargetId);
		};
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uidBuffer()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(uidBuffer);
		};
		if (has_srcuid()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(srcuid);
		};
		if (has_iTargetId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iTargetId);
		};
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_uidBuffer();
				uidBuffer = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_srcuid();
				srcuid = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iTargetId();
				iTargetId = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_iBufferID();
				iBufferID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 被杀通知  (保留, 暂时可能用不到) 
public class TMSG_ENTITY_BE_KILLED_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iVictimUID;   //受害人
	private int iKillerUID;   //杀手


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iVictimUID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iVictimUID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iVictimUID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iVictimUID(int _iVictimUID){set_has_iVictimUID(); iVictimUID=_iVictimUID;}
	public int get_iVictimUID(){if (has_iVictimUID()) {return iVictimUID;} return 0;}

	public bool has_iKillerUID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iKillerUID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iKillerUID() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iKillerUID(int _iKillerUID){set_has_iKillerUID(); iKillerUID=_iKillerUID;}
	public int get_iKillerUID(){if (has_iKillerUID()) {return iKillerUID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iVictimUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iVictimUID);
		};
		if (has_iKillerUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iKillerUID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iVictimUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iVictimUID);
		};
		if (has_iKillerUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iKillerUID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iVictimUID();
				iVictimUID = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iKillerUID();
				iKillerUID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 属性变化显示, 表现层使用   (保留,  暂时未用, )  
public class TMSG_ENTITY_PROPCHG_SHOW_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iEntityUID;   //
	private int iPropID;   //
	private int iOldVal;   //
	private int iNewVal;   //
	private int iReason;   //变化原因, 参考 EnPropChangeReason


	public const int MAX_PACKEDSIZE = 55;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iEntityUID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iEntityUID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iEntityUID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iEntityUID(int _iEntityUID){set_has_iEntityUID(); iEntityUID=_iEntityUID;}
	public int get_iEntityUID(){if (has_iEntityUID()) {return iEntityUID;} return 0;}

	public bool has_iPropID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iPropID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iPropID() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iPropID(int _iPropID){set_has_iPropID(); iPropID=_iPropID;}
	public int get_iPropID(){if (has_iPropID()) {return iPropID;} return 0;}

	public bool has_iOldVal() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iOldVal() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iOldVal() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iOldVal(int _iOldVal){set_has_iOldVal(); iOldVal=_iOldVal;}
	public int get_iOldVal(){if (has_iOldVal()) {return iOldVal;} return 0;}

	public bool has_iNewVal() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iNewVal() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iNewVal() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iNewVal(int _iNewVal){set_has_iNewVal(); iNewVal=_iNewVal;}
	public int get_iNewVal(){if (has_iNewVal()) {return iNewVal;} return 0;}

	public bool has_iReason() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iReason() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iReason() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iReason(int _iReason){set_has_iReason(); iReason=_iReason;}
	public int get_iReason(){if (has_iReason()) {return iReason;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iEntityUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iEntityUID);
		};
		if (has_iPropID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iPropID);
		};
		if (has_iOldVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iOldVal);
		};
		if (has_iNewVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iNewVal);
		};
		if (has_iReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iReason);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iEntityUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iEntityUID);
		};
		if (has_iPropID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iPropID);
		};
		if (has_iOldVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iOldVal);
		};
		if (has_iNewVal()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iNewVal);
		};
		if (has_iReason()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iReason);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iEntityUID();
				iEntityUID = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iPropID();
				iPropID = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iOldVal();
				iOldVal = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iNewVal();
				iNewVal = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_iReason();
				iReason = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 技能冷却变更
public class TColdingItem
{
	private uint[] __orm_has_bits = new uint[1];
	private int iItemUID;   //取决iType.  0: 技能uid ;  1 ....  
	private int iAvailableRound;   //(下次)可用的回合. 


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iItemUID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iItemUID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iItemUID() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iItemUID(int _iItemUID){set_has_iItemUID(); iItemUID=_iItemUID;}
	public int get_iItemUID(){if (has_iItemUID()) {return iItemUID;} return 0;}

	public bool has_iAvailableRound() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iAvailableRound() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iAvailableRound() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iAvailableRound(int _iAvailableRound){set_has_iAvailableRound(); iAvailableRound=_iAvailableRound;}
	public int get_iAvailableRound(){if (has_iAvailableRound()) {return iAvailableRound;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iItemUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iItemUID);
		};
		if (has_iAvailableRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iAvailableRound);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iItemUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iItemUID);
		};
		if (has_iAvailableRound()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iAvailableRound);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 8: {
				set_has_iItemUID();
				iItemUID = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_iAvailableRound();
				iAvailableRound = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 技能冷却变更
public class TMSG_ENTITY_ITEM_COLDING_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iType;   //冷却类型.  0 技能;  1 以后扩展
	private int iEntityUID;   //
	private int iItemNum;   //
	private TColdingItem[] arrItem = new TColdingItem[(int)32];   //(下次)可用的回合. 
	public TMSG_ENTITY_ITEM_COLDING_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)32; ++__orm_iLoopVar) {
			arrItem[__orm_iLoopVar] = new TColdingItem();
		}
	}

	public const int countof_arrItem = (int)32;

	public const int MAX_PACKEDSIZE = 845;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)32; ++__orm_iLoopVar){arrItem[__orm_iLoopVar].init();}
	}
	public bool has_iType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iType(sbyte _iType){set_has_iType(); iType=_iType;}
	public sbyte get_iType(){if (has_iType()) {return iType;} return 0;}

	public bool has_iEntityUID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iEntityUID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iEntityUID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iEntityUID(int _iEntityUID){set_has_iEntityUID(); iEntityUID=_iEntityUID;}
	public int get_iEntityUID(){if (has_iEntityUID()) {return iEntityUID;} return 0;}

	public bool has_iItemNum() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iItemNum() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iItemNum() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iItemNum(int _iItemNum){set_has_iItemNum(); iItemNum=_iItemNum;}
	public int get_iItemNum(){if (has_iItemNum()) {return iItemNum;} return 0;}

	public bool has_arrItem() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_arrItem() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_arrItem() {__orm_has_bits[0] &= ~(0x400u);}
	public TColdingItem[] set_arrItem(){set_has_arrItem(); return arrItem;}
	public TColdingItem[] get_arrItem(){return arrItem;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iType);
		};
		if (has_iEntityUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iEntityUID);
		};
		if (has_iItemNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iItemNum);
		};
		if (has_arrItem()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iItemNum();
			if (__orm_ReferVar > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iItemNum); ++__orm_iLoopVar) {
				arrItem[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iType);
		};
		if (has_iEntityUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iEntityUID);
		};
		if (has_iItemNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iItemNum);
		};
		if (has_arrItem()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iItemNum();
			if (__orm_ReferVar > (int)32) {
				oPacker.PushFieldName("iItemNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iItemNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrItem[{0}]", __orm_iLoopVar);
				arrItem[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iType();
				iType = oPacker.ReadINT8();
			}break;
			case 4: {
				set_has_iEntityUID();
				iEntityUID = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iItemNum();
				iItemNum = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_arrItem();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iItemNum=iItemNum<__orm_iArrCount ? iItemNum:(int)__orm_iArrCount;
				iItemNum=iItemNum<(int)32 ? iItemNum:(int)32;
				if (iItemNum > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iItemNum; ++__orm_iLoopVar) {
					arrItem[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// test effect 触发测试消息
public class TMSG_ENTITY_TESTEFFECT_ACTIVATE
{
	private uint[] __orm_has_bits = new uint[1];
	private int uidMaster;   //
	private int iBufferID;   //
	private int iBufferUID;   //buffer 的 uid
	private int p0;   //buffer.xls 的 p0
	private int p1;   //buffer.xls 的 p1 
	private int p2;   //buffer.xls 的 p2


	public const int MAX_PACKEDSIZE = 65;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_uidMaster() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_uidMaster() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_uidMaster() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_uidMaster(int _uidMaster){set_has_uidMaster(); uidMaster=_uidMaster;}
	public int get_uidMaster(){if (has_uidMaster()) {return uidMaster;} return 0;}

	public bool has_iBufferID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iBufferID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iBufferID() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iBufferID(int _iBufferID){set_has_iBufferID(); iBufferID=_iBufferID;}
	public int get_iBufferID(){if (has_iBufferID()) {return iBufferID;} return 0;}

	public bool has_iBufferUID() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iBufferUID() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iBufferUID() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iBufferUID(int _iBufferUID){set_has_iBufferUID(); iBufferUID=_iBufferUID;}
	public int get_iBufferUID(){if (has_iBufferUID()) {return iBufferUID;} return 0;}

	public bool has_p0() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_p0() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_p0() {__orm_has_bits[0] &= ~(0x2000u);}
	public void set_p0(int _p0){set_has_p0(); p0=_p0;}
	public int get_p0(){if (has_p0()) {return p0;} return 0;}

	public bool has_p1() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_p1() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_p1() {__orm_has_bits[0] &= ~(0x4000u);}
	public void set_p1(int _p1){set_has_p1(); p1=_p1;}
	public int get_p1(){if (has_p1()) {return p1;} return 0;}

	public bool has_p2() {return (__orm_has_bits[0] & 0x8000u) != 0;}
	public void set_has_p2() {__orm_has_bits[0] |= 0x8000u;}
	public void clear_has_p2() {__orm_has_bits[0] &= ~(0x8000u);}
	public void set_p2(int _p2){set_has_p2(); p2=_p2;}
	public int get_p2(){if (has_p2()) {return p2;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uidMaster()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(uidMaster);
		};
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
		if (has_iBufferUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iBufferUID);
		};
		if (has_p0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(p0);
		};
		if (has_p1()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintINT32(p1);
		};
		if (has_p2()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,0));  // f id
			oPacker.WriteVarintINT32(p2);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uidMaster()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(uidMaster);
		};
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
		if (has_iBufferUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iBufferUID);
		};
		if (has_p0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(p0);
		};
		if (has_p1()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintINT32(p1);
		};
		if (has_p2()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,0));  // f id
			oPacker.WriteVarintINT32(p2);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_uidMaster();
				uidMaster = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iBufferID();
				iBufferID = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_iBufferUID();
				iBufferUID = oPacker.ReadVarintINT32();
			}break;
			case 13: {
				set_has_p0();
				p0 = oPacker.ReadVarintINT32();
			}break;
			case 14: {
				set_has_p1();
				p1 = oPacker.ReadVarintINT32();
			}break;
			case 15: {
				set_has_p2();
				p2 = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// test effect 触发测试消息
public class TMSG_ENTITY_EFFECT_SHOW_LIGHTING
{
	private uint[] __orm_has_bits = new uint[1];
	private int uidMaster;   //
	private int iBufferID;   //
	private int iBufferUID;   //buffer 的 uid
	private int p0;   //buffer.xls 的 p0
	private int p1;   //buffer.xls 的 p1 
	private int p2;   //buffer.xls 的 p2


	public const int MAX_PACKEDSIZE = 65;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_uidMaster() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_uidMaster() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_uidMaster() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_uidMaster(int _uidMaster){set_has_uidMaster(); uidMaster=_uidMaster;}
	public int get_uidMaster(){if (has_uidMaster()) {return uidMaster;} return 0;}

	public bool has_iBufferID() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iBufferID() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iBufferID() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iBufferID(int _iBufferID){set_has_iBufferID(); iBufferID=_iBufferID;}
	public int get_iBufferID(){if (has_iBufferID()) {return iBufferID;} return 0;}

	public bool has_iBufferUID() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iBufferUID() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iBufferUID() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iBufferUID(int _iBufferUID){set_has_iBufferUID(); iBufferUID=_iBufferUID;}
	public int get_iBufferUID(){if (has_iBufferUID()) {return iBufferUID;} return 0;}

	public bool has_p0() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_p0() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_p0() {__orm_has_bits[0] &= ~(0x2000u);}
	public void set_p0(int _p0){set_has_p0(); p0=_p0;}
	public int get_p0(){if (has_p0()) {return p0;} return 0;}

	public bool has_p1() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_p1() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_p1() {__orm_has_bits[0] &= ~(0x4000u);}
	public void set_p1(int _p1){set_has_p1(); p1=_p1;}
	public int get_p1(){if (has_p1()) {return p1;} return 0;}

	public bool has_p2() {return (__orm_has_bits[0] & 0x8000u) != 0;}
	public void set_has_p2() {__orm_has_bits[0] |= 0x8000u;}
	public void clear_has_p2() {__orm_has_bits[0] &= ~(0x8000u);}
	public void set_p2(int _p2){set_has_p2(); p2=_p2;}
	public int get_p2(){if (has_p2()) {return p2;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uidMaster()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(uidMaster);
		};
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
		if (has_iBufferUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iBufferUID);
		};
		if (has_p0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(p0);
		};
		if (has_p1()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintINT32(p1);
		};
		if (has_p2()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,0));  // f id
			oPacker.WriteVarintINT32(p2);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_uidMaster()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(uidMaster);
		};
		if (has_iBufferID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iBufferID);
		};
		if (has_iBufferUID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iBufferUID);
		};
		if (has_p0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(p0);
		};
		if (has_p1()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintINT32(p1);
		};
		if (has_p2()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,0));  // f id
			oPacker.WriteVarintINT32(p2);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_uidMaster();
				uidMaster = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iBufferID();
				iBufferID = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_iBufferUID();
				iBufferUID = oPacker.ReadVarintINT32();
			}break;
			case 13: {
				set_has_p0();
				p0 = oPacker.ReadVarintINT32();
			}break;
			case 14: {
				set_has_p1();
				p1 = oPacker.ReadVarintINT32();
			}break;
			case 15: {
				set_has_p2();
				p2 = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TBattleMsgHead
{
	private uint[] __orm_has_bits = new uint[1];
	private int iMsgID;   //
	private int iTickCount;   //当前tick


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iMsgID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iMsgID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iMsgID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iMsgID(int _iMsgID){set_has_iMsgID(); iMsgID=_iMsgID;}
	public int get_iMsgID(){if (has_iMsgID()) {return iMsgID;} return 0;}

	public bool has_iTickCount() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iTickCount() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iTickCount() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iTickCount(int _iTickCount){set_has_iTickCount(); iTickCount=_iTickCount;}
	public int get_iTickCount(){if (has_iTickCount()) {return iTickCount;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMsgID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iMsgID);
		};
		if (has_iTickCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iTickCount);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iMsgID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iMsgID);
		};
		if (has_iTickCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iTickCount);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iMsgID();
				iMsgID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iTickCount();
				iTickCount = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 竞技场弟子信息
public class TOfflineDiscipleInfo
{
	private uint[] __orm_has_bits = new uint[1];
	private long iLocalId;   //本地Id
	private int iPropCount;   //属性数组长度
	private TK32V32[] arrProps = new TK32V32[(int)32];   //属性 (皮肤，战力，功法id，攻防血等)
	private string szName;   //弟子名字
	public TOfflineDiscipleInfo() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)32; ++__orm_iLoopVar) {
			arrProps[__orm_iLoopVar] = new TK32V32();
		}
	}

	public const int countof_arrProps = (int)32;

	public const int MAX_PACKEDSIZE = 886;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)32; ++__orm_iLoopVar){arrProps[__orm_iLoopVar].init();}
	}
	public bool has_iLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLocalId(long _iLocalId){set_has_iLocalId(); iLocalId=_iLocalId;}
	public long get_iLocalId(){if (has_iLocalId()) {return iLocalId;} return 0;}

	public bool has_iPropCount() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iPropCount() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iPropCount() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iPropCount(int _iPropCount){set_has_iPropCount(); iPropCount=_iPropCount;}
	public int get_iPropCount(){if (has_iPropCount()) {return iPropCount;} return 0;}

	public bool has_arrProps() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrProps() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrProps() {__orm_has_bits[0] &= ~(0x8u);}
	public TK32V32[] set_arrProps(){set_has_arrProps(); return arrProps;}
	public TK32V32[] get_arrProps(){return arrProps;}

	public bool has_szName() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_szName() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_szName() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_szName(string _szName){set_has_szName(); szName=_szName;}
	public string get_szName(){if (has_szName()) {return szName;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_iPropCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iPropCount);
		};
		if (has_arrProps()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropCount();
			if (__orm_ReferVar > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iPropCount); ++__orm_iLoopVar) {
				arrProps[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szName);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_iPropCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iPropCount);
		};
		if (has_arrProps()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iPropCount();
			if (__orm_ReferVar > (int)32) {
				oPacker.PushFieldName("iPropCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)32) && (__orm_iLoopVar < iPropCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrProps[{0}]", __orm_iLoopVar);
				arrProps[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,3));  // f id
			oPacker.WriteSTRING(szName);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLocalId();
				iLocalId = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iPropCount();
				iPropCount = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrProps();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iPropCount=iPropCount<__orm_iArrCount ? iPropCount:(int)__orm_iArrCount;
				iPropCount=iPropCount<(int)32 ? iPropCount:(int)32;
				if (iPropCount > (int)32) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iPropCount; ++__orm_iLoopVar) {
					arrProps[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 6: {
				set_has_szName();
				szName = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 对手信息 (各种离线竞技玩法)
public class TArenaOpponent
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte bIsMonster;   //是否为怪物
	private long i64RoleID;   //cfg_MonsterFormation::id 或 角色id
	private string szName;   //角色名
	private int iRank;   //排名
	private int iPower;   //战力
	private int iIcon;   //头像
	private int iFrame;   //头像框
	private int iTitle;   //称号
	private sbyte iRoundCount;   //
	private int iScore;   //积分
	private long i64WorldID;   //创角worldid
	private int iSect;   //宗门等级
	private sbyte iDiscipleCount;   //弟子摘要长度
	private TOfflineDiscipleInfo[] arrDiscipleInfo = new TOfflineDiscipleInfo[(int)3];   //弟子摘要
	public TArenaOpponent() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)3; ++__orm_iLoopVar) {
			arrDiscipleInfo[__orm_iLoopVar] = new TOfflineDiscipleInfo();
		}
	}

	public const int countof_arrDiscipleInfo = (int)3;

	public const int MAX_PACKEDSIZE = 2837;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)3; ++__orm_iLoopVar){arrDiscipleInfo[__orm_iLoopVar].init();}
	}
	public bool has_bIsMonster() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_bIsMonster() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_bIsMonster() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_bIsMonster(sbyte _bIsMonster){set_has_bIsMonster(); bIsMonster=_bIsMonster;}
	public sbyte get_bIsMonster(){if (has_bIsMonster()) {return bIsMonster;} return 0;}

	public bool has_i64RoleID() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_i64RoleID() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_i64RoleID() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_i64RoleID(long _i64RoleID){set_has_i64RoleID(); i64RoleID=_i64RoleID;}
	public long get_i64RoleID(){if (has_i64RoleID()) {return i64RoleID;} return 0;}

	public bool has_szName() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_szName() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_szName() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_szName(string _szName){set_has_szName(); szName=_szName;}
	public string get_szName(){if (has_szName()) {return szName;} return "";}

	public bool has_iRank() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iRank() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iRank() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iRank(int _iRank){set_has_iRank(); iRank=_iRank;}
	public int get_iRank(){if (has_iRank()) {return iRank;} return 0;}

	public bool has_iPower() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iPower() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iPower() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iPower(int _iPower){set_has_iPower(); iPower=_iPower;}
	public int get_iPower(){if (has_iPower()) {return iPower;} return 0;}

	public bool has_iIcon() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_iIcon() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_iIcon() {__orm_has_bits[0] &= ~(0x200u);}
	public void set_iIcon(int _iIcon){set_has_iIcon(); iIcon=_iIcon;}
	public int get_iIcon(){if (has_iIcon()) {return iIcon;} return 0;}

	public bool has_iFrame() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iFrame() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iFrame() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iFrame(int _iFrame){set_has_iFrame(); iFrame=_iFrame;}
	public int get_iFrame(){if (has_iFrame()) {return iFrame;} return 0;}

	public bool has_iTitle() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iTitle() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iTitle() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iTitle(int _iTitle){set_has_iTitle(); iTitle=_iTitle;}
	public int get_iTitle(){if (has_iTitle()) {return iTitle;} return 0;}

	public bool has_iRoundCount() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iRoundCount() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iRoundCount() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iRoundCount(sbyte _iRoundCount){set_has_iRoundCount(); iRoundCount=_iRoundCount;}
	public sbyte get_iRoundCount(){if (has_iRoundCount()) {return iRoundCount;} return 0;}

	public bool has_iScore() {return (__orm_has_bits[0] & 0x10000u) != 0;}
	public void set_has_iScore() {__orm_has_bits[0] |= 0x10000u;}
	public void clear_has_iScore() {__orm_has_bits[0] &= ~(0x10000u);}
	public void set_iScore(int _iScore){set_has_iScore(); iScore=_iScore;}
	public int get_iScore(){if (has_iScore()) {return iScore;} return 0;}

	public bool has_i64WorldID() {return (__orm_has_bits[0] & 0x80000u) != 0;}
	public void set_has_i64WorldID() {__orm_has_bits[0] |= 0x80000u;}
	public void clear_has_i64WorldID() {__orm_has_bits[0] &= ~(0x80000u);}
	public void set_i64WorldID(long _i64WorldID){set_has_i64WorldID(); i64WorldID=_i64WorldID;}
	public long get_i64WorldID(){if (has_i64WorldID()) {return i64WorldID;} return 0;}

	public bool has_iSect() {return (__orm_has_bits[0] & 0x200000u) != 0;}
	public void set_has_iSect() {__orm_has_bits[0] |= 0x200000u;}
	public void clear_has_iSect() {__orm_has_bits[0] &= ~(0x200000u);}
	public void set_iSect(int _iSect){set_has_iSect(); iSect=_iSect;}
	public int get_iSect(){if (has_iSect()) {return iSect;} return 0;}

	public bool has_iDiscipleCount() {return (__orm_has_bits[0] & 0x1000000u) != 0;}
	public void set_has_iDiscipleCount() {__orm_has_bits[0] |= 0x1000000u;}
	public void clear_has_iDiscipleCount() {__orm_has_bits[0] &= ~(0x1000000u);}
	public void set_iDiscipleCount(sbyte _iDiscipleCount){set_has_iDiscipleCount(); iDiscipleCount=_iDiscipleCount;}
	public sbyte get_iDiscipleCount(){if (has_iDiscipleCount()) {return iDiscipleCount;} return 0;}

	public bool has_arrDiscipleInfo() {return (__orm_has_bits[0] & 0x2000000u) != 0;}
	public void set_has_arrDiscipleInfo() {__orm_has_bits[0] |= 0x2000000u;}
	public void clear_has_arrDiscipleInfo() {__orm_has_bits[0] &= ~(0x2000000u);}
	public TOfflineDiscipleInfo[] set_arrDiscipleInfo(){set_has_arrDiscipleInfo(); return arrDiscipleInfo;}
	public TOfflineDiscipleInfo[] get_arrDiscipleInfo(){return arrDiscipleInfo;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bIsMonster()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bIsMonster);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,3));  // f id
			oPacker.WriteSTRING(szName);
		};
		if (has_iRank()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iRank);
		};
		if (has_iPower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iPower);
		};
		if (has_iIcon()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iIcon);
		};
		if (has_iFrame()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iFrame);
		};
		if (has_iTitle()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iTitle);
		};
		if (has_iRoundCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,2));  // f id
			oPacker.WriteINT8(iRoundCount);
		};
		if (has_iScore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,0));  // f id
			oPacker.WriteVarintINT32(iScore);
		};
		if (has_i64WorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(19,0));  // f id
			oPacker.WriteVarintINT64(i64WorldID);
		};
		if (has_iSect()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(21,0));  // f id
			oPacker.WriteVarintINT32(iSect);
		};
		if (has_iDiscipleCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(24,2));  // f id
			oPacker.WriteINT8(iDiscipleCount);
		};
		if (has_arrDiscipleInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(25,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDiscipleCount();
			if (__orm_ReferVar > (int)3) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)3) && (__orm_iLoopVar < iDiscipleCount); ++__orm_iLoopVar) {
				arrDiscipleInfo[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_bIsMonster()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bIsMonster);
		};
		if (has_i64RoleID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(i64RoleID);
		};
		if (has_szName()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,3));  // f id
			oPacker.WriteSTRING(szName);
		};
		if (has_iRank()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iRank);
		};
		if (has_iPower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iPower);
		};
		if (has_iIcon()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iIcon);
		};
		if (has_iFrame()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iFrame);
		};
		if (has_iTitle()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iTitle);
		};
		if (has_iRoundCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,2));  // f id
			oPacker.WriteINT8(iRoundCount);
		};
		if (has_iScore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,0));  // f id
			oPacker.WriteVarintINT32(iScore);
		};
		if (has_i64WorldID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(19,0));  // f id
			oPacker.WriteVarintINT64(i64WorldID);
		};
		if (has_iSect()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(21,0));  // f id
			oPacker.WriteVarintINT32(iSect);
		};
		if (has_iDiscipleCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(24,2));  // f id
			oPacker.WriteINT8(iDiscipleCount);
		};
		if (has_arrDiscipleInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(25,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDiscipleCount();
			if (__orm_ReferVar > (int)3) {
				oPacker.PushFieldName("iDiscipleCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)3) && (__orm_iLoopVar < iDiscipleCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrDiscipleInfo[{0}]", __orm_iLoopVar);
				arrDiscipleInfo[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 3: {
				set_has_bIsMonster();
				bIsMonster = oPacker.ReadINT8();
			}break;
			case 4: {
				set_has_i64RoleID();
				i64RoleID = oPacker.ReadVarintINT64();
			}break;
			case 5: {
				set_has_szName();
				szName = oPacker.ReadSTRING();
			}break;
			case 6: {
				set_has_iRank();
				iRank = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iPower();
				iPower = oPacker.ReadVarintINT32();
			}break;
			case 9: {
				set_has_iIcon();
				iIcon = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_iFrame();
				iFrame = oPacker.ReadVarintINT32();
			}break;
			case 11: {
				set_has_iTitle();
				iTitle = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_iRoundCount();
				iRoundCount = oPacker.ReadINT8();
			}break;
			case 16: {
				set_has_iScore();
				iScore = oPacker.ReadVarintINT32();
			}break;
			case 19: {
				set_has_i64WorldID();
				i64WorldID = oPacker.ReadVarintINT64();
			}break;
			case 21: {
				set_has_iSect();
				iSect = oPacker.ReadVarintINT32();
			}break;
			case 24: {
				set_has_iDiscipleCount();
				iDiscipleCount = oPacker.ReadINT8();
			}break;
			case 25: {
				set_has_arrDiscipleInfo();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iDiscipleCount=iDiscipleCount<__orm_iArrCount ? iDiscipleCount:(sbyte)__orm_iArrCount;
				iDiscipleCount=iDiscipleCount<(sbyte)3 ? iDiscipleCount:(sbyte)3;
				if (iDiscipleCount > (int)3) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iDiscipleCount; ++__orm_iLoopVar) {
					arrDiscipleInfo[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗日志
public class TArenaBatLog
{
	private uint[] __orm_has_bits = new uint[1];
	private TArenaOpponent stOpponent = new TArenaOpponent();   //对手信息
	private sbyte bIsWin;   //本人是否获胜
	private sbyte iCamp;   //本人阵营:攻守
	private long iTime;   //战斗时间
	private long iBatID;   //战斗id
	private int iOldRank;   //挑战前名次
	private int iNewRank;   //挑战后名次
	private int iOldScore;   //挑战前积分
	private int iNewScore;   //挑战后积分
	private sbyte bHasRevenge;   //是否需要复仇 0-否 1-是


	public const int MAX_PACKEDSIZE = 2939;

	public void init() {
		__orm_has_bits[0]=0;
		stOpponent.init();
	}
	public bool has_stOpponent() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_stOpponent() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_stOpponent() {__orm_has_bits[0] &= ~(0x4u);}
	public TArenaOpponent set_stOpponent(){set_has_stOpponent(); return stOpponent;}
	public TArenaOpponent get_stOpponent(){return stOpponent;}

	public bool has_bIsWin() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_bIsWin() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_bIsWin() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_bIsWin(sbyte _bIsWin){set_has_bIsWin(); bIsWin=_bIsWin;}
	public sbyte get_bIsWin(){if (has_bIsWin()) {return bIsWin;} return 0;}

	public bool has_iCamp() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iCamp() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iCamp() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iCamp(sbyte _iCamp){set_has_iCamp(); iCamp=_iCamp;}
	public sbyte get_iCamp(){if (has_iCamp()) {return iCamp;} return 0;}

	public bool has_iTime() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iTime() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iTime() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iTime(long _iTime){set_has_iTime(); iTime=_iTime;}
	public long get_iTime(){if (has_iTime()) {return iTime;} return 0;}

	public bool has_iBatID() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iBatID() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iBatID() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iBatID(long _iBatID){set_has_iBatID(); iBatID=_iBatID;}
	public long get_iBatID(){if (has_iBatID()) {return iBatID;} return 0;}

	public bool has_iOldRank() {return (__orm_has_bits[0] & 0x4000u) != 0;}
	public void set_has_iOldRank() {__orm_has_bits[0] |= 0x4000u;}
	public void clear_has_iOldRank() {__orm_has_bits[0] &= ~(0x4000u);}
	public void set_iOldRank(int _iOldRank){set_has_iOldRank(); iOldRank=_iOldRank;}
	public int get_iOldRank(){if (has_iOldRank()) {return iOldRank;} return 0;}

	public bool has_iNewRank() {return (__orm_has_bits[0] & 0x8000u) != 0;}
	public void set_has_iNewRank() {__orm_has_bits[0] |= 0x8000u;}
	public void clear_has_iNewRank() {__orm_has_bits[0] &= ~(0x8000u);}
	public void set_iNewRank(int _iNewRank){set_has_iNewRank(); iNewRank=_iNewRank;}
	public int get_iNewRank(){if (has_iNewRank()) {return iNewRank;} return 0;}

	public bool has_iOldScore() {return (__orm_has_bits[0] & 0x10000u) != 0;}
	public void set_has_iOldScore() {__orm_has_bits[0] |= 0x10000u;}
	public void clear_has_iOldScore() {__orm_has_bits[0] &= ~(0x10000u);}
	public void set_iOldScore(int _iOldScore){set_has_iOldScore(); iOldScore=_iOldScore;}
	public int get_iOldScore(){if (has_iOldScore()) {return iOldScore;} return 0;}

	public bool has_iNewScore() {return (__orm_has_bits[0] & 0x20000u) != 0;}
	public void set_has_iNewScore() {__orm_has_bits[0] |= 0x20000u;}
	public void clear_has_iNewScore() {__orm_has_bits[0] &= ~(0x20000u);}
	public void set_iNewScore(int _iNewScore){set_has_iNewScore(); iNewScore=_iNewScore;}
	public int get_iNewScore(){if (has_iNewScore()) {return iNewScore;} return 0;}

	public bool has_bHasRevenge() {return (__orm_has_bits[0] & 0x40000u) != 0;}
	public void set_has_bHasRevenge() {__orm_has_bits[0] |= 0x40000u;}
	public void clear_has_bHasRevenge() {__orm_has_bits[0] &= ~(0x40000u);}
	public void set_bHasRevenge(sbyte _bHasRevenge){set_has_bHasRevenge(); bHasRevenge=_bHasRevenge;}
	public sbyte get_bHasRevenge(){if (has_bHasRevenge()) {return bHasRevenge;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stOpponent()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stOpponent.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bIsWin()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bIsWin);
		};
		if (has_iCamp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iCamp);
		};
		if (has_iTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(iTime);
		};
		if (has_iBatID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT64(iBatID);
		};
		if (has_iOldRank()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintINT32(iOldRank);
		};
		if (has_iNewRank()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,0));  // f id
			oPacker.WriteVarintINT32(iNewRank);
		};
		if (has_iOldScore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,0));  // f id
			oPacker.WriteVarintINT32(iOldScore);
		};
		if (has_iNewScore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,0));  // f id
			oPacker.WriteVarintINT32(iNewScore);
		};
		if (has_bHasRevenge()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,2));  // f id
			oPacker.WriteINT8(bHasRevenge);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_stOpponent()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stOpponent");
			stOpponent.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bIsWin()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bIsWin);
		};
		if (has_iCamp()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iCamp);
		};
		if (has_iTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(iTime);
		};
		if (has_iBatID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT64(iBatID);
		};
		if (has_iOldRank()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(14,0));  // f id
			oPacker.WriteVarintINT32(iOldRank);
		};
		if (has_iNewRank()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(15,0));  // f id
			oPacker.WriteVarintINT32(iNewRank);
		};
		if (has_iOldScore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,0));  // f id
			oPacker.WriteVarintINT32(iOldScore);
		};
		if (has_iNewScore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,0));  // f id
			oPacker.WriteVarintINT32(iNewScore);
		};
		if (has_bHasRevenge()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,2));  // f id
			oPacker.WriteINT8(bHasRevenge);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_stOpponent();
				stOpponent.Unpack(oPacker);
			}break;
			case 3: {
				set_has_bIsWin();
				bIsWin = oPacker.ReadINT8();
			}break;
			case 4: {
				set_has_iCamp();
				iCamp = oPacker.ReadINT8();
			}break;
			case 8: {
				set_has_iTime();
				iTime = oPacker.ReadVarintINT64();
			}break;
			case 10: {
				set_has_iBatID();
				iBatID = oPacker.ReadVarintINT64();
			}break;
			case 14: {
				set_has_iOldRank();
				iOldRank = oPacker.ReadVarintINT32();
			}break;
			case 15: {
				set_has_iNewRank();
				iNewRank = oPacker.ReadVarintINT32();
			}break;
			case 16: {
				set_has_iOldScore();
				iOldScore = oPacker.ReadVarintINT32();
			}break;
			case 17: {
				set_has_iNewScore();
				iNewScore = oPacker.ReadVarintINT32();
			}break;
			case 18: {
				set_has_bHasRevenge();
				bHasRevenge = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 竞技场弟子 额外信息
public class TOfflineDiscipleInfoExtra
{
	private uint[] __orm_has_bits = new uint[1];
	private long iLocalId;   //本地Id
	private TFullEquipInfo stFullEquipInfo = new TFullEquipInfo();   //完整装备信息
	private TDiscipleAbilityList stAbilityList = new TDiscipleAbilityList();   //完整技能信息
	private long[] arrLevelUnlocked = new long[(int)1];   //被解锁的背包等级，位图

	public const int countof_arrLevelUnlocked = (int)1;

	public const int MAX_PACKEDSIZE = 3189;

	public void init() {
		__orm_has_bits[0]=0;
		stFullEquipInfo.init();
		stAbilityList.init();
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)1; ++__orm_iLoopVar){arrLevelUnlocked[__orm_iLoopVar]=0;}
	}
	public bool has_iLocalId() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLocalId() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLocalId() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLocalId(long _iLocalId){set_has_iLocalId(); iLocalId=_iLocalId;}
	public long get_iLocalId(){if (has_iLocalId()) {return iLocalId;} return 0;}

	public bool has_stFullEquipInfo() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_stFullEquipInfo() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_stFullEquipInfo() {__orm_has_bits[0] &= ~(0x8u);}
	public TFullEquipInfo set_stFullEquipInfo(){set_has_stFullEquipInfo(); return stFullEquipInfo;}
	public TFullEquipInfo get_stFullEquipInfo(){return stFullEquipInfo;}

	public bool has_stAbilityList() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_stAbilityList() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_stAbilityList() {__orm_has_bits[0] &= ~(0x10u);}
	public TDiscipleAbilityList set_stAbilityList(){set_has_stAbilityList(); return stAbilityList;}
	public TDiscipleAbilityList get_stAbilityList(){return stAbilityList;}

	public bool has_arrLevelUnlocked() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_arrLevelUnlocked() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_arrLevelUnlocked() {__orm_has_bits[0] &= ~(0x100u);}
	public long[] set_arrLevelUnlocked(){set_has_arrLevelUnlocked(); return arrLevelUnlocked;}
	public long[] get_arrLevelUnlocked(){return arrLevelUnlocked;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_stFullEquipInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stFullEquipInfo.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stAbilityList()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stAbilityList.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrLevelUnlocked()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)1); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)1); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrLevelUnlocked[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLocalId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLocalId);
		};
		if (has_stFullEquipInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stFullEquipInfo");
			stFullEquipInfo.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_stAbilityList()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stAbilityList");
			stAbilityList.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_arrLevelUnlocked()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)1); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)1); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT64(arrLevelUnlocked[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLocalId();
				iLocalId = oPacker.ReadVarintINT64();
			}break;
			case 3: {
				set_has_stFullEquipInfo();
				stFullEquipInfo.Unpack(oPacker);
			}break;
			case 4: {
				set_has_stAbilityList();
				stAbilityList.Unpack(oPacker);
			}break;
			case 8: {
				set_has_arrLevelUnlocked();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)1 ? __orm_iArrCount:(uint)1;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrLevelUnlocked[__orm_iLoopVar] = oPacker.ReadVarintINT64();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 竞技场对手 额外信息
public class TArenaOpponentExtra
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iDiscipleCount;   //弟子摘要长度
	private TOfflineDiscipleInfoExtra[] arrDiscipleInfoExtra = new TOfflineDiscipleInfoExtra[(int)3];   //弟子摘要
	public TArenaOpponentExtra() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)3; ++__orm_iLoopVar) {
			arrDiscipleInfoExtra[__orm_iLoopVar] = new TOfflineDiscipleInfoExtra();
		}
	}

	public const int countof_arrDiscipleInfoExtra = (int)3;

	public const int MAX_PACKEDSIZE = 9592;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)3; ++__orm_iLoopVar){arrDiscipleInfoExtra[__orm_iLoopVar].init();}
	}
	public bool has_iDiscipleCount() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iDiscipleCount() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iDiscipleCount() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iDiscipleCount(sbyte _iDiscipleCount){set_has_iDiscipleCount(); iDiscipleCount=_iDiscipleCount;}
	public sbyte get_iDiscipleCount(){if (has_iDiscipleCount()) {return iDiscipleCount;} return 0;}

	public bool has_arrDiscipleInfoExtra() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_arrDiscipleInfoExtra() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_arrDiscipleInfoExtra() {__orm_has_bits[0] &= ~(0x4u);}
	public TOfflineDiscipleInfoExtra[] set_arrDiscipleInfoExtra(){set_has_arrDiscipleInfoExtra(); return arrDiscipleInfoExtra;}
	public TOfflineDiscipleInfoExtra[] get_arrDiscipleInfoExtra(){return arrDiscipleInfoExtra;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iDiscipleCount);
		};
		if (has_arrDiscipleInfoExtra()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDiscipleCount();
			if (__orm_ReferVar > (int)3) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)3) && (__orm_iLoopVar < iDiscipleCount); ++__orm_iLoopVar) {
				arrDiscipleInfoExtra[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iDiscipleCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iDiscipleCount);
		};
		if (has_arrDiscipleInfoExtra()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iDiscipleCount();
			if (__orm_ReferVar > (int)3) {
				oPacker.PushFieldName("iDiscipleCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)3) && (__orm_iLoopVar < iDiscipleCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrDiscipleInfoExtra[{0}]", __orm_iLoopVar);
				arrDiscipleInfoExtra[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iDiscipleCount();
				iDiscipleCount = oPacker.ReadINT8();
			}break;
			case 2: {
				set_has_arrDiscipleInfoExtra();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iDiscipleCount=iDiscipleCount<__orm_iArrCount ? iDiscipleCount:(sbyte)__orm_iArrCount;
				iDiscipleCount=iDiscipleCount<(sbyte)3 ? iDiscipleCount:(sbyte)3;
				if (iDiscipleCount > (int)3) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iDiscipleCount; ++__orm_iLoopVar) {
					arrDiscipleInfoExtra[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 加载竞技场信息(客户端打开窗口)
public class TMSG_ARENA_LOAD_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private long iLastBatID;   //最后一条战斗记录的batID, 填0相当于全发
	private sbyte iArenaType;   //取值 EnArenaType


	public const int MAX_PACKEDSIZE = 26;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iLastBatID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iLastBatID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iLastBatID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iLastBatID(long _iLastBatID){set_has_iLastBatID(); iLastBatID=_iLastBatID;}
	public long get_iLastBatID(){if (has_iLastBatID()) {return iLastBatID;} return 0;}

	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLastBatID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLastBatID);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iLastBatID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iLastBatID);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iLastBatID();
				iLastBatID = oPacker.ReadVarintINT64();
			}break;
			case 4: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_ARENA_LOAD_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private sbyte iArenaType;   //取值 EnArenaType
	private int iRank;   //本人排名.  未上榜返回ORM_ARENA1_INVALID_RANK,  0实际为第1名
	private int iPower;   //战力
	private sbyte iRemainChallengeCount;   //剩余挑战次数
	private int iScore;   //积分
	private long iChallengeRecoveTime;   //(下一次)挑战次数回复时间,0为无须回复
	private int iBatLogNum;   //日志数量
	private TArenaBatLog[] arrBatLog = new TArenaBatLog[(int)TCONST.ORM_ARENA1_LOG_NUM];   //战斗日志
	private long iSeasonSettleTime;   //赛季结束时间
	private long iDailySettleTime;   //日奖励时间
	private long iWeeklySettleTime;   //周奖励时间
	public TMSG_ARENA_LOAD_RSP() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_ARENA1_LOG_NUM; ++__orm_iLoopVar) {
			arrBatLog[__orm_iLoopVar] = new TArenaBatLog();
		}
	}

	public const int countof_arrBatLog = (int)TCONST.ORM_ARENA1_LOG_NUM;

	public const int MAX_PACKEDSIZE = 29531;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_ARENA1_LOG_NUM; ++__orm_iLoopVar){arrBatLog[__orm_iLoopVar].init();}
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_iRank() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRank() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRank() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRank(int _iRank){set_has_iRank(); iRank=_iRank;}
	public int get_iRank(){if (has_iRank()) {return iRank;} return 0;}

	public bool has_iPower() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iPower() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iPower() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iPower(int _iPower){set_has_iPower(); iPower=_iPower;}
	public int get_iPower(){if (has_iPower()) {return iPower;} return 0;}

	public bool has_iRemainChallengeCount() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iRemainChallengeCount() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iRemainChallengeCount() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iRemainChallengeCount(sbyte _iRemainChallengeCount){set_has_iRemainChallengeCount(); iRemainChallengeCount=_iRemainChallengeCount;}
	public sbyte get_iRemainChallengeCount(){if (has_iRemainChallengeCount()) {return iRemainChallengeCount;} return 0;}

	public bool has_iScore() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iScore() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iScore() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iScore(int _iScore){set_has_iScore(); iScore=_iScore;}
	public int get_iScore(){if (has_iScore()) {return iScore;} return 0;}

	public bool has_iChallengeRecoveTime() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iChallengeRecoveTime() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iChallengeRecoveTime() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iChallengeRecoveTime(long _iChallengeRecoveTime){set_has_iChallengeRecoveTime(); iChallengeRecoveTime=_iChallengeRecoveTime;}
	public long get_iChallengeRecoveTime(){if (has_iChallengeRecoveTime()) {return iChallengeRecoveTime;} return 0;}

	public bool has_iBatLogNum() {return (__orm_has_bits[0] & 0x10000u) != 0;}
	public void set_has_iBatLogNum() {__orm_has_bits[0] |= 0x10000u;}
	public void clear_has_iBatLogNum() {__orm_has_bits[0] &= ~(0x10000u);}
	public void set_iBatLogNum(int _iBatLogNum){set_has_iBatLogNum(); iBatLogNum=_iBatLogNum;}
	public int get_iBatLogNum(){if (has_iBatLogNum()) {return iBatLogNum;} return 0;}

	public bool has_arrBatLog() {return (__orm_has_bits[0] & 0x20000u) != 0;}
	public void set_has_arrBatLog() {__orm_has_bits[0] |= 0x20000u;}
	public void clear_has_arrBatLog() {__orm_has_bits[0] &= ~(0x20000u);}
	public TArenaBatLog[] set_arrBatLog(){set_has_arrBatLog(); return arrBatLog;}
	public TArenaBatLog[] get_arrBatLog(){return arrBatLog;}

	public bool has_iSeasonSettleTime() {return (__orm_has_bits[0] & 0x40000u) != 0;}
	public void set_has_iSeasonSettleTime() {__orm_has_bits[0] |= 0x40000u;}
	public void clear_has_iSeasonSettleTime() {__orm_has_bits[0] &= ~(0x40000u);}
	public void set_iSeasonSettleTime(long _iSeasonSettleTime){set_has_iSeasonSettleTime(); iSeasonSettleTime=_iSeasonSettleTime;}
	public long get_iSeasonSettleTime(){if (has_iSeasonSettleTime()) {return iSeasonSettleTime;} return 0;}

	public bool has_iDailySettleTime() {return (__orm_has_bits[0] & 0x80000u) != 0;}
	public void set_has_iDailySettleTime() {__orm_has_bits[0] |= 0x80000u;}
	public void clear_has_iDailySettleTime() {__orm_has_bits[0] &= ~(0x80000u);}
	public void set_iDailySettleTime(long _iDailySettleTime){set_has_iDailySettleTime(); iDailySettleTime=_iDailySettleTime;}
	public long get_iDailySettleTime(){if (has_iDailySettleTime()) {return iDailySettleTime;} return 0;}

	public bool has_iWeeklySettleTime() {return (__orm_has_bits[0] & 0x100000u) != 0;}
	public void set_has_iWeeklySettleTime() {__orm_has_bits[0] |= 0x100000u;}
	public void clear_has_iWeeklySettleTime() {__orm_has_bits[0] &= ~(0x100000u);}
	public void set_iWeeklySettleTime(long _iWeeklySettleTime){set_has_iWeeklySettleTime(); iWeeklySettleTime=_iWeeklySettleTime;}
	public long get_iWeeklySettleTime(){if (has_iWeeklySettleTime()) {return iWeeklySettleTime;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iRank()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRank);
		};
		if (has_iPower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iPower);
		};
		if (has_iRemainChallengeCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteINT8(iRemainChallengeCount);
		};
		if (has_iScore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iScore);
		};
		if (has_iChallengeRecoveTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(iChallengeRecoveTime);
		};
		if (has_iBatLogNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,0));  // f id
			oPacker.WriteVarintINT32(iBatLogNum);
		};
		if (has_arrBatLog()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iBatLogNum();
			if (__orm_ReferVar > (int)TCONST.ORM_ARENA1_LOG_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_ARENA1_LOG_NUM) && (__orm_iLoopVar < iBatLogNum); ++__orm_iLoopVar) {
				arrBatLog[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iSeasonSettleTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,0));  // f id
			oPacker.WriteVarintINT64(iSeasonSettleTime);
		};
		if (has_iDailySettleTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(19,0));  // f id
			oPacker.WriteVarintINT64(iDailySettleTime);
		};
		if (has_iWeeklySettleTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(20,0));  // f id
			oPacker.WriteVarintINT64(iWeeklySettleTime);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iRank()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRank);
		};
		if (has_iPower()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iPower);
		};
		if (has_iRemainChallengeCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteINT8(iRemainChallengeCount);
		};
		if (has_iScore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iScore);
		};
		if (has_iChallengeRecoveTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT64(iChallengeRecoveTime);
		};
		if (has_iBatLogNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,0));  // f id
			oPacker.WriteVarintINT32(iBatLogNum);
		};
		if (has_arrBatLog()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iBatLogNum();
			if (__orm_ReferVar > (int)TCONST.ORM_ARENA1_LOG_NUM) {
				oPacker.PushFieldName("iBatLogNum={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_ARENA1_LOG_NUM) && (__orm_iLoopVar < iBatLogNum); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrBatLog[{0}]", __orm_iLoopVar);
				arrBatLog[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iSeasonSettleTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,0));  // f id
			oPacker.WriteVarintINT64(iSeasonSettleTime);
		};
		if (has_iDailySettleTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(19,0));  // f id
			oPacker.WriteVarintINT64(iDailySettleTime);
		};
		if (has_iWeeklySettleTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(20,0));  // f id
			oPacker.WriteVarintINT64(iWeeklySettleTime);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 4: {
				set_has_iRank();
				iRank = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iPower();
				iPower = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iRemainChallengeCount();
				iRemainChallengeCount = oPacker.ReadINT8();
			}break;
			case 7: {
				set_has_iScore();
				iScore = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iChallengeRecoveTime();
				iChallengeRecoveTime = oPacker.ReadVarintINT64();
			}break;
			case 16: {
				set_has_iBatLogNum();
				iBatLogNum = oPacker.ReadVarintINT32();
			}break;
			case 17: {
				set_has_arrBatLog();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iBatLogNum=iBatLogNum<__orm_iArrCount ? iBatLogNum:(int)__orm_iArrCount;
				iBatLogNum=iBatLogNum<(int)TCONST.ORM_ARENA1_LOG_NUM ? iBatLogNum:(int)TCONST.ORM_ARENA1_LOG_NUM;
				if (iBatLogNum > (int)TCONST.ORM_ARENA1_LOG_NUM) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iBatLogNum; ++__orm_iLoopVar) {
					arrBatLog[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 18: {
				set_has_iSeasonSettleTime();
				iSeasonSettleTime = oPacker.ReadVarintINT64();
			}break;
			case 19: {
				set_has_iDailySettleTime();
				iDailySettleTime = oPacker.ReadVarintINT64();
			}break;
			case 20: {
				set_has_iWeeklySettleTime();
				iWeeklySettleTime = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 获取排行榜
public class TMSG_ARENA_GET_RANKING_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iArenaType;   //取值 EnArenaType
	private int iStart;   //从哪个名次开始获取,0 表示从头开始
	private int iCount;   //需要获取多少个名次. 不能超过RSP.arrArenaRole的长度


	public const int MAX_PACKEDSIZE = 31;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_iStart() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iStart() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iStart() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iStart(int _iStart){set_has_iStart(); iStart=_iStart;}
	public int get_iStart(){if (has_iStart()) {return iStart;} return 0;}

	public bool has_iCount() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iCount() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iCount() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iCount(int _iCount){set_has_iCount(); iCount=_iCount;}
	public int get_iCount(){if (has_iCount()) {return iCount;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iStart);
		};
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iStart);
		};
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 3: {
				set_has_iStart();
				iStart = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iCount();
				iCount = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 获取排行榜
public class TMSG_ARENA_GET_RANKING_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private sbyte iArenaType;   //取值 EnArenaType
	private int iStart;   //透传
	private int iCount;   //返回名次个数
	private TArenaOpponent[] arrArenaRole = new TArenaOpponent[(int)50];   //
	private sbyte bHasMore;   //是否还有更多的名次数据
	public TMSG_ARENA_GET_RANKING_RSP() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)50; ++__orm_iLoopVar) {
			arrArenaRole[__orm_iLoopVar] = new TArenaOpponent();
		}
	}

	public const int countof_arrArenaRole = (int)50;

	public const int MAX_PACKEDSIZE = 141911;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)50; ++__orm_iLoopVar){arrArenaRole[__orm_iLoopVar].init();}
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_iStart() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iStart() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iStart() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iStart(int _iStart){set_has_iStart(); iStart=_iStart;}
	public int get_iStart(){if (has_iStart()) {return iStart;} return 0;}

	public bool has_iCount() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iCount() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iCount() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iCount(int _iCount){set_has_iCount(); iCount=_iCount;}
	public int get_iCount(){if (has_iCount()) {return iCount;} return 0;}

	public bool has_arrArenaRole() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_arrArenaRole() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_arrArenaRole() {__orm_has_bits[0] &= ~(0x100u);}
	public TArenaOpponent[] set_arrArenaRole(){set_has_arrArenaRole(); return arrArenaRole;}
	public TArenaOpponent[] get_arrArenaRole(){return arrArenaRole;}

	public bool has_bHasMore() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_bHasMore() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_bHasMore() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_bHasMore(sbyte _bHasMore){set_has_bHasMore(); bHasMore=_bHasMore;}
	public sbyte get_bHasMore(){if (has_bHasMore()) {return bHasMore;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iStart);
		};
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrArenaRole()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)50) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)50) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				arrArenaRole[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bHasMore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,2));  // f id
			oPacker.WriteINT8(bHasMore);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iStart()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iStart);
		};
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrArenaRole()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)50) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)50) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrArenaRole[{0}]", __orm_iLoopVar);
				arrArenaRole[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_bHasMore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,2));  // f id
			oPacker.WriteINT8(bHasMore);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 3: {
				set_has_iStart();
				iStart = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iCount();
				iCount = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_arrArenaRole();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(int)__orm_iArrCount;
				iCount=iCount<(int)50 ? iCount:(int)50;
				if (iCount > (int)50) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrArenaRole[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 10: {
				set_has_bHasMore();
				bHasMore = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 名次变更通知, 通常是被打下来了
public class TMSG_ARENA_RANK_CHANGED_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iArenaType;   //取值 EnArenaType


	public const int MAX_PACKEDSIZE = 11;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 刷新对手req
public class TMSG_ARENA_REFRESH_OPP_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iArenaType;   //取值 EnArenaType


	public const int MAX_PACKEDSIZE = 11;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 4: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 刷新对手rsp
public class TMSG_ARENA_REFRESH_OPP_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private sbyte iArenaType;   //取值 EnArenaType


	public const int MAX_PACKEDSIZE = 21;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 刷新对手ntf
public class TMSG_ARENA_REFRESH_OPP_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iArenaType;   //取值 EnArenaType
	private int iCount;   //
	private TArenaOpponent[] arrOpponent = new TArenaOpponent[(int)TCONST.ORM_ARENA1_MAX_OPPONENT];   //
	private int iPrize;   //奖励
	public TMSG_ARENA_REFRESH_OPP_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_ARENA1_MAX_OPPONENT; ++__orm_iLoopVar) {
			arrOpponent[__orm_iLoopVar] = new TArenaOpponent();
		}
	}

	public const int countof_arrOpponent = (int)TCONST.ORM_ARENA1_MAX_OPPONENT;

	public const int MAX_PACKEDSIZE = 14230;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_ARENA1_MAX_OPPONENT; ++__orm_iLoopVar){arrOpponent[__orm_iLoopVar].init();}
	}
	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_iCount() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iCount() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iCount() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iCount(int _iCount){set_has_iCount(); iCount=_iCount;}
	public int get_iCount(){if (has_iCount()) {return iCount;} return 0;}

	public bool has_arrOpponent() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_arrOpponent() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_arrOpponent() {__orm_has_bits[0] &= ~(0x10u);}
	public TArenaOpponent[] set_arrOpponent(){set_has_arrOpponent(); return arrOpponent;}
	public TArenaOpponent[] get_arrOpponent(){return arrOpponent;}

	public bool has_iPrize() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iPrize() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iPrize() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iPrize(int _iPrize){set_has_iPrize(); iPrize=_iPrize;}
	public int get_iPrize(){if (has_iPrize()) {return iPrize;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrOpponent()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_ARENA1_MAX_OPPONENT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_ARENA1_MAX_OPPONENT) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				arrOpponent[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iPrize()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iPrize);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iCount);
		};
		if (has_arrOpponent()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)TCONST.ORM_ARENA1_MAX_OPPONENT) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_ARENA1_MAX_OPPONENT) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrOpponent[{0}]", __orm_iLoopVar);
				arrOpponent[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iPrize()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iPrize);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 2: {
				set_has_iCount();
				iCount = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_arrOpponent();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(int)__orm_iArrCount;
				iCount=iCount<(int)TCONST.ORM_ARENA1_MAX_OPPONENT ? iCount:(int)TCONST.ORM_ARENA1_MAX_OPPONENT;
				if (iCount > (int)TCONST.ORM_ARENA1_MAX_OPPONENT) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrOpponent[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 5: {
				set_has_iPrize();
				iPrize = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 挑战对手req
public class TMSG_ARENA_CHALLENGE_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iArenaType;   //取值 EnArenaType
	private int iForm;   //刚设置的阵法
	private int iRank;   //对手的rank
	private long iBatID;   //复仇战斗id
	private string szTag;   //透传给TMSG_BATTLE_PLAY_NTF
	private int iTag0;   //透传给TMSG_BATTLE_PLAY_NTF
	private long iStoredBatID;   //缓存的战斗id 断线重连用


	public const int MAX_PACKEDSIZE = 145;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_iForm() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iForm() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iForm() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iForm(int _iForm){set_has_iForm(); iForm=_iForm;}
	public int get_iForm(){if (has_iForm()) {return iForm;} return 0;}

	public bool has_iRank() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRank() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRank() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRank(int _iRank){set_has_iRank(); iRank=_iRank;}
	public int get_iRank(){if (has_iRank()) {return iRank;} return 0;}

	public bool has_iBatID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iBatID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iBatID() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iBatID(long _iBatID){set_has_iBatID(); iBatID=_iBatID;}
	public long get_iBatID(){if (has_iBatID()) {return iBatID;} return 0;}

	public bool has_szTag() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_szTag() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_szTag() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_szTag(string _szTag){set_has_szTag(); szTag=_szTag;}
	public string get_szTag(){if (has_szTag()) {return szTag;} return "";}

	public bool has_iTag0() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_iTag0() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_iTag0() {__orm_has_bits[0] &= ~(0x200u);}
	public void set_iTag0(int _iTag0){set_has_iTag0(); iTag0=_iTag0;}
	public int get_iTag0(){if (has_iTag0()) {return iTag0;} return 0;}

	public bool has_iStoredBatID() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iStoredBatID() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iStoredBatID() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iStoredBatID(long _iStoredBatID){set_has_iStoredBatID(); iStoredBatID=_iStoredBatID;}
	public long get_iStoredBatID(){if (has_iStoredBatID()) {return iStoredBatID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iForm()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iForm);
		};
		if (has_iRank()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRank);
		};
		if (has_iBatID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(iBatID);
		};
		if (has_szTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,3));  // f id
			oPacker.WriteSTRING(szTag);
		};
		if (has_iTag0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iTag0);
		};
		if (has_iStoredBatID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(iStoredBatID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iForm()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iForm);
		};
		if (has_iRank()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iRank);
		};
		if (has_iBatID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT64(iBatID);
		};
		if (has_szTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,3));  // f id
			oPacker.WriteSTRING(szTag);
		};
		if (has_iTag0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iTag0);
		};
		if (has_iStoredBatID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT64(iStoredBatID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 2: {
				set_has_iForm();
				iForm = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iRank();
				iRank = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iBatID();
				iBatID = oPacker.ReadVarintINT64();
			}break;
			case 8: {
				set_has_szTag();
				szTag = oPacker.ReadSTRING();
			}break;
			case 9: {
				set_has_iTag0();
				iTag0 = oPacker.ReadVarintINT32();
			}break;
			case 11: {
				set_has_iStoredBatID();
				iStoredBatID = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 挑战对手rsp
public class TMSG_ARENA_CHALLENGE_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private sbyte iArenaType;   //取值 EnArenaType
	private sbyte iRemainChallengeCount;   //剩余挑战次数
	private long iChallengeRecoveTime;   //(下一次)挑战次数回复时间,0为无须回复


	public const int MAX_PACKEDSIZE = 42;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_iRemainChallengeCount() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRemainChallengeCount() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRemainChallengeCount() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRemainChallengeCount(sbyte _iRemainChallengeCount){set_has_iRemainChallengeCount(); iRemainChallengeCount=_iRemainChallengeCount;}
	public sbyte get_iRemainChallengeCount(){if (has_iRemainChallengeCount()) {return iRemainChallengeCount;} return 0;}

	public bool has_iChallengeRecoveTime() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iChallengeRecoveTime() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iChallengeRecoveTime() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iChallengeRecoveTime(long _iChallengeRecoveTime){set_has_iChallengeRecoveTime(); iChallengeRecoveTime=_iChallengeRecoveTime;}
	public long get_iChallengeRecoveTime(){if (has_iChallengeRecoveTime()) {return iChallengeRecoveTime;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iRemainChallengeCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iRemainChallengeCount);
		};
		if (has_iChallengeRecoveTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT64(iChallengeRecoveTime);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iRemainChallengeCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iRemainChallengeCount);
		};
		if (has_iChallengeRecoveTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT64(iChallengeRecoveTime);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 4: {
				set_has_iRemainChallengeCount();
				iRemainChallengeCount = oPacker.ReadINT8();
			}break;
			case 6: {
				set_has_iChallengeRecoveTime();
				iChallengeRecoveTime = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 积分竞技场id=1 挑战结果
public class TMSG_ARENA_1_CHALLENGE_RESULT_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iArenaType;   //取值 EnArenaType
	private sbyte bIsWin;   //挑战者是否获胜
	private TArenaOpponent stOpponent = new TArenaOpponent();   //对手信息
	private int iOppScore;   //对手初始积分
	private int iOppScoreChg;   //对手积分变化量
	private int iChallengeScore;   //挑战者积分
	private int iChallengeScoreChg;   //挑战者积分变动
	private int iChallengeRank;   //挑战者初始排名
	private int iChallengeRankChg;   //挑战者排名变动
	private int[] arrPrize = new int[(int)2];   //奖励 (最多2个，0代表没有)

	public const int countof_arrPrize = (int)2;

	public const int MAX_PACKEDSIZE = 2947;

	public void init() {
		__orm_has_bits[0]=0;
		stOpponent.init();
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)2; ++__orm_iLoopVar){arrPrize[__orm_iLoopVar]=0;}
	}
	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_bIsWin() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_bIsWin() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_bIsWin() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_bIsWin(sbyte _bIsWin){set_has_bIsWin(); bIsWin=_bIsWin;}
	public sbyte get_bIsWin(){if (has_bIsWin()) {return bIsWin;} return 0;}

	public bool has_stOpponent() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_stOpponent() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_stOpponent() {__orm_has_bits[0] &= ~(0x40u);}
	public TArenaOpponent set_stOpponent(){set_has_stOpponent(); return stOpponent;}
	public TArenaOpponent get_stOpponent(){return stOpponent;}

	public bool has_iOppScore() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iOppScore() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iOppScore() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iOppScore(int _iOppScore){set_has_iOppScore(); iOppScore=_iOppScore;}
	public int get_iOppScore(){if (has_iOppScore()) {return iOppScore;} return 0;}

	public bool has_iOppScoreChg() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iOppScoreChg() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iOppScoreChg() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iOppScoreChg(int _iOppScoreChg){set_has_iOppScoreChg(); iOppScoreChg=_iOppScoreChg;}
	public int get_iOppScoreChg(){if (has_iOppScoreChg()) {return iOppScoreChg;} return 0;}

	public bool has_iChallengeScore() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iChallengeScore() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iChallengeScore() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iChallengeScore(int _iChallengeScore){set_has_iChallengeScore(); iChallengeScore=_iChallengeScore;}
	public int get_iChallengeScore(){if (has_iChallengeScore()) {return iChallengeScore;} return 0;}

	public bool has_iChallengeScoreChg() {return (__orm_has_bits[0] & 0x2000u) != 0;}
	public void set_has_iChallengeScoreChg() {__orm_has_bits[0] |= 0x2000u;}
	public void clear_has_iChallengeScoreChg() {__orm_has_bits[0] &= ~(0x2000u);}
	public void set_iChallengeScoreChg(int _iChallengeScoreChg){set_has_iChallengeScoreChg(); iChallengeScoreChg=_iChallengeScoreChg;}
	public int get_iChallengeScoreChg(){if (has_iChallengeScoreChg()) {return iChallengeScoreChg;} return 0;}

	public bool has_iChallengeRank() {return (__orm_has_bits[0] & 0x10000u) != 0;}
	public void set_has_iChallengeRank() {__orm_has_bits[0] |= 0x10000u;}
	public void clear_has_iChallengeRank() {__orm_has_bits[0] &= ~(0x10000u);}
	public void set_iChallengeRank(int _iChallengeRank){set_has_iChallengeRank(); iChallengeRank=_iChallengeRank;}
	public int get_iChallengeRank(){if (has_iChallengeRank()) {return iChallengeRank;} return 0;}

	public bool has_iChallengeRankChg() {return (__orm_has_bits[0] & 0x20000u) != 0;}
	public void set_has_iChallengeRankChg() {__orm_has_bits[0] |= 0x20000u;}
	public void clear_has_iChallengeRankChg() {__orm_has_bits[0] &= ~(0x20000u);}
	public void set_iChallengeRankChg(int _iChallengeRankChg){set_has_iChallengeRankChg(); iChallengeRankChg=_iChallengeRankChg;}
	public int get_iChallengeRankChg(){if (has_iChallengeRankChg()) {return iChallengeRankChg;} return 0;}

	public bool has_arrPrize() {return (__orm_has_bits[0] & 0x40000u) != 0;}
	public void set_has_arrPrize() {__orm_has_bits[0] |= 0x40000u;}
	public void clear_has_arrPrize() {__orm_has_bits[0] &= ~(0x40000u);}
	public int[] set_arrPrize(){set_has_arrPrize(); return arrPrize;}
	public int[] get_arrPrize(){return arrPrize;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_bIsWin()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bIsWin);
		};
		if (has_stOpponent()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stOpponent.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iOppScore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iOppScore);
		};
		if (has_iOppScoreChg()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iOppScoreChg);
		};
		if (has_iChallengeScore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iChallengeScore);
		};
		if (has_iChallengeScoreChg()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(iChallengeScoreChg);
		};
		if (has_iChallengeRank()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,0));  // f id
			oPacker.WriteVarintINT32(iChallengeRank);
		};
		if (has_iChallengeRankChg()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,0));  // f id
			oPacker.WriteVarintINT32(iChallengeRankChg);
		};
		if (has_arrPrize()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)2); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)2); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPrize[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_bIsWin()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,2));  // f id
			oPacker.WriteINT8(bIsWin);
		};
		if (has_stOpponent()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stOpponent");
			stOpponent.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iOppScore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iOppScore);
		};
		if (has_iOppScoreChg()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iOppScoreChg);
		};
		if (has_iChallengeScore()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iChallengeScore);
		};
		if (has_iChallengeScoreChg()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(13,0));  // f id
			oPacker.WriteVarintINT32(iChallengeScoreChg);
		};
		if (has_iChallengeRank()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(16,0));  // f id
			oPacker.WriteVarintINT32(iChallengeRank);
		};
		if (has_iChallengeRankChg()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(17,0));  // f id
			oPacker.WriteVarintINT32(iChallengeRankChg);
		};
		if (has_arrPrize()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(18,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.WriteVarintUINT32((uint)2); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)2); ++__orm_iLoopVar) {
		    oPacker.WriteVarintINT32(arrPrize[__orm_iLoopVar]);
	    };
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 3: {
				set_has_bIsWin();
				bIsWin = oPacker.ReadINT8();
			}break;
			case 6: {
				set_has_stOpponent();
				stOpponent.Unpack(oPacker);
			}break;
			case 7: {
				set_has_iOppScore();
				iOppScore = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iOppScoreChg();
				iOppScoreChg = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_iChallengeScore();
				iChallengeScore = oPacker.ReadVarintINT32();
			}break;
			case 13: {
				set_has_iChallengeScoreChg();
				iChallengeScoreChg = oPacker.ReadVarintINT32();
			}break;
			case 16: {
				set_has_iChallengeRank();
				iChallengeRank = oPacker.ReadVarintINT32();
			}break;
			case 17: {
				set_has_iChallengeRankChg();
				iChallengeRankChg = oPacker.ReadVarintINT32();
			}break;
			case 18: {
				set_has_arrPrize();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				__orm_iArrCount=__orm_iArrCount<(uint)2 ? __orm_iArrCount:(uint)2;
				for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)__orm_iArrCount); ++__orm_iLoopVar) {
					arrPrize[__orm_iLoopVar] = oPacker.ReadVarintINT32();
				};
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 离线弟子详情req
public class TMSG_ARENA_DISCIPLE_DETAIL_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iArenaType;   //取值 EnArenaType
	private long iRoleId;   //人物id
	private long iDiscipleLId;   //查询的弟子LId


	public const int MAX_PACKEDSIZE = 41;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_iRoleId() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iRoleId() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iRoleId() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iRoleId(long _iRoleId){set_has_iRoleId(); iRoleId=_iRoleId;}
	public long get_iRoleId(){if (has_iRoleId()) {return iRoleId;} return 0;}

	public bool has_iDiscipleLId() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iDiscipleLId() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iDiscipleLId() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iDiscipleLId(long _iDiscipleLId){set_has_iDiscipleLId(); iDiscipleLId=_iDiscipleLId;}
	public long get_iDiscipleLId(){if (has_iDiscipleLId()) {return iDiscipleLId;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iRoleId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iRoleId);
		};
		if (has_iDiscipleLId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLId);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iRoleId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iRoleId);
		};
		if (has_iDiscipleLId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iDiscipleLId);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 3: {
				set_has_iRoleId();
				iRoleId = oPacker.ReadVarintINT64();
			}break;
			case 4: {
				set_has_iDiscipleLId();
				iDiscipleLId = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 离线弟子详情rsp
public class TMSG_ARENA_DISCIPLE_DETAIL_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private sbyte iArenaType;   //取值 EnArenaType
	private long iRoleId;   //人物id
	private TDiscipleInfo stDiscipleInfo = new TDiscipleInfo();   //完整信息


	public const int MAX_PACKEDSIZE = 5292;

	public void init() {
		__orm_has_bits[0]=0;
		stDiscipleInfo.init();
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_iRoleId() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iRoleId() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iRoleId() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iRoleId(long _iRoleId){set_has_iRoleId(); iRoleId=_iRoleId;}
	public long get_iRoleId(){if (has_iRoleId()) {return iRoleId;} return 0;}

	public bool has_stDiscipleInfo() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_stDiscipleInfo() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_stDiscipleInfo() {__orm_has_bits[0] &= ~(0x20u);}
	public TDiscipleInfo set_stDiscipleInfo(){set_has_stDiscipleInfo(); return stDiscipleInfo;}
	public TDiscipleInfo get_stDiscipleInfo(){return stDiscipleInfo;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iRoleId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iRoleId);
		};
		if (has_stDiscipleInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			stDiscipleInfo.Pack(oPacker);
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iRoleId()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iRoleId);
		};
		if (has_stDiscipleInfo()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			oPacker.PushFieldName("stDiscipleInfo");
			stDiscipleInfo.Pack_WithTrace(oPacker);
			oPacker.PopFieldName();
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 3: {
				set_has_iRoleId();
				iRoleId = oPacker.ReadVarintINT64();
			}break;
			case 5: {
				set_has_stDiscipleInfo();
				stDiscipleInfo.Unpack(oPacker);
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 竞技场对决赛程
public class TArenaVersus
{
	private uint[] __orm_has_bits = new uint[1];
	private long iRoleID1;   //
	private long iRoleID2;   //
	private sbyte iResult;   //0  未开始; 1 攻方赢; 2守方赢  


	public const int MAX_PACKEDSIZE = 41;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRoleID1() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iRoleID1() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iRoleID1() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iRoleID1(long _iRoleID1){set_has_iRoleID1(); iRoleID1=_iRoleID1;}
	public long get_iRoleID1(){if (has_iRoleID1()) {return iRoleID1;} return 0;}

	public bool has_iRoleID2() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iRoleID2() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iRoleID2() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iRoleID2(long _iRoleID2){set_has_iRoleID2(); iRoleID2=_iRoleID2;}
	public long get_iRoleID2(){if (has_iRoleID2()) {return iRoleID2;} return 0;}

	public bool has_iResult() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iResult() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iResult() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iResult(sbyte _iResult){set_has_iResult(); iResult=_iResult;}
	public sbyte get_iResult(){if (has_iResult()) {return iResult;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoleID1()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iRoleID1);
		};
		if (has_iRoleID2()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iRoleID2);
		};
		if (has_iResult()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iResult);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRoleID1()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT64(iRoleID1);
		};
		if (has_iRoleID2()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iRoleID2);
		};
		if (has_iResult()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iResult);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iRoleID1();
				iRoleID1 = oPacker.ReadVarintINT64();
			}break;
			case 2: {
				set_has_iRoleID2();
				iRoleID2 = oPacker.ReadVarintINT64();
			}break;
			case 4: {
				set_has_iResult();
				iResult = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 获取上一季头N用户信息
public class TMSG_ARENA_GET_HISTORY_RANKING_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iArenaType;   //取值 EnArenaType
	private string szPassback;   //


	public const int MAX_PACKEDSIZE = 53;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_szPassback() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_szPassback() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_szPassback() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_szPassback(string _szPassback){set_has_szPassback(); szPassback=_szPassback;}
	public string get_szPassback(){if (has_szPassback()) {return szPassback;} return "";}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 3: {
				set_has_szPassback();
				szPassback = oPacker.ReadSTRING();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 获取排行榜
public class TMSG_ARENA_GET_HISTORY_RANKING_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private sbyte iArenaType;   //取值 EnArenaType
	private string szPassback;   //
	private sbyte iCount;   //返回名次个数
	private TArenaOpponent[] arrArenaRole = new TArenaOpponent[(int)3];   //
	public TMSG_ARENA_GET_HISTORY_RANKING_RSP() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)3; ++__orm_iLoopVar) {
			arrArenaRole[__orm_iLoopVar] = new TArenaOpponent();
		}
	}

	public const int countof_arrArenaRole = (int)3;

	public const int MAX_PACKEDSIZE = 8594;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)3; ++__orm_iLoopVar){arrArenaRole[__orm_iLoopVar].init();}
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_szPassback() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_szPassback() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_szPassback() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_szPassback(string _szPassback){set_has_szPassback(); szPassback=_szPassback;}
	public string get_szPassback(){if (has_szPassback()) {return szPassback;} return "";}

	public bool has_iCount() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iCount() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iCount() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iCount(sbyte _iCount){set_has_iCount(); iCount=_iCount;}
	public sbyte get_iCount(){if (has_iCount()) {return iCount;} return 0;}

	public bool has_arrArenaRole() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_arrArenaRole() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_arrArenaRole() {__orm_has_bits[0] &= ~(0x100u);}
	public TArenaOpponent[] set_arrArenaRole(){set_has_arrArenaRole(); return arrArenaRole;}
	public TArenaOpponent[] get_arrArenaRole(){return arrArenaRole;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteINT8(iCount);
		};
		if (has_arrArenaRole()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)3) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)3) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				arrArenaRole[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_szPassback()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,3));  // f id
			oPacker.WriteSTRING(szPassback);
		};
		if (has_iCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,2));  // f id
			oPacker.WriteINT8(iCount);
		};
		if (has_arrArenaRole()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iCount();
			if (__orm_ReferVar > (int)3) {
				oPacker.PushFieldName("iCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)3) && (__orm_iLoopVar < iCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrArenaRole[{0}]", __orm_iLoopVar);
				arrArenaRole[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 3: {
				set_has_szPassback();
				szPassback = oPacker.ReadSTRING();
			}break;
			case 7: {
				set_has_iCount();
				iCount = oPacker.ReadINT8();
			}break;
			case 8: {
				set_has_arrArenaRole();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iCount=iCount<__orm_iArrCount ? iCount:(sbyte)__orm_iArrCount;
				iCount=iCount<(sbyte)3 ? iCount:(sbyte)3;
				if (iCount > (int)3) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iCount; ++__orm_iLoopVar) {
					arrArenaRole[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 回放战斗
public class TMSG_ARENA_PLAYBACK_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iArenaType;   //取值 EnArenaType
	private long iBatID;   //战斗id, 从TArenaBatLog中获取
	private string szTag;   //透传给TMSG_BATTLE_PLAY_NTF
	private int iTag0;   //透传给TMSG_BATTLE_PLAY_NTF


	public const int MAX_PACKEDSIZE = 110;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_iBatID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iBatID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iBatID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iBatID(long _iBatID){set_has_iBatID(); iBatID=_iBatID;}
	public long get_iBatID(){if (has_iBatID()) {return iBatID;} return 0;}

	public bool has_szTag() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_szTag() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_szTag() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_szTag(string _szTag){set_has_szTag(); szTag=_szTag;}
	public string get_szTag(){if (has_szTag()) {return szTag;} return "";}

	public bool has_iTag0() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_iTag0() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_iTag0() {__orm_has_bits[0] &= ~(0x200u);}
	public void set_iTag0(int _iTag0){set_has_iTag0(); iTag0=_iTag0;}
	public int get_iTag0(){if (has_iTag0()) {return iTag0;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iBatID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iBatID);
		};
		if (has_szTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,3));  // f id
			oPacker.WriteSTRING(szTag);
		};
		if (has_iTag0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iTag0);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iBatID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT64(iBatID);
		};
		if (has_szTag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,3));  // f id
			oPacker.WriteSTRING(szTag);
		};
		if (has_iTag0()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iTag0);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 2: {
				set_has_iBatID();
				iBatID = oPacker.ReadVarintINT64();
			}break;
			case 8: {
				set_has_szTag();
				szTag = oPacker.ReadSTRING();
			}break;
			case 9: {
				set_has_iTag0();
				iTag0 = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 回放战斗,另会发送TMSG_BATTLE_PLAY_NTF 
public class TMSG_ARENA_PLAYBACK_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private sbyte iArenaType;   //取值 EnArenaType


	public const int MAX_PACKEDSIZE = 21;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 同步阵法到竞技场
public class TMSG_ARENA_COMMIT_FORMATION_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private short iFormSecID;   //阵法子id, 必须为enArenaF_Def. 以后可能扩展 
	private sbyte iArenaType;   //取值 EnArenaType


	public const int MAX_PACKEDSIZE = 19;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iFormSecID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iFormSecID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iFormSecID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iFormSecID(short _iFormSecID){set_has_iFormSecID(); iFormSecID=_iFormSecID;}
	public short get_iFormSecID(){if (has_iFormSecID()) {return iFormSecID;} return 0;}

	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iFormSecID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT16(iFormSecID);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iFormSecID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT16(iFormSecID);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iFormSecID();
				iFormSecID = oPacker.ReadVarintINT16();
			}break;
			case 4: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 同步阵法到竞技场
public class TMSG_ARENA_COMMIT_FORMATION_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iError;   //
	private sbyte iArenaType;   //取值 EnArenaType
	private short iFormSecID;   //阵法子id, 透传req的


	public const int MAX_PACKEDSIZE = 29;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iError() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_iFormSecID() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iFormSecID() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iFormSecID() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iFormSecID(short _iFormSecID){set_has_iFormSecID(); iFormSecID=_iFormSecID;}
	public short get_iFormSecID(){if (has_iFormSecID()) {return iFormSecID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iFormSecID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT16(iFormSecID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iFormSecID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT16(iFormSecID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 5: {
				set_has_iFormSecID();
				iFormSecID = oPacker.ReadVarintINT16();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 新赛季开始
public class TMSG_ARENA_NEWSEASON_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iArenaType;   //取值 EnArenaType
	private long iSettleTime;   //新赛季结束时间


	public const int MAX_PACKEDSIZE = 26;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_iSettleTime() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iSettleTime() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iSettleTime() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iSettleTime(long _iSettleTime){set_has_iSettleTime(); iSettleTime=_iSettleTime;}
	public long get_iSettleTime(){if (has_iSettleTime()) {return iSettleTime;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iSettleTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iSettleTime);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iSettleTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT64(iSettleTime);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 3: {
				set_has_iSettleTime();
				iSettleTime = oPacker.ReadVarintINT64();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 战斗异常
public class TMSG_ARENA_BATTLE_EXCEPTION_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private sbyte iArenaType;   //取值 EnArenaType
	private int iError;   //错误码


	public const int MAX_PACKEDSIZE = 21;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iArenaType() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iArenaType() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iArenaType() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iArenaType(sbyte _iArenaType){set_has_iArenaType(); iArenaType=_iArenaType;}
	public sbyte get_iArenaType(){if (has_iArenaType()) {return iArenaType;} return 0;}

	public bool has_iError() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iError() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iError() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iError(int _iError){set_has_iError(); iError=_iError;}
	public int get_iError(){if (has_iError()) {return iError;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iArenaType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,2));  // f id
			oPacker.WriteINT8(iArenaType);
		};
		if (has_iError()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iError);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 2: {
				set_has_iArenaType();
				iArenaType = oPacker.ReadINT8();
			}break;
			case 3: {
				set_has_iError();
				iError = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 货架现场
public class TRackContent
{
	private uint[] __orm_has_bits = new uint[1];
	private int iRackID;   //唯一id， rack_id =  商店ID  * 100 + iMaketContent
	private int iGoodID;   //物品id
	private int iGoodNum;   //物品数量
	private int iBuyLimit;   //最大购买次数
	private int iBuyTimes;   //已购买次数
	private int iCostID;   //消耗物品id
	private int iCostNum;   //消耗物品数量
	private int iFree;   //是否免费
	private int iDouble;   //首次双倍
	private int iConditionType;   //条件类型
	private int iConditionLimit;   //条件数值
	private int iDisplayID;   //前端展示id


	public const int MAX_PACKEDSIZE = 125;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRackID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iRackID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iRackID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iRackID(int _iRackID){set_has_iRackID(); iRackID=_iRackID;}
	public int get_iRackID(){if (has_iRackID()) {return iRackID;} return 0;}

	public bool has_iGoodID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iGoodID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iGoodID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iGoodID(int _iGoodID){set_has_iGoodID(); iGoodID=_iGoodID;}
	public int get_iGoodID(){if (has_iGoodID()) {return iGoodID;} return 0;}

	public bool has_iGoodNum() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_iGoodNum() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_iGoodNum() {__orm_has_bits[0] &= ~(0x8u);}
	public void set_iGoodNum(int _iGoodNum){set_has_iGoodNum(); iGoodNum=_iGoodNum;}
	public int get_iGoodNum(){if (has_iGoodNum()) {return iGoodNum;} return 0;}

	public bool has_iBuyLimit() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iBuyLimit() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iBuyLimit() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iBuyLimit(int _iBuyLimit){set_has_iBuyLimit(); iBuyLimit=_iBuyLimit;}
	public int get_iBuyLimit(){if (has_iBuyLimit()) {return iBuyLimit;} return 0;}

	public bool has_iBuyTimes() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iBuyTimes() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iBuyTimes() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iBuyTimes(int _iBuyTimes){set_has_iBuyTimes(); iBuyTimes=_iBuyTimes;}
	public int get_iBuyTimes(){if (has_iBuyTimes()) {return iBuyTimes;} return 0;}

	public bool has_iCostID() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iCostID() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iCostID() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iCostID(int _iCostID){set_has_iCostID(); iCostID=_iCostID;}
	public int get_iCostID(){if (has_iCostID()) {return iCostID;} return 0;}

	public bool has_iCostNum() {return (__orm_has_bits[0] & 0x80u) != 0;}
	public void set_has_iCostNum() {__orm_has_bits[0] |= 0x80u;}
	public void clear_has_iCostNum() {__orm_has_bits[0] &= ~(0x80u);}
	public void set_iCostNum(int _iCostNum){set_has_iCostNum(); iCostNum=_iCostNum;}
	public int get_iCostNum(){if (has_iCostNum()) {return iCostNum;} return 0;}

	public bool has_iFree() {return (__orm_has_bits[0] & 0x100u) != 0;}
	public void set_has_iFree() {__orm_has_bits[0] |= 0x100u;}
	public void clear_has_iFree() {__orm_has_bits[0] &= ~(0x100u);}
	public void set_iFree(int _iFree){set_has_iFree(); iFree=_iFree;}
	public int get_iFree(){if (has_iFree()) {return iFree;} return 0;}

	public bool has_iDouble() {return (__orm_has_bits[0] & 0x200u) != 0;}
	public void set_has_iDouble() {__orm_has_bits[0] |= 0x200u;}
	public void clear_has_iDouble() {__orm_has_bits[0] &= ~(0x200u);}
	public void set_iDouble(int _iDouble){set_has_iDouble(); iDouble=_iDouble;}
	public int get_iDouble(){if (has_iDouble()) {return iDouble;} return 0;}

	public bool has_iConditionType() {return (__orm_has_bits[0] & 0x400u) != 0;}
	public void set_has_iConditionType() {__orm_has_bits[0] |= 0x400u;}
	public void clear_has_iConditionType() {__orm_has_bits[0] &= ~(0x400u);}
	public void set_iConditionType(int _iConditionType){set_has_iConditionType(); iConditionType=_iConditionType;}
	public int get_iConditionType(){if (has_iConditionType()) {return iConditionType;} return 0;}

	public bool has_iConditionLimit() {return (__orm_has_bits[0] & 0x800u) != 0;}
	public void set_has_iConditionLimit() {__orm_has_bits[0] |= 0x800u;}
	public void clear_has_iConditionLimit() {__orm_has_bits[0] &= ~(0x800u);}
	public void set_iConditionLimit(int _iConditionLimit){set_has_iConditionLimit(); iConditionLimit=_iConditionLimit;}
	public int get_iConditionLimit(){if (has_iConditionLimit()) {return iConditionLimit;} return 0;}

	public bool has_iDisplayID() {return (__orm_has_bits[0] & 0x1000u) != 0;}
	public void set_has_iDisplayID() {__orm_has_bits[0] |= 0x1000u;}
	public void clear_has_iDisplayID() {__orm_has_bits[0] &= ~(0x1000u);}
	public void set_iDisplayID(int _iDisplayID){set_has_iDisplayID(); iDisplayID=_iDisplayID;}
	public int get_iDisplayID(){if (has_iDisplayID()) {return iDisplayID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRackID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRackID);
		};
		if (has_iGoodID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGoodID);
		};
		if (has_iGoodNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iGoodNum);
		};
		if (has_iBuyLimit()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iBuyLimit);
		};
		if (has_iBuyTimes()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iBuyTimes);
		};
		if (has_iCostID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iCostID);
		};
		if (has_iCostNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iCostNum);
		};
		if (has_iFree()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iFree);
		};
		if (has_iDouble()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iDouble);
		};
		if (has_iConditionType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iConditionType);
		};
		if (has_iConditionLimit()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iConditionLimit);
		};
		if (has_iDisplayID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iDisplayID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRackID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRackID);
		};
		if (has_iGoodID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iGoodID);
		};
		if (has_iGoodNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,0));  // f id
			oPacker.WriteVarintINT32(iGoodNum);
		};
		if (has_iBuyLimit()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT32(iBuyLimit);
		};
		if (has_iBuyTimes()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,0));  // f id
			oPacker.WriteVarintINT32(iBuyTimes);
		};
		if (has_iCostID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,0));  // f id
			oPacker.WriteVarintINT32(iCostID);
		};
		if (has_iCostNum()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(7,0));  // f id
			oPacker.WriteVarintINT32(iCostNum);
		};
		if (has_iFree()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(8,0));  // f id
			oPacker.WriteVarintINT32(iFree);
		};
		if (has_iDouble()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(9,0));  // f id
			oPacker.WriteVarintINT32(iDouble);
		};
		if (has_iConditionType()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(10,0));  // f id
			oPacker.WriteVarintINT32(iConditionType);
		};
		if (has_iConditionLimit()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(11,0));  // f id
			oPacker.WriteVarintINT32(iConditionLimit);
		};
		if (has_iDisplayID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(12,0));  // f id
			oPacker.WriteVarintINT32(iDisplayID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iRackID();
				iRackID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iGoodID();
				iGoodID = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_iGoodNum();
				iGoodNum = oPacker.ReadVarintINT32();
			}break;
			case 4: {
				set_has_iBuyLimit();
				iBuyLimit = oPacker.ReadVarintINT32();
			}break;
			case 5: {
				set_has_iBuyTimes();
				iBuyTimes = oPacker.ReadVarintINT32();
			}break;
			case 6: {
				set_has_iCostID();
				iCostID = oPacker.ReadVarintINT32();
			}break;
			case 7: {
				set_has_iCostNum();
				iCostNum = oPacker.ReadVarintINT32();
			}break;
			case 8: {
				set_has_iFree();
				iFree = oPacker.ReadVarintINT32();
			}break;
			case 9: {
				set_has_iDouble();
				iDouble = oPacker.ReadVarintINT32();
			}break;
			case 10: {
				set_has_iConditionType();
				iConditionType = oPacker.ReadVarintINT32();
			}break;
			case 11: {
				set_has_iConditionLimit();
				iConditionLimit = oPacker.ReadVarintINT32();
			}break;
			case 12: {
				set_has_iDisplayID();
				iDisplayID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 商店变化消息-通知
public class TMSG_SHOP_RACK_CONTENT_CHANGED_NTF
{
	private uint[] __orm_has_bits = new uint[1];
	private int iShopID;   //商店ID
	private int iRackCount;   //货架数量
	private TRackContent[] arrRackContent = new TRackContent[(int)TCONST.ORM_SHOP_RACK_COUNT_MAX];   //货架信息
	private long iRefreshTime;   //刷新时间
	private byte iStartFlag;   //开始标识，商店数据包过大时分多条下发
	private byte iEndFlag;   //结束标识
	public TMSG_SHOP_RACK_CONTENT_CHANGED_NTF() {
		for (int __orm_iLoopVar = 0; __orm_iLoopVar < (int)TCONST.ORM_SHOP_RACK_COUNT_MAX; ++__orm_iLoopVar) {
			arrRackContent[__orm_iLoopVar] = new TRackContent();
		}
	}

	public const int countof_arrRackContent = (int)TCONST.ORM_SHOP_RACK_COUNT_MAX;

	public const int MAX_PACKEDSIZE = 4066;

	public void init() {
		__orm_has_bits[0]=0;
		for(int __orm_iLoopVar=0; __orm_iLoopVar<(int)TCONST.ORM_SHOP_RACK_COUNT_MAX; ++__orm_iLoopVar){arrRackContent[__orm_iLoopVar].init();}
	}
	public bool has_iShopID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iShopID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iShopID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iShopID(int _iShopID){set_has_iShopID(); iShopID=_iShopID;}
	public int get_iShopID(){if (has_iShopID()) {return iShopID;} return 0;}

	public bool has_iRackCount() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iRackCount() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iRackCount() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iRackCount(int _iRackCount){set_has_iRackCount(); iRackCount=_iRackCount;}
	public int get_iRackCount(){if (has_iRackCount()) {return iRackCount;} return 0;}

	public bool has_arrRackContent() {return (__orm_has_bits[0] & 0x8u) != 0;}
	public void set_has_arrRackContent() {__orm_has_bits[0] |= 0x8u;}
	public void clear_has_arrRackContent() {__orm_has_bits[0] &= ~(0x8u);}
	public TRackContent[] set_arrRackContent(){set_has_arrRackContent(); return arrRackContent;}
	public TRackContent[] get_arrRackContent(){return arrRackContent;}

	public bool has_iRefreshTime() {return (__orm_has_bits[0] & 0x10u) != 0;}
	public void set_has_iRefreshTime() {__orm_has_bits[0] |= 0x10u;}
	public void clear_has_iRefreshTime() {__orm_has_bits[0] &= ~(0x10u);}
	public void set_iRefreshTime(long _iRefreshTime){set_has_iRefreshTime(); iRefreshTime=_iRefreshTime;}
	public long get_iRefreshTime(){if (has_iRefreshTime()) {return iRefreshTime;} return 0;}

	public bool has_iStartFlag() {return (__orm_has_bits[0] & 0x20u) != 0;}
	public void set_has_iStartFlag() {__orm_has_bits[0] |= 0x20u;}
	public void clear_has_iStartFlag() {__orm_has_bits[0] &= ~(0x20u);}
	public void set_iStartFlag(byte _iStartFlag){set_has_iStartFlag(); iStartFlag=_iStartFlag;}
	public byte get_iStartFlag(){if (has_iStartFlag()) {return iStartFlag;} return 0;}

	public bool has_iEndFlag() {return (__orm_has_bits[0] & 0x40u) != 0;}
	public void set_has_iEndFlag() {__orm_has_bits[0] |= 0x40u;}
	public void clear_has_iEndFlag() {__orm_has_bits[0] &= ~(0x40u);}
	public void set_iEndFlag(byte _iEndFlag){set_has_iEndFlag(); iEndFlag=_iEndFlag;}
	public byte get_iEndFlag(){if (has_iEndFlag()) {return iEndFlag;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iShopID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iShopID);
		};
		if (has_iRackCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iRackCount);
		};
		if (has_arrRackContent()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iRackCount();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOP_RACK_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOP_RACK_COUNT_MAX) && (__orm_iLoopVar < iRackCount); ++__orm_iLoopVar) {
				arrRackContent[__orm_iLoopVar].Pack(oPacker);
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iRefreshTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iRefreshTime);
		};
		if (has_iStartFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,2));  // f id
			oPacker.WriteUINT8(iStartFlag);
		};
		if (has_iEndFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteUINT8(iEndFlag);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iShopID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iShopID);
		};
		if (has_iRackCount()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iRackCount);
		};
		if (has_arrRackContent()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(3,1));  // f id
			uint __orm_iTmpSerialPos = (uint)oPacker.GetDataOffset();
			oPacker.WriteFixedUINT32(0);
			int __orm_ReferVar=(int)get_iRackCount();
			if (__orm_ReferVar > (int)TCONST.ORM_SHOP_RACK_COUNT_MAX) {
				oPacker.PushFieldName("iRackCount={0}", __orm_ReferVar);
				throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);
			}
			oPacker.WriteVarintUINT32((uint)__orm_ReferVar); // count
			for (int __orm_iLoopVar = 0;(__orm_iLoopVar < (int)TCONST.ORM_SHOP_RACK_COUNT_MAX) && (__orm_iLoopVar < iRackCount); ++__orm_iLoopVar) {
				oPacker.PushFieldName("arrRackContent[{0}]", __orm_iLoopVar);
				arrRackContent[__orm_iLoopVar].Pack_WithTrace(oPacker);
				oPacker.PopFieldName();
			};
			oPacker.WriteFixedNumberAtPos((uint)(oPacker.GetDataOffset() - __orm_iTmpSerialPos -sizeof(uint)), __orm_iTmpSerialPos);
		};
		if (has_iRefreshTime()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(4,0));  // f id
			oPacker.WriteVarintINT64(iRefreshTime);
		};
		if (has_iStartFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(5,2));  // f id
			oPacker.WriteUINT8(iStartFlag);
		};
		if (has_iEndFlag()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(6,2));  // f id
			oPacker.WriteUINT8(iEndFlag);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iShopID();
				iShopID = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iRackCount();
				iRackCount = oPacker.ReadVarintINT32();
			}break;
			case 3: {
				set_has_arrRackContent();
				uint __orm_iArrCount = oPacker.ReadVarintUINT32(); 
				iRackCount=iRackCount<__orm_iArrCount ? iRackCount:(int)__orm_iArrCount;
				iRackCount=iRackCount<(int)TCONST.ORM_SHOP_RACK_COUNT_MAX ? iRackCount:(int)TCONST.ORM_SHOP_RACK_COUNT_MAX;
				if (iRackCount > (int)TCONST.ORM_SHOP_RACK_COUNT_MAX) {throw new CPackDataException(CPackDataException.EN_EXCEPTION.REFER_GREATER_THAN_COUNT);};
				for (int __orm_iLoopVar = 0;__orm_iLoopVar < iRackCount; ++__orm_iLoopVar) {
					arrRackContent[__orm_iLoopVar].Unpack(oPacker);
				}
			}break;
			case 4: {
				set_has_iRefreshTime();
				iRefreshTime = oPacker.ReadVarintINT64();
			}break;
			case 5: {
				set_has_iStartFlag();
				iStartFlag = oPacker.ReadUINT8();
			}break;
			case 6: {
				set_has_iEndFlag();
				iEndFlag = oPacker.ReadUINT8();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 打开商店-请求
public class TMSG_SHOP_LOAD_GOODS_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iShopID;   //商店ID


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iShopID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iShopID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iShopID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iShopID(int _iShopID){set_has_iShopID(); iShopID=_iShopID;}
	public int get_iShopID(){if (has_iShopID()) {return iShopID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iShopID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iShopID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iShopID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iShopID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iShopID();
				iShopID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_SHOP_LOAD_GOODS_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iErrCode;   //错误码
	private int iShopID;   //商店ID


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iErrCode() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iErrCode() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iErrCode() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iErrCode(int _iErrCode){set_has_iErrCode(); iErrCode=_iErrCode;}
	public int get_iErrCode(){if (has_iErrCode()) {return iErrCode;} return 0;}

	public bool has_iShopID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iShopID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iShopID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iShopID(int _iShopID){set_has_iShopID(); iShopID=_iShopID;}
	public int get_iShopID(){if (has_iShopID()) {return iShopID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iErrCode);
		};
		if (has_iShopID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iShopID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iErrCode);
		};
		if (has_iShopID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iShopID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iErrCode();
				iErrCode = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iShopID();
				iShopID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 商店购买-请求
public class TMSG_SHOP_BUY_GOODS_REQ
{
	private uint[] __orm_has_bits = new uint[1];
	private int iRackID;   //唯一id


	public const int MAX_PACKEDSIZE = 15;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iRackID() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iRackID() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iRackID() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iRackID(int _iRackID){set_has_iRackID(); iRackID=_iRackID;}
	public int get_iRackID(){if (has_iRackID()) {return iRackID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRackID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRackID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iRackID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iRackID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iRackID();
				iRackID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
// 
public class TMSG_SHOP_BUY_GOODS_RSP
{
	private uint[] __orm_has_bits = new uint[1];
	private int iErrCode;   //错误码
	private int iRackID;   //唯一id


	public const int MAX_PACKEDSIZE = 25;

	public void init() {
		__orm_has_bits[0]=0;
	}
	public bool has_iErrCode() {return (__orm_has_bits[0] & 0x2u) != 0;}
	public void set_has_iErrCode() {__orm_has_bits[0] |= 0x2u;}
	public void clear_has_iErrCode() {__orm_has_bits[0] &= ~(0x2u);}
	public void set_iErrCode(int _iErrCode){set_has_iErrCode(); iErrCode=_iErrCode;}
	public int get_iErrCode(){if (has_iErrCode()) {return iErrCode;} return 0;}

	public bool has_iRackID() {return (__orm_has_bits[0] & 0x4u) != 0;}
	public void set_has_iRackID() {__orm_has_bits[0] |= 0x4u;}
	public void clear_has_iRackID() {__orm_has_bits[0] &= ~(0x4u);}
	public void set_iRackID(int _iRackID){set_has_iRackID(); iRackID=_iRackID;}
	public int get_iRackID(){if (has_iRackID()) {return iRackID;} return 0;}

	public void Pack(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iErrCode);
		};
		if (has_iRackID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iRackID);
		};
	}   //  Pack()
	public void Pack_WithTrace(CORM_packaux oPacker) {
		uint __orm_iValidFieldNums = ORM.CPackMisc.CountBitsOne(this.__orm_has_bits);
		oPacker.WriteVarintUINT32(__orm_iValidFieldNums);
		if (has_iErrCode()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(1,0));  // f id
			oPacker.WriteVarintINT32(iErrCode);
		};
		if (has_iRackID()) {
			oPacker.WriteVarintUINT32(ORM.CPackMisc.FHEAD_MAKE(2,0));  // f id
			oPacker.WriteVarintINT32(iRackID);
		};
	}   //  Pack()
	public void Unpack(CORM_packaux oPacker) {
		init();
		uint __orm_iValidFieldNums = oPacker.ReadVarintUINT32(); 
		int __orm_iTmpSerialPos = 0;
		int __orm_FieldDataLen = 0;
		for (int __orm_iLoopVar2=0; __orm_iLoopVar2<__orm_iValidFieldNums; ++__orm_iLoopVar2){
			uint __orm_iFHead = oPacker.ReadVarintUINT32(); 
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				__orm_FieldDataLen = (int)oPacker.ReadFixedUINT32();
				__orm_iTmpSerialPos = oPacker.GetDataOffset();
			}
			switch(ORM.CPackMisc.FHEAD_GET_FID(__orm_iFHead)){
			case 1: {
				set_has_iErrCode();
				iErrCode = oPacker.ReadVarintINT32();
			}break;
			case 2: {
				set_has_iRackID();
				iRackID = oPacker.ReadVarintINT32();
			}break;
			default: {
				if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) 
					oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
				else
					oPacker.SkipField(__orm_iFHead);
			}break;
			}
			if (ORM.CPackMisc.FHEAD_GET_WIRETYPE(__orm_iFHead) == (int)ORM.EN_WIRETYPE.enWT_BINDATA) {
				if (oPacker.GetDataOffset() > __orm_iTmpSerialPos+__orm_FieldDataLen) throw new ORM.CPackDataException(ORM.CPackDataException.EN_EXCEPTION.BYTES_STREAM_ERROR);
				oPacker.SetDataOffset(__orm_iTmpSerialPos + __orm_FieldDataLen);
			}
		}
	}   //  Unpack()

}
public class TBattleMessage {
	public const int MAX_PACKEDSIZE = 43456;
	//   Message Define
	public const int MSG_BATTLE_START = 1;   // (0+1) 1  战斗开始
	public const int MSG_BATTLE_END = 2;   // (0+2) 2  
	public const int MSG_ROUND_START = 3;   // (0+3) 3  回合开始
	public const int MSG_ROUND_END = 4;   // (0+4) 4  
	public const int MSG_BATTLE_RESULT = 5;   // (0+5) 5  战场结果
	public const int MSG_BATTLE_LOG = 6;   // (0+6) 6  日志信息
	public const int MSG_ENTITY_SKILL_START = 20;   // (20+0) 20  使用技能
	public const int MSG_ENTITY_SKILL_END = 21;   // (20+1) 21  使用技能结束
	public const int MSG_ENTITY_SKILL_HIT_START = 23;   // (20+3) 23  技能命中开始
	public const int MSG_ENTITY_SKILL_HIT = 24;   // (20+4) 24  技能命中
	public const int MSG_ENTITY_BULLET_CREATE_START = 30;   // (30+0) 30  子弹类实体创建
	public const int MSG_ENTITY_BULLET_CREATE = 31;   // (30+1) 31  子弹类实体创建
	public const int MSG_ENTITY_BULLET_DESTROY = 32;   // (30+2) 32  子弹销毁
	public const int MSG_ENTITY_CREATE = 40;   // (40+0) 40  实体创建,例如创建火球,傀儡等
	public const int MSG_ENTITY_DESTROY = 42;   // (40+2) 42  实体销毁
	public const int MSG_ENTITY_STATE_CHANGED = 44;   // (40+4) 44  实体状态变更
	public const int MSG_ENTITY_PROP_CHANGED = 45;   // (40+5) 45  属性变更
	public const int MSG_ENTITY_BE_KILLED_NTF = 46;   // (40+6) 46  击杀通知
	public const int MSG_ENTITY_BUFFER_START = 50;   // (50+0) 50  buffer开始
	public const int MSG_ENTITY_BUFFER_END = 52;   // (50+2) 52  buffer结束
	public const int MSG_ENTITY_EFFECT_HIT = 53;   // (50+3) 53  effect命中,通常带hp变化
	public const int MSG_ENTITY_EFFECT_ACTIVE = 54;   // (50+4) 54  effect激活
	public const int MSG_ENTITY_TESTEFFECT_ACTIVATE = 56;   // (50+6) 56  测试effect 激活
	public const int MSG_ENTITY_EFFECT_SHOW_LIGHTING = 57;   // (50+7) 57  显示光效
	public const int MSG_ENTITY_ITEM_COLDING_NTF = 60;   // (60+0) 60  冷却更新
	public const int MSG_ENTITY_PROPCHG_SHOW_NTF = 61;   // (60+1) 61  属性变化显示, 表现层使用


	//  Msg header
    public TBattleMsgHead stHead;   


	//  Msg id array
	private static int[] s_arrMsgID = new int[26] { 1, 2, 3, 4, 5, 6, 20, 21, 23, 24, 30, 31, 32, 40, 42, 44, 45, 46, 50, 52, 53, 54, 56, 57, 60, 61, };


	public TMSG_BATTLE_START stTMSG_BATTLE_START;   // MSG_BATTLE_START   战斗开始
	public TMSG_BATTLE_END stTMSG_BATTLE_END;   // MSG_BATTLE_END   
	public TMSG_ROUND_START stTMSG_ROUND_START;   // MSG_ROUND_START   回合开始
	public TMSG_ROUND_END stTMSG_ROUND_END;   // MSG_ROUND_END   
	public TMSG_BATTLE_RESULT stTMSG_BATTLE_RESULT;   // MSG_BATTLE_RESULT   战场结果
	public TMSG_BATTLE_LOG stTMSG_BATTLE_LOG;   // MSG_BATTLE_LOG   日志信息
	public TMSG_ENTITY_SKILL_START stTMSG_ENTITY_SKILL_START;   // MSG_ENTITY_SKILL_START   使用技能
	public TMSG_ENTITY_SKILL_END stTMSG_ENTITY_SKILL_END;   // MSG_ENTITY_SKILL_END   使用技能结束
	public TMSG_ENTITY_SKILL_HIT_START stTMSG_ENTITY_SKILL_HIT_START;   // MSG_ENTITY_SKILL_HIT_START   技能命中开始
	public TMSG_ENTITY_SKILL_HIT stTMSG_ENTITY_SKILL_HIT;   // MSG_ENTITY_SKILL_HIT   技能命中
	public TMSG_ENTITY_BULLET_CREATE_START stTMSG_ENTITY_BULLET_CREATE_START;   // MSG_ENTITY_BULLET_CREATE_START   子弹类实体创建
	public TMSG_ENTITY_BULLET_CREATE stTMSG_ENTITY_BULLET_CREATE;   // MSG_ENTITY_BULLET_CREATE   子弹类实体创建
	public TMSG_ENTITY_BULLET_DESTROY stTMSG_ENTITY_BULLET_DESTROY;   // MSG_ENTITY_BULLET_DESTROY   子弹销毁
	public TMSG_ENTITY_CREATE stTMSG_ENTITY_CREATE;   // MSG_ENTITY_CREATE   实体创建,例如创建火球,傀儡等
	public TMSG_ENTITY_DESTROY stTMSG_ENTITY_DESTROY;   // MSG_ENTITY_DESTROY   实体销毁
	public TMSG_ENTITY_STATE_CHANGED stTMSG_ENTITY_STATE_CHANGED;   // MSG_ENTITY_STATE_CHANGED   实体状态变更
	public TMSG_ENTITY_PROP_CHANGED stTMSG_ENTITY_PROP_CHANGED;   // MSG_ENTITY_PROP_CHANGED   属性变更
	public TMSG_ENTITY_BE_KILLED_NTF stTMSG_ENTITY_BE_KILLED_NTF;   // MSG_ENTITY_BE_KILLED_NTF   击杀通知
	public TMSG_ENTITY_BUFFER_START stTMSG_ENTITY_BUFFER_START;   // MSG_ENTITY_BUFFER_START   buffer开始
	public TMSG_ENTITY_BUFFER_END stTMSG_ENTITY_BUFFER_END;   // MSG_ENTITY_BUFFER_END   buffer结束
	public TMSG_ENTITY_EFFECT_HIT stTMSG_ENTITY_EFFECT_HIT;   // MSG_ENTITY_EFFECT_HIT   effect命中,通常带hp变化
	public TMSG_ENTITY_EFFECT_ACTIVE stTMSG_ENTITY_EFFECT_ACTIVE;   // MSG_ENTITY_EFFECT_ACTIVE   effect激活
	public TMSG_ENTITY_TESTEFFECT_ACTIVATE stTMSG_ENTITY_TESTEFFECT_ACTIVATE;   // MSG_ENTITY_TESTEFFECT_ACTIVATE   测试effect 激活
	public TMSG_ENTITY_EFFECT_SHOW_LIGHTING stTMSG_ENTITY_EFFECT_SHOW_LIGHTING;   // MSG_ENTITY_EFFECT_SHOW_LIGHTING   显示光效
	public TMSG_ENTITY_ITEM_COLDING_NTF stTMSG_ENTITY_ITEM_COLDING_NTF;   // MSG_ENTITY_ITEM_COLDING_NTF   冷却更新
	public TMSG_ENTITY_PROPCHG_SHOW_NTF stTMSG_ENTITY_PROPCHG_SHOW_NTF;   // MSG_ENTITY_PROPCHG_SHOW_NTF   属性变化显示, 表现层使用


	public void Pack(CORM_packaux oPacker) {
    stHead.Pack(oPacker);
    switch(stHead.get_iMsgID()){
		case MSG_BATTLE_START: { stTMSG_BATTLE_START.Pack(oPacker); } break;
		case MSG_BATTLE_END: { stTMSG_BATTLE_END.Pack(oPacker); } break;
		case MSG_ROUND_START: { stTMSG_ROUND_START.Pack(oPacker); } break;
		case MSG_ROUND_END: { stTMSG_ROUND_END.Pack(oPacker); } break;
		case MSG_BATTLE_RESULT: { stTMSG_BATTLE_RESULT.Pack(oPacker); } break;
		case MSG_BATTLE_LOG: { stTMSG_BATTLE_LOG.Pack(oPacker); } break;
		case MSG_ENTITY_SKILL_START: { stTMSG_ENTITY_SKILL_START.Pack(oPacker); } break;
		case MSG_ENTITY_SKILL_END: { stTMSG_ENTITY_SKILL_END.Pack(oPacker); } break;
		case MSG_ENTITY_SKILL_HIT_START: { stTMSG_ENTITY_SKILL_HIT_START.Pack(oPacker); } break;
		case MSG_ENTITY_SKILL_HIT: { stTMSG_ENTITY_SKILL_HIT.Pack(oPacker); } break;
		case MSG_ENTITY_BULLET_CREATE_START: { stTMSG_ENTITY_BULLET_CREATE_START.Pack(oPacker); } break;
		case MSG_ENTITY_BULLET_CREATE: { stTMSG_ENTITY_BULLET_CREATE.Pack(oPacker); } break;
		case MSG_ENTITY_BULLET_DESTROY: { stTMSG_ENTITY_BULLET_DESTROY.Pack(oPacker); } break;
		case MSG_ENTITY_CREATE: { stTMSG_ENTITY_CREATE.Pack(oPacker); } break;
		case MSG_ENTITY_DESTROY: { stTMSG_ENTITY_DESTROY.Pack(oPacker); } break;
		case MSG_ENTITY_STATE_CHANGED: { stTMSG_ENTITY_STATE_CHANGED.Pack(oPacker); } break;
		case MSG_ENTITY_PROP_CHANGED: { stTMSG_ENTITY_PROP_CHANGED.Pack(oPacker); } break;
		case MSG_ENTITY_BE_KILLED_NTF: { stTMSG_ENTITY_BE_KILLED_NTF.Pack(oPacker); } break;
		case MSG_ENTITY_BUFFER_START: { stTMSG_ENTITY_BUFFER_START.Pack(oPacker); } break;
		case MSG_ENTITY_BUFFER_END: { stTMSG_ENTITY_BUFFER_END.Pack(oPacker); } break;
		case MSG_ENTITY_EFFECT_HIT: { stTMSG_ENTITY_EFFECT_HIT.Pack(oPacker); } break;
		case MSG_ENTITY_EFFECT_ACTIVE: { stTMSG_ENTITY_EFFECT_ACTIVE.Pack(oPacker); } break;
		case MSG_ENTITY_TESTEFFECT_ACTIVATE: { stTMSG_ENTITY_TESTEFFECT_ACTIVATE.Pack(oPacker); } break;
		case MSG_ENTITY_EFFECT_SHOW_LIGHTING: { stTMSG_ENTITY_EFFECT_SHOW_LIGHTING.Pack(oPacker); } break;
		case MSG_ENTITY_ITEM_COLDING_NTF: { stTMSG_ENTITY_ITEM_COLDING_NTF.Pack(oPacker); } break;
		case MSG_ENTITY_PROPCHG_SHOW_NTF: { stTMSG_ENTITY_PROPCHG_SHOW_NTF.Pack(oPacker); } break;
		    default:throw new CPackDataException(CPackDataException.EN_EXCEPTION.UNDEFINE_MSGID);
		    } //switch;   

	}   //  Pack()

	public void Pack_WithTrace(CORM_packaux oPacker) {
    stHead.Pack(oPacker);
    switch(stHead.get_iMsgID()){
		case MSG_BATTLE_START: { oPacker.PushFieldName("stTMSG_BATTLE_START"); stTMSG_BATTLE_START.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_END: { oPacker.PushFieldName("stTMSG_BATTLE_END"); stTMSG_BATTLE_END.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ROUND_START: { oPacker.PushFieldName("stTMSG_ROUND_START"); stTMSG_ROUND_START.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ROUND_END: { oPacker.PushFieldName("stTMSG_ROUND_END"); stTMSG_ROUND_END.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_RESULT: { oPacker.PushFieldName("stTMSG_BATTLE_RESULT"); stTMSG_BATTLE_RESULT.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_LOG: { oPacker.PushFieldName("stTMSG_BATTLE_LOG"); stTMSG_BATTLE_LOG.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_SKILL_START: { oPacker.PushFieldName("stTMSG_ENTITY_SKILL_START"); stTMSG_ENTITY_SKILL_START.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_SKILL_END: { oPacker.PushFieldName("stTMSG_ENTITY_SKILL_END"); stTMSG_ENTITY_SKILL_END.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_SKILL_HIT_START: { oPacker.PushFieldName("stTMSG_ENTITY_SKILL_HIT_START"); stTMSG_ENTITY_SKILL_HIT_START.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_SKILL_HIT: { oPacker.PushFieldName("stTMSG_ENTITY_SKILL_HIT"); stTMSG_ENTITY_SKILL_HIT.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_BULLET_CREATE_START: { oPacker.PushFieldName("stTMSG_ENTITY_BULLET_CREATE_START"); stTMSG_ENTITY_BULLET_CREATE_START.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_BULLET_CREATE: { oPacker.PushFieldName("stTMSG_ENTITY_BULLET_CREATE"); stTMSG_ENTITY_BULLET_CREATE.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_BULLET_DESTROY: { oPacker.PushFieldName("stTMSG_ENTITY_BULLET_DESTROY"); stTMSG_ENTITY_BULLET_DESTROY.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_CREATE: { oPacker.PushFieldName("stTMSG_ENTITY_CREATE"); stTMSG_ENTITY_CREATE.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_DESTROY: { oPacker.PushFieldName("stTMSG_ENTITY_DESTROY"); stTMSG_ENTITY_DESTROY.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_STATE_CHANGED: { oPacker.PushFieldName("stTMSG_ENTITY_STATE_CHANGED"); stTMSG_ENTITY_STATE_CHANGED.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_PROP_CHANGED: { oPacker.PushFieldName("stTMSG_ENTITY_PROP_CHANGED"); stTMSG_ENTITY_PROP_CHANGED.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_BE_KILLED_NTF: { oPacker.PushFieldName("stTMSG_ENTITY_BE_KILLED_NTF"); stTMSG_ENTITY_BE_KILLED_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_BUFFER_START: { oPacker.PushFieldName("stTMSG_ENTITY_BUFFER_START"); stTMSG_ENTITY_BUFFER_START.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_BUFFER_END: { oPacker.PushFieldName("stTMSG_ENTITY_BUFFER_END"); stTMSG_ENTITY_BUFFER_END.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_EFFECT_HIT: { oPacker.PushFieldName("stTMSG_ENTITY_EFFECT_HIT"); stTMSG_ENTITY_EFFECT_HIT.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_EFFECT_ACTIVE: { oPacker.PushFieldName("stTMSG_ENTITY_EFFECT_ACTIVE"); stTMSG_ENTITY_EFFECT_ACTIVE.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_TESTEFFECT_ACTIVATE: { oPacker.PushFieldName("stTMSG_ENTITY_TESTEFFECT_ACTIVATE"); stTMSG_ENTITY_TESTEFFECT_ACTIVATE.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_EFFECT_SHOW_LIGHTING: { oPacker.PushFieldName("stTMSG_ENTITY_EFFECT_SHOW_LIGHTING"); stTMSG_ENTITY_EFFECT_SHOW_LIGHTING.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_ITEM_COLDING_NTF: { oPacker.PushFieldName("stTMSG_ENTITY_ITEM_COLDING_NTF"); stTMSG_ENTITY_ITEM_COLDING_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_PROPCHG_SHOW_NTF: { oPacker.PushFieldName("stTMSG_ENTITY_PROPCHG_SHOW_NTF"); stTMSG_ENTITY_PROPCHG_SHOW_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		    default:throw new CPackDataException(CPackDataException.EN_EXCEPTION.UNDEFINE_MSGID);
		    } //switch;   

	}   //  Pack()

	public void Unpack(CORM_packaux oPacker) {
		if (stHead == null) { stHead = new TBattleMsgHead(); }
		stHead.Unpack(oPacker);
		switch(stHead.get_iMsgID()){
		        case MSG_BATTLE_START: { if (stTMSG_BATTLE_START == null) { stTMSG_BATTLE_START = new TMSG_BATTLE_START(); } stTMSG_BATTLE_START.Unpack(oPacker); } break;
		        case MSG_BATTLE_END: { if (stTMSG_BATTLE_END == null) { stTMSG_BATTLE_END = new TMSG_BATTLE_END(); } stTMSG_BATTLE_END.Unpack(oPacker); } break;
		        case MSG_ROUND_START: { if (stTMSG_ROUND_START == null) { stTMSG_ROUND_START = new TMSG_ROUND_START(); } stTMSG_ROUND_START.Unpack(oPacker); } break;
		        case MSG_ROUND_END: { if (stTMSG_ROUND_END == null) { stTMSG_ROUND_END = new TMSG_ROUND_END(); } stTMSG_ROUND_END.Unpack(oPacker); } break;
		        case MSG_BATTLE_RESULT: { if (stTMSG_BATTLE_RESULT == null) { stTMSG_BATTLE_RESULT = new TMSG_BATTLE_RESULT(); } stTMSG_BATTLE_RESULT.Unpack(oPacker); } break;
		        case MSG_BATTLE_LOG: { if (stTMSG_BATTLE_LOG == null) { stTMSG_BATTLE_LOG = new TMSG_BATTLE_LOG(); } stTMSG_BATTLE_LOG.Unpack(oPacker); } break;
		        case MSG_ENTITY_SKILL_START: { if (stTMSG_ENTITY_SKILL_START == null) { stTMSG_ENTITY_SKILL_START = new TMSG_ENTITY_SKILL_START(); } stTMSG_ENTITY_SKILL_START.Unpack(oPacker); } break;
		        case MSG_ENTITY_SKILL_END: { if (stTMSG_ENTITY_SKILL_END == null) { stTMSG_ENTITY_SKILL_END = new TMSG_ENTITY_SKILL_END(); } stTMSG_ENTITY_SKILL_END.Unpack(oPacker); } break;
		        case MSG_ENTITY_SKILL_HIT_START: { if (stTMSG_ENTITY_SKILL_HIT_START == null) { stTMSG_ENTITY_SKILL_HIT_START = new TMSG_ENTITY_SKILL_HIT_START(); } stTMSG_ENTITY_SKILL_HIT_START.Unpack(oPacker); } break;
		        case MSG_ENTITY_SKILL_HIT: { if (stTMSG_ENTITY_SKILL_HIT == null) { stTMSG_ENTITY_SKILL_HIT = new TMSG_ENTITY_SKILL_HIT(); } stTMSG_ENTITY_SKILL_HIT.Unpack(oPacker); } break;
		        case MSG_ENTITY_BULLET_CREATE_START: { if (stTMSG_ENTITY_BULLET_CREATE_START == null) { stTMSG_ENTITY_BULLET_CREATE_START = new TMSG_ENTITY_BULLET_CREATE_START(); } stTMSG_ENTITY_BULLET_CREATE_START.Unpack(oPacker); } break;
		        case MSG_ENTITY_BULLET_CREATE: { if (stTMSG_ENTITY_BULLET_CREATE == null) { stTMSG_ENTITY_BULLET_CREATE = new TMSG_ENTITY_BULLET_CREATE(); } stTMSG_ENTITY_BULLET_CREATE.Unpack(oPacker); } break;
		        case MSG_ENTITY_BULLET_DESTROY: { if (stTMSG_ENTITY_BULLET_DESTROY == null) { stTMSG_ENTITY_BULLET_DESTROY = new TMSG_ENTITY_BULLET_DESTROY(); } stTMSG_ENTITY_BULLET_DESTROY.Unpack(oPacker); } break;
		        case MSG_ENTITY_CREATE: { if (stTMSG_ENTITY_CREATE == null) { stTMSG_ENTITY_CREATE = new TMSG_ENTITY_CREATE(); } stTMSG_ENTITY_CREATE.Unpack(oPacker); } break;
		        case MSG_ENTITY_DESTROY: { if (stTMSG_ENTITY_DESTROY == null) { stTMSG_ENTITY_DESTROY = new TMSG_ENTITY_DESTROY(); } stTMSG_ENTITY_DESTROY.Unpack(oPacker); } break;
		        case MSG_ENTITY_STATE_CHANGED: { if (stTMSG_ENTITY_STATE_CHANGED == null) { stTMSG_ENTITY_STATE_CHANGED = new TMSG_ENTITY_STATE_CHANGED(); } stTMSG_ENTITY_STATE_CHANGED.Unpack(oPacker); } break;
		        case MSG_ENTITY_PROP_CHANGED: { if (stTMSG_ENTITY_PROP_CHANGED == null) { stTMSG_ENTITY_PROP_CHANGED = new TMSG_ENTITY_PROP_CHANGED(); } stTMSG_ENTITY_PROP_CHANGED.Unpack(oPacker); } break;
		        case MSG_ENTITY_BE_KILLED_NTF: { if (stTMSG_ENTITY_BE_KILLED_NTF == null) { stTMSG_ENTITY_BE_KILLED_NTF = new TMSG_ENTITY_BE_KILLED_NTF(); } stTMSG_ENTITY_BE_KILLED_NTF.Unpack(oPacker); } break;
		        case MSG_ENTITY_BUFFER_START: { if (stTMSG_ENTITY_BUFFER_START == null) { stTMSG_ENTITY_BUFFER_START = new TMSG_ENTITY_BUFFER_START(); } stTMSG_ENTITY_BUFFER_START.Unpack(oPacker); } break;
		        case MSG_ENTITY_BUFFER_END: { if (stTMSG_ENTITY_BUFFER_END == null) { stTMSG_ENTITY_BUFFER_END = new TMSG_ENTITY_BUFFER_END(); } stTMSG_ENTITY_BUFFER_END.Unpack(oPacker); } break;
		        case MSG_ENTITY_EFFECT_HIT: { if (stTMSG_ENTITY_EFFECT_HIT == null) { stTMSG_ENTITY_EFFECT_HIT = new TMSG_ENTITY_EFFECT_HIT(); } stTMSG_ENTITY_EFFECT_HIT.Unpack(oPacker); } break;
		        case MSG_ENTITY_EFFECT_ACTIVE: { if (stTMSG_ENTITY_EFFECT_ACTIVE == null) { stTMSG_ENTITY_EFFECT_ACTIVE = new TMSG_ENTITY_EFFECT_ACTIVE(); } stTMSG_ENTITY_EFFECT_ACTIVE.Unpack(oPacker); } break;
		        case MSG_ENTITY_TESTEFFECT_ACTIVATE: { if (stTMSG_ENTITY_TESTEFFECT_ACTIVATE == null) { stTMSG_ENTITY_TESTEFFECT_ACTIVATE = new TMSG_ENTITY_TESTEFFECT_ACTIVATE(); } stTMSG_ENTITY_TESTEFFECT_ACTIVATE.Unpack(oPacker); } break;
		        case MSG_ENTITY_EFFECT_SHOW_LIGHTING: { if (stTMSG_ENTITY_EFFECT_SHOW_LIGHTING == null) { stTMSG_ENTITY_EFFECT_SHOW_LIGHTING = new TMSG_ENTITY_EFFECT_SHOW_LIGHTING(); } stTMSG_ENTITY_EFFECT_SHOW_LIGHTING.Unpack(oPacker); } break;
		        case MSG_ENTITY_ITEM_COLDING_NTF: { if (stTMSG_ENTITY_ITEM_COLDING_NTF == null) { stTMSG_ENTITY_ITEM_COLDING_NTF = new TMSG_ENTITY_ITEM_COLDING_NTF(); } stTMSG_ENTITY_ITEM_COLDING_NTF.Unpack(oPacker); } break;
		        case MSG_ENTITY_PROPCHG_SHOW_NTF: { if (stTMSG_ENTITY_PROPCHG_SHOW_NTF == null) { stTMSG_ENTITY_PROPCHG_SHOW_NTF = new TMSG_ENTITY_PROPCHG_SHOW_NTF(); } stTMSG_ENTITY_PROPCHG_SHOW_NTF.Unpack(oPacker); } break;
		default:throw new CPackDataException(CPackDataException.EN_EXCEPTION.UNDEFINE_MSGID);
	    } //switch;
	}   //  Unpack()

	public bool Init(int _iMsgID) {
		if (stHead == null) { stHead = new TBattleMsgHead(); }
		stHead.set_iMsgID(_iMsgID);
		switch(_iMsgID){
		        case MSG_BATTLE_START: { if (stTMSG_BATTLE_START == null) { stTMSG_BATTLE_START = new TMSG_BATTLE_START(); } else { stTMSG_BATTLE_START.init(); } } break;
		        case MSG_BATTLE_END: { if (stTMSG_BATTLE_END == null) { stTMSG_BATTLE_END = new TMSG_BATTLE_END(); } else { stTMSG_BATTLE_END.init(); } } break;
		        case MSG_ROUND_START: { if (stTMSG_ROUND_START == null) { stTMSG_ROUND_START = new TMSG_ROUND_START(); } else { stTMSG_ROUND_START.init(); } } break;
		        case MSG_ROUND_END: { if (stTMSG_ROUND_END == null) { stTMSG_ROUND_END = new TMSG_ROUND_END(); } else { stTMSG_ROUND_END.init(); } } break;
		        case MSG_BATTLE_RESULT: { if (stTMSG_BATTLE_RESULT == null) { stTMSG_BATTLE_RESULT = new TMSG_BATTLE_RESULT(); } else { stTMSG_BATTLE_RESULT.init(); } } break;
		        case MSG_BATTLE_LOG: { if (stTMSG_BATTLE_LOG == null) { stTMSG_BATTLE_LOG = new TMSG_BATTLE_LOG(); } else { stTMSG_BATTLE_LOG.init(); } } break;
		        case MSG_ENTITY_SKILL_START: { if (stTMSG_ENTITY_SKILL_START == null) { stTMSG_ENTITY_SKILL_START = new TMSG_ENTITY_SKILL_START(); } else { stTMSG_ENTITY_SKILL_START.init(); } } break;
		        case MSG_ENTITY_SKILL_END: { if (stTMSG_ENTITY_SKILL_END == null) { stTMSG_ENTITY_SKILL_END = new TMSG_ENTITY_SKILL_END(); } else { stTMSG_ENTITY_SKILL_END.init(); } } break;
		        case MSG_ENTITY_SKILL_HIT_START: { if (stTMSG_ENTITY_SKILL_HIT_START == null) { stTMSG_ENTITY_SKILL_HIT_START = new TMSG_ENTITY_SKILL_HIT_START(); } else { stTMSG_ENTITY_SKILL_HIT_START.init(); } } break;
		        case MSG_ENTITY_SKILL_HIT: { if (stTMSG_ENTITY_SKILL_HIT == null) { stTMSG_ENTITY_SKILL_HIT = new TMSG_ENTITY_SKILL_HIT(); } else { stTMSG_ENTITY_SKILL_HIT.init(); } } break;
		        case MSG_ENTITY_BULLET_CREATE_START: { if (stTMSG_ENTITY_BULLET_CREATE_START == null) { stTMSG_ENTITY_BULLET_CREATE_START = new TMSG_ENTITY_BULLET_CREATE_START(); } else { stTMSG_ENTITY_BULLET_CREATE_START.init(); } } break;
		        case MSG_ENTITY_BULLET_CREATE: { if (stTMSG_ENTITY_BULLET_CREATE == null) { stTMSG_ENTITY_BULLET_CREATE = new TMSG_ENTITY_BULLET_CREATE(); } else { stTMSG_ENTITY_BULLET_CREATE.init(); } } break;
		        case MSG_ENTITY_BULLET_DESTROY: { if (stTMSG_ENTITY_BULLET_DESTROY == null) { stTMSG_ENTITY_BULLET_DESTROY = new TMSG_ENTITY_BULLET_DESTROY(); } else { stTMSG_ENTITY_BULLET_DESTROY.init(); } } break;
		        case MSG_ENTITY_CREATE: { if (stTMSG_ENTITY_CREATE == null) { stTMSG_ENTITY_CREATE = new TMSG_ENTITY_CREATE(); } else { stTMSG_ENTITY_CREATE.init(); } } break;
		        case MSG_ENTITY_DESTROY: { if (stTMSG_ENTITY_DESTROY == null) { stTMSG_ENTITY_DESTROY = new TMSG_ENTITY_DESTROY(); } else { stTMSG_ENTITY_DESTROY.init(); } } break;
		        case MSG_ENTITY_STATE_CHANGED: { if (stTMSG_ENTITY_STATE_CHANGED == null) { stTMSG_ENTITY_STATE_CHANGED = new TMSG_ENTITY_STATE_CHANGED(); } else { stTMSG_ENTITY_STATE_CHANGED.init(); } } break;
		        case MSG_ENTITY_PROP_CHANGED: { if (stTMSG_ENTITY_PROP_CHANGED == null) { stTMSG_ENTITY_PROP_CHANGED = new TMSG_ENTITY_PROP_CHANGED(); } else { stTMSG_ENTITY_PROP_CHANGED.init(); } } break;
		        case MSG_ENTITY_BE_KILLED_NTF: { if (stTMSG_ENTITY_BE_KILLED_NTF == null) { stTMSG_ENTITY_BE_KILLED_NTF = new TMSG_ENTITY_BE_KILLED_NTF(); } else { stTMSG_ENTITY_BE_KILLED_NTF.init(); } } break;
		        case MSG_ENTITY_BUFFER_START: { if (stTMSG_ENTITY_BUFFER_START == null) { stTMSG_ENTITY_BUFFER_START = new TMSG_ENTITY_BUFFER_START(); } else { stTMSG_ENTITY_BUFFER_START.init(); } } break;
		        case MSG_ENTITY_BUFFER_END: { if (stTMSG_ENTITY_BUFFER_END == null) { stTMSG_ENTITY_BUFFER_END = new TMSG_ENTITY_BUFFER_END(); } else { stTMSG_ENTITY_BUFFER_END.init(); } } break;
		        case MSG_ENTITY_EFFECT_HIT: { if (stTMSG_ENTITY_EFFECT_HIT == null) { stTMSG_ENTITY_EFFECT_HIT = new TMSG_ENTITY_EFFECT_HIT(); } else { stTMSG_ENTITY_EFFECT_HIT.init(); } } break;
		        case MSG_ENTITY_EFFECT_ACTIVE: { if (stTMSG_ENTITY_EFFECT_ACTIVE == null) { stTMSG_ENTITY_EFFECT_ACTIVE = new TMSG_ENTITY_EFFECT_ACTIVE(); } else { stTMSG_ENTITY_EFFECT_ACTIVE.init(); } } break;
		        case MSG_ENTITY_TESTEFFECT_ACTIVATE: { if (stTMSG_ENTITY_TESTEFFECT_ACTIVATE == null) { stTMSG_ENTITY_TESTEFFECT_ACTIVATE = new TMSG_ENTITY_TESTEFFECT_ACTIVATE(); } else { stTMSG_ENTITY_TESTEFFECT_ACTIVATE.init(); } } break;
		        case MSG_ENTITY_EFFECT_SHOW_LIGHTING: { if (stTMSG_ENTITY_EFFECT_SHOW_LIGHTING == null) { stTMSG_ENTITY_EFFECT_SHOW_LIGHTING = new TMSG_ENTITY_EFFECT_SHOW_LIGHTING(); } else { stTMSG_ENTITY_EFFECT_SHOW_LIGHTING.init(); } } break;
		        case MSG_ENTITY_ITEM_COLDING_NTF: { if (stTMSG_ENTITY_ITEM_COLDING_NTF == null) { stTMSG_ENTITY_ITEM_COLDING_NTF = new TMSG_ENTITY_ITEM_COLDING_NTF(); } else { stTMSG_ENTITY_ITEM_COLDING_NTF.init(); } } break;
		        case MSG_ENTITY_PROPCHG_SHOW_NTF: { if (stTMSG_ENTITY_PROPCHG_SHOW_NTF == null) { stTMSG_ENTITY_PROPCHG_SHOW_NTF = new TMSG_ENTITY_PROPCHG_SHOW_NTF(); } else { stTMSG_ENTITY_PROPCHG_SHOW_NTF.init(); } } break;
		default:return false;
	    } //switch;
	    return true;
	}   //  Unpack()

	public static bool ExistsMsg(int _iMsgID)
	{
		int nCur = 0, nStart = 0, nEnd = 26 - 1, nDiff = 0;
		while (nStart <= nEnd)
		{
			nCur = (nStart + nEnd) >> 1;
			nDiff = s_arrMsgID[nCur] - _iMsgID;
			if (nDiff == 0) { return true; }
			if (nDiff < 0) { nStart = nCur + 1; } else { nEnd = nCur - 1; }
		}
		return false;
	}

}   // msg group:  TBattleMessage


public class TCSMessage {
	public const int MAX_PACKEDSIZE = 557059;
	//   Message Define
	public const uint MSG_LOGIN_HANDSHAKE_REQ = 1;   // (0+1) 1  握手请求
	public const uint MSG_LOGIN_HANDSHAKE_RSP = 2;   // (0+2) 2  握手回复
	public const uint MSG_LOGIN_LOGIN_REQ = 3;   // (0+3) 3  登陆请求
	public const uint MSG_LOGIN_LOGIN_RSP = 4;   // (0+4) 4  登陆回复
	public const uint MSG_LOGIN_ERROR_NTF = 5;   // (0+5) 5  登陆错误通知
	public const uint MSG_LOGIN_NEW_ACCOUNT_NTF = 6;   // (0+6) 6  新账号通知
	public const uint MSG_LOGIN_BAN_ACCOUNT_NTF = 7;   // (0+7) 7  封号通知
	public const uint MSG_LOGIN_AUTO_LOGIN_REQ = 9;   // (0+9) 9  自动登录请求
	public const uint MSG_LOGIN_UPDATE_ALSESSION_NTF = 10;   // (0+10) 10  通知客户端更新自动登录Session
	public const uint MSG_LOGIN_KICKOUT_NTF = 11;   // (0+11) 11  踢人通知
	public const uint MSG_LOGIN_QUERY_ALL_ROLE_REQ = 15;   // (0+15) 15  查询所有区角色
	public const uint MSG_LOGIN_QUERY_ALL_ROLE_RSP = 16;   // (0+16) 16  
	public const uint MSG_LOGIN_QUERY_ALL_ROLE_NTF = 17;   // (0+17) 17  
	public const uint MSG_LOGIN_NOACC_INWORLD_NTF = 18;   // (0+18) 18  没帐号通知
	public const uint MSG_LOGIN_CREATE_ACC_INWORLD_REQ = 19;   // (0+19) 19  
	public const uint MSG_LOGIN_CREATE_ACC_INWORLD_RSP = 20;   // (0+20) 20  
	public const uint MSG_LOGIN_GEN_WORLD_ALS_REQ = 21;   // (0+21) 21  查询其它区的ALS
	public const uint MSG_LOGIN_GEN_WORLD_ALS_RSP = 22;   // (0+22) 22  
	public const uint MSG_LOGIN_ACCOUNT_UNDELETE_REQ = 29;   // (0+29) 29  undel account
	public const uint MSG_LOGIN_ACCOUNT_UNDELETE_RSP = 30;   // (0+30) 30  
	public const uint MSG_LOGIN_ACCOUNT_DELETE_STATE_NTF = 31;   // (0+31) 31  
	public const uint MSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF = 32;   // (0+32) 32  
	public const uint MSG_LOGIN_BANROLE_NTF = 33;   // (0+33) 33   封号NTF
	public const uint MSG_LOGIN_SERVERMAINTAIN_NTF = 34;   // (0+34) 34   服务器维护NTF
	public const uint MSG_LOGIN_WORLDOPENDATE_NTF = 35;   // (0+35) 35   开区时间通知NTF
	public const uint MSG_LOBBY_ERROR_NTF = 60;   // (60+0) 60  大厅错误通知
	public const uint MSG_LEECHDOM_USE_REQ = 140;   // (140+0) 140  物品使用
	public const uint MSG_LEECHDOM_USE_RSP = 141;   // (140+1) 141  物品使用
	public const uint MSG_ACTION_LUA_REQUEST_REQ = 201;   // (200+1) 201  客户端Lua请求
	public const uint MSG_ACTION_LUA_REQUEST_RSP = 202;   // (200+2) 202  服务器Lua回复
	public const uint MSG_ACTION_LUA_SCRIPT_NTF = 203;   // (200+3) 203  调用客户端方法
	public const uint MSG_ACTION_QUERY_TIME_REQ = 205;   // (200+5) 205  时间查询
	public const uint MSG_ACTION_QUERY_TIME_RSP = 206;   // (200+6) 206  时间查询
	public const uint MSG_ACTION_TESTCASE_NTF = 207;   // (200+7) 207  测试用例使用
	public const uint MSG_ACTION_SYNC_FLAG_NTF = 208;   // (200+8) 208  更新同步标记
	public const uint MSG_ACTION_OUT_OF_SYNC_NTF = 209;   // (200+9) 209  同步异常
	public const uint MSG_ACTION_SHOW_PRIZE_NTF = 210;   // (200+10) 210  通知奖励
	public const uint MSG_ACTION_LUALIKE_SCRIPT_NTF = 211;   // (200+11) 211  调用客户端方法
	public const uint MSG_ENTITY_CREATE_ROLE_NTF = 300;   // (300+0) 300  创建主角通知
	public const uint MSG_ENTITY_CREATE_ROLE_PART_NTF = 301;   // (300+1) 301  创建主角部件通知
	public const uint MSG_ENTITY_CREATE_PERSON_NTF = 302;   // (300+2) 302  通知客户端创建Person(非主角)
	public const uint MSG_ENTITY_CREATE_LEECHDOM_NTF = 305;   // (300+5) 305  通知客户端创建Leechdom
	public const uint MSG_ENTITY_DESTROY_NTF = 307;   // (300+7) 307  通知客户端删除实体对象
	public const uint MSG_ENTITY_UPDATE_PROP_NTF = 308;   // (300+8) 308  通知客户端Entity属性更新
	public const uint MSG_ENTITY_SET_PROP_REQ = 309;   // (300+9) 309  客户端修改Entity属性
	public const uint MSG_ENTITY_SET_PROP_RSP = 310;   // (300+10) 310  
	public const uint MSG_ENTITY_RENAME_REQ = 311;   // (300+11) 311  角色改名请求
	public const uint MSG_ENTITY_RENAME_RSP = 312;   // (300+12) 312  
	public const uint MSG_CLIENT_LOGIN_OSS_REQ = 313;   // (300+13) 313  客户端登录上报打点信息
	public const uint MSG_CLIENT_LOGIN_OSS_RSP = 314;   // (300+14) 314  
	public const uint MSG_SERVER_TIME_REQ = 315;   // (300+15) 315  客户端请求服务器事件
	public const uint MSG_SERVER_TIME_RSP = 316;   // (300+16) 316  
	public const uint MSG_SKEP_CREATE_NTF = 400;   // (400+0) 400  创建篮子-通知
	public const uint MSG_SKEP_DESTROY_NTF = 401;   // (400+1) 401  销毁篮子-通知
	public const uint MSG_SKEP_ADD_ITEM_NTF = 402;   // (400+2) 402  添加物品
	public const uint MSG_SKEP_REMOVE_ITEM_NTF = 403;   // (400+3) 403  移除物品
	public const uint MSG_ROOM_USER_ENTER_REQ = 500;   // (500+0) 500  进入房间req
	public const uint MSG_ROOM_USER_ENTER_RSP = 501;   // (500+1) 501  
	public const uint MSG_ROOM_USER_ENTER_NTF = 502;   // (500+2) 502  
	public const uint MSG_ROOM_USER_LEAVE_REQ = 503;   // (500+3) 503  离开房间req
	public const uint MSG_ROOM_USER_LEAVE_RSP = 504;   // (500+4) 504  
	public const uint MSG_ROOM_USER_LEAVE_NTF = 505;   // (500+5) 505  
	public const uint MSG_ROOM_USER_ENTER_COMPLETE_NTF = 506;   // (500+6) 506  
	public const uint MSG_ROOM_SEARCH_REQ = 507;   // (500+7) 507  查找房间req
	public const uint MSG_ROOM_SEARCH_RSP = 508;   // (500+8) 508  
	public const uint MSG_ROOM_GET_ROOMDESC_REQ = 509;   // (500+9) 509  查询房间信息req
	public const uint MSG_ROOM_GET_ROOMDESC_RSP = 510;   // (500+10) 510  
	public const uint MSG_MINIGAME_SET_PROP_REQ = 520;   // (520+0) 520  设置属性req
	public const uint MSG_MINIGAME_SET_PROP_RSP = 521;   // (520+1) 521  
	public const uint MSG_MINIGAME_GET_PROP_REQ = 522;   // (520+2) 522  获取属性req
	public const uint MSG_MINIGAME_GET_PROP_RSP = 523;   // (520+3) 523  
	public const uint MSG_MINIGAME_PROP_UPDATED_NTF = 524;   // (520+4) 524  属性变更通知
	public const uint MSG_MINIGAME_RESET_ROOM_PROP_REQ = 525;   // (520+5) 525  (复位)清除房间属性
	public const uint MSG_MINIGAME_RESET_ROOM_PROP_RSP = 526;   // (520+6) 526  
	public const uint MSG_MINIGAME_RESET_ROOM_PROP_NTF = 527;   // (520+7) 527  
	public const uint MSG_MINIGAME_BROADCAST_MSG_REQ = 531;   // (530+1) 531  玩法消息广播
	public const uint MSG_MINIGAME_BROADCAST_MSG_RSP = 532;   // (530+2) 532  
	public const uint MSG_MINIGAME_BROADCAST_MSG_NTF = 533;   // (530+3) 533  
	public const uint MSG_NET_OBJ_CREATE_NTF = 541;   // (540+1) 541  NetObject创建通知
	public const uint MSG_NET_OBJ_PROP_CHANGE_REQ = 542;   // (540+2) 542  NetObject创建通知
	public const uint MSG_NET_OBJ_PROP_UPDATED_NTF = 543;   // (540+3) 543  NetObject更新通知
	public const uint MSG_NET_OBJ_DESTROY_NTF = 544;   // (540+4) 544  NetObject销毁通知
	public const uint MSG_NET_OBJ_SYNC_NTF = 545;   // (540+5) 545  NetObject 同步状态(开始/结束)通知
	public const uint MSG_NET_OBJ_SYNC_ELEMENT_NTF = 546;   // (540+6) 546  NetObject 单一实体(开始/结束) 通知
	public const uint MSG_NET_OBJ_DESTROY_BY_ROLE_NTF = 547;   // (540+7) 547  NetObject按角色销毁通知
	public const uint MSG_DISCIPLE_BUILD_DISCIPLE_REQ = 601;   // (600+1) 601  创建弟子
	public const uint MSG_DISCIPLE_BUILD_DISCIPLE_RSP = 602;   // (600+2) 602  
	public const uint MSG_DISCIPLE_TUINING_REQ = 603;   // (600+3) 603  选择功法、天赋和加点等
	public const uint MSG_DISCIPLE_TUINING_RSP = 604;   // (600+4) 604  
	public const uint MSG_DISCIPLE_WANDERING_START_REQ = 605;   // (600+5) 605  开始游历-请求
	public const uint MSG_DISCIPLE_WANDERING_START_RSP = 606;   // (600+6) 606  
	public const uint MSG_DISCIPLE_WANDERING_EVENT_LOG_NTF = 607;   // (600+7) 607  游历事件Log通知
	public const uint MSG_DISCIPLE_WANDERING_FINISH_REQ = 608;   // (600+8) 608    结束游历-主动请求
	public const uint MSG_DISCIPLE_WANDERING_FINISH_RSP = 609;   // (600+9) 609  
	public const uint MSG_DISCIPLE_WANDERING_WILL_FINISH_NTF = 610;   // (600+10) 610   游历即将结束 
	public const uint MSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ = 611;   // (600+11) 611  游历-下一天/关-请求
	public const uint MSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP = 612;   // (600+12) 612  
	public const uint MSG_DISCIPLE_WANDERING_CHOOSE_REQ = 616;   // (600+16) 616  游历-提交选项
	public const uint MSG_DISCIPLE_WANDERING_CHOOSE_RSP = 617;   // (600+17) 617  
	public const uint MSG_DISCIPLE_WANDERING_REMOVE_REQ = 618;   // (600+18) 618  游历-删除弟子
	public const uint MSG_DISCIPLE_WANDERING_REMOVE_RSP = 619;   // (600+19) 619  
	public const uint MSG_DISCIPLE_WANDERING_CLOSE_REQ = 620;   // (600+20) 620  游历-关闭界面-对应Start请求
	public const uint MSG_DISCIPLE_WANDERING_CLOSE_RSP = 621;   // (600+21) 621  
	public const uint MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF = 622;   // (600+22) 622  游历-轮盘-开始通知
	public const uint MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ = 623;   // (600+23) 623  游历-轮盘-加载状态请求
	public const uint MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP = 624;   // (600+24) 624  
	public const uint MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ = 625;   // (600+25) 625  游历-轮盘-请求抽奖
	public const uint MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP = 626;   // (600+26) 626  
	public const uint MSG_DISCIPLE_WANDERING_GODEXAM_REQ = 627;   // (600+27) 627  游历-渡劫-请求
	public const uint MSG_DISCIPLE_WANDERING_GODEXAM_RSP = 628;   // (600+28) 628  
	public const uint MSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ = 629;   // (600+29) 629  游历-装备商店购买-请求
	public const uint MSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP = 630;   // (600+30) 630  游历-装备商店购买-返回
	public const uint MSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ = 631;   // (600+31) 631  游历-装备商店数据加载-请求
	public const uint MSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP = 632;   // (600+32) 632  游历-装备商店数据加载-返回
	public const uint MSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ = 633;   // (600+33) 633  游历-装备商店关闭-请求
	public const uint MSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP = 634;   // (600+34) 634  游历-装备商店关闭-返回
	public const uint MSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ = 635;   // (600+35) 635  游历-装备商店刷新-请求
	public const uint MSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP = 636;   // (600+36) 636  游历-装备商店刷新-返回
	public const uint MSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF = 641;   // (600+41) 641  游历-物品变化-通知
	public const uint MSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF = 642;   // (600+42) 642  游历-物品全量-通知
	public const uint MSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF = 643;   // (600+43) 643  游历-难度变化-通知
	public const uint MSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF = 644;   // (600+44) 644  游历内系统数据-通知
	public const uint MSG_WANDERING_ABILITY_SELECT_NTF = 651;   // (600+51) 651  选择词条 通知
	public const uint MSG_WANDERING_ABILITY_SELECT_REQ = 652;   // (600+52) 652  选择词条 请求
	public const uint MSG_WANDERING_ABILITY_SELECT_RSP = 653;   // (600+53) 653  选择词条 回复
	public const uint MSG_WANDERING_ABILITY_SELECT_LOAD_REQ = 654;   // (600+54) 654  主动加载词条状态 请求
	public const uint MSG_WANDERING_ABILITY_SELECT_LOAD_RSP = 655;   // (600+55) 655  主动加载词条状态 回复
	public const uint MSG_WANDERING_EQUIP_SELECT_NEXT_REQ = 656;   // (600+56) 656  装备选择下一页 请求
	public const uint MSG_WANDERING_EQUIP_SELECT_NEXT_RSP = 657;   // (600+57) 657  装备选择下一页 回复
	public const uint MSG_WANDERING_EQUIP_SELECT_LOAD_REQ = 658;   // (600+58) 658  主动加载装备事件数据 请求
	public const uint MSG_WANDERING_EQUIP_SELECT_LOAD_RSP = 659;   // (600+59) 659  主动加载装备事件数据 回复
	public const uint MSG_WANDERING_EQUIP_SELECT_NTF = 660;   // (600+60) 660  装备事件通知
	public const uint MSG_BATTLE_INIT_CONTEXT_NTF = 701;   // (700+1) 701  战斗现场通知
	public const uint MSG_BATTLE_INPUT_REQ = 702;   // (700+2) 702  战斗指令输入-请求
	public const uint MSG_BATTLE_INPUT_RSP = 703;   // (700+3) 703  
	public const uint MSG_BATTLE_RESULT_NTF = 704;   // (700+4) 704  整场战斗结束-通知
	public const uint MSG_BATTLE_ROUND_OVER_NTF = 705;   // (700+5) 705  战斗回合结束-通知
	public const uint MSG_BATTLE_PROP_UPDATED_NTF = 706;   // (700+6) 706  战斗属性变更-通知
	public const uint MSG_BATTLE_SKILL_UPDATED_NTF = 707;   // (700+7) 707  战斗技能变更-通知
	public const uint MSG_BATTLE_ACTION_USE_SKILL_NTF = 710;   // (700+10) 710  战斗行动通知-使用技能
	public const uint MSG_BATTLE_ACTION_INJURED_NTF = 711;   // (700+11) 711  战斗行动通知-受伤
	public const uint MSG_BATTLE_ACTION_DEATH_NTF = 712;   // (700+12) 712  战斗行动通知-死亡
	public const uint MSG_BATTLE_CONTEXT_PACK_NTF = 713;   // (700+13) 713  战斗完整战报通知
	public const uint MSG_BATTLE_CONFIRM_RESULT_REQ = 714;   // (700+14) 714  请求战斗结果（播完战报之后）
	public const uint MSG_BATTLE_CONFIRM_RESULT_RSP = 715;   // (700+15) 715  
	public const uint MSG_FORMATION_SET_LAYOUT_REQ = 741;   // (740+1) 741  设置阵法英雄req
	public const uint MSG_FORMATION_SET_LAYOUT_RSP = 742;   // (740+2) 742  
	public const uint MSG_FORMATION_UPDATE_NTF = 743;   // (740+3) 743  阵法更新通知
	public const uint MSG_SEEDING_CREATE_NTF = 801;   // (800+1) 801  胚子添加-通知
	public const uint MSG_SEEDING_UPDATE_PROP_NTF = 802;   // (800+2) 802  胚子变更-通知
	public const uint MSG_DISCIPLE_CREATE_NTF = 811;   // (800+11) 811  弟子添加-通知
	public const uint MSG_DISCIPLE_UPDATE_PROP_NTF = 812;   // (800+12) 812  弟子变更-通知
	public const uint MSG_DISCIPLE_RENAME_REQ = 813;   // (800+13) 813  弟子改名-请求
	public const uint MSG_DISCIPLE_RENAME_RSP = 814;   // (800+14) 814  弟子改名-返回
	public const uint MSG_SEEDING_UPGRADE_REQ = 815;   // (800+15) 815  胚子升星-请求
	public const uint MSG_SEEDING_UPGRADE_RSP = 816;   // (800+16) 816  胚子升星-返回
	public const uint MSG_EQUIP_CREATE_NTF = 821;   // (800+21) 821  装备添加-通知
	public const uint MSG_EQUIP_UPDATE_PROP_NTF = 822;   // (800+22) 822  装备变更-通知
	public const uint MSG_EQUIP_DELETE_NTF = 823;   // (800+23) 823  装备删除-通知
	public const uint MSG_DISCIPLE_MOVE_EQUIP_REQ = 824;   // (800+24) 824  装备摆放-请求
	public const uint MSG_DISCIPLE_MOVE_EQUIP_RSP = 825;   // (800+25) 825  装备摆放-返回
	public const uint MSG_DISCIPLE_DELETE_EQUIP_REQ = 826;   // (800+26) 826  装备删除-请求
	public const uint MSG_DISCIPLE_DELETE_EQUIP_RSP = 827;   // (800+27) 827  装备删除-返回
	public const uint MSG_DISCIPLE_COMPOSE_EQUIP_REQ = 828;   // (800+28) 828  装备合成-请求
	public const uint MSG_DISCIPLE_COMPOSE_EQUIP_RSP = 829;   // (800+29) 829  装备合成-返回
	public const uint MSG_DISCIPLE_EQUIP_ATLAS_REQ = 830;   // (800+30) 830  装备图鉴-请求
	public const uint MSG_DISCIPLE_EQUIP_ATLAS_RSP = 831;   // (800+31) 831  装备图鉴-返回
	public const uint MSG_DISCIPLE_REFORGE_EQUIP_REQ = 832;   // (800+32) 832  装备重铸-请求
	public const uint MSG_DISCIPLE_REFORGE_EQUIP_RSP = 833;   // (800+33) 833  装备重铸-返回
	public const uint MSG_DISCIPLE_REPLACE_SKILL_REQ = 841;   // (800+41) 841  技能替换-请求
	public const uint MSG_DISCIPLE_REPLACE_SKILL_RSP = 842;   // (800+42) 842  技能替换-返回
	public const uint MSG_DISCIPLE_ADD_ABILITY_NTF = 851;   // (800+51) 851  词条添加-通知
	public const uint MSG_DISCIPLE_REMOVE_ABILITY_NTF = 852;   // (800+52) 852  词条删除-通知
	public const uint MSG_DISCIPLE_GRID_HP_UNLOCK_REQ = 861;   // (800+61) 861  背包损血解锁格子-请求
	public const uint MSG_DISCIPLE_GRID_HP_UNLOCK_RSP = 862;   // (800+62) 862  装背包损血解锁格子-回复
	public const uint MSG_DISCIPLE_GRID_UNLOCK_NTF = 863;   // (800+63) 863  背包解锁格子-通知
	public const uint MSG_SECT_UPGRADE_REQ = 901;   // (900+1) 901  宗门升级-请求
	public const uint MSG_SECT_UPGRADE_RSP = 902;   // (900+2) 902  宗门升级-返回
	public const uint MSG_SECT_UPGRADE_NTF = 903;   // (900+3) 903  宗门升级-通知
	public const uint MSG_ANTIQUE_UPDATE_NTF = 1001;   // (1000+1) 1001  古堡更新-通知
	public const uint MSG_ANTIQUE_UPGRADE_REQ = 1002;   // (1000+2) 1002  古堡升星-请求
	public const uint MSG_ANTIQUE_UPGRADE_RSP = 1003;   // (1000+3) 1003  古堡升星-回复
	public const uint MSG_STAMINA_BUY_REQ = 1101;   // (1100+1) 1101  体力购买-请求
	public const uint MSG_STAMINA_BUY_RSP = 1102;   // (1100+2) 1102  体力购买-返回
	public const uint MSG_STAMINA_NTF = 1103;   // (1100+3) 1103  体力购买-通知
	public const uint MSG_PERIODPRIZE_ITEM_CHANGED_NTF = 1110;   // (1100+10) 1110  时长奖励,项目变更
	public const uint MSG_PERIODPRIZE_ITEM_PURCHASE_REQ = 1111;   // (1100+11) 1111  购买物品
	public const uint MSG_PERIODPRIZE_ITEM_PURCHASE_RSP = 1112;   // (1100+12) 1112  时长奖励,项目变更
	public const uint MSG_CDKEY_WITHDRAW_REQ = 1120;   // (1100+20) 1120  兑换码-请求
	public const uint MSG_CDKEY_WITHDRAW_RSP = 1121;   // (1100+21) 1121  兑换码-回复
	public const uint MSG_CDKEY_WITHDRAW_NTF = 1122;   // (1100+22) 1122  兑换码-通知
	public const uint MSG_ARENA_LOAD_REQ = 1201;   // (1200+1) 1201  竞技场加载-请求
	public const uint MSG_ARENA_LOAD_RSP = 1202;   // (1200+2) 1202  竞技场加载-回复
	public const uint MSG_ARENA_GET_RANKING_REQ = 1206;   // (1200+6) 1206  获取竞技场排行榜-请求
	public const uint MSG_ARENA_GET_RANKING_RSP = 1207;   // (1200+7) 1207  获取竞技场排行榜-回复
	public const uint MSG_ARENA_RANK_CHANGED_NTF = 1208;   // (1200+8) 1208  竞技场排行变化-通知
	public const uint MSG_ARENA_REFRESH_OPP_REQ = 1211;   // (1200+11) 1211  竞技场刷新对手-请求
	public const uint MSG_ARENA_REFRESH_OPP_RSP = 1212;   // (1200+12) 1212  竞技场刷新对手-回复
	public const uint MSG_ARENA_REFRESH_OPP_NTF = 1213;   // (1200+13) 1213  竞技场刷新对手-通知
	public const uint MSG_ARENA_CHALLENGE_REQ = 1216;   // (1200+16) 1216  竞技场挑战-请求
	public const uint MSG_ARENA_CHALLENGE_RSP = 1217;   // (1200+17) 1217  竞技场挑战-回复
	public const uint MSG_ARENA_1_CHALLENGE_RESULT_NTF = 1218;   // (1200+18) 1218  竞技场挑战结构-通知
	public const uint MSG_ARENA_DISCIPLE_DETAIL_REQ = 1221;   // (1200+21) 1221  获取竞技场弟子详情-请求
	public const uint MSG_ARENA_DISCIPLE_DETAIL_RSP = 1222;   // (1200+22) 1222  获取竞技场弟子详情-回复
	public const uint MSG_GUIDE_SAVE_PROGRESS_REQ = 1251;   // (1250+1) 1251  引导数据保存-请求
	public const uint MSG_GUIDE_SAVE_PROGRESS_RSP = 1252;   // (1250+2) 1252  引导数据保存-回复
	public const uint MSG_GUIDE_LAUNCH_NTF = 1253;   // (1250+3) 1253  通知客户端引导触发-通知
	public const uint MSG_GUIDE_UPDATE_NTF = 1254;   // (1250+4) 1254  更新引导-通知
	public const uint MSG_GUIDE_SAVE_FREE_BUFF_REQ = 1255;   // (1250+5) 1255  自由数据保存
	public const uint MSG_GUIDE_SAVE_FREE_BUFF_RSP = 1256;   // (1250+6) 1256  回复
	public const uint MSG_SECTFORM_CHANGE_REQ = 1301;   // (1300+1) 1301  宗门大阵上下阵-请求
	public const uint MSG_SECTFORM_CHANGE_RSP = 1302;   // (1300+2) 1302  宗门大阵上下阵-返回
	public const uint MSG_SECTFORM_UPDATE_NTF = 1303;   // (1300+3) 1303  宗门状态变化-通知
	public const uint MSG_SHOP_RACK_CONTENT_CHANGED_NTF = 1401;   // (1400+1) 1401  商店变化消息-通知
	public const uint MSG_SHOP_LOAD_GOODS_REQ = 1402;   // (1400+2) 1402  打开商店-请求
	public const uint MSG_SHOP_LOAD_GOODS_RSP = 1403;   // (1400+3) 1403  打开商店-返回
	public const uint MSG_SHOP_BUY_GOODS_REQ = 1404;   // (1400+4) 1404  商店购买-请求
	public const uint MSG_SHOP_BUY_GOODS_RSP = 1405;   // (1400+5) 1405  商店购买-返回
	public const uint MSG_MAIL_GET_LIST_REQ = 1500;   // (1500+0) 1500  获取邮件列表REQ
	public const uint MSG_MAIL_GET_LIST_RSP = 1501;   // (1500+1) 1501  获取邮件列表RSP
	public const uint MSG_MAIL_OPEN_REQ = 1502;   // (1500+2) 1502  获取邮件详情REQ
	public const uint MSG_MAIL_OPEN_RSP = 1503;   // (1500+3) 1503  获取邮件详情RSP
	public const uint MSG_MAIL_DELETE_REQ = 1504;   // (1500+4) 1504  删除邮件REQ
	public const uint MSG_MAIL_DELETE_RSP = 1505;   // (1500+5) 1505  删除邮件RSP
	public const uint MSG_MAIL_GET_ATTACHMENT_REQ = 1506;   // (1500+6) 1506  领取邮件附件REQ
	public const uint MSG_MAIL_GET_ATTACHMENT_RSP = 1507;   // (1500+7) 1507  领取邮件附件RSP
	public const uint MSG_MAIL_NEW_MAIL_NTF = 1508;   // (1500+8) 1508  收到新邮件通知
	public const uint MSG_MAIL_DELETE_NTF = 1509;   // (1500+9) 1509  删除邮件通知
	public const uint MSG_LOOTBOX_UPDATE_NTF = 1601;   // (1600+1) 1601  盲盒信息变化-通知
	public const uint MSG_LOOTBOX_OPEN_REQ = 1602;   // (1600+2) 1602  开盲盒-请求
	public const uint MSG_LOOTBOX_OPEN_RSP = 1603;   // (1600+3) 1603  开盲盒-返回


	//  Msg header
    public TMsgHead stHead;   


	//  Msg id array
	private static int[] s_arrMsgID = new int[231] { 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 29, 30, 31, 32, 33, 34, 35, 60, 140, 141, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 300, 301, 302, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 400, 401, 402, 403, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 520, 521, 522, 523, 524, 525, 526, 527, 531, 532, 533, 541, 542, 543, 544, 545, 546, 547, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 641, 642, 643, 644, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 701, 702, 703, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 741, 742, 743, 801, 802, 811, 812, 813, 814, 815, 816, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 841, 842, 851, 852, 861, 862, 863, 901, 902, 903, 1001, 1002, 1003, 1101, 1102, 1103, 1110, 1111, 1112, 1120, 1121, 1122, 1201, 1202, 1206, 1207, 1208, 1211, 1212, 1213, 1216, 1217, 1218, 1221, 1222, 1251, 1252, 1253, 1254, 1255, 1256, 1301, 1302, 1303, 1401, 1402, 1403, 1404, 1405, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1601, 1602, 1603, };


	public TMSG_LOGIN_HANDSHAKE_REQ stTMSG_LOGIN_HANDSHAKE_REQ;   // MSG_LOGIN_HANDSHAKE_REQ   握手请求
	public TMSG_LOGIN_HANDSHAKE_RSP stTMSG_LOGIN_HANDSHAKE_RSP;   // MSG_LOGIN_HANDSHAKE_RSP   握手回复
	public TMSG_LOGIN_LOGIN_REQ stTMSG_LOGIN_LOGIN_REQ;   // MSG_LOGIN_LOGIN_REQ   登陆请求
	public TMSG_LOGIN_LOGIN_RSP stTMSG_LOGIN_LOGIN_RSP;   // MSG_LOGIN_LOGIN_RSP   登陆回复
	public TMSG_LOGIN_ERROR_NTF stTMSG_LOGIN_ERROR_NTF;   // MSG_LOGIN_ERROR_NTF   登陆错误通知
	public TMSG_LOGIN_NEW_ACCOUNT_NTF stTMSG_LOGIN_NEW_ACCOUNT_NTF;   // MSG_LOGIN_NEW_ACCOUNT_NTF   新账号通知
	public TMSG_LOGIN_BAN_ACCOUNT_NTF stTMSG_LOGIN_BAN_ACCOUNT_NTF;   // MSG_LOGIN_BAN_ACCOUNT_NTF   封号通知
	public TMSG_LOGIN_AUTO_LOGIN_REQ stTMSG_LOGIN_AUTO_LOGIN_REQ;   // MSG_LOGIN_AUTO_LOGIN_REQ   自动登录请求
	public TMSG_LOGIN_UPDATE_ALSESSION_NTF stTMSG_LOGIN_UPDATE_ALSESSION_NTF;   // MSG_LOGIN_UPDATE_ALSESSION_NTF   通知客户端更新自动登录Session
	public TMSG_LOGIN_KICKOUT_NTF stTMSG_LOGIN_KICKOUT_NTF;   // MSG_LOGIN_KICKOUT_NTF   踢人通知
	public TMSG_LOGIN_QUERY_ALL_ROLE_REQ stTMSG_LOGIN_QUERY_ALL_ROLE_REQ;   // MSG_LOGIN_QUERY_ALL_ROLE_REQ   查询所有区角色
	public TMSG_LOGIN_QUERY_ALL_ROLE_RSP stTMSG_LOGIN_QUERY_ALL_ROLE_RSP;   // MSG_LOGIN_QUERY_ALL_ROLE_RSP   
	public TMSG_LOGIN_QUERY_ALL_ROLE_NTF stTMSG_LOGIN_QUERY_ALL_ROLE_NTF;   // MSG_LOGIN_QUERY_ALL_ROLE_NTF   
	public TMSG_LOGIN_NOACC_INWORLD_NTF stTMSG_LOGIN_NOACC_INWORLD_NTF;   // MSG_LOGIN_NOACC_INWORLD_NTF   没帐号通知
	public TMSG_LOGIN_CREATE_ACC_INWORLD_REQ stTMSG_LOGIN_CREATE_ACC_INWORLD_REQ;   // MSG_LOGIN_CREATE_ACC_INWORLD_REQ   
	public TMSG_LOGIN_CREATE_ACC_INWORLD_RSP stTMSG_LOGIN_CREATE_ACC_INWORLD_RSP;   // MSG_LOGIN_CREATE_ACC_INWORLD_RSP   
	public TMSG_LOGIN_GEN_WORLD_ALS_REQ stTMSG_LOGIN_GEN_WORLD_ALS_REQ;   // MSG_LOGIN_GEN_WORLD_ALS_REQ   查询其它区的ALS
	public TMSG_LOGIN_GEN_WORLD_ALS_RSP stTMSG_LOGIN_GEN_WORLD_ALS_RSP;   // MSG_LOGIN_GEN_WORLD_ALS_RSP   
	public TMSG_LOGIN_ACCOUNT_UNDELETE_REQ stTMSG_LOGIN_ACCOUNT_UNDELETE_REQ;   // MSG_LOGIN_ACCOUNT_UNDELETE_REQ   undel account
	public TMSG_LOGIN_ACCOUNT_UNDELETE_RSP stTMSG_LOGIN_ACCOUNT_UNDELETE_RSP;   // MSG_LOGIN_ACCOUNT_UNDELETE_RSP   
	public TMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF stTMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF;   // MSG_LOGIN_ACCOUNT_DELETE_STATE_NTF   
	public TMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF stTMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF;   // MSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF   
	public TMSG_LOGIN_BANROLE_NTF stTMSG_LOGIN_BANROLE_NTF;   // MSG_LOGIN_BANROLE_NTF    封号NTF
	public TMSG_LOGIN_SERVERMAINTAIN_NTF stTMSG_LOGIN_SERVERMAINTAIN_NTF;   // MSG_LOGIN_SERVERMAINTAIN_NTF    服务器维护NTF
	public TMSG_LOGIN_WORLDOPENDATE_NTF stTMSG_LOGIN_WORLDOPENDATE_NTF;   // MSG_LOGIN_WORLDOPENDATE_NTF    开区时间通知NTF
	public TMSG_LOBBY_ERROR_NTF stTMSG_LOBBY_ERROR_NTF;   // MSG_LOBBY_ERROR_NTF   大厅错误通知
	public TMSG_LEECHDOM_USE_REQ stTMSG_LEECHDOM_USE_REQ;   // MSG_LEECHDOM_USE_REQ   物品使用
	public TMSG_LEECHDOM_USE_RSP stTMSG_LEECHDOM_USE_RSP;   // MSG_LEECHDOM_USE_RSP   物品使用
	public TMSG_ACTION_LUA_REQUEST_REQ stTMSG_ACTION_LUA_REQUEST_REQ;   // MSG_ACTION_LUA_REQUEST_REQ   客户端Lua请求
	public TMSG_ACTION_LUA_REQUEST_RSP stTMSG_ACTION_LUA_REQUEST_RSP;   // MSG_ACTION_LUA_REQUEST_RSP   服务器Lua回复
	public TMSG_ACTION_LUA_SCRIPT_NTF stTMSG_ACTION_LUA_SCRIPT_NTF;   // MSG_ACTION_LUA_SCRIPT_NTF   调用客户端方法
	public TNullStruct stTNullStruct;   // MSG_ACTION_QUERY_TIME_REQ   时间查询
	public TMSG_ACTION_QUERY_TIME_RSP stTMSG_ACTION_QUERY_TIME_RSP;   // MSG_ACTION_QUERY_TIME_RSP   时间查询
	public TMSG_ACTION_TESTCASE_NTF stTMSG_ACTION_TESTCASE_NTF;   // MSG_ACTION_TESTCASE_NTF   测试用例使用
	public TMSG_ACTION_SYNC_FLAG_NTF stTMSG_ACTION_SYNC_FLAG_NTF;   // MSG_ACTION_SYNC_FLAG_NTF   更新同步标记
	public TMSG_ACTION_OUT_OF_SYNC_NTF stTMSG_ACTION_OUT_OF_SYNC_NTF;   // MSG_ACTION_OUT_OF_SYNC_NTF   同步异常
	public TMSG_ACTION_SHOW_PRIZE_NTF stTMSG_ACTION_SHOW_PRIZE_NTF;   // MSG_ACTION_SHOW_PRIZE_NTF   通知奖励
	public TMSG_ACTION_LUALIKE_SCRIPT_NTF stTMSG_ACTION_LUALIKE_SCRIPT_NTF;   // MSG_ACTION_LUALIKE_SCRIPT_NTF   调用客户端方法
	public TMSG_ENTITY_CREATE_ROLE_NTF stTMSG_ENTITY_CREATE_ROLE_NTF;   // MSG_ENTITY_CREATE_ROLE_NTF   创建主角通知
	public TMSG_ENTITY_CREATE_ROLE_PART_NTF stTMSG_ENTITY_CREATE_ROLE_PART_NTF;   // MSG_ENTITY_CREATE_ROLE_PART_NTF   创建主角部件通知
	public TMSG_ENTITY_CREATE_PERSON_NTF stTMSG_ENTITY_CREATE_PERSON_NTF;   // MSG_ENTITY_CREATE_PERSON_NTF   通知客户端创建Person(非主角)
	public TMSG_ENTITY_CREATE_LEECHDOM_NTF stTMSG_ENTITY_CREATE_LEECHDOM_NTF;   // MSG_ENTITY_CREATE_LEECHDOM_NTF   通知客户端创建Leechdom
	public TMSG_ENTITY_DESTROY_NTF stTMSG_ENTITY_DESTROY_NTF;   // MSG_ENTITY_DESTROY_NTF   通知客户端删除实体对象
	public TMSG_ENTITY_UPDATE_PROP_NTF stTMSG_ENTITY_UPDATE_PROP_NTF;   // MSG_ENTITY_UPDATE_PROP_NTF   通知客户端Entity属性更新
	public TMSG_ENTITY_SET_PROP_REQ stTMSG_ENTITY_SET_PROP_REQ;   // MSG_ENTITY_SET_PROP_REQ   客户端修改Entity属性
	public TMSG_ENTITY_SET_PROP_RSP stTMSG_ENTITY_SET_PROP_RSP;   // MSG_ENTITY_SET_PROP_RSP   
	public TMSG_ENTITY_RENAME_REQ stTMSG_ENTITY_RENAME_REQ;   // MSG_ENTITY_RENAME_REQ   角色改名请求
	public TMSG_ENTITY_RENAME_RSP stTMSG_ENTITY_RENAME_RSP;   // MSG_ENTITY_RENAME_RSP   
	public TMSG_CLIENT_LOGIN_OSS_REQ stTMSG_CLIENT_LOGIN_OSS_REQ;   // MSG_CLIENT_LOGIN_OSS_REQ   客户端登录上报打点信息
	public TMSG_CLIENT_LOGIN_OSS_RSP stTMSG_CLIENT_LOGIN_OSS_RSP;   // MSG_CLIENT_LOGIN_OSS_RSP   
	public TMSG_SERVER_TIME_REQ stTMSG_SERVER_TIME_REQ;   // MSG_SERVER_TIME_REQ   客户端请求服务器事件
	public TMSG_SERVER_TIME_RSP stTMSG_SERVER_TIME_RSP;   // MSG_SERVER_TIME_RSP   
	public TMSG_SKEP_CREATE_NTF stTMSG_SKEP_CREATE_NTF;   // MSG_SKEP_CREATE_NTF   创建篮子-通知
	public TMSG_SKEP_DESTROY_NTF stTMSG_SKEP_DESTROY_NTF;   // MSG_SKEP_DESTROY_NTF   销毁篮子-通知
	public TMSG_SKEP_ADD_ITEM_NTF stTMSG_SKEP_ADD_ITEM_NTF;   // MSG_SKEP_ADD_ITEM_NTF   添加物品
	public TMSG_SKEP_REMOVE_ITEM_NTF stTMSG_SKEP_REMOVE_ITEM_NTF;   // MSG_SKEP_REMOVE_ITEM_NTF   移除物品
	public TMSG_ROOM_USER_ENTER_REQ stTMSG_ROOM_USER_ENTER_REQ;   // MSG_ROOM_USER_ENTER_REQ   进入房间req
	public TMSG_ROOM_USER_ENTER_RSP stTMSG_ROOM_USER_ENTER_RSP;   // MSG_ROOM_USER_ENTER_RSP   
	public TMSG_ROOM_USER_ENTER_NTF stTMSG_ROOM_USER_ENTER_NTF;   // MSG_ROOM_USER_ENTER_NTF   
	public TMSG_ROOM_USER_LEAVE_REQ stTMSG_ROOM_USER_LEAVE_REQ;   // MSG_ROOM_USER_LEAVE_REQ   离开房间req
	public TMSG_ROOM_USER_LEAVE_RSP stTMSG_ROOM_USER_LEAVE_RSP;   // MSG_ROOM_USER_LEAVE_RSP   
	public TMSG_ROOM_USER_LEAVE_NTF stTMSG_ROOM_USER_LEAVE_NTF;   // MSG_ROOM_USER_LEAVE_NTF   
	public TMSG_ROOM_USER_ENTER_COMPLETE_NTF stTMSG_ROOM_USER_ENTER_COMPLETE_NTF;   // MSG_ROOM_USER_ENTER_COMPLETE_NTF   
	public TMSG_ROOM_SEARCH_REQ stTMSG_ROOM_SEARCH_REQ;   // MSG_ROOM_SEARCH_REQ   查找房间req
	public TMSG_ROOM_SEARCH_RSP stTMSG_ROOM_SEARCH_RSP;   // MSG_ROOM_SEARCH_RSP   
	public TMSG_ROOM_GET_ROOMDESC_REQ stTMSG_ROOM_GET_ROOMDESC_REQ;   // MSG_ROOM_GET_ROOMDESC_REQ   查询房间信息req
	public TMSG_ROOM_GET_ROOMDESC_RSP stTMSG_ROOM_GET_ROOMDESC_RSP;   // MSG_ROOM_GET_ROOMDESC_RSP   
	public TMSG_MINIGAME_SET_PROP_REQ stTMSG_MINIGAME_SET_PROP_REQ;   // MSG_MINIGAME_SET_PROP_REQ   设置属性req
	public TMSG_MINIGAME_SET_PROP_RSP stTMSG_MINIGAME_SET_PROP_RSP;   // MSG_MINIGAME_SET_PROP_RSP   
	public TMSG_MINIGAME_GET_PROP_REQ stTMSG_MINIGAME_GET_PROP_REQ;   // MSG_MINIGAME_GET_PROP_REQ   获取属性req
	public TMSG_MINIGAME_GET_PROP_RSP stTMSG_MINIGAME_GET_PROP_RSP;   // MSG_MINIGAME_GET_PROP_RSP   
	public TMSG_MINIGAME_PROP_UPDATED_NTF stTMSG_MINIGAME_PROP_UPDATED_NTF;   // MSG_MINIGAME_PROP_UPDATED_NTF   属性变更通知
	public TMSG_MINIGAME_RESET_ROOM_PROP_REQ stTMSG_MINIGAME_RESET_ROOM_PROP_REQ;   // MSG_MINIGAME_RESET_ROOM_PROP_REQ   (复位)清除房间属性
	public TMSG_MINIGAME_RESET_ROOM_PROP_RSP stTMSG_MINIGAME_RESET_ROOM_PROP_RSP;   // MSG_MINIGAME_RESET_ROOM_PROP_RSP   
	public TMSG_MINIGAME_RESET_ROOM_PROP_NTF stTMSG_MINIGAME_RESET_ROOM_PROP_NTF;   // MSG_MINIGAME_RESET_ROOM_PROP_NTF   
	public TMSG_MINIGAME_BROADCAST_MSG_REQ stTMSG_MINIGAME_BROADCAST_MSG_REQ;   // MSG_MINIGAME_BROADCAST_MSG_REQ   玩法消息广播
	public TMSG_MINIGAME_BROADCAST_MSG_RSP stTMSG_MINIGAME_BROADCAST_MSG_RSP;   // MSG_MINIGAME_BROADCAST_MSG_RSP   
	public TMSG_MINIGAME_BROADCAST_MSG_NTF stTMSG_MINIGAME_BROADCAST_MSG_NTF;   // MSG_MINIGAME_BROADCAST_MSG_NTF   
	public TMSG_NET_OBJ_CREATE_NTF stTMSG_NET_OBJ_CREATE_NTF;   // MSG_NET_OBJ_CREATE_NTF   NetObject创建通知
	public TMSG_NET_OBJ_PROP_CHANGE_REQ stTMSG_NET_OBJ_PROP_CHANGE_REQ;   // MSG_NET_OBJ_PROP_CHANGE_REQ   NetObject创建通知
	public TMSG_NET_OBJ_PROP_UPDATED_NTF stTMSG_NET_OBJ_PROP_UPDATED_NTF;   // MSG_NET_OBJ_PROP_UPDATED_NTF   NetObject更新通知
	public TMSG_NET_OBJ_DESTROY_NTF stTMSG_NET_OBJ_DESTROY_NTF;   // MSG_NET_OBJ_DESTROY_NTF   NetObject销毁通知
	public TMSG_NET_OBJ_SYNC_NTF stTMSG_NET_OBJ_SYNC_NTF;   // MSG_NET_OBJ_SYNC_NTF   NetObject 同步状态(开始/结束)通知
	public TMSG_NET_OBJ_SYNC_ELEMENT_NTF stTMSG_NET_OBJ_SYNC_ELEMENT_NTF;   // MSG_NET_OBJ_SYNC_ELEMENT_NTF   NetObject 单一实体(开始/结束) 通知
	public TMSG_NET_OBJ_DESTROY_BY_ROLE_NTF stTMSG_NET_OBJ_DESTROY_BY_ROLE_NTF;   // MSG_NET_OBJ_DESTROY_BY_ROLE_NTF   NetObject按角色销毁通知
	public TMSG_DISCIPLE_BUILD_DISCIPLE_REQ stTMSG_DISCIPLE_BUILD_DISCIPLE_REQ;   // MSG_DISCIPLE_BUILD_DISCIPLE_REQ   创建弟子
	public TMSG_DISCIPLE_BUILD_DISCIPLE_RSP stTMSG_DISCIPLE_BUILD_DISCIPLE_RSP;   // MSG_DISCIPLE_BUILD_DISCIPLE_RSP   
	public TMSG_DISCIPLE_TUINING_REQ stTMSG_DISCIPLE_TUINING_REQ;   // MSG_DISCIPLE_TUINING_REQ   选择功法、天赋和加点等
	public TMSG_DISCIPLE_TUINING_RSP stTMSG_DISCIPLE_TUINING_RSP;   // MSG_DISCIPLE_TUINING_RSP   
	public TMSG_DISCIPLE_WANDERING_START_REQ stTMSG_DISCIPLE_WANDERING_START_REQ;   // MSG_DISCIPLE_WANDERING_START_REQ   开始游历-请求
	public TMSG_DISCIPLE_WANDERING_START_RSP stTMSG_DISCIPLE_WANDERING_START_RSP;   // MSG_DISCIPLE_WANDERING_START_RSP   
	public TMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF stTMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF;   // MSG_DISCIPLE_WANDERING_EVENT_LOG_NTF   游历事件Log通知
	public TMSG_DISCIPLE_WANDERING_FINISH_REQ stTMSG_DISCIPLE_WANDERING_FINISH_REQ;   // MSG_DISCIPLE_WANDERING_FINISH_REQ     结束游历-主动请求
	public TMSG_DISCIPLE_WANDERING_FINISH_RSP stTMSG_DISCIPLE_WANDERING_FINISH_RSP;   // MSG_DISCIPLE_WANDERING_FINISH_RSP   
	public TMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF stTMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF;   // MSG_DISCIPLE_WANDERING_WILL_FINISH_NTF    游历即将结束 
	public TMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ;   // MSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ   游历-下一天/关-请求
	public TMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP;   // MSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP   
	public TMSG_DISCIPLE_WANDERING_CHOOSE_REQ stTMSG_DISCIPLE_WANDERING_CHOOSE_REQ;   // MSG_DISCIPLE_WANDERING_CHOOSE_REQ   游历-提交选项
	public TMSG_DISCIPLE_WANDERING_CHOOSE_RSP stTMSG_DISCIPLE_WANDERING_CHOOSE_RSP;   // MSG_DISCIPLE_WANDERING_CHOOSE_RSP   
	public TMSG_DISCIPLE_WANDERING_REMOVE_REQ stTMSG_DISCIPLE_WANDERING_REMOVE_REQ;   // MSG_DISCIPLE_WANDERING_REMOVE_REQ   游历-删除弟子
	public TMSG_DISCIPLE_WANDERING_REMOVE_RSP stTMSG_DISCIPLE_WANDERING_REMOVE_RSP;   // MSG_DISCIPLE_WANDERING_REMOVE_RSP   
	public TMSG_DISCIPLE_WANDERING_CLOSE_REQ stTMSG_DISCIPLE_WANDERING_CLOSE_REQ;   // MSG_DISCIPLE_WANDERING_CLOSE_REQ   游历-关闭界面-对应Start请求
	public TMSG_DISCIPLE_WANDERING_CLOSE_RSP stTMSG_DISCIPLE_WANDERING_CLOSE_RSP;   // MSG_DISCIPLE_WANDERING_CLOSE_RSP   
	public TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF;   // MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF   游历-轮盘-开始通知
	public TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ;   // MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ   游历-轮盘-加载状态请求
	public TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP;   // MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP   
	public TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ;   // MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ   游历-轮盘-请求抽奖
	public TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP;   // MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP   
	public TMSG_DISCIPLE_WANDERING_GODEXAM_REQ stTMSG_DISCIPLE_WANDERING_GODEXAM_REQ;   // MSG_DISCIPLE_WANDERING_GODEXAM_REQ   游历-渡劫-请求
	public TMSG_DISCIPLE_WANDERING_GODEXAM_RSP stTMSG_DISCIPLE_WANDERING_GODEXAM_RSP;   // MSG_DISCIPLE_WANDERING_GODEXAM_RSP   
	public TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ;   // MSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ   游历-装备商店购买-请求
	public TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP;   // MSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP   游历-装备商店购买-返回
	public TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ;   // MSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ   游历-装备商店数据加载-请求
	public TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP;   // MSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP   游历-装备商店数据加载-返回
	public TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ;   // MSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ   游历-装备商店关闭-请求
	public TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP;   // MSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP   游历-装备商店关闭-返回
	public TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ;   // MSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ   游历-装备商店刷新-请求
	public TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP;   // MSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP   游历-装备商店刷新-返回
	public TMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF stTMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF;   // MSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF   游历-物品变化-通知
	public TMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF stTMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF;   // MSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF   游历-物品全量-通知
	public TMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF stTMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF;   // MSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF   游历-难度变化-通知
	public TMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF stTMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF;   // MSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF   游历内系统数据-通知
	public TMSG_WANDERING_ABILITY_SELECT_NTF stTMSG_WANDERING_ABILITY_SELECT_NTF;   // MSG_WANDERING_ABILITY_SELECT_NTF   选择词条 通知
	public TMSG_WANDERING_ABILITY_SELECT_REQ stTMSG_WANDERING_ABILITY_SELECT_REQ;   // MSG_WANDERING_ABILITY_SELECT_REQ   选择词条 请求
	public TMSG_WANDERING_ABILITY_SELECT_RSP stTMSG_WANDERING_ABILITY_SELECT_RSP;   // MSG_WANDERING_ABILITY_SELECT_RSP   选择词条 回复
	public TMSG_WANDERING_ABILITY_SELECT_LOAD_REQ stTMSG_WANDERING_ABILITY_SELECT_LOAD_REQ;   // MSG_WANDERING_ABILITY_SELECT_LOAD_REQ   主动加载词条状态 请求
	public TMSG_WANDERING_ABILITY_SELECT_LOAD_RSP stTMSG_WANDERING_ABILITY_SELECT_LOAD_RSP;   // MSG_WANDERING_ABILITY_SELECT_LOAD_RSP   主动加载词条状态 回复
	public TMSG_WANDERING_EQUIP_SELECT_NEXT_REQ stTMSG_WANDERING_EQUIP_SELECT_NEXT_REQ;   // MSG_WANDERING_EQUIP_SELECT_NEXT_REQ   装备选择下一页 请求
	public TMSG_WANDERING_EQUIP_SELECT_NEXT_RSP stTMSG_WANDERING_EQUIP_SELECT_NEXT_RSP;   // MSG_WANDERING_EQUIP_SELECT_NEXT_RSP   装备选择下一页 回复
	public TMSG_WANDERING_EQUIP_SELECT_LOAD_REQ stTMSG_WANDERING_EQUIP_SELECT_LOAD_REQ;   // MSG_WANDERING_EQUIP_SELECT_LOAD_REQ   主动加载装备事件数据 请求
	public TMSG_WANDERING_EQUIP_SELECT_LOAD_RSP stTMSG_WANDERING_EQUIP_SELECT_LOAD_RSP;   // MSG_WANDERING_EQUIP_SELECT_LOAD_RSP   主动加载装备事件数据 回复
	public TMSG_WANDERING_EQUIP_SELECT_NTF stTMSG_WANDERING_EQUIP_SELECT_NTF;   // MSG_WANDERING_EQUIP_SELECT_NTF   装备事件通知
	public TMSG_BATTLE_INIT_CONTEXT_NTF stTMSG_BATTLE_INIT_CONTEXT_NTF;   // MSG_BATTLE_INIT_CONTEXT_NTF   战斗现场通知
	public TMSG_BATTLE_INPUT_REQ stTMSG_BATTLE_INPUT_REQ;   // MSG_BATTLE_INPUT_REQ   战斗指令输入-请求
	public TMSG_BATTLE_INPUT_RSP stTMSG_BATTLE_INPUT_RSP;   // MSG_BATTLE_INPUT_RSP   
	public TMSG_BATTLE_RESULT_NTF stTMSG_BATTLE_RESULT_NTF;   // MSG_BATTLE_RESULT_NTF   整场战斗结束-通知
	public TMSG_BATTLE_ROUND_OVER_NTF stTMSG_BATTLE_ROUND_OVER_NTF;   // MSG_BATTLE_ROUND_OVER_NTF   战斗回合结束-通知
	public TMSG_BATTLE_PROP_UPDATED_NTF stTMSG_BATTLE_PROP_UPDATED_NTF;   // MSG_BATTLE_PROP_UPDATED_NTF   战斗属性变更-通知
	public TMSG_BATTLE_SKILL_UPDATED_NTF stTMSG_BATTLE_SKILL_UPDATED_NTF;   // MSG_BATTLE_SKILL_UPDATED_NTF   战斗技能变更-通知
	public TMSG_BATTLE_ACTION_USE_SKILL_NTF stTMSG_BATTLE_ACTION_USE_SKILL_NTF;   // MSG_BATTLE_ACTION_USE_SKILL_NTF   战斗行动通知-使用技能
	public TMSG_BATTLE_ACTION_INJURED_NTF stTMSG_BATTLE_ACTION_INJURED_NTF;   // MSG_BATTLE_ACTION_INJURED_NTF   战斗行动通知-受伤
	public TMSG_BATTLE_ACTION_DEATH_NTF stTMSG_BATTLE_ACTION_DEATH_NTF;   // MSG_BATTLE_ACTION_DEATH_NTF   战斗行动通知-死亡
	public TMSG_BATTLE_CONTEXT_PACK_NTF stTMSG_BATTLE_CONTEXT_PACK_NTF;   // MSG_BATTLE_CONTEXT_PACK_NTF   战斗完整战报通知
	public TMSG_BATTLE_CONFIRM_RESULT_REQ stTMSG_BATTLE_CONFIRM_RESULT_REQ;   // MSG_BATTLE_CONFIRM_RESULT_REQ   请求战斗结果（播完战报之后）
	public TMSG_BATTLE_CONFIRM_RESULT_RSP stTMSG_BATTLE_CONFIRM_RESULT_RSP;   // MSG_BATTLE_CONFIRM_RESULT_RSP   
	public TMSG_FORMATION_SET_LAYOUT_REQ stTMSG_FORMATION_SET_LAYOUT_REQ;   // MSG_FORMATION_SET_LAYOUT_REQ   设置阵法英雄req
	public TMSG_FORMATION_SET_LAYOUT_RSP stTMSG_FORMATION_SET_LAYOUT_RSP;   // MSG_FORMATION_SET_LAYOUT_RSP   
	public TMSG_FORMATION_UPDATE_NTF stTMSG_FORMATION_UPDATE_NTF;   // MSG_FORMATION_UPDATE_NTF   阵法更新通知
	public TMSG_SEEDING_CREATE_NTF stTMSG_SEEDING_CREATE_NTF;   // MSG_SEEDING_CREATE_NTF   胚子添加-通知
	public TMSG_SEEDING_UPDATE_PROP_NTF stTMSG_SEEDING_UPDATE_PROP_NTF;   // MSG_SEEDING_UPDATE_PROP_NTF   胚子变更-通知
	public TMSG_DISCIPLE_CREATE_NTF stTMSG_DISCIPLE_CREATE_NTF;   // MSG_DISCIPLE_CREATE_NTF   弟子添加-通知
	public TMSG_DISCIPLE_UPDATE_PROP_NTF stTMSG_DISCIPLE_UPDATE_PROP_NTF;   // MSG_DISCIPLE_UPDATE_PROP_NTF   弟子变更-通知
	public TMSG_DISCIPLE_RENAME_REQ stTMSG_DISCIPLE_RENAME_REQ;   // MSG_DISCIPLE_RENAME_REQ   弟子改名-请求
	public TMSG_DISCIPLE_RENAME_RSP stTMSG_DISCIPLE_RENAME_RSP;   // MSG_DISCIPLE_RENAME_RSP   弟子改名-返回
	public TMSG_SEEDING_UPGRADE_REQ stTMSG_SEEDING_UPGRADE_REQ;   // MSG_SEEDING_UPGRADE_REQ   胚子升星-请求
	public TMSG_SEEDING_UPGRADE_RSP stTMSG_SEEDING_UPGRADE_RSP;   // MSG_SEEDING_UPGRADE_RSP   胚子升星-返回
	public TMSG_EQUIP_CREATE_NTF stTMSG_EQUIP_CREATE_NTF;   // MSG_EQUIP_CREATE_NTF   装备添加-通知
	public TMSG_EQUIP_UPDATE_PROP_NTF stTMSG_EQUIP_UPDATE_PROP_NTF;   // MSG_EQUIP_UPDATE_PROP_NTF   装备变更-通知
	public TMSG_EQUIP_DELETE_NTF stTMSG_EQUIP_DELETE_NTF;   // MSG_EQUIP_DELETE_NTF   装备删除-通知
	public TMSG_DISCIPLE_MOVE_EQUIP_REQ stTMSG_DISCIPLE_MOVE_EQUIP_REQ;   // MSG_DISCIPLE_MOVE_EQUIP_REQ   装备摆放-请求
	public TMSG_DISCIPLE_MOVE_EQUIP_RSP stTMSG_DISCIPLE_MOVE_EQUIP_RSP;   // MSG_DISCIPLE_MOVE_EQUIP_RSP   装备摆放-返回
	public TMSG_DISCIPLE_DELETE_EQUIP_REQ stTMSG_DISCIPLE_DELETE_EQUIP_REQ;   // MSG_DISCIPLE_DELETE_EQUIP_REQ   装备删除-请求
	public TMSG_DISCIPLE_DELETE_EQUIP_RSP stTMSG_DISCIPLE_DELETE_EQUIP_RSP;   // MSG_DISCIPLE_DELETE_EQUIP_RSP   装备删除-返回
	public TMSG_DISCIPLE_COMPOSE_EQUIP_REQ stTMSG_DISCIPLE_COMPOSE_EQUIP_REQ;   // MSG_DISCIPLE_COMPOSE_EQUIP_REQ   装备合成-请求
	public TMSG_DISCIPLE_COMPOSE_EQUIP_RSP stTMSG_DISCIPLE_COMPOSE_EQUIP_RSP;   // MSG_DISCIPLE_COMPOSE_EQUIP_RSP   装备合成-返回
	public TMSG_DISCIPLE_EQUIP_ATLAS_REQ stTMSG_DISCIPLE_EQUIP_ATLAS_REQ;   // MSG_DISCIPLE_EQUIP_ATLAS_REQ   装备图鉴-请求
	public TMSG_DISCIPLE_EQUIP_ATLAS_RSP stTMSG_DISCIPLE_EQUIP_ATLAS_RSP;   // MSG_DISCIPLE_EQUIP_ATLAS_RSP   装备图鉴-返回
	public TMSG_DISCIPLE_REFORGE_EQUIP_REQ stTMSG_DISCIPLE_REFORGE_EQUIP_REQ;   // MSG_DISCIPLE_REFORGE_EQUIP_REQ   装备重铸-请求
	public TMSG_DISCIPLE_REFORGE_EQUIP_RSP stTMSG_DISCIPLE_REFORGE_EQUIP_RSP;   // MSG_DISCIPLE_REFORGE_EQUIP_RSP   装备重铸-返回
	public TMSG_DISCIPLE_REPLACE_SKILL_REQ stTMSG_DISCIPLE_REPLACE_SKILL_REQ;   // MSG_DISCIPLE_REPLACE_SKILL_REQ   技能替换-请求
	public TMSG_DISCIPLE_REPLACE_SKILL_RSP stTMSG_DISCIPLE_REPLACE_SKILL_RSP;   // MSG_DISCIPLE_REPLACE_SKILL_RSP   技能替换-返回
	public TMSG_DISCIPLE_ADD_ABILITY_NTF stTMSG_DISCIPLE_ADD_ABILITY_NTF;   // MSG_DISCIPLE_ADD_ABILITY_NTF   词条添加-通知
	public TMSG_DISCIPLE_REMOVE_ABILITY_NTF stTMSG_DISCIPLE_REMOVE_ABILITY_NTF;   // MSG_DISCIPLE_REMOVE_ABILITY_NTF   词条删除-通知
	public TMSG_DISCIPLE_GRID_HP_UNLOCK_REQ stTMSG_DISCIPLE_GRID_HP_UNLOCK_REQ;   // MSG_DISCIPLE_GRID_HP_UNLOCK_REQ   背包损血解锁格子-请求
	public TMSG_DISCIPLE_GRID_HP_UNLOCK_RSP stTMSG_DISCIPLE_GRID_HP_UNLOCK_RSP;   // MSG_DISCIPLE_GRID_HP_UNLOCK_RSP   装背包损血解锁格子-回复
	public TMSG_DISCIPLE_GRID_UNLOCK_NTF stTMSG_DISCIPLE_GRID_UNLOCK_NTF;   // MSG_DISCIPLE_GRID_UNLOCK_NTF   背包解锁格子-通知
	public TMSG_SECT_UPGRADE_REQ stTMSG_SECT_UPGRADE_REQ;   // MSG_SECT_UPGRADE_REQ   宗门升级-请求
	public TMSG_SECT_UPGRADE_RSP stTMSG_SECT_UPGRADE_RSP;   // MSG_SECT_UPGRADE_RSP   宗门升级-返回
	public TMSG_SECT_UPGRADE_NTF stTMSG_SECT_UPGRADE_NTF;   // MSG_SECT_UPGRADE_NTF   宗门升级-通知
	public TMSG_ANTIQUE_UPDATE_NTF stTMSG_ANTIQUE_UPDATE_NTF;   // MSG_ANTIQUE_UPDATE_NTF   古堡更新-通知
	public TMSG_ANTIQUE_UPGRADE_REQ stTMSG_ANTIQUE_UPGRADE_REQ;   // MSG_ANTIQUE_UPGRADE_REQ   古堡升星-请求
	public TMSG_ANTIQUE_UPGRADE_RSP stTMSG_ANTIQUE_UPGRADE_RSP;   // MSG_ANTIQUE_UPGRADE_RSP   古堡升星-回复
	public TMSG_STAMINA_BUY_REQ stTMSG_STAMINA_BUY_REQ;   // MSG_STAMINA_BUY_REQ   体力购买-请求
	public TMSG_STAMINA_BUY_RSP stTMSG_STAMINA_BUY_RSP;   // MSG_STAMINA_BUY_RSP   体力购买-返回
	public TMSG_STAMINA_NTF stTMSG_STAMINA_NTF;   // MSG_STAMINA_NTF   体力购买-通知
	public TMSG_PERIODPRIZE_ITEM_CHANGED_NTF stTMSG_PERIODPRIZE_ITEM_CHANGED_NTF;   // MSG_PERIODPRIZE_ITEM_CHANGED_NTF   时长奖励,项目变更
	public TMSG_PERIODPRIZE_ITEM_PURCHASE_REQ stTMSG_PERIODPRIZE_ITEM_PURCHASE_REQ;   // MSG_PERIODPRIZE_ITEM_PURCHASE_REQ   购买物品
	public TMSG_PERIODPRIZE_ITEM_PURCHASE_RSP stTMSG_PERIODPRIZE_ITEM_PURCHASE_RSP;   // MSG_PERIODPRIZE_ITEM_PURCHASE_RSP   时长奖励,项目变更
	public TMSG_CDKEY_WITHDRAW_REQ stTMSG_CDKEY_WITHDRAW_REQ;   // MSG_CDKEY_WITHDRAW_REQ   兑换码-请求
	public TMSG_CDKEY_WITHDRAW_RSP stTMSG_CDKEY_WITHDRAW_RSP;   // MSG_CDKEY_WITHDRAW_RSP   兑换码-回复
	public TMSG_CDKEY_WITHDRAW_NTF stTMSG_CDKEY_WITHDRAW_NTF;   // MSG_CDKEY_WITHDRAW_NTF   兑换码-通知
	public TMSG_ARENA_LOAD_REQ stTMSG_ARENA_LOAD_REQ;   // MSG_ARENA_LOAD_REQ   竞技场加载-请求
	public TMSG_ARENA_LOAD_RSP stTMSG_ARENA_LOAD_RSP;   // MSG_ARENA_LOAD_RSP   竞技场加载-回复
	public TMSG_ARENA_GET_RANKING_REQ stTMSG_ARENA_GET_RANKING_REQ;   // MSG_ARENA_GET_RANKING_REQ   获取竞技场排行榜-请求
	public TMSG_ARENA_GET_RANKING_RSP stTMSG_ARENA_GET_RANKING_RSP;   // MSG_ARENA_GET_RANKING_RSP   获取竞技场排行榜-回复
	public TMSG_ARENA_RANK_CHANGED_NTF stTMSG_ARENA_RANK_CHANGED_NTF;   // MSG_ARENA_RANK_CHANGED_NTF   竞技场排行变化-通知
	public TMSG_ARENA_REFRESH_OPP_REQ stTMSG_ARENA_REFRESH_OPP_REQ;   // MSG_ARENA_REFRESH_OPP_REQ   竞技场刷新对手-请求
	public TMSG_ARENA_REFRESH_OPP_RSP stTMSG_ARENA_REFRESH_OPP_RSP;   // MSG_ARENA_REFRESH_OPP_RSP   竞技场刷新对手-回复
	public TMSG_ARENA_REFRESH_OPP_NTF stTMSG_ARENA_REFRESH_OPP_NTF;   // MSG_ARENA_REFRESH_OPP_NTF   竞技场刷新对手-通知
	public TMSG_ARENA_CHALLENGE_REQ stTMSG_ARENA_CHALLENGE_REQ;   // MSG_ARENA_CHALLENGE_REQ   竞技场挑战-请求
	public TMSG_ARENA_CHALLENGE_RSP stTMSG_ARENA_CHALLENGE_RSP;   // MSG_ARENA_CHALLENGE_RSP   竞技场挑战-回复
	public TMSG_ARENA_1_CHALLENGE_RESULT_NTF stTMSG_ARENA_1_CHALLENGE_RESULT_NTF;   // MSG_ARENA_1_CHALLENGE_RESULT_NTF   竞技场挑战结构-通知
	public TMSG_ARENA_DISCIPLE_DETAIL_REQ stTMSG_ARENA_DISCIPLE_DETAIL_REQ;   // MSG_ARENA_DISCIPLE_DETAIL_REQ   获取竞技场弟子详情-请求
	public TMSG_ARENA_DISCIPLE_DETAIL_RSP stTMSG_ARENA_DISCIPLE_DETAIL_RSP;   // MSG_ARENA_DISCIPLE_DETAIL_RSP   获取竞技场弟子详情-回复
	public TMSG_GUIDE_SAVE_PROGRESS_REQ stTMSG_GUIDE_SAVE_PROGRESS_REQ;   // MSG_GUIDE_SAVE_PROGRESS_REQ   引导数据保存-请求
	public TMSG_GUIDE_SAVE_PROGRESS_RSP stTMSG_GUIDE_SAVE_PROGRESS_RSP;   // MSG_GUIDE_SAVE_PROGRESS_RSP   引导数据保存-回复
	public TMSG_GUIDE_LAUNCH_NTF stTMSG_GUIDE_LAUNCH_NTF;   // MSG_GUIDE_LAUNCH_NTF   通知客户端引导触发-通知
	public TMSG_GUIDE_UPDATE_NTF stTMSG_GUIDE_UPDATE_NTF;   // MSG_GUIDE_UPDATE_NTF   更新引导-通知
	public TMSG_GUIDE_SAVE_FREE_BUFF_REQ stTMSG_GUIDE_SAVE_FREE_BUFF_REQ;   // MSG_GUIDE_SAVE_FREE_BUFF_REQ   自由数据保存
	public TMSG_GUIDE_SAVE_FREE_BUFF_RSP stTMSG_GUIDE_SAVE_FREE_BUFF_RSP;   // MSG_GUIDE_SAVE_FREE_BUFF_RSP   回复
	public TMSG_SECTFORM_CHANGE_REQ stTMSG_SECTFORM_CHANGE_REQ;   // MSG_SECTFORM_CHANGE_REQ   宗门大阵上下阵-请求
	public TMSG_SECTFORM_CHANGE_RSP stTMSG_SECTFORM_CHANGE_RSP;   // MSG_SECTFORM_CHANGE_RSP   宗门大阵上下阵-返回
	public TMSG_SECTFORM_UPDATE_NTF stTMSG_SECTFORM_UPDATE_NTF;   // MSG_SECTFORM_UPDATE_NTF   宗门状态变化-通知
	public TMSG_SHOP_RACK_CONTENT_CHANGED_NTF stTMSG_SHOP_RACK_CONTENT_CHANGED_NTF;   // MSG_SHOP_RACK_CONTENT_CHANGED_NTF   商店变化消息-通知
	public TMSG_SHOP_LOAD_GOODS_REQ stTMSG_SHOP_LOAD_GOODS_REQ;   // MSG_SHOP_LOAD_GOODS_REQ   打开商店-请求
	public TMSG_SHOP_LOAD_GOODS_RSP stTMSG_SHOP_LOAD_GOODS_RSP;   // MSG_SHOP_LOAD_GOODS_RSP   打开商店-返回
	public TMSG_SHOP_BUY_GOODS_REQ stTMSG_SHOP_BUY_GOODS_REQ;   // MSG_SHOP_BUY_GOODS_REQ   商店购买-请求
	public TMSG_SHOP_BUY_GOODS_RSP stTMSG_SHOP_BUY_GOODS_RSP;   // MSG_SHOP_BUY_GOODS_RSP   商店购买-返回
	public TMSG_MAIL_GET_LIST_REQ stTMSG_MAIL_GET_LIST_REQ;   // MSG_MAIL_GET_LIST_REQ   获取邮件列表REQ
	public TMSG_MAIL_GET_LIST_RSP stTMSG_MAIL_GET_LIST_RSP;   // MSG_MAIL_GET_LIST_RSP   获取邮件列表RSP
	public TMSG_MAIL_OPEN_REQ stTMSG_MAIL_OPEN_REQ;   // MSG_MAIL_OPEN_REQ   获取邮件详情REQ
	public TMSG_MAIL_OPEN_RSP stTMSG_MAIL_OPEN_RSP;   // MSG_MAIL_OPEN_RSP   获取邮件详情RSP
	public TMSG_MAIL_DELETE_REQ stTMSG_MAIL_DELETE_REQ;   // MSG_MAIL_DELETE_REQ   删除邮件REQ
	public TMSG_MAIL_DELETE_RSP stTMSG_MAIL_DELETE_RSP;   // MSG_MAIL_DELETE_RSP   删除邮件RSP
	public TMSG_MAIL_GET_ATTACHMENT_REQ stTMSG_MAIL_GET_ATTACHMENT_REQ;   // MSG_MAIL_GET_ATTACHMENT_REQ   领取邮件附件REQ
	public TMSG_MAIL_GET_ATTACHMENT_RSP stTMSG_MAIL_GET_ATTACHMENT_RSP;   // MSG_MAIL_GET_ATTACHMENT_RSP   领取邮件附件RSP
	public TMSG_MAIL_NEW_MAIL_NTF stTMSG_MAIL_NEW_MAIL_NTF;   // MSG_MAIL_NEW_MAIL_NTF   收到新邮件通知
	public TMSG_MAIL_DELETE_NTF stTMSG_MAIL_DELETE_NTF;   // MSG_MAIL_DELETE_NTF   删除邮件通知
	public TMSG_LOOTBOX_UPDATE_NTF stTMSG_LOOTBOX_UPDATE_NTF;   // MSG_LOOTBOX_UPDATE_NTF   盲盒信息变化-通知
	public TMSG_LOOTBOX_OPEN_REQ stTMSG_LOOTBOX_OPEN_REQ;   // MSG_LOOTBOX_OPEN_REQ   开盲盒-请求
	public TMSG_LOOTBOX_OPEN_RSP stTMSG_LOOTBOX_OPEN_RSP;   // MSG_LOOTBOX_OPEN_RSP   开盲盒-返回


	public void Pack(CORM_packaux oPacker) {
    stHead.Pack(oPacker);
    switch(stHead.get_iMsgID()){
		case MSG_LOGIN_HANDSHAKE_REQ: { stTMSG_LOGIN_HANDSHAKE_REQ.Pack(oPacker); } break;
		case MSG_LOGIN_HANDSHAKE_RSP: { stTMSG_LOGIN_HANDSHAKE_RSP.Pack(oPacker); } break;
		case MSG_LOGIN_LOGIN_REQ: { stTMSG_LOGIN_LOGIN_REQ.Pack(oPacker); } break;
		case MSG_LOGIN_LOGIN_RSP: { stTMSG_LOGIN_LOGIN_RSP.Pack(oPacker); } break;
		case MSG_LOGIN_ERROR_NTF: { stTMSG_LOGIN_ERROR_NTF.Pack(oPacker); } break;
		case MSG_LOGIN_NEW_ACCOUNT_NTF: { stTMSG_LOGIN_NEW_ACCOUNT_NTF.Pack(oPacker); } break;
		case MSG_LOGIN_BAN_ACCOUNT_NTF: { stTMSG_LOGIN_BAN_ACCOUNT_NTF.Pack(oPacker); } break;
		case MSG_LOGIN_AUTO_LOGIN_REQ: { stTMSG_LOGIN_AUTO_LOGIN_REQ.Pack(oPacker); } break;
		case MSG_LOGIN_UPDATE_ALSESSION_NTF: { stTMSG_LOGIN_UPDATE_ALSESSION_NTF.Pack(oPacker); } break;
		case MSG_LOGIN_KICKOUT_NTF: { stTMSG_LOGIN_KICKOUT_NTF.Pack(oPacker); } break;
		case MSG_LOGIN_QUERY_ALL_ROLE_REQ: { stTMSG_LOGIN_QUERY_ALL_ROLE_REQ.Pack(oPacker); } break;
		case MSG_LOGIN_QUERY_ALL_ROLE_RSP: { stTMSG_LOGIN_QUERY_ALL_ROLE_RSP.Pack(oPacker); } break;
		case MSG_LOGIN_QUERY_ALL_ROLE_NTF: { stTMSG_LOGIN_QUERY_ALL_ROLE_NTF.Pack(oPacker); } break;
		case MSG_LOGIN_NOACC_INWORLD_NTF: { stTMSG_LOGIN_NOACC_INWORLD_NTF.Pack(oPacker); } break;
		case MSG_LOGIN_CREATE_ACC_INWORLD_REQ: { stTMSG_LOGIN_CREATE_ACC_INWORLD_REQ.Pack(oPacker); } break;
		case MSG_LOGIN_CREATE_ACC_INWORLD_RSP: { stTMSG_LOGIN_CREATE_ACC_INWORLD_RSP.Pack(oPacker); } break;
		case MSG_LOGIN_GEN_WORLD_ALS_REQ: { stTMSG_LOGIN_GEN_WORLD_ALS_REQ.Pack(oPacker); } break;
		case MSG_LOGIN_GEN_WORLD_ALS_RSP: { stTMSG_LOGIN_GEN_WORLD_ALS_RSP.Pack(oPacker); } break;
		case MSG_LOGIN_ACCOUNT_UNDELETE_REQ: { stTMSG_LOGIN_ACCOUNT_UNDELETE_REQ.Pack(oPacker); } break;
		case MSG_LOGIN_ACCOUNT_UNDELETE_RSP: { stTMSG_LOGIN_ACCOUNT_UNDELETE_RSP.Pack(oPacker); } break;
		case MSG_LOGIN_ACCOUNT_DELETE_STATE_NTF: { stTMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF.Pack(oPacker); } break;
		case MSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF: { stTMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF.Pack(oPacker); } break;
		case MSG_LOGIN_BANROLE_NTF: { stTMSG_LOGIN_BANROLE_NTF.Pack(oPacker); } break;
		case MSG_LOGIN_SERVERMAINTAIN_NTF: { stTMSG_LOGIN_SERVERMAINTAIN_NTF.Pack(oPacker); } break;
		case MSG_LOGIN_WORLDOPENDATE_NTF: { stTMSG_LOGIN_WORLDOPENDATE_NTF.Pack(oPacker); } break;
		case MSG_LOBBY_ERROR_NTF: { stTMSG_LOBBY_ERROR_NTF.Pack(oPacker); } break;
		case MSG_LEECHDOM_USE_REQ: { stTMSG_LEECHDOM_USE_REQ.Pack(oPacker); } break;
		case MSG_LEECHDOM_USE_RSP: { stTMSG_LEECHDOM_USE_RSP.Pack(oPacker); } break;
		case MSG_ACTION_LUA_REQUEST_REQ: { stTMSG_ACTION_LUA_REQUEST_REQ.Pack(oPacker); } break;
		case MSG_ACTION_LUA_REQUEST_RSP: { stTMSG_ACTION_LUA_REQUEST_RSP.Pack(oPacker); } break;
		case MSG_ACTION_LUA_SCRIPT_NTF: { stTMSG_ACTION_LUA_SCRIPT_NTF.Pack(oPacker); } break;
		case MSG_ACTION_QUERY_TIME_REQ: { stTNullStruct.Pack(oPacker); } break;
		case MSG_ACTION_QUERY_TIME_RSP: { stTMSG_ACTION_QUERY_TIME_RSP.Pack(oPacker); } break;
		case MSG_ACTION_TESTCASE_NTF: { stTMSG_ACTION_TESTCASE_NTF.Pack(oPacker); } break;
		case MSG_ACTION_SYNC_FLAG_NTF: { stTMSG_ACTION_SYNC_FLAG_NTF.Pack(oPacker); } break;
		case MSG_ACTION_OUT_OF_SYNC_NTF: { stTMSG_ACTION_OUT_OF_SYNC_NTF.Pack(oPacker); } break;
		case MSG_ACTION_SHOW_PRIZE_NTF: { stTMSG_ACTION_SHOW_PRIZE_NTF.Pack(oPacker); } break;
		case MSG_ACTION_LUALIKE_SCRIPT_NTF: { stTMSG_ACTION_LUALIKE_SCRIPT_NTF.Pack(oPacker); } break;
		case MSG_ENTITY_CREATE_ROLE_NTF: { stTMSG_ENTITY_CREATE_ROLE_NTF.Pack(oPacker); } break;
		case MSG_ENTITY_CREATE_ROLE_PART_NTF: { stTMSG_ENTITY_CREATE_ROLE_PART_NTF.Pack(oPacker); } break;
		case MSG_ENTITY_CREATE_PERSON_NTF: { stTMSG_ENTITY_CREATE_PERSON_NTF.Pack(oPacker); } break;
		case MSG_ENTITY_CREATE_LEECHDOM_NTF: { stTMSG_ENTITY_CREATE_LEECHDOM_NTF.Pack(oPacker); } break;
		case MSG_ENTITY_DESTROY_NTF: { stTMSG_ENTITY_DESTROY_NTF.Pack(oPacker); } break;
		case MSG_ENTITY_UPDATE_PROP_NTF: { stTMSG_ENTITY_UPDATE_PROP_NTF.Pack(oPacker); } break;
		case MSG_ENTITY_SET_PROP_REQ: { stTMSG_ENTITY_SET_PROP_REQ.Pack(oPacker); } break;
		case MSG_ENTITY_SET_PROP_RSP: { stTMSG_ENTITY_SET_PROP_RSP.Pack(oPacker); } break;
		case MSG_ENTITY_RENAME_REQ: { stTMSG_ENTITY_RENAME_REQ.Pack(oPacker); } break;
		case MSG_ENTITY_RENAME_RSP: { stTMSG_ENTITY_RENAME_RSP.Pack(oPacker); } break;
		case MSG_CLIENT_LOGIN_OSS_REQ: { stTMSG_CLIENT_LOGIN_OSS_REQ.Pack(oPacker); } break;
		case MSG_CLIENT_LOGIN_OSS_RSP: { stTMSG_CLIENT_LOGIN_OSS_RSP.Pack(oPacker); } break;
		case MSG_SERVER_TIME_REQ: { stTMSG_SERVER_TIME_REQ.Pack(oPacker); } break;
		case MSG_SERVER_TIME_RSP: { stTMSG_SERVER_TIME_RSP.Pack(oPacker); } break;
		case MSG_SKEP_CREATE_NTF: { stTMSG_SKEP_CREATE_NTF.Pack(oPacker); } break;
		case MSG_SKEP_DESTROY_NTF: { stTMSG_SKEP_DESTROY_NTF.Pack(oPacker); } break;
		case MSG_SKEP_ADD_ITEM_NTF: { stTMSG_SKEP_ADD_ITEM_NTF.Pack(oPacker); } break;
		case MSG_SKEP_REMOVE_ITEM_NTF: { stTMSG_SKEP_REMOVE_ITEM_NTF.Pack(oPacker); } break;
		case MSG_ROOM_USER_ENTER_REQ: { stTMSG_ROOM_USER_ENTER_REQ.Pack(oPacker); } break;
		case MSG_ROOM_USER_ENTER_RSP: { stTMSG_ROOM_USER_ENTER_RSP.Pack(oPacker); } break;
		case MSG_ROOM_USER_ENTER_NTF: { stTMSG_ROOM_USER_ENTER_NTF.Pack(oPacker); } break;
		case MSG_ROOM_USER_LEAVE_REQ: { stTMSG_ROOM_USER_LEAVE_REQ.Pack(oPacker); } break;
		case MSG_ROOM_USER_LEAVE_RSP: { stTMSG_ROOM_USER_LEAVE_RSP.Pack(oPacker); } break;
		case MSG_ROOM_USER_LEAVE_NTF: { stTMSG_ROOM_USER_LEAVE_NTF.Pack(oPacker); } break;
		case MSG_ROOM_USER_ENTER_COMPLETE_NTF: { stTMSG_ROOM_USER_ENTER_COMPLETE_NTF.Pack(oPacker); } break;
		case MSG_ROOM_SEARCH_REQ: { stTMSG_ROOM_SEARCH_REQ.Pack(oPacker); } break;
		case MSG_ROOM_SEARCH_RSP: { stTMSG_ROOM_SEARCH_RSP.Pack(oPacker); } break;
		case MSG_ROOM_GET_ROOMDESC_REQ: { stTMSG_ROOM_GET_ROOMDESC_REQ.Pack(oPacker); } break;
		case MSG_ROOM_GET_ROOMDESC_RSP: { stTMSG_ROOM_GET_ROOMDESC_RSP.Pack(oPacker); } break;
		case MSG_MINIGAME_SET_PROP_REQ: { stTMSG_MINIGAME_SET_PROP_REQ.Pack(oPacker); } break;
		case MSG_MINIGAME_SET_PROP_RSP: { stTMSG_MINIGAME_SET_PROP_RSP.Pack(oPacker); } break;
		case MSG_MINIGAME_GET_PROP_REQ: { stTMSG_MINIGAME_GET_PROP_REQ.Pack(oPacker); } break;
		case MSG_MINIGAME_GET_PROP_RSP: { stTMSG_MINIGAME_GET_PROP_RSP.Pack(oPacker); } break;
		case MSG_MINIGAME_PROP_UPDATED_NTF: { stTMSG_MINIGAME_PROP_UPDATED_NTF.Pack(oPacker); } break;
		case MSG_MINIGAME_RESET_ROOM_PROP_REQ: { stTMSG_MINIGAME_RESET_ROOM_PROP_REQ.Pack(oPacker); } break;
		case MSG_MINIGAME_RESET_ROOM_PROP_RSP: { stTMSG_MINIGAME_RESET_ROOM_PROP_RSP.Pack(oPacker); } break;
		case MSG_MINIGAME_RESET_ROOM_PROP_NTF: { stTMSG_MINIGAME_RESET_ROOM_PROP_NTF.Pack(oPacker); } break;
		case MSG_MINIGAME_BROADCAST_MSG_REQ: { stTMSG_MINIGAME_BROADCAST_MSG_REQ.Pack(oPacker); } break;
		case MSG_MINIGAME_BROADCAST_MSG_RSP: { stTMSG_MINIGAME_BROADCAST_MSG_RSP.Pack(oPacker); } break;
		case MSG_MINIGAME_BROADCAST_MSG_NTF: { stTMSG_MINIGAME_BROADCAST_MSG_NTF.Pack(oPacker); } break;
		case MSG_NET_OBJ_CREATE_NTF: { stTMSG_NET_OBJ_CREATE_NTF.Pack(oPacker); } break;
		case MSG_NET_OBJ_PROP_CHANGE_REQ: { stTMSG_NET_OBJ_PROP_CHANGE_REQ.Pack(oPacker); } break;
		case MSG_NET_OBJ_PROP_UPDATED_NTF: { stTMSG_NET_OBJ_PROP_UPDATED_NTF.Pack(oPacker); } break;
		case MSG_NET_OBJ_DESTROY_NTF: { stTMSG_NET_OBJ_DESTROY_NTF.Pack(oPacker); } break;
		case MSG_NET_OBJ_SYNC_NTF: { stTMSG_NET_OBJ_SYNC_NTF.Pack(oPacker); } break;
		case MSG_NET_OBJ_SYNC_ELEMENT_NTF: { stTMSG_NET_OBJ_SYNC_ELEMENT_NTF.Pack(oPacker); } break;
		case MSG_NET_OBJ_DESTROY_BY_ROLE_NTF: { stTMSG_NET_OBJ_DESTROY_BY_ROLE_NTF.Pack(oPacker); } break;
		case MSG_DISCIPLE_BUILD_DISCIPLE_REQ: { stTMSG_DISCIPLE_BUILD_DISCIPLE_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_BUILD_DISCIPLE_RSP: { stTMSG_DISCIPLE_BUILD_DISCIPLE_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_TUINING_REQ: { stTMSG_DISCIPLE_TUINING_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_TUINING_RSP: { stTMSG_DISCIPLE_TUINING_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_START_REQ: { stTMSG_DISCIPLE_WANDERING_START_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_START_RSP: { stTMSG_DISCIPLE_WANDERING_START_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_EVENT_LOG_NTF: { stTMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_FINISH_REQ: { stTMSG_DISCIPLE_WANDERING_FINISH_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_FINISH_RSP: { stTMSG_DISCIPLE_WANDERING_FINISH_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_WILL_FINISH_NTF: { stTMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ: { stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP: { stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_CHOOSE_REQ: { stTMSG_DISCIPLE_WANDERING_CHOOSE_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_CHOOSE_RSP: { stTMSG_DISCIPLE_WANDERING_CHOOSE_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_REMOVE_REQ: { stTMSG_DISCIPLE_WANDERING_REMOVE_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_REMOVE_RSP: { stTMSG_DISCIPLE_WANDERING_REMOVE_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_CLOSE_REQ: { stTMSG_DISCIPLE_WANDERING_CLOSE_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_CLOSE_RSP: { stTMSG_DISCIPLE_WANDERING_CLOSE_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF: { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ: { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP: { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ: { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP: { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_GODEXAM_REQ: { stTMSG_DISCIPLE_WANDERING_GODEXAM_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_GODEXAM_RSP: { stTMSG_DISCIPLE_WANDERING_GODEXAM_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ: { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP: { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ: { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP: { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ: { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP: { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ: { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP: { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF: { stTMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF: { stTMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF: { stTMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF.Pack(oPacker); } break;
		case MSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF: { stTMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF.Pack(oPacker); } break;
		case MSG_WANDERING_ABILITY_SELECT_NTF: { stTMSG_WANDERING_ABILITY_SELECT_NTF.Pack(oPacker); } break;
		case MSG_WANDERING_ABILITY_SELECT_REQ: { stTMSG_WANDERING_ABILITY_SELECT_REQ.Pack(oPacker); } break;
		case MSG_WANDERING_ABILITY_SELECT_RSP: { stTMSG_WANDERING_ABILITY_SELECT_RSP.Pack(oPacker); } break;
		case MSG_WANDERING_ABILITY_SELECT_LOAD_REQ: { stTMSG_WANDERING_ABILITY_SELECT_LOAD_REQ.Pack(oPacker); } break;
		case MSG_WANDERING_ABILITY_SELECT_LOAD_RSP: { stTMSG_WANDERING_ABILITY_SELECT_LOAD_RSP.Pack(oPacker); } break;
		case MSG_WANDERING_EQUIP_SELECT_NEXT_REQ: { stTMSG_WANDERING_EQUIP_SELECT_NEXT_REQ.Pack(oPacker); } break;
		case MSG_WANDERING_EQUIP_SELECT_NEXT_RSP: { stTMSG_WANDERING_EQUIP_SELECT_NEXT_RSP.Pack(oPacker); } break;
		case MSG_WANDERING_EQUIP_SELECT_LOAD_REQ: { stTMSG_WANDERING_EQUIP_SELECT_LOAD_REQ.Pack(oPacker); } break;
		case MSG_WANDERING_EQUIP_SELECT_LOAD_RSP: { stTMSG_WANDERING_EQUIP_SELECT_LOAD_RSP.Pack(oPacker); } break;
		case MSG_WANDERING_EQUIP_SELECT_NTF: { stTMSG_WANDERING_EQUIP_SELECT_NTF.Pack(oPacker); } break;
		case MSG_BATTLE_INIT_CONTEXT_NTF: { stTMSG_BATTLE_INIT_CONTEXT_NTF.Pack(oPacker); } break;
		case MSG_BATTLE_INPUT_REQ: { stTMSG_BATTLE_INPUT_REQ.Pack(oPacker); } break;
		case MSG_BATTLE_INPUT_RSP: { stTMSG_BATTLE_INPUT_RSP.Pack(oPacker); } break;
		case MSG_BATTLE_RESULT_NTF: { stTMSG_BATTLE_RESULT_NTF.Pack(oPacker); } break;
		case MSG_BATTLE_ROUND_OVER_NTF: { stTMSG_BATTLE_ROUND_OVER_NTF.Pack(oPacker); } break;
		case MSG_BATTLE_PROP_UPDATED_NTF: { stTMSG_BATTLE_PROP_UPDATED_NTF.Pack(oPacker); } break;
		case MSG_BATTLE_SKILL_UPDATED_NTF: { stTMSG_BATTLE_SKILL_UPDATED_NTF.Pack(oPacker); } break;
		case MSG_BATTLE_ACTION_USE_SKILL_NTF: { stTMSG_BATTLE_ACTION_USE_SKILL_NTF.Pack(oPacker); } break;
		case MSG_BATTLE_ACTION_INJURED_NTF: { stTMSG_BATTLE_ACTION_INJURED_NTF.Pack(oPacker); } break;
		case MSG_BATTLE_ACTION_DEATH_NTF: { stTMSG_BATTLE_ACTION_DEATH_NTF.Pack(oPacker); } break;
		case MSG_BATTLE_CONTEXT_PACK_NTF: { stTMSG_BATTLE_CONTEXT_PACK_NTF.Pack(oPacker); } break;
		case MSG_BATTLE_CONFIRM_RESULT_REQ: { stTMSG_BATTLE_CONFIRM_RESULT_REQ.Pack(oPacker); } break;
		case MSG_BATTLE_CONFIRM_RESULT_RSP: { stTMSG_BATTLE_CONFIRM_RESULT_RSP.Pack(oPacker); } break;
		case MSG_FORMATION_SET_LAYOUT_REQ: { stTMSG_FORMATION_SET_LAYOUT_REQ.Pack(oPacker); } break;
		case MSG_FORMATION_SET_LAYOUT_RSP: { stTMSG_FORMATION_SET_LAYOUT_RSP.Pack(oPacker); } break;
		case MSG_FORMATION_UPDATE_NTF: { stTMSG_FORMATION_UPDATE_NTF.Pack(oPacker); } break;
		case MSG_SEEDING_CREATE_NTF: { stTMSG_SEEDING_CREATE_NTF.Pack(oPacker); } break;
		case MSG_SEEDING_UPDATE_PROP_NTF: { stTMSG_SEEDING_UPDATE_PROP_NTF.Pack(oPacker); } break;
		case MSG_DISCIPLE_CREATE_NTF: { stTMSG_DISCIPLE_CREATE_NTF.Pack(oPacker); } break;
		case MSG_DISCIPLE_UPDATE_PROP_NTF: { stTMSG_DISCIPLE_UPDATE_PROP_NTF.Pack(oPacker); } break;
		case MSG_DISCIPLE_RENAME_REQ: { stTMSG_DISCIPLE_RENAME_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_RENAME_RSP: { stTMSG_DISCIPLE_RENAME_RSP.Pack(oPacker); } break;
		case MSG_SEEDING_UPGRADE_REQ: { stTMSG_SEEDING_UPGRADE_REQ.Pack(oPacker); } break;
		case MSG_SEEDING_UPGRADE_RSP: { stTMSG_SEEDING_UPGRADE_RSP.Pack(oPacker); } break;
		case MSG_EQUIP_CREATE_NTF: { stTMSG_EQUIP_CREATE_NTF.Pack(oPacker); } break;
		case MSG_EQUIP_UPDATE_PROP_NTF: { stTMSG_EQUIP_UPDATE_PROP_NTF.Pack(oPacker); } break;
		case MSG_EQUIP_DELETE_NTF: { stTMSG_EQUIP_DELETE_NTF.Pack(oPacker); } break;
		case MSG_DISCIPLE_MOVE_EQUIP_REQ: { stTMSG_DISCIPLE_MOVE_EQUIP_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_MOVE_EQUIP_RSP: { stTMSG_DISCIPLE_MOVE_EQUIP_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_DELETE_EQUIP_REQ: { stTMSG_DISCIPLE_DELETE_EQUIP_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_DELETE_EQUIP_RSP: { stTMSG_DISCIPLE_DELETE_EQUIP_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_COMPOSE_EQUIP_REQ: { stTMSG_DISCIPLE_COMPOSE_EQUIP_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_COMPOSE_EQUIP_RSP: { stTMSG_DISCIPLE_COMPOSE_EQUIP_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_EQUIP_ATLAS_REQ: { stTMSG_DISCIPLE_EQUIP_ATLAS_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_EQUIP_ATLAS_RSP: { stTMSG_DISCIPLE_EQUIP_ATLAS_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_REFORGE_EQUIP_REQ: { stTMSG_DISCIPLE_REFORGE_EQUIP_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_REFORGE_EQUIP_RSP: { stTMSG_DISCIPLE_REFORGE_EQUIP_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_REPLACE_SKILL_REQ: { stTMSG_DISCIPLE_REPLACE_SKILL_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_REPLACE_SKILL_RSP: { stTMSG_DISCIPLE_REPLACE_SKILL_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_ADD_ABILITY_NTF: { stTMSG_DISCIPLE_ADD_ABILITY_NTF.Pack(oPacker); } break;
		case MSG_DISCIPLE_REMOVE_ABILITY_NTF: { stTMSG_DISCIPLE_REMOVE_ABILITY_NTF.Pack(oPacker); } break;
		case MSG_DISCIPLE_GRID_HP_UNLOCK_REQ: { stTMSG_DISCIPLE_GRID_HP_UNLOCK_REQ.Pack(oPacker); } break;
		case MSG_DISCIPLE_GRID_HP_UNLOCK_RSP: { stTMSG_DISCIPLE_GRID_HP_UNLOCK_RSP.Pack(oPacker); } break;
		case MSG_DISCIPLE_GRID_UNLOCK_NTF: { stTMSG_DISCIPLE_GRID_UNLOCK_NTF.Pack(oPacker); } break;
		case MSG_SECT_UPGRADE_REQ: { stTMSG_SECT_UPGRADE_REQ.Pack(oPacker); } break;
		case MSG_SECT_UPGRADE_RSP: { stTMSG_SECT_UPGRADE_RSP.Pack(oPacker); } break;
		case MSG_SECT_UPGRADE_NTF: { stTMSG_SECT_UPGRADE_NTF.Pack(oPacker); } break;
		case MSG_ANTIQUE_UPDATE_NTF: { stTMSG_ANTIQUE_UPDATE_NTF.Pack(oPacker); } break;
		case MSG_ANTIQUE_UPGRADE_REQ: { stTMSG_ANTIQUE_UPGRADE_REQ.Pack(oPacker); } break;
		case MSG_ANTIQUE_UPGRADE_RSP: { stTMSG_ANTIQUE_UPGRADE_RSP.Pack(oPacker); } break;
		case MSG_STAMINA_BUY_REQ: { stTMSG_STAMINA_BUY_REQ.Pack(oPacker); } break;
		case MSG_STAMINA_BUY_RSP: { stTMSG_STAMINA_BUY_RSP.Pack(oPacker); } break;
		case MSG_STAMINA_NTF: { stTMSG_STAMINA_NTF.Pack(oPacker); } break;
		case MSG_PERIODPRIZE_ITEM_CHANGED_NTF: { stTMSG_PERIODPRIZE_ITEM_CHANGED_NTF.Pack(oPacker); } break;
		case MSG_PERIODPRIZE_ITEM_PURCHASE_REQ: { stTMSG_PERIODPRIZE_ITEM_PURCHASE_REQ.Pack(oPacker); } break;
		case MSG_PERIODPRIZE_ITEM_PURCHASE_RSP: { stTMSG_PERIODPRIZE_ITEM_PURCHASE_RSP.Pack(oPacker); } break;
		case MSG_CDKEY_WITHDRAW_REQ: { stTMSG_CDKEY_WITHDRAW_REQ.Pack(oPacker); } break;
		case MSG_CDKEY_WITHDRAW_RSP: { stTMSG_CDKEY_WITHDRAW_RSP.Pack(oPacker); } break;
		case MSG_CDKEY_WITHDRAW_NTF: { stTMSG_CDKEY_WITHDRAW_NTF.Pack(oPacker); } break;
		case MSG_ARENA_LOAD_REQ: { stTMSG_ARENA_LOAD_REQ.Pack(oPacker); } break;
		case MSG_ARENA_LOAD_RSP: { stTMSG_ARENA_LOAD_RSP.Pack(oPacker); } break;
		case MSG_ARENA_GET_RANKING_REQ: { stTMSG_ARENA_GET_RANKING_REQ.Pack(oPacker); } break;
		case MSG_ARENA_GET_RANKING_RSP: { stTMSG_ARENA_GET_RANKING_RSP.Pack(oPacker); } break;
		case MSG_ARENA_RANK_CHANGED_NTF: { stTMSG_ARENA_RANK_CHANGED_NTF.Pack(oPacker); } break;
		case MSG_ARENA_REFRESH_OPP_REQ: { stTMSG_ARENA_REFRESH_OPP_REQ.Pack(oPacker); } break;
		case MSG_ARENA_REFRESH_OPP_RSP: { stTMSG_ARENA_REFRESH_OPP_RSP.Pack(oPacker); } break;
		case MSG_ARENA_REFRESH_OPP_NTF: { stTMSG_ARENA_REFRESH_OPP_NTF.Pack(oPacker); } break;
		case MSG_ARENA_CHALLENGE_REQ: { stTMSG_ARENA_CHALLENGE_REQ.Pack(oPacker); } break;
		case MSG_ARENA_CHALLENGE_RSP: { stTMSG_ARENA_CHALLENGE_RSP.Pack(oPacker); } break;
		case MSG_ARENA_1_CHALLENGE_RESULT_NTF: { stTMSG_ARENA_1_CHALLENGE_RESULT_NTF.Pack(oPacker); } break;
		case MSG_ARENA_DISCIPLE_DETAIL_REQ: { stTMSG_ARENA_DISCIPLE_DETAIL_REQ.Pack(oPacker); } break;
		case MSG_ARENA_DISCIPLE_DETAIL_RSP: { stTMSG_ARENA_DISCIPLE_DETAIL_RSP.Pack(oPacker); } break;
		case MSG_GUIDE_SAVE_PROGRESS_REQ: { stTMSG_GUIDE_SAVE_PROGRESS_REQ.Pack(oPacker); } break;
		case MSG_GUIDE_SAVE_PROGRESS_RSP: { stTMSG_GUIDE_SAVE_PROGRESS_RSP.Pack(oPacker); } break;
		case MSG_GUIDE_LAUNCH_NTF: { stTMSG_GUIDE_LAUNCH_NTF.Pack(oPacker); } break;
		case MSG_GUIDE_UPDATE_NTF: { stTMSG_GUIDE_UPDATE_NTF.Pack(oPacker); } break;
		case MSG_GUIDE_SAVE_FREE_BUFF_REQ: { stTMSG_GUIDE_SAVE_FREE_BUFF_REQ.Pack(oPacker); } break;
		case MSG_GUIDE_SAVE_FREE_BUFF_RSP: { stTMSG_GUIDE_SAVE_FREE_BUFF_RSP.Pack(oPacker); } break;
		case MSG_SECTFORM_CHANGE_REQ: { stTMSG_SECTFORM_CHANGE_REQ.Pack(oPacker); } break;
		case MSG_SECTFORM_CHANGE_RSP: { stTMSG_SECTFORM_CHANGE_RSP.Pack(oPacker); } break;
		case MSG_SECTFORM_UPDATE_NTF: { stTMSG_SECTFORM_UPDATE_NTF.Pack(oPacker); } break;
		case MSG_SHOP_RACK_CONTENT_CHANGED_NTF: { stTMSG_SHOP_RACK_CONTENT_CHANGED_NTF.Pack(oPacker); } break;
		case MSG_SHOP_LOAD_GOODS_REQ: { stTMSG_SHOP_LOAD_GOODS_REQ.Pack(oPacker); } break;
		case MSG_SHOP_LOAD_GOODS_RSP: { stTMSG_SHOP_LOAD_GOODS_RSP.Pack(oPacker); } break;
		case MSG_SHOP_BUY_GOODS_REQ: { stTMSG_SHOP_BUY_GOODS_REQ.Pack(oPacker); } break;
		case MSG_SHOP_BUY_GOODS_RSP: { stTMSG_SHOP_BUY_GOODS_RSP.Pack(oPacker); } break;
		case MSG_MAIL_GET_LIST_REQ: { stTMSG_MAIL_GET_LIST_REQ.Pack(oPacker); } break;
		case MSG_MAIL_GET_LIST_RSP: { stTMSG_MAIL_GET_LIST_RSP.Pack(oPacker); } break;
		case MSG_MAIL_OPEN_REQ: { stTMSG_MAIL_OPEN_REQ.Pack(oPacker); } break;
		case MSG_MAIL_OPEN_RSP: { stTMSG_MAIL_OPEN_RSP.Pack(oPacker); } break;
		case MSG_MAIL_DELETE_REQ: { stTMSG_MAIL_DELETE_REQ.Pack(oPacker); } break;
		case MSG_MAIL_DELETE_RSP: { stTMSG_MAIL_DELETE_RSP.Pack(oPacker); } break;
		case MSG_MAIL_GET_ATTACHMENT_REQ: { stTMSG_MAIL_GET_ATTACHMENT_REQ.Pack(oPacker); } break;
		case MSG_MAIL_GET_ATTACHMENT_RSP: { stTMSG_MAIL_GET_ATTACHMENT_RSP.Pack(oPacker); } break;
		case MSG_MAIL_NEW_MAIL_NTF: { stTMSG_MAIL_NEW_MAIL_NTF.Pack(oPacker); } break;
		case MSG_MAIL_DELETE_NTF: { stTMSG_MAIL_DELETE_NTF.Pack(oPacker); } break;
		case MSG_LOOTBOX_UPDATE_NTF: { stTMSG_LOOTBOX_UPDATE_NTF.Pack(oPacker); } break;
		case MSG_LOOTBOX_OPEN_REQ: { stTMSG_LOOTBOX_OPEN_REQ.Pack(oPacker); } break;
		case MSG_LOOTBOX_OPEN_RSP: { stTMSG_LOOTBOX_OPEN_RSP.Pack(oPacker); } break;
		    default:throw new CPackDataException(CPackDataException.EN_EXCEPTION.UNDEFINE_MSGID);
		    } //switch;   

	}   //  Pack()

	public void Pack_WithTrace(CORM_packaux oPacker) {
    stHead.Pack(oPacker);
    switch(stHead.get_iMsgID()){
		case MSG_LOGIN_HANDSHAKE_REQ: { oPacker.PushFieldName("stTMSG_LOGIN_HANDSHAKE_REQ"); stTMSG_LOGIN_HANDSHAKE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_HANDSHAKE_RSP: { oPacker.PushFieldName("stTMSG_LOGIN_HANDSHAKE_RSP"); stTMSG_LOGIN_HANDSHAKE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_LOGIN_REQ: { oPacker.PushFieldName("stTMSG_LOGIN_LOGIN_REQ"); stTMSG_LOGIN_LOGIN_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_LOGIN_RSP: { oPacker.PushFieldName("stTMSG_LOGIN_LOGIN_RSP"); stTMSG_LOGIN_LOGIN_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_ERROR_NTF: { oPacker.PushFieldName("stTMSG_LOGIN_ERROR_NTF"); stTMSG_LOGIN_ERROR_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_NEW_ACCOUNT_NTF: { oPacker.PushFieldName("stTMSG_LOGIN_NEW_ACCOUNT_NTF"); stTMSG_LOGIN_NEW_ACCOUNT_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_BAN_ACCOUNT_NTF: { oPacker.PushFieldName("stTMSG_LOGIN_BAN_ACCOUNT_NTF"); stTMSG_LOGIN_BAN_ACCOUNT_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_AUTO_LOGIN_REQ: { oPacker.PushFieldName("stTMSG_LOGIN_AUTO_LOGIN_REQ"); stTMSG_LOGIN_AUTO_LOGIN_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_UPDATE_ALSESSION_NTF: { oPacker.PushFieldName("stTMSG_LOGIN_UPDATE_ALSESSION_NTF"); stTMSG_LOGIN_UPDATE_ALSESSION_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_KICKOUT_NTF: { oPacker.PushFieldName("stTMSG_LOGIN_KICKOUT_NTF"); stTMSG_LOGIN_KICKOUT_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_QUERY_ALL_ROLE_REQ: { oPacker.PushFieldName("stTMSG_LOGIN_QUERY_ALL_ROLE_REQ"); stTMSG_LOGIN_QUERY_ALL_ROLE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_QUERY_ALL_ROLE_RSP: { oPacker.PushFieldName("stTMSG_LOGIN_QUERY_ALL_ROLE_RSP"); stTMSG_LOGIN_QUERY_ALL_ROLE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_QUERY_ALL_ROLE_NTF: { oPacker.PushFieldName("stTMSG_LOGIN_QUERY_ALL_ROLE_NTF"); stTMSG_LOGIN_QUERY_ALL_ROLE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_NOACC_INWORLD_NTF: { oPacker.PushFieldName("stTMSG_LOGIN_NOACC_INWORLD_NTF"); stTMSG_LOGIN_NOACC_INWORLD_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_CREATE_ACC_INWORLD_REQ: { oPacker.PushFieldName("stTMSG_LOGIN_CREATE_ACC_INWORLD_REQ"); stTMSG_LOGIN_CREATE_ACC_INWORLD_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_CREATE_ACC_INWORLD_RSP: { oPacker.PushFieldName("stTMSG_LOGIN_CREATE_ACC_INWORLD_RSP"); stTMSG_LOGIN_CREATE_ACC_INWORLD_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_GEN_WORLD_ALS_REQ: { oPacker.PushFieldName("stTMSG_LOGIN_GEN_WORLD_ALS_REQ"); stTMSG_LOGIN_GEN_WORLD_ALS_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_GEN_WORLD_ALS_RSP: { oPacker.PushFieldName("stTMSG_LOGIN_GEN_WORLD_ALS_RSP"); stTMSG_LOGIN_GEN_WORLD_ALS_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_ACCOUNT_UNDELETE_REQ: { oPacker.PushFieldName("stTMSG_LOGIN_ACCOUNT_UNDELETE_REQ"); stTMSG_LOGIN_ACCOUNT_UNDELETE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_ACCOUNT_UNDELETE_RSP: { oPacker.PushFieldName("stTMSG_LOGIN_ACCOUNT_UNDELETE_RSP"); stTMSG_LOGIN_ACCOUNT_UNDELETE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_ACCOUNT_DELETE_STATE_NTF: { oPacker.PushFieldName("stTMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF"); stTMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF: { oPacker.PushFieldName("stTMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF"); stTMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_BANROLE_NTF: { oPacker.PushFieldName("stTMSG_LOGIN_BANROLE_NTF"); stTMSG_LOGIN_BANROLE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_SERVERMAINTAIN_NTF: { oPacker.PushFieldName("stTMSG_LOGIN_SERVERMAINTAIN_NTF"); stTMSG_LOGIN_SERVERMAINTAIN_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOGIN_WORLDOPENDATE_NTF: { oPacker.PushFieldName("stTMSG_LOGIN_WORLDOPENDATE_NTF"); stTMSG_LOGIN_WORLDOPENDATE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOBBY_ERROR_NTF: { oPacker.PushFieldName("stTMSG_LOBBY_ERROR_NTF"); stTMSG_LOBBY_ERROR_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LEECHDOM_USE_REQ: { oPacker.PushFieldName("stTMSG_LEECHDOM_USE_REQ"); stTMSG_LEECHDOM_USE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LEECHDOM_USE_RSP: { oPacker.PushFieldName("stTMSG_LEECHDOM_USE_RSP"); stTMSG_LEECHDOM_USE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ACTION_LUA_REQUEST_REQ: { oPacker.PushFieldName("stTMSG_ACTION_LUA_REQUEST_REQ"); stTMSG_ACTION_LUA_REQUEST_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ACTION_LUA_REQUEST_RSP: { oPacker.PushFieldName("stTMSG_ACTION_LUA_REQUEST_RSP"); stTMSG_ACTION_LUA_REQUEST_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ACTION_LUA_SCRIPT_NTF: { oPacker.PushFieldName("stTMSG_ACTION_LUA_SCRIPT_NTF"); stTMSG_ACTION_LUA_SCRIPT_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ACTION_QUERY_TIME_REQ: { oPacker.PushFieldName("stTNullStruct"); stTNullStruct.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ACTION_QUERY_TIME_RSP: { oPacker.PushFieldName("stTMSG_ACTION_QUERY_TIME_RSP"); stTMSG_ACTION_QUERY_TIME_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ACTION_TESTCASE_NTF: { oPacker.PushFieldName("stTMSG_ACTION_TESTCASE_NTF"); stTMSG_ACTION_TESTCASE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ACTION_SYNC_FLAG_NTF: { oPacker.PushFieldName("stTMSG_ACTION_SYNC_FLAG_NTF"); stTMSG_ACTION_SYNC_FLAG_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ACTION_OUT_OF_SYNC_NTF: { oPacker.PushFieldName("stTMSG_ACTION_OUT_OF_SYNC_NTF"); stTMSG_ACTION_OUT_OF_SYNC_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ACTION_SHOW_PRIZE_NTF: { oPacker.PushFieldName("stTMSG_ACTION_SHOW_PRIZE_NTF"); stTMSG_ACTION_SHOW_PRIZE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ACTION_LUALIKE_SCRIPT_NTF: { oPacker.PushFieldName("stTMSG_ACTION_LUALIKE_SCRIPT_NTF"); stTMSG_ACTION_LUALIKE_SCRIPT_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_CREATE_ROLE_NTF: { oPacker.PushFieldName("stTMSG_ENTITY_CREATE_ROLE_NTF"); stTMSG_ENTITY_CREATE_ROLE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_CREATE_ROLE_PART_NTF: { oPacker.PushFieldName("stTMSG_ENTITY_CREATE_ROLE_PART_NTF"); stTMSG_ENTITY_CREATE_ROLE_PART_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_CREATE_PERSON_NTF: { oPacker.PushFieldName("stTMSG_ENTITY_CREATE_PERSON_NTF"); stTMSG_ENTITY_CREATE_PERSON_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_CREATE_LEECHDOM_NTF: { oPacker.PushFieldName("stTMSG_ENTITY_CREATE_LEECHDOM_NTF"); stTMSG_ENTITY_CREATE_LEECHDOM_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_DESTROY_NTF: { oPacker.PushFieldName("stTMSG_ENTITY_DESTROY_NTF"); stTMSG_ENTITY_DESTROY_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_UPDATE_PROP_NTF: { oPacker.PushFieldName("stTMSG_ENTITY_UPDATE_PROP_NTF"); stTMSG_ENTITY_UPDATE_PROP_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_SET_PROP_REQ: { oPacker.PushFieldName("stTMSG_ENTITY_SET_PROP_REQ"); stTMSG_ENTITY_SET_PROP_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_SET_PROP_RSP: { oPacker.PushFieldName("stTMSG_ENTITY_SET_PROP_RSP"); stTMSG_ENTITY_SET_PROP_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_RENAME_REQ: { oPacker.PushFieldName("stTMSG_ENTITY_RENAME_REQ"); stTMSG_ENTITY_RENAME_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ENTITY_RENAME_RSP: { oPacker.PushFieldName("stTMSG_ENTITY_RENAME_RSP"); stTMSG_ENTITY_RENAME_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_CLIENT_LOGIN_OSS_REQ: { oPacker.PushFieldName("stTMSG_CLIENT_LOGIN_OSS_REQ"); stTMSG_CLIENT_LOGIN_OSS_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_CLIENT_LOGIN_OSS_RSP: { oPacker.PushFieldName("stTMSG_CLIENT_LOGIN_OSS_RSP"); stTMSG_CLIENT_LOGIN_OSS_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SERVER_TIME_REQ: { oPacker.PushFieldName("stTMSG_SERVER_TIME_REQ"); stTMSG_SERVER_TIME_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SERVER_TIME_RSP: { oPacker.PushFieldName("stTMSG_SERVER_TIME_RSP"); stTMSG_SERVER_TIME_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SKEP_CREATE_NTF: { oPacker.PushFieldName("stTMSG_SKEP_CREATE_NTF"); stTMSG_SKEP_CREATE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SKEP_DESTROY_NTF: { oPacker.PushFieldName("stTMSG_SKEP_DESTROY_NTF"); stTMSG_SKEP_DESTROY_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SKEP_ADD_ITEM_NTF: { oPacker.PushFieldName("stTMSG_SKEP_ADD_ITEM_NTF"); stTMSG_SKEP_ADD_ITEM_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SKEP_REMOVE_ITEM_NTF: { oPacker.PushFieldName("stTMSG_SKEP_REMOVE_ITEM_NTF"); stTMSG_SKEP_REMOVE_ITEM_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ROOM_USER_ENTER_REQ: { oPacker.PushFieldName("stTMSG_ROOM_USER_ENTER_REQ"); stTMSG_ROOM_USER_ENTER_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ROOM_USER_ENTER_RSP: { oPacker.PushFieldName("stTMSG_ROOM_USER_ENTER_RSP"); stTMSG_ROOM_USER_ENTER_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ROOM_USER_ENTER_NTF: { oPacker.PushFieldName("stTMSG_ROOM_USER_ENTER_NTF"); stTMSG_ROOM_USER_ENTER_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ROOM_USER_LEAVE_REQ: { oPacker.PushFieldName("stTMSG_ROOM_USER_LEAVE_REQ"); stTMSG_ROOM_USER_LEAVE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ROOM_USER_LEAVE_RSP: { oPacker.PushFieldName("stTMSG_ROOM_USER_LEAVE_RSP"); stTMSG_ROOM_USER_LEAVE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ROOM_USER_LEAVE_NTF: { oPacker.PushFieldName("stTMSG_ROOM_USER_LEAVE_NTF"); stTMSG_ROOM_USER_LEAVE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ROOM_USER_ENTER_COMPLETE_NTF: { oPacker.PushFieldName("stTMSG_ROOM_USER_ENTER_COMPLETE_NTF"); stTMSG_ROOM_USER_ENTER_COMPLETE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ROOM_SEARCH_REQ: { oPacker.PushFieldName("stTMSG_ROOM_SEARCH_REQ"); stTMSG_ROOM_SEARCH_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ROOM_SEARCH_RSP: { oPacker.PushFieldName("stTMSG_ROOM_SEARCH_RSP"); stTMSG_ROOM_SEARCH_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ROOM_GET_ROOMDESC_REQ: { oPacker.PushFieldName("stTMSG_ROOM_GET_ROOMDESC_REQ"); stTMSG_ROOM_GET_ROOMDESC_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ROOM_GET_ROOMDESC_RSP: { oPacker.PushFieldName("stTMSG_ROOM_GET_ROOMDESC_RSP"); stTMSG_ROOM_GET_ROOMDESC_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MINIGAME_SET_PROP_REQ: { oPacker.PushFieldName("stTMSG_MINIGAME_SET_PROP_REQ"); stTMSG_MINIGAME_SET_PROP_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MINIGAME_SET_PROP_RSP: { oPacker.PushFieldName("stTMSG_MINIGAME_SET_PROP_RSP"); stTMSG_MINIGAME_SET_PROP_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MINIGAME_GET_PROP_REQ: { oPacker.PushFieldName("stTMSG_MINIGAME_GET_PROP_REQ"); stTMSG_MINIGAME_GET_PROP_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MINIGAME_GET_PROP_RSP: { oPacker.PushFieldName("stTMSG_MINIGAME_GET_PROP_RSP"); stTMSG_MINIGAME_GET_PROP_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MINIGAME_PROP_UPDATED_NTF: { oPacker.PushFieldName("stTMSG_MINIGAME_PROP_UPDATED_NTF"); stTMSG_MINIGAME_PROP_UPDATED_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MINIGAME_RESET_ROOM_PROP_REQ: { oPacker.PushFieldName("stTMSG_MINIGAME_RESET_ROOM_PROP_REQ"); stTMSG_MINIGAME_RESET_ROOM_PROP_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MINIGAME_RESET_ROOM_PROP_RSP: { oPacker.PushFieldName("stTMSG_MINIGAME_RESET_ROOM_PROP_RSP"); stTMSG_MINIGAME_RESET_ROOM_PROP_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MINIGAME_RESET_ROOM_PROP_NTF: { oPacker.PushFieldName("stTMSG_MINIGAME_RESET_ROOM_PROP_NTF"); stTMSG_MINIGAME_RESET_ROOM_PROP_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MINIGAME_BROADCAST_MSG_REQ: { oPacker.PushFieldName("stTMSG_MINIGAME_BROADCAST_MSG_REQ"); stTMSG_MINIGAME_BROADCAST_MSG_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MINIGAME_BROADCAST_MSG_RSP: { oPacker.PushFieldName("stTMSG_MINIGAME_BROADCAST_MSG_RSP"); stTMSG_MINIGAME_BROADCAST_MSG_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MINIGAME_BROADCAST_MSG_NTF: { oPacker.PushFieldName("stTMSG_MINIGAME_BROADCAST_MSG_NTF"); stTMSG_MINIGAME_BROADCAST_MSG_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_NET_OBJ_CREATE_NTF: { oPacker.PushFieldName("stTMSG_NET_OBJ_CREATE_NTF"); stTMSG_NET_OBJ_CREATE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_NET_OBJ_PROP_CHANGE_REQ: { oPacker.PushFieldName("stTMSG_NET_OBJ_PROP_CHANGE_REQ"); stTMSG_NET_OBJ_PROP_CHANGE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_NET_OBJ_PROP_UPDATED_NTF: { oPacker.PushFieldName("stTMSG_NET_OBJ_PROP_UPDATED_NTF"); stTMSG_NET_OBJ_PROP_UPDATED_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_NET_OBJ_DESTROY_NTF: { oPacker.PushFieldName("stTMSG_NET_OBJ_DESTROY_NTF"); stTMSG_NET_OBJ_DESTROY_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_NET_OBJ_SYNC_NTF: { oPacker.PushFieldName("stTMSG_NET_OBJ_SYNC_NTF"); stTMSG_NET_OBJ_SYNC_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_NET_OBJ_SYNC_ELEMENT_NTF: { oPacker.PushFieldName("stTMSG_NET_OBJ_SYNC_ELEMENT_NTF"); stTMSG_NET_OBJ_SYNC_ELEMENT_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_NET_OBJ_DESTROY_BY_ROLE_NTF: { oPacker.PushFieldName("stTMSG_NET_OBJ_DESTROY_BY_ROLE_NTF"); stTMSG_NET_OBJ_DESTROY_BY_ROLE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_BUILD_DISCIPLE_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_BUILD_DISCIPLE_REQ"); stTMSG_DISCIPLE_BUILD_DISCIPLE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_BUILD_DISCIPLE_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_BUILD_DISCIPLE_RSP"); stTMSG_DISCIPLE_BUILD_DISCIPLE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_TUINING_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_TUINING_REQ"); stTMSG_DISCIPLE_TUINING_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_TUINING_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_TUINING_RSP"); stTMSG_DISCIPLE_TUINING_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_START_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_START_REQ"); stTMSG_DISCIPLE_WANDERING_START_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_START_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_START_RSP"); stTMSG_DISCIPLE_WANDERING_START_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_EVENT_LOG_NTF: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF"); stTMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_FINISH_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_FINISH_REQ"); stTMSG_DISCIPLE_WANDERING_FINISH_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_FINISH_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_FINISH_RSP"); stTMSG_DISCIPLE_WANDERING_FINISH_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_WILL_FINISH_NTF: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF"); stTMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ"); stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP"); stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_CHOOSE_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_CHOOSE_REQ"); stTMSG_DISCIPLE_WANDERING_CHOOSE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_CHOOSE_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_CHOOSE_RSP"); stTMSG_DISCIPLE_WANDERING_CHOOSE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_REMOVE_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_REMOVE_REQ"); stTMSG_DISCIPLE_WANDERING_REMOVE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_REMOVE_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_REMOVE_RSP"); stTMSG_DISCIPLE_WANDERING_REMOVE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_CLOSE_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_CLOSE_REQ"); stTMSG_DISCIPLE_WANDERING_CLOSE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_CLOSE_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_CLOSE_RSP"); stTMSG_DISCIPLE_WANDERING_CLOSE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF"); stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ"); stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP"); stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ"); stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP"); stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_GODEXAM_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_GODEXAM_REQ"); stTMSG_DISCIPLE_WANDERING_GODEXAM_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_GODEXAM_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_GODEXAM_RSP"); stTMSG_DISCIPLE_WANDERING_GODEXAM_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ"); stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP"); stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ"); stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP"); stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ"); stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP"); stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ"); stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP"); stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF"); stTMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF"); stTMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF"); stTMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF: { oPacker.PushFieldName("stTMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF"); stTMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_WANDERING_ABILITY_SELECT_NTF: { oPacker.PushFieldName("stTMSG_WANDERING_ABILITY_SELECT_NTF"); stTMSG_WANDERING_ABILITY_SELECT_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_WANDERING_ABILITY_SELECT_REQ: { oPacker.PushFieldName("stTMSG_WANDERING_ABILITY_SELECT_REQ"); stTMSG_WANDERING_ABILITY_SELECT_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_WANDERING_ABILITY_SELECT_RSP: { oPacker.PushFieldName("stTMSG_WANDERING_ABILITY_SELECT_RSP"); stTMSG_WANDERING_ABILITY_SELECT_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_WANDERING_ABILITY_SELECT_LOAD_REQ: { oPacker.PushFieldName("stTMSG_WANDERING_ABILITY_SELECT_LOAD_REQ"); stTMSG_WANDERING_ABILITY_SELECT_LOAD_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_WANDERING_ABILITY_SELECT_LOAD_RSP: { oPacker.PushFieldName("stTMSG_WANDERING_ABILITY_SELECT_LOAD_RSP"); stTMSG_WANDERING_ABILITY_SELECT_LOAD_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_WANDERING_EQUIP_SELECT_NEXT_REQ: { oPacker.PushFieldName("stTMSG_WANDERING_EQUIP_SELECT_NEXT_REQ"); stTMSG_WANDERING_EQUIP_SELECT_NEXT_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_WANDERING_EQUIP_SELECT_NEXT_RSP: { oPacker.PushFieldName("stTMSG_WANDERING_EQUIP_SELECT_NEXT_RSP"); stTMSG_WANDERING_EQUIP_SELECT_NEXT_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_WANDERING_EQUIP_SELECT_LOAD_REQ: { oPacker.PushFieldName("stTMSG_WANDERING_EQUIP_SELECT_LOAD_REQ"); stTMSG_WANDERING_EQUIP_SELECT_LOAD_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_WANDERING_EQUIP_SELECT_LOAD_RSP: { oPacker.PushFieldName("stTMSG_WANDERING_EQUIP_SELECT_LOAD_RSP"); stTMSG_WANDERING_EQUIP_SELECT_LOAD_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_WANDERING_EQUIP_SELECT_NTF: { oPacker.PushFieldName("stTMSG_WANDERING_EQUIP_SELECT_NTF"); stTMSG_WANDERING_EQUIP_SELECT_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_INIT_CONTEXT_NTF: { oPacker.PushFieldName("stTMSG_BATTLE_INIT_CONTEXT_NTF"); stTMSG_BATTLE_INIT_CONTEXT_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_INPUT_REQ: { oPacker.PushFieldName("stTMSG_BATTLE_INPUT_REQ"); stTMSG_BATTLE_INPUT_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_INPUT_RSP: { oPacker.PushFieldName("stTMSG_BATTLE_INPUT_RSP"); stTMSG_BATTLE_INPUT_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_RESULT_NTF: { oPacker.PushFieldName("stTMSG_BATTLE_RESULT_NTF"); stTMSG_BATTLE_RESULT_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_ROUND_OVER_NTF: { oPacker.PushFieldName("stTMSG_BATTLE_ROUND_OVER_NTF"); stTMSG_BATTLE_ROUND_OVER_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_PROP_UPDATED_NTF: { oPacker.PushFieldName("stTMSG_BATTLE_PROP_UPDATED_NTF"); stTMSG_BATTLE_PROP_UPDATED_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_SKILL_UPDATED_NTF: { oPacker.PushFieldName("stTMSG_BATTLE_SKILL_UPDATED_NTF"); stTMSG_BATTLE_SKILL_UPDATED_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_ACTION_USE_SKILL_NTF: { oPacker.PushFieldName("stTMSG_BATTLE_ACTION_USE_SKILL_NTF"); stTMSG_BATTLE_ACTION_USE_SKILL_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_ACTION_INJURED_NTF: { oPacker.PushFieldName("stTMSG_BATTLE_ACTION_INJURED_NTF"); stTMSG_BATTLE_ACTION_INJURED_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_ACTION_DEATH_NTF: { oPacker.PushFieldName("stTMSG_BATTLE_ACTION_DEATH_NTF"); stTMSG_BATTLE_ACTION_DEATH_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_CONTEXT_PACK_NTF: { oPacker.PushFieldName("stTMSG_BATTLE_CONTEXT_PACK_NTF"); stTMSG_BATTLE_CONTEXT_PACK_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_CONFIRM_RESULT_REQ: { oPacker.PushFieldName("stTMSG_BATTLE_CONFIRM_RESULT_REQ"); stTMSG_BATTLE_CONFIRM_RESULT_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_BATTLE_CONFIRM_RESULT_RSP: { oPacker.PushFieldName("stTMSG_BATTLE_CONFIRM_RESULT_RSP"); stTMSG_BATTLE_CONFIRM_RESULT_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_FORMATION_SET_LAYOUT_REQ: { oPacker.PushFieldName("stTMSG_FORMATION_SET_LAYOUT_REQ"); stTMSG_FORMATION_SET_LAYOUT_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_FORMATION_SET_LAYOUT_RSP: { oPacker.PushFieldName("stTMSG_FORMATION_SET_LAYOUT_RSP"); stTMSG_FORMATION_SET_LAYOUT_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_FORMATION_UPDATE_NTF: { oPacker.PushFieldName("stTMSG_FORMATION_UPDATE_NTF"); stTMSG_FORMATION_UPDATE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SEEDING_CREATE_NTF: { oPacker.PushFieldName("stTMSG_SEEDING_CREATE_NTF"); stTMSG_SEEDING_CREATE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SEEDING_UPDATE_PROP_NTF: { oPacker.PushFieldName("stTMSG_SEEDING_UPDATE_PROP_NTF"); stTMSG_SEEDING_UPDATE_PROP_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_CREATE_NTF: { oPacker.PushFieldName("stTMSG_DISCIPLE_CREATE_NTF"); stTMSG_DISCIPLE_CREATE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_UPDATE_PROP_NTF: { oPacker.PushFieldName("stTMSG_DISCIPLE_UPDATE_PROP_NTF"); stTMSG_DISCIPLE_UPDATE_PROP_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_RENAME_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_RENAME_REQ"); stTMSG_DISCIPLE_RENAME_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_RENAME_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_RENAME_RSP"); stTMSG_DISCIPLE_RENAME_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SEEDING_UPGRADE_REQ: { oPacker.PushFieldName("stTMSG_SEEDING_UPGRADE_REQ"); stTMSG_SEEDING_UPGRADE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SEEDING_UPGRADE_RSP: { oPacker.PushFieldName("stTMSG_SEEDING_UPGRADE_RSP"); stTMSG_SEEDING_UPGRADE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_EQUIP_CREATE_NTF: { oPacker.PushFieldName("stTMSG_EQUIP_CREATE_NTF"); stTMSG_EQUIP_CREATE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_EQUIP_UPDATE_PROP_NTF: { oPacker.PushFieldName("stTMSG_EQUIP_UPDATE_PROP_NTF"); stTMSG_EQUIP_UPDATE_PROP_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_EQUIP_DELETE_NTF: { oPacker.PushFieldName("stTMSG_EQUIP_DELETE_NTF"); stTMSG_EQUIP_DELETE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_MOVE_EQUIP_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_MOVE_EQUIP_REQ"); stTMSG_DISCIPLE_MOVE_EQUIP_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_MOVE_EQUIP_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_MOVE_EQUIP_RSP"); stTMSG_DISCIPLE_MOVE_EQUIP_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_DELETE_EQUIP_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_DELETE_EQUIP_REQ"); stTMSG_DISCIPLE_DELETE_EQUIP_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_DELETE_EQUIP_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_DELETE_EQUIP_RSP"); stTMSG_DISCIPLE_DELETE_EQUIP_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_COMPOSE_EQUIP_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_COMPOSE_EQUIP_REQ"); stTMSG_DISCIPLE_COMPOSE_EQUIP_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_COMPOSE_EQUIP_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_COMPOSE_EQUIP_RSP"); stTMSG_DISCIPLE_COMPOSE_EQUIP_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_EQUIP_ATLAS_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_EQUIP_ATLAS_REQ"); stTMSG_DISCIPLE_EQUIP_ATLAS_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_EQUIP_ATLAS_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_EQUIP_ATLAS_RSP"); stTMSG_DISCIPLE_EQUIP_ATLAS_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_REFORGE_EQUIP_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_REFORGE_EQUIP_REQ"); stTMSG_DISCIPLE_REFORGE_EQUIP_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_REFORGE_EQUIP_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_REFORGE_EQUIP_RSP"); stTMSG_DISCIPLE_REFORGE_EQUIP_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_REPLACE_SKILL_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_REPLACE_SKILL_REQ"); stTMSG_DISCIPLE_REPLACE_SKILL_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_REPLACE_SKILL_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_REPLACE_SKILL_RSP"); stTMSG_DISCIPLE_REPLACE_SKILL_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_ADD_ABILITY_NTF: { oPacker.PushFieldName("stTMSG_DISCIPLE_ADD_ABILITY_NTF"); stTMSG_DISCIPLE_ADD_ABILITY_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_REMOVE_ABILITY_NTF: { oPacker.PushFieldName("stTMSG_DISCIPLE_REMOVE_ABILITY_NTF"); stTMSG_DISCIPLE_REMOVE_ABILITY_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_GRID_HP_UNLOCK_REQ: { oPacker.PushFieldName("stTMSG_DISCIPLE_GRID_HP_UNLOCK_REQ"); stTMSG_DISCIPLE_GRID_HP_UNLOCK_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_GRID_HP_UNLOCK_RSP: { oPacker.PushFieldName("stTMSG_DISCIPLE_GRID_HP_UNLOCK_RSP"); stTMSG_DISCIPLE_GRID_HP_UNLOCK_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_DISCIPLE_GRID_UNLOCK_NTF: { oPacker.PushFieldName("stTMSG_DISCIPLE_GRID_UNLOCK_NTF"); stTMSG_DISCIPLE_GRID_UNLOCK_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SECT_UPGRADE_REQ: { oPacker.PushFieldName("stTMSG_SECT_UPGRADE_REQ"); stTMSG_SECT_UPGRADE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SECT_UPGRADE_RSP: { oPacker.PushFieldName("stTMSG_SECT_UPGRADE_RSP"); stTMSG_SECT_UPGRADE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SECT_UPGRADE_NTF: { oPacker.PushFieldName("stTMSG_SECT_UPGRADE_NTF"); stTMSG_SECT_UPGRADE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ANTIQUE_UPDATE_NTF: { oPacker.PushFieldName("stTMSG_ANTIQUE_UPDATE_NTF"); stTMSG_ANTIQUE_UPDATE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ANTIQUE_UPGRADE_REQ: { oPacker.PushFieldName("stTMSG_ANTIQUE_UPGRADE_REQ"); stTMSG_ANTIQUE_UPGRADE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ANTIQUE_UPGRADE_RSP: { oPacker.PushFieldName("stTMSG_ANTIQUE_UPGRADE_RSP"); stTMSG_ANTIQUE_UPGRADE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_STAMINA_BUY_REQ: { oPacker.PushFieldName("stTMSG_STAMINA_BUY_REQ"); stTMSG_STAMINA_BUY_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_STAMINA_BUY_RSP: { oPacker.PushFieldName("stTMSG_STAMINA_BUY_RSP"); stTMSG_STAMINA_BUY_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_STAMINA_NTF: { oPacker.PushFieldName("stTMSG_STAMINA_NTF"); stTMSG_STAMINA_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_PERIODPRIZE_ITEM_CHANGED_NTF: { oPacker.PushFieldName("stTMSG_PERIODPRIZE_ITEM_CHANGED_NTF"); stTMSG_PERIODPRIZE_ITEM_CHANGED_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_PERIODPRIZE_ITEM_PURCHASE_REQ: { oPacker.PushFieldName("stTMSG_PERIODPRIZE_ITEM_PURCHASE_REQ"); stTMSG_PERIODPRIZE_ITEM_PURCHASE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_PERIODPRIZE_ITEM_PURCHASE_RSP: { oPacker.PushFieldName("stTMSG_PERIODPRIZE_ITEM_PURCHASE_RSP"); stTMSG_PERIODPRIZE_ITEM_PURCHASE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_CDKEY_WITHDRAW_REQ: { oPacker.PushFieldName("stTMSG_CDKEY_WITHDRAW_REQ"); stTMSG_CDKEY_WITHDRAW_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_CDKEY_WITHDRAW_RSP: { oPacker.PushFieldName("stTMSG_CDKEY_WITHDRAW_RSP"); stTMSG_CDKEY_WITHDRAW_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_CDKEY_WITHDRAW_NTF: { oPacker.PushFieldName("stTMSG_CDKEY_WITHDRAW_NTF"); stTMSG_CDKEY_WITHDRAW_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ARENA_LOAD_REQ: { oPacker.PushFieldName("stTMSG_ARENA_LOAD_REQ"); stTMSG_ARENA_LOAD_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ARENA_LOAD_RSP: { oPacker.PushFieldName("stTMSG_ARENA_LOAD_RSP"); stTMSG_ARENA_LOAD_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ARENA_GET_RANKING_REQ: { oPacker.PushFieldName("stTMSG_ARENA_GET_RANKING_REQ"); stTMSG_ARENA_GET_RANKING_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ARENA_GET_RANKING_RSP: { oPacker.PushFieldName("stTMSG_ARENA_GET_RANKING_RSP"); stTMSG_ARENA_GET_RANKING_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ARENA_RANK_CHANGED_NTF: { oPacker.PushFieldName("stTMSG_ARENA_RANK_CHANGED_NTF"); stTMSG_ARENA_RANK_CHANGED_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ARENA_REFRESH_OPP_REQ: { oPacker.PushFieldName("stTMSG_ARENA_REFRESH_OPP_REQ"); stTMSG_ARENA_REFRESH_OPP_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ARENA_REFRESH_OPP_RSP: { oPacker.PushFieldName("stTMSG_ARENA_REFRESH_OPP_RSP"); stTMSG_ARENA_REFRESH_OPP_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ARENA_REFRESH_OPP_NTF: { oPacker.PushFieldName("stTMSG_ARENA_REFRESH_OPP_NTF"); stTMSG_ARENA_REFRESH_OPP_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ARENA_CHALLENGE_REQ: { oPacker.PushFieldName("stTMSG_ARENA_CHALLENGE_REQ"); stTMSG_ARENA_CHALLENGE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ARENA_CHALLENGE_RSP: { oPacker.PushFieldName("stTMSG_ARENA_CHALLENGE_RSP"); stTMSG_ARENA_CHALLENGE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ARENA_1_CHALLENGE_RESULT_NTF: { oPacker.PushFieldName("stTMSG_ARENA_1_CHALLENGE_RESULT_NTF"); stTMSG_ARENA_1_CHALLENGE_RESULT_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ARENA_DISCIPLE_DETAIL_REQ: { oPacker.PushFieldName("stTMSG_ARENA_DISCIPLE_DETAIL_REQ"); stTMSG_ARENA_DISCIPLE_DETAIL_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_ARENA_DISCIPLE_DETAIL_RSP: { oPacker.PushFieldName("stTMSG_ARENA_DISCIPLE_DETAIL_RSP"); stTMSG_ARENA_DISCIPLE_DETAIL_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_GUIDE_SAVE_PROGRESS_REQ: { oPacker.PushFieldName("stTMSG_GUIDE_SAVE_PROGRESS_REQ"); stTMSG_GUIDE_SAVE_PROGRESS_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_GUIDE_SAVE_PROGRESS_RSP: { oPacker.PushFieldName("stTMSG_GUIDE_SAVE_PROGRESS_RSP"); stTMSG_GUIDE_SAVE_PROGRESS_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_GUIDE_LAUNCH_NTF: { oPacker.PushFieldName("stTMSG_GUIDE_LAUNCH_NTF"); stTMSG_GUIDE_LAUNCH_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_GUIDE_UPDATE_NTF: { oPacker.PushFieldName("stTMSG_GUIDE_UPDATE_NTF"); stTMSG_GUIDE_UPDATE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_GUIDE_SAVE_FREE_BUFF_REQ: { oPacker.PushFieldName("stTMSG_GUIDE_SAVE_FREE_BUFF_REQ"); stTMSG_GUIDE_SAVE_FREE_BUFF_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_GUIDE_SAVE_FREE_BUFF_RSP: { oPacker.PushFieldName("stTMSG_GUIDE_SAVE_FREE_BUFF_RSP"); stTMSG_GUIDE_SAVE_FREE_BUFF_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SECTFORM_CHANGE_REQ: { oPacker.PushFieldName("stTMSG_SECTFORM_CHANGE_REQ"); stTMSG_SECTFORM_CHANGE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SECTFORM_CHANGE_RSP: { oPacker.PushFieldName("stTMSG_SECTFORM_CHANGE_RSP"); stTMSG_SECTFORM_CHANGE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SECTFORM_UPDATE_NTF: { oPacker.PushFieldName("stTMSG_SECTFORM_UPDATE_NTF"); stTMSG_SECTFORM_UPDATE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SHOP_RACK_CONTENT_CHANGED_NTF: { oPacker.PushFieldName("stTMSG_SHOP_RACK_CONTENT_CHANGED_NTF"); stTMSG_SHOP_RACK_CONTENT_CHANGED_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SHOP_LOAD_GOODS_REQ: { oPacker.PushFieldName("stTMSG_SHOP_LOAD_GOODS_REQ"); stTMSG_SHOP_LOAD_GOODS_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SHOP_LOAD_GOODS_RSP: { oPacker.PushFieldName("stTMSG_SHOP_LOAD_GOODS_RSP"); stTMSG_SHOP_LOAD_GOODS_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SHOP_BUY_GOODS_REQ: { oPacker.PushFieldName("stTMSG_SHOP_BUY_GOODS_REQ"); stTMSG_SHOP_BUY_GOODS_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_SHOP_BUY_GOODS_RSP: { oPacker.PushFieldName("stTMSG_SHOP_BUY_GOODS_RSP"); stTMSG_SHOP_BUY_GOODS_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MAIL_GET_LIST_REQ: { oPacker.PushFieldName("stTMSG_MAIL_GET_LIST_REQ"); stTMSG_MAIL_GET_LIST_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MAIL_GET_LIST_RSP: { oPacker.PushFieldName("stTMSG_MAIL_GET_LIST_RSP"); stTMSG_MAIL_GET_LIST_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MAIL_OPEN_REQ: { oPacker.PushFieldName("stTMSG_MAIL_OPEN_REQ"); stTMSG_MAIL_OPEN_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MAIL_OPEN_RSP: { oPacker.PushFieldName("stTMSG_MAIL_OPEN_RSP"); stTMSG_MAIL_OPEN_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MAIL_DELETE_REQ: { oPacker.PushFieldName("stTMSG_MAIL_DELETE_REQ"); stTMSG_MAIL_DELETE_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MAIL_DELETE_RSP: { oPacker.PushFieldName("stTMSG_MAIL_DELETE_RSP"); stTMSG_MAIL_DELETE_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MAIL_GET_ATTACHMENT_REQ: { oPacker.PushFieldName("stTMSG_MAIL_GET_ATTACHMENT_REQ"); stTMSG_MAIL_GET_ATTACHMENT_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MAIL_GET_ATTACHMENT_RSP: { oPacker.PushFieldName("stTMSG_MAIL_GET_ATTACHMENT_RSP"); stTMSG_MAIL_GET_ATTACHMENT_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MAIL_NEW_MAIL_NTF: { oPacker.PushFieldName("stTMSG_MAIL_NEW_MAIL_NTF"); stTMSG_MAIL_NEW_MAIL_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_MAIL_DELETE_NTF: { oPacker.PushFieldName("stTMSG_MAIL_DELETE_NTF"); stTMSG_MAIL_DELETE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOOTBOX_UPDATE_NTF: { oPacker.PushFieldName("stTMSG_LOOTBOX_UPDATE_NTF"); stTMSG_LOOTBOX_UPDATE_NTF.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOOTBOX_OPEN_REQ: { oPacker.PushFieldName("stTMSG_LOOTBOX_OPEN_REQ"); stTMSG_LOOTBOX_OPEN_REQ.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		case MSG_LOOTBOX_OPEN_RSP: { oPacker.PushFieldName("stTMSG_LOOTBOX_OPEN_RSP"); stTMSG_LOOTBOX_OPEN_RSP.Pack_WithTrace(oPacker); oPacker.PopFieldName();} break;
		    default:throw new CPackDataException(CPackDataException.EN_EXCEPTION.UNDEFINE_MSGID);
		    } //switch;   

	}   //  Pack()

	public void Unpack(CORM_packaux oPacker) {
		if (stHead == null) { stHead = new TMsgHead(); }
		stHead.Unpack(oPacker);
		switch(stHead.get_iMsgID()){
		        case MSG_LOGIN_HANDSHAKE_REQ: { if (stTMSG_LOGIN_HANDSHAKE_REQ == null) { stTMSG_LOGIN_HANDSHAKE_REQ = new TMSG_LOGIN_HANDSHAKE_REQ(); } stTMSG_LOGIN_HANDSHAKE_REQ.Unpack(oPacker); } break;
		        case MSG_LOGIN_HANDSHAKE_RSP: { if (stTMSG_LOGIN_HANDSHAKE_RSP == null) { stTMSG_LOGIN_HANDSHAKE_RSP = new TMSG_LOGIN_HANDSHAKE_RSP(); } stTMSG_LOGIN_HANDSHAKE_RSP.Unpack(oPacker); } break;
		        case MSG_LOGIN_LOGIN_REQ: { if (stTMSG_LOGIN_LOGIN_REQ == null) { stTMSG_LOGIN_LOGIN_REQ = new TMSG_LOGIN_LOGIN_REQ(); } stTMSG_LOGIN_LOGIN_REQ.Unpack(oPacker); } break;
		        case MSG_LOGIN_LOGIN_RSP: { if (stTMSG_LOGIN_LOGIN_RSP == null) { stTMSG_LOGIN_LOGIN_RSP = new TMSG_LOGIN_LOGIN_RSP(); } stTMSG_LOGIN_LOGIN_RSP.Unpack(oPacker); } break;
		        case MSG_LOGIN_ERROR_NTF: { if (stTMSG_LOGIN_ERROR_NTF == null) { stTMSG_LOGIN_ERROR_NTF = new TMSG_LOGIN_ERROR_NTF(); } stTMSG_LOGIN_ERROR_NTF.Unpack(oPacker); } break;
		        case MSG_LOGIN_NEW_ACCOUNT_NTF: { if (stTMSG_LOGIN_NEW_ACCOUNT_NTF == null) { stTMSG_LOGIN_NEW_ACCOUNT_NTF = new TMSG_LOGIN_NEW_ACCOUNT_NTF(); } stTMSG_LOGIN_NEW_ACCOUNT_NTF.Unpack(oPacker); } break;
		        case MSG_LOGIN_BAN_ACCOUNT_NTF: { if (stTMSG_LOGIN_BAN_ACCOUNT_NTF == null) { stTMSG_LOGIN_BAN_ACCOUNT_NTF = new TMSG_LOGIN_BAN_ACCOUNT_NTF(); } stTMSG_LOGIN_BAN_ACCOUNT_NTF.Unpack(oPacker); } break;
		        case MSG_LOGIN_AUTO_LOGIN_REQ: { if (stTMSG_LOGIN_AUTO_LOGIN_REQ == null) { stTMSG_LOGIN_AUTO_LOGIN_REQ = new TMSG_LOGIN_AUTO_LOGIN_REQ(); } stTMSG_LOGIN_AUTO_LOGIN_REQ.Unpack(oPacker); } break;
		        case MSG_LOGIN_UPDATE_ALSESSION_NTF: { if (stTMSG_LOGIN_UPDATE_ALSESSION_NTF == null) { stTMSG_LOGIN_UPDATE_ALSESSION_NTF = new TMSG_LOGIN_UPDATE_ALSESSION_NTF(); } stTMSG_LOGIN_UPDATE_ALSESSION_NTF.Unpack(oPacker); } break;
		        case MSG_LOGIN_KICKOUT_NTF: { if (stTMSG_LOGIN_KICKOUT_NTF == null) { stTMSG_LOGIN_KICKOUT_NTF = new TMSG_LOGIN_KICKOUT_NTF(); } stTMSG_LOGIN_KICKOUT_NTF.Unpack(oPacker); } break;
		        case MSG_LOGIN_QUERY_ALL_ROLE_REQ: { if (stTMSG_LOGIN_QUERY_ALL_ROLE_REQ == null) { stTMSG_LOGIN_QUERY_ALL_ROLE_REQ = new TMSG_LOGIN_QUERY_ALL_ROLE_REQ(); } stTMSG_LOGIN_QUERY_ALL_ROLE_REQ.Unpack(oPacker); } break;
		        case MSG_LOGIN_QUERY_ALL_ROLE_RSP: { if (stTMSG_LOGIN_QUERY_ALL_ROLE_RSP == null) { stTMSG_LOGIN_QUERY_ALL_ROLE_RSP = new TMSG_LOGIN_QUERY_ALL_ROLE_RSP(); } stTMSG_LOGIN_QUERY_ALL_ROLE_RSP.Unpack(oPacker); } break;
		        case MSG_LOGIN_QUERY_ALL_ROLE_NTF: { if (stTMSG_LOGIN_QUERY_ALL_ROLE_NTF == null) { stTMSG_LOGIN_QUERY_ALL_ROLE_NTF = new TMSG_LOGIN_QUERY_ALL_ROLE_NTF(); } stTMSG_LOGIN_QUERY_ALL_ROLE_NTF.Unpack(oPacker); } break;
		        case MSG_LOGIN_NOACC_INWORLD_NTF: { if (stTMSG_LOGIN_NOACC_INWORLD_NTF == null) { stTMSG_LOGIN_NOACC_INWORLD_NTF = new TMSG_LOGIN_NOACC_INWORLD_NTF(); } stTMSG_LOGIN_NOACC_INWORLD_NTF.Unpack(oPacker); } break;
		        case MSG_LOGIN_CREATE_ACC_INWORLD_REQ: { if (stTMSG_LOGIN_CREATE_ACC_INWORLD_REQ == null) { stTMSG_LOGIN_CREATE_ACC_INWORLD_REQ = new TMSG_LOGIN_CREATE_ACC_INWORLD_REQ(); } stTMSG_LOGIN_CREATE_ACC_INWORLD_REQ.Unpack(oPacker); } break;
		        case MSG_LOGIN_CREATE_ACC_INWORLD_RSP: { if (stTMSG_LOGIN_CREATE_ACC_INWORLD_RSP == null) { stTMSG_LOGIN_CREATE_ACC_INWORLD_RSP = new TMSG_LOGIN_CREATE_ACC_INWORLD_RSP(); } stTMSG_LOGIN_CREATE_ACC_INWORLD_RSP.Unpack(oPacker); } break;
		        case MSG_LOGIN_GEN_WORLD_ALS_REQ: { if (stTMSG_LOGIN_GEN_WORLD_ALS_REQ == null) { stTMSG_LOGIN_GEN_WORLD_ALS_REQ = new TMSG_LOGIN_GEN_WORLD_ALS_REQ(); } stTMSG_LOGIN_GEN_WORLD_ALS_REQ.Unpack(oPacker); } break;
		        case MSG_LOGIN_GEN_WORLD_ALS_RSP: { if (stTMSG_LOGIN_GEN_WORLD_ALS_RSP == null) { stTMSG_LOGIN_GEN_WORLD_ALS_RSP = new TMSG_LOGIN_GEN_WORLD_ALS_RSP(); } stTMSG_LOGIN_GEN_WORLD_ALS_RSP.Unpack(oPacker); } break;
		        case MSG_LOGIN_ACCOUNT_UNDELETE_REQ: { if (stTMSG_LOGIN_ACCOUNT_UNDELETE_REQ == null) { stTMSG_LOGIN_ACCOUNT_UNDELETE_REQ = new TMSG_LOGIN_ACCOUNT_UNDELETE_REQ(); } stTMSG_LOGIN_ACCOUNT_UNDELETE_REQ.Unpack(oPacker); } break;
		        case MSG_LOGIN_ACCOUNT_UNDELETE_RSP: { if (stTMSG_LOGIN_ACCOUNT_UNDELETE_RSP == null) { stTMSG_LOGIN_ACCOUNT_UNDELETE_RSP = new TMSG_LOGIN_ACCOUNT_UNDELETE_RSP(); } stTMSG_LOGIN_ACCOUNT_UNDELETE_RSP.Unpack(oPacker); } break;
		        case MSG_LOGIN_ACCOUNT_DELETE_STATE_NTF: { if (stTMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF == null) { stTMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF = new TMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF(); } stTMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF.Unpack(oPacker); } break;
		        case MSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF: { if (stTMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF == null) { stTMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF = new TMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF(); } stTMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF.Unpack(oPacker); } break;
		        case MSG_LOGIN_BANROLE_NTF: { if (stTMSG_LOGIN_BANROLE_NTF == null) { stTMSG_LOGIN_BANROLE_NTF = new TMSG_LOGIN_BANROLE_NTF(); } stTMSG_LOGIN_BANROLE_NTF.Unpack(oPacker); } break;
		        case MSG_LOGIN_SERVERMAINTAIN_NTF: { if (stTMSG_LOGIN_SERVERMAINTAIN_NTF == null) { stTMSG_LOGIN_SERVERMAINTAIN_NTF = new TMSG_LOGIN_SERVERMAINTAIN_NTF(); } stTMSG_LOGIN_SERVERMAINTAIN_NTF.Unpack(oPacker); } break;
		        case MSG_LOGIN_WORLDOPENDATE_NTF: { if (stTMSG_LOGIN_WORLDOPENDATE_NTF == null) { stTMSG_LOGIN_WORLDOPENDATE_NTF = new TMSG_LOGIN_WORLDOPENDATE_NTF(); } stTMSG_LOGIN_WORLDOPENDATE_NTF.Unpack(oPacker); } break;
		        case MSG_LOBBY_ERROR_NTF: { if (stTMSG_LOBBY_ERROR_NTF == null) { stTMSG_LOBBY_ERROR_NTF = new TMSG_LOBBY_ERROR_NTF(); } stTMSG_LOBBY_ERROR_NTF.Unpack(oPacker); } break;
		        case MSG_LEECHDOM_USE_REQ: { if (stTMSG_LEECHDOM_USE_REQ == null) { stTMSG_LEECHDOM_USE_REQ = new TMSG_LEECHDOM_USE_REQ(); } stTMSG_LEECHDOM_USE_REQ.Unpack(oPacker); } break;
		        case MSG_LEECHDOM_USE_RSP: { if (stTMSG_LEECHDOM_USE_RSP == null) { stTMSG_LEECHDOM_USE_RSP = new TMSG_LEECHDOM_USE_RSP(); } stTMSG_LEECHDOM_USE_RSP.Unpack(oPacker); } break;
		        case MSG_ACTION_LUA_REQUEST_REQ: { if (stTMSG_ACTION_LUA_REQUEST_REQ == null) { stTMSG_ACTION_LUA_REQUEST_REQ = new TMSG_ACTION_LUA_REQUEST_REQ(); } stTMSG_ACTION_LUA_REQUEST_REQ.Unpack(oPacker); } break;
		        case MSG_ACTION_LUA_REQUEST_RSP: { if (stTMSG_ACTION_LUA_REQUEST_RSP == null) { stTMSG_ACTION_LUA_REQUEST_RSP = new TMSG_ACTION_LUA_REQUEST_RSP(); } stTMSG_ACTION_LUA_REQUEST_RSP.Unpack(oPacker); } break;
		        case MSG_ACTION_LUA_SCRIPT_NTF: { if (stTMSG_ACTION_LUA_SCRIPT_NTF == null) { stTMSG_ACTION_LUA_SCRIPT_NTF = new TMSG_ACTION_LUA_SCRIPT_NTF(); } stTMSG_ACTION_LUA_SCRIPT_NTF.Unpack(oPacker); } break;
		        case MSG_ACTION_QUERY_TIME_REQ: { if (stTNullStruct == null) { stTNullStruct = new TNullStruct(); } stTNullStruct.Unpack(oPacker); } break;
		        case MSG_ACTION_QUERY_TIME_RSP: { if (stTMSG_ACTION_QUERY_TIME_RSP == null) { stTMSG_ACTION_QUERY_TIME_RSP = new TMSG_ACTION_QUERY_TIME_RSP(); } stTMSG_ACTION_QUERY_TIME_RSP.Unpack(oPacker); } break;
		        case MSG_ACTION_TESTCASE_NTF: { if (stTMSG_ACTION_TESTCASE_NTF == null) { stTMSG_ACTION_TESTCASE_NTF = new TMSG_ACTION_TESTCASE_NTF(); } stTMSG_ACTION_TESTCASE_NTF.Unpack(oPacker); } break;
		        case MSG_ACTION_SYNC_FLAG_NTF: { if (stTMSG_ACTION_SYNC_FLAG_NTF == null) { stTMSG_ACTION_SYNC_FLAG_NTF = new TMSG_ACTION_SYNC_FLAG_NTF(); } stTMSG_ACTION_SYNC_FLAG_NTF.Unpack(oPacker); } break;
		        case MSG_ACTION_OUT_OF_SYNC_NTF: { if (stTMSG_ACTION_OUT_OF_SYNC_NTF == null) { stTMSG_ACTION_OUT_OF_SYNC_NTF = new TMSG_ACTION_OUT_OF_SYNC_NTF(); } stTMSG_ACTION_OUT_OF_SYNC_NTF.Unpack(oPacker); } break;
		        case MSG_ACTION_SHOW_PRIZE_NTF: { if (stTMSG_ACTION_SHOW_PRIZE_NTF == null) { stTMSG_ACTION_SHOW_PRIZE_NTF = new TMSG_ACTION_SHOW_PRIZE_NTF(); } stTMSG_ACTION_SHOW_PRIZE_NTF.Unpack(oPacker); } break;
		        case MSG_ACTION_LUALIKE_SCRIPT_NTF: { if (stTMSG_ACTION_LUALIKE_SCRIPT_NTF == null) { stTMSG_ACTION_LUALIKE_SCRIPT_NTF = new TMSG_ACTION_LUALIKE_SCRIPT_NTF(); } stTMSG_ACTION_LUALIKE_SCRIPT_NTF.Unpack(oPacker); } break;
		        case MSG_ENTITY_CREATE_ROLE_NTF: { if (stTMSG_ENTITY_CREATE_ROLE_NTF == null) { stTMSG_ENTITY_CREATE_ROLE_NTF = new TMSG_ENTITY_CREATE_ROLE_NTF(); } stTMSG_ENTITY_CREATE_ROLE_NTF.Unpack(oPacker); } break;
		        case MSG_ENTITY_CREATE_ROLE_PART_NTF: { if (stTMSG_ENTITY_CREATE_ROLE_PART_NTF == null) { stTMSG_ENTITY_CREATE_ROLE_PART_NTF = new TMSG_ENTITY_CREATE_ROLE_PART_NTF(); } stTMSG_ENTITY_CREATE_ROLE_PART_NTF.Unpack(oPacker); } break;
		        case MSG_ENTITY_CREATE_PERSON_NTF: { if (stTMSG_ENTITY_CREATE_PERSON_NTF == null) { stTMSG_ENTITY_CREATE_PERSON_NTF = new TMSG_ENTITY_CREATE_PERSON_NTF(); } stTMSG_ENTITY_CREATE_PERSON_NTF.Unpack(oPacker); } break;
		        case MSG_ENTITY_CREATE_LEECHDOM_NTF: { if (stTMSG_ENTITY_CREATE_LEECHDOM_NTF == null) { stTMSG_ENTITY_CREATE_LEECHDOM_NTF = new TMSG_ENTITY_CREATE_LEECHDOM_NTF(); } stTMSG_ENTITY_CREATE_LEECHDOM_NTF.Unpack(oPacker); } break;
		        case MSG_ENTITY_DESTROY_NTF: { if (stTMSG_ENTITY_DESTROY_NTF == null) { stTMSG_ENTITY_DESTROY_NTF = new TMSG_ENTITY_DESTROY_NTF(); } stTMSG_ENTITY_DESTROY_NTF.Unpack(oPacker); } break;
		        case MSG_ENTITY_UPDATE_PROP_NTF: { if (stTMSG_ENTITY_UPDATE_PROP_NTF == null) { stTMSG_ENTITY_UPDATE_PROP_NTF = new TMSG_ENTITY_UPDATE_PROP_NTF(); } stTMSG_ENTITY_UPDATE_PROP_NTF.Unpack(oPacker); } break;
		        case MSG_ENTITY_SET_PROP_REQ: { if (stTMSG_ENTITY_SET_PROP_REQ == null) { stTMSG_ENTITY_SET_PROP_REQ = new TMSG_ENTITY_SET_PROP_REQ(); } stTMSG_ENTITY_SET_PROP_REQ.Unpack(oPacker); } break;
		        case MSG_ENTITY_SET_PROP_RSP: { if (stTMSG_ENTITY_SET_PROP_RSP == null) { stTMSG_ENTITY_SET_PROP_RSP = new TMSG_ENTITY_SET_PROP_RSP(); } stTMSG_ENTITY_SET_PROP_RSP.Unpack(oPacker); } break;
		        case MSG_ENTITY_RENAME_REQ: { if (stTMSG_ENTITY_RENAME_REQ == null) { stTMSG_ENTITY_RENAME_REQ = new TMSG_ENTITY_RENAME_REQ(); } stTMSG_ENTITY_RENAME_REQ.Unpack(oPacker); } break;
		        case MSG_ENTITY_RENAME_RSP: { if (stTMSG_ENTITY_RENAME_RSP == null) { stTMSG_ENTITY_RENAME_RSP = new TMSG_ENTITY_RENAME_RSP(); } stTMSG_ENTITY_RENAME_RSP.Unpack(oPacker); } break;
		        case MSG_CLIENT_LOGIN_OSS_REQ: { if (stTMSG_CLIENT_LOGIN_OSS_REQ == null) { stTMSG_CLIENT_LOGIN_OSS_REQ = new TMSG_CLIENT_LOGIN_OSS_REQ(); } stTMSG_CLIENT_LOGIN_OSS_REQ.Unpack(oPacker); } break;
		        case MSG_CLIENT_LOGIN_OSS_RSP: { if (stTMSG_CLIENT_LOGIN_OSS_RSP == null) { stTMSG_CLIENT_LOGIN_OSS_RSP = new TMSG_CLIENT_LOGIN_OSS_RSP(); } stTMSG_CLIENT_LOGIN_OSS_RSP.Unpack(oPacker); } break;
		        case MSG_SERVER_TIME_REQ: { if (stTMSG_SERVER_TIME_REQ == null) { stTMSG_SERVER_TIME_REQ = new TMSG_SERVER_TIME_REQ(); } stTMSG_SERVER_TIME_REQ.Unpack(oPacker); } break;
		        case MSG_SERVER_TIME_RSP: { if (stTMSG_SERVER_TIME_RSP == null) { stTMSG_SERVER_TIME_RSP = new TMSG_SERVER_TIME_RSP(); } stTMSG_SERVER_TIME_RSP.Unpack(oPacker); } break;
		        case MSG_SKEP_CREATE_NTF: { if (stTMSG_SKEP_CREATE_NTF == null) { stTMSG_SKEP_CREATE_NTF = new TMSG_SKEP_CREATE_NTF(); } stTMSG_SKEP_CREATE_NTF.Unpack(oPacker); } break;
		        case MSG_SKEP_DESTROY_NTF: { if (stTMSG_SKEP_DESTROY_NTF == null) { stTMSG_SKEP_DESTROY_NTF = new TMSG_SKEP_DESTROY_NTF(); } stTMSG_SKEP_DESTROY_NTF.Unpack(oPacker); } break;
		        case MSG_SKEP_ADD_ITEM_NTF: { if (stTMSG_SKEP_ADD_ITEM_NTF == null) { stTMSG_SKEP_ADD_ITEM_NTF = new TMSG_SKEP_ADD_ITEM_NTF(); } stTMSG_SKEP_ADD_ITEM_NTF.Unpack(oPacker); } break;
		        case MSG_SKEP_REMOVE_ITEM_NTF: { if (stTMSG_SKEP_REMOVE_ITEM_NTF == null) { stTMSG_SKEP_REMOVE_ITEM_NTF = new TMSG_SKEP_REMOVE_ITEM_NTF(); } stTMSG_SKEP_REMOVE_ITEM_NTF.Unpack(oPacker); } break;
		        case MSG_ROOM_USER_ENTER_REQ: { if (stTMSG_ROOM_USER_ENTER_REQ == null) { stTMSG_ROOM_USER_ENTER_REQ = new TMSG_ROOM_USER_ENTER_REQ(); } stTMSG_ROOM_USER_ENTER_REQ.Unpack(oPacker); } break;
		        case MSG_ROOM_USER_ENTER_RSP: { if (stTMSG_ROOM_USER_ENTER_RSP == null) { stTMSG_ROOM_USER_ENTER_RSP = new TMSG_ROOM_USER_ENTER_RSP(); } stTMSG_ROOM_USER_ENTER_RSP.Unpack(oPacker); } break;
		        case MSG_ROOM_USER_ENTER_NTF: { if (stTMSG_ROOM_USER_ENTER_NTF == null) { stTMSG_ROOM_USER_ENTER_NTF = new TMSG_ROOM_USER_ENTER_NTF(); } stTMSG_ROOM_USER_ENTER_NTF.Unpack(oPacker); } break;
		        case MSG_ROOM_USER_LEAVE_REQ: { if (stTMSG_ROOM_USER_LEAVE_REQ == null) { stTMSG_ROOM_USER_LEAVE_REQ = new TMSG_ROOM_USER_LEAVE_REQ(); } stTMSG_ROOM_USER_LEAVE_REQ.Unpack(oPacker); } break;
		        case MSG_ROOM_USER_LEAVE_RSP: { if (stTMSG_ROOM_USER_LEAVE_RSP == null) { stTMSG_ROOM_USER_LEAVE_RSP = new TMSG_ROOM_USER_LEAVE_RSP(); } stTMSG_ROOM_USER_LEAVE_RSP.Unpack(oPacker); } break;
		        case MSG_ROOM_USER_LEAVE_NTF: { if (stTMSG_ROOM_USER_LEAVE_NTF == null) { stTMSG_ROOM_USER_LEAVE_NTF = new TMSG_ROOM_USER_LEAVE_NTF(); } stTMSG_ROOM_USER_LEAVE_NTF.Unpack(oPacker); } break;
		        case MSG_ROOM_USER_ENTER_COMPLETE_NTF: { if (stTMSG_ROOM_USER_ENTER_COMPLETE_NTF == null) { stTMSG_ROOM_USER_ENTER_COMPLETE_NTF = new TMSG_ROOM_USER_ENTER_COMPLETE_NTF(); } stTMSG_ROOM_USER_ENTER_COMPLETE_NTF.Unpack(oPacker); } break;
		        case MSG_ROOM_SEARCH_REQ: { if (stTMSG_ROOM_SEARCH_REQ == null) { stTMSG_ROOM_SEARCH_REQ = new TMSG_ROOM_SEARCH_REQ(); } stTMSG_ROOM_SEARCH_REQ.Unpack(oPacker); } break;
		        case MSG_ROOM_SEARCH_RSP: { if (stTMSG_ROOM_SEARCH_RSP == null) { stTMSG_ROOM_SEARCH_RSP = new TMSG_ROOM_SEARCH_RSP(); } stTMSG_ROOM_SEARCH_RSP.Unpack(oPacker); } break;
		        case MSG_ROOM_GET_ROOMDESC_REQ: { if (stTMSG_ROOM_GET_ROOMDESC_REQ == null) { stTMSG_ROOM_GET_ROOMDESC_REQ = new TMSG_ROOM_GET_ROOMDESC_REQ(); } stTMSG_ROOM_GET_ROOMDESC_REQ.Unpack(oPacker); } break;
		        case MSG_ROOM_GET_ROOMDESC_RSP: { if (stTMSG_ROOM_GET_ROOMDESC_RSP == null) { stTMSG_ROOM_GET_ROOMDESC_RSP = new TMSG_ROOM_GET_ROOMDESC_RSP(); } stTMSG_ROOM_GET_ROOMDESC_RSP.Unpack(oPacker); } break;
		        case MSG_MINIGAME_SET_PROP_REQ: { if (stTMSG_MINIGAME_SET_PROP_REQ == null) { stTMSG_MINIGAME_SET_PROP_REQ = new TMSG_MINIGAME_SET_PROP_REQ(); } stTMSG_MINIGAME_SET_PROP_REQ.Unpack(oPacker); } break;
		        case MSG_MINIGAME_SET_PROP_RSP: { if (stTMSG_MINIGAME_SET_PROP_RSP == null) { stTMSG_MINIGAME_SET_PROP_RSP = new TMSG_MINIGAME_SET_PROP_RSP(); } stTMSG_MINIGAME_SET_PROP_RSP.Unpack(oPacker); } break;
		        case MSG_MINIGAME_GET_PROP_REQ: { if (stTMSG_MINIGAME_GET_PROP_REQ == null) { stTMSG_MINIGAME_GET_PROP_REQ = new TMSG_MINIGAME_GET_PROP_REQ(); } stTMSG_MINIGAME_GET_PROP_REQ.Unpack(oPacker); } break;
		        case MSG_MINIGAME_GET_PROP_RSP: { if (stTMSG_MINIGAME_GET_PROP_RSP == null) { stTMSG_MINIGAME_GET_PROP_RSP = new TMSG_MINIGAME_GET_PROP_RSP(); } stTMSG_MINIGAME_GET_PROP_RSP.Unpack(oPacker); } break;
		        case MSG_MINIGAME_PROP_UPDATED_NTF: { if (stTMSG_MINIGAME_PROP_UPDATED_NTF == null) { stTMSG_MINIGAME_PROP_UPDATED_NTF = new TMSG_MINIGAME_PROP_UPDATED_NTF(); } stTMSG_MINIGAME_PROP_UPDATED_NTF.Unpack(oPacker); } break;
		        case MSG_MINIGAME_RESET_ROOM_PROP_REQ: { if (stTMSG_MINIGAME_RESET_ROOM_PROP_REQ == null) { stTMSG_MINIGAME_RESET_ROOM_PROP_REQ = new TMSG_MINIGAME_RESET_ROOM_PROP_REQ(); } stTMSG_MINIGAME_RESET_ROOM_PROP_REQ.Unpack(oPacker); } break;
		        case MSG_MINIGAME_RESET_ROOM_PROP_RSP: { if (stTMSG_MINIGAME_RESET_ROOM_PROP_RSP == null) { stTMSG_MINIGAME_RESET_ROOM_PROP_RSP = new TMSG_MINIGAME_RESET_ROOM_PROP_RSP(); } stTMSG_MINIGAME_RESET_ROOM_PROP_RSP.Unpack(oPacker); } break;
		        case MSG_MINIGAME_RESET_ROOM_PROP_NTF: { if (stTMSG_MINIGAME_RESET_ROOM_PROP_NTF == null) { stTMSG_MINIGAME_RESET_ROOM_PROP_NTF = new TMSG_MINIGAME_RESET_ROOM_PROP_NTF(); } stTMSG_MINIGAME_RESET_ROOM_PROP_NTF.Unpack(oPacker); } break;
		        case MSG_MINIGAME_BROADCAST_MSG_REQ: { if (stTMSG_MINIGAME_BROADCAST_MSG_REQ == null) { stTMSG_MINIGAME_BROADCAST_MSG_REQ = new TMSG_MINIGAME_BROADCAST_MSG_REQ(); } stTMSG_MINIGAME_BROADCAST_MSG_REQ.Unpack(oPacker); } break;
		        case MSG_MINIGAME_BROADCAST_MSG_RSP: { if (stTMSG_MINIGAME_BROADCAST_MSG_RSP == null) { stTMSG_MINIGAME_BROADCAST_MSG_RSP = new TMSG_MINIGAME_BROADCAST_MSG_RSP(); } stTMSG_MINIGAME_BROADCAST_MSG_RSP.Unpack(oPacker); } break;
		        case MSG_MINIGAME_BROADCAST_MSG_NTF: { if (stTMSG_MINIGAME_BROADCAST_MSG_NTF == null) { stTMSG_MINIGAME_BROADCAST_MSG_NTF = new TMSG_MINIGAME_BROADCAST_MSG_NTF(); } stTMSG_MINIGAME_BROADCAST_MSG_NTF.Unpack(oPacker); } break;
		        case MSG_NET_OBJ_CREATE_NTF: { if (stTMSG_NET_OBJ_CREATE_NTF == null) { stTMSG_NET_OBJ_CREATE_NTF = new TMSG_NET_OBJ_CREATE_NTF(); } stTMSG_NET_OBJ_CREATE_NTF.Unpack(oPacker); } break;
		        case MSG_NET_OBJ_PROP_CHANGE_REQ: { if (stTMSG_NET_OBJ_PROP_CHANGE_REQ == null) { stTMSG_NET_OBJ_PROP_CHANGE_REQ = new TMSG_NET_OBJ_PROP_CHANGE_REQ(); } stTMSG_NET_OBJ_PROP_CHANGE_REQ.Unpack(oPacker); } break;
		        case MSG_NET_OBJ_PROP_UPDATED_NTF: { if (stTMSG_NET_OBJ_PROP_UPDATED_NTF == null) { stTMSG_NET_OBJ_PROP_UPDATED_NTF = new TMSG_NET_OBJ_PROP_UPDATED_NTF(); } stTMSG_NET_OBJ_PROP_UPDATED_NTF.Unpack(oPacker); } break;
		        case MSG_NET_OBJ_DESTROY_NTF: { if (stTMSG_NET_OBJ_DESTROY_NTF == null) { stTMSG_NET_OBJ_DESTROY_NTF = new TMSG_NET_OBJ_DESTROY_NTF(); } stTMSG_NET_OBJ_DESTROY_NTF.Unpack(oPacker); } break;
		        case MSG_NET_OBJ_SYNC_NTF: { if (stTMSG_NET_OBJ_SYNC_NTF == null) { stTMSG_NET_OBJ_SYNC_NTF = new TMSG_NET_OBJ_SYNC_NTF(); } stTMSG_NET_OBJ_SYNC_NTF.Unpack(oPacker); } break;
		        case MSG_NET_OBJ_SYNC_ELEMENT_NTF: { if (stTMSG_NET_OBJ_SYNC_ELEMENT_NTF == null) { stTMSG_NET_OBJ_SYNC_ELEMENT_NTF = new TMSG_NET_OBJ_SYNC_ELEMENT_NTF(); } stTMSG_NET_OBJ_SYNC_ELEMENT_NTF.Unpack(oPacker); } break;
		        case MSG_NET_OBJ_DESTROY_BY_ROLE_NTF: { if (stTMSG_NET_OBJ_DESTROY_BY_ROLE_NTF == null) { stTMSG_NET_OBJ_DESTROY_BY_ROLE_NTF = new TMSG_NET_OBJ_DESTROY_BY_ROLE_NTF(); } stTMSG_NET_OBJ_DESTROY_BY_ROLE_NTF.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_BUILD_DISCIPLE_REQ: { if (stTMSG_DISCIPLE_BUILD_DISCIPLE_REQ == null) { stTMSG_DISCIPLE_BUILD_DISCIPLE_REQ = new TMSG_DISCIPLE_BUILD_DISCIPLE_REQ(); } stTMSG_DISCIPLE_BUILD_DISCIPLE_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_BUILD_DISCIPLE_RSP: { if (stTMSG_DISCIPLE_BUILD_DISCIPLE_RSP == null) { stTMSG_DISCIPLE_BUILD_DISCIPLE_RSP = new TMSG_DISCIPLE_BUILD_DISCIPLE_RSP(); } stTMSG_DISCIPLE_BUILD_DISCIPLE_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_TUINING_REQ: { if (stTMSG_DISCIPLE_TUINING_REQ == null) { stTMSG_DISCIPLE_TUINING_REQ = new TMSG_DISCIPLE_TUINING_REQ(); } stTMSG_DISCIPLE_TUINING_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_TUINING_RSP: { if (stTMSG_DISCIPLE_TUINING_RSP == null) { stTMSG_DISCIPLE_TUINING_RSP = new TMSG_DISCIPLE_TUINING_RSP(); } stTMSG_DISCIPLE_TUINING_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_START_REQ: { if (stTMSG_DISCIPLE_WANDERING_START_REQ == null) { stTMSG_DISCIPLE_WANDERING_START_REQ = new TMSG_DISCIPLE_WANDERING_START_REQ(); } stTMSG_DISCIPLE_WANDERING_START_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_START_RSP: { if (stTMSG_DISCIPLE_WANDERING_START_RSP == null) { stTMSG_DISCIPLE_WANDERING_START_RSP = new TMSG_DISCIPLE_WANDERING_START_RSP(); } stTMSG_DISCIPLE_WANDERING_START_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_EVENT_LOG_NTF: { if (stTMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF == null) { stTMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF = new TMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF(); } stTMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_FINISH_REQ: { if (stTMSG_DISCIPLE_WANDERING_FINISH_REQ == null) { stTMSG_DISCIPLE_WANDERING_FINISH_REQ = new TMSG_DISCIPLE_WANDERING_FINISH_REQ(); } stTMSG_DISCIPLE_WANDERING_FINISH_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_FINISH_RSP: { if (stTMSG_DISCIPLE_WANDERING_FINISH_RSP == null) { stTMSG_DISCIPLE_WANDERING_FINISH_RSP = new TMSG_DISCIPLE_WANDERING_FINISH_RSP(); } stTMSG_DISCIPLE_WANDERING_FINISH_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_WILL_FINISH_NTF: { if (stTMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF == null) { stTMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF = new TMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF(); } stTMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ: { if (stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ == null) { stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ = new TMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ(); } stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP: { if (stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP == null) { stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP = new TMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP(); } stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_CHOOSE_REQ: { if (stTMSG_DISCIPLE_WANDERING_CHOOSE_REQ == null) { stTMSG_DISCIPLE_WANDERING_CHOOSE_REQ = new TMSG_DISCIPLE_WANDERING_CHOOSE_REQ(); } stTMSG_DISCIPLE_WANDERING_CHOOSE_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_CHOOSE_RSP: { if (stTMSG_DISCIPLE_WANDERING_CHOOSE_RSP == null) { stTMSG_DISCIPLE_WANDERING_CHOOSE_RSP = new TMSG_DISCIPLE_WANDERING_CHOOSE_RSP(); } stTMSG_DISCIPLE_WANDERING_CHOOSE_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_REMOVE_REQ: { if (stTMSG_DISCIPLE_WANDERING_REMOVE_REQ == null) { stTMSG_DISCIPLE_WANDERING_REMOVE_REQ = new TMSG_DISCIPLE_WANDERING_REMOVE_REQ(); } stTMSG_DISCIPLE_WANDERING_REMOVE_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_REMOVE_RSP: { if (stTMSG_DISCIPLE_WANDERING_REMOVE_RSP == null) { stTMSG_DISCIPLE_WANDERING_REMOVE_RSP = new TMSG_DISCIPLE_WANDERING_REMOVE_RSP(); } stTMSG_DISCIPLE_WANDERING_REMOVE_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_CLOSE_REQ: { if (stTMSG_DISCIPLE_WANDERING_CLOSE_REQ == null) { stTMSG_DISCIPLE_WANDERING_CLOSE_REQ = new TMSG_DISCIPLE_WANDERING_CLOSE_REQ(); } stTMSG_DISCIPLE_WANDERING_CLOSE_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_CLOSE_RSP: { if (stTMSG_DISCIPLE_WANDERING_CLOSE_RSP == null) { stTMSG_DISCIPLE_WANDERING_CLOSE_RSP = new TMSG_DISCIPLE_WANDERING_CLOSE_RSP(); } stTMSG_DISCIPLE_WANDERING_CLOSE_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF: { if (stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF == null) { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF = new TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF(); } stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ: { if (stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ == null) { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ = new TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ(); } stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP: { if (stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP == null) { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP = new TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP(); } stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ: { if (stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ == null) { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ = new TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ(); } stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP: { if (stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP == null) { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP = new TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP(); } stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_GODEXAM_REQ: { if (stTMSG_DISCIPLE_WANDERING_GODEXAM_REQ == null) { stTMSG_DISCIPLE_WANDERING_GODEXAM_REQ = new TMSG_DISCIPLE_WANDERING_GODEXAM_REQ(); } stTMSG_DISCIPLE_WANDERING_GODEXAM_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_GODEXAM_RSP: { if (stTMSG_DISCIPLE_WANDERING_GODEXAM_RSP == null) { stTMSG_DISCIPLE_WANDERING_GODEXAM_RSP = new TMSG_DISCIPLE_WANDERING_GODEXAM_RSP(); } stTMSG_DISCIPLE_WANDERING_GODEXAM_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ(); } stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP(); } stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ(); } stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP(); } stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ(); } stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP(); } stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ(); } stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP(); } stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF: { if (stTMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF == null) { stTMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF = new TMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF(); } stTMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF: { if (stTMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF == null) { stTMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF = new TMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF(); } stTMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF: { if (stTMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF == null) { stTMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF = new TMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF(); } stTMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF: { if (stTMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF == null) { stTMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF = new TMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF(); } stTMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF.Unpack(oPacker); } break;
		        case MSG_WANDERING_ABILITY_SELECT_NTF: { if (stTMSG_WANDERING_ABILITY_SELECT_NTF == null) { stTMSG_WANDERING_ABILITY_SELECT_NTF = new TMSG_WANDERING_ABILITY_SELECT_NTF(); } stTMSG_WANDERING_ABILITY_SELECT_NTF.Unpack(oPacker); } break;
		        case MSG_WANDERING_ABILITY_SELECT_REQ: { if (stTMSG_WANDERING_ABILITY_SELECT_REQ == null) { stTMSG_WANDERING_ABILITY_SELECT_REQ = new TMSG_WANDERING_ABILITY_SELECT_REQ(); } stTMSG_WANDERING_ABILITY_SELECT_REQ.Unpack(oPacker); } break;
		        case MSG_WANDERING_ABILITY_SELECT_RSP: { if (stTMSG_WANDERING_ABILITY_SELECT_RSP == null) { stTMSG_WANDERING_ABILITY_SELECT_RSP = new TMSG_WANDERING_ABILITY_SELECT_RSP(); } stTMSG_WANDERING_ABILITY_SELECT_RSP.Unpack(oPacker); } break;
		        case MSG_WANDERING_ABILITY_SELECT_LOAD_REQ: { if (stTMSG_WANDERING_ABILITY_SELECT_LOAD_REQ == null) { stTMSG_WANDERING_ABILITY_SELECT_LOAD_REQ = new TMSG_WANDERING_ABILITY_SELECT_LOAD_REQ(); } stTMSG_WANDERING_ABILITY_SELECT_LOAD_REQ.Unpack(oPacker); } break;
		        case MSG_WANDERING_ABILITY_SELECT_LOAD_RSP: { if (stTMSG_WANDERING_ABILITY_SELECT_LOAD_RSP == null) { stTMSG_WANDERING_ABILITY_SELECT_LOAD_RSP = new TMSG_WANDERING_ABILITY_SELECT_LOAD_RSP(); } stTMSG_WANDERING_ABILITY_SELECT_LOAD_RSP.Unpack(oPacker); } break;
		        case MSG_WANDERING_EQUIP_SELECT_NEXT_REQ: { if (stTMSG_WANDERING_EQUIP_SELECT_NEXT_REQ == null) { stTMSG_WANDERING_EQUIP_SELECT_NEXT_REQ = new TMSG_WANDERING_EQUIP_SELECT_NEXT_REQ(); } stTMSG_WANDERING_EQUIP_SELECT_NEXT_REQ.Unpack(oPacker); } break;
		        case MSG_WANDERING_EQUIP_SELECT_NEXT_RSP: { if (stTMSG_WANDERING_EQUIP_SELECT_NEXT_RSP == null) { stTMSG_WANDERING_EQUIP_SELECT_NEXT_RSP = new TMSG_WANDERING_EQUIP_SELECT_NEXT_RSP(); } stTMSG_WANDERING_EQUIP_SELECT_NEXT_RSP.Unpack(oPacker); } break;
		        case MSG_WANDERING_EQUIP_SELECT_LOAD_REQ: { if (stTMSG_WANDERING_EQUIP_SELECT_LOAD_REQ == null) { stTMSG_WANDERING_EQUIP_SELECT_LOAD_REQ = new TMSG_WANDERING_EQUIP_SELECT_LOAD_REQ(); } stTMSG_WANDERING_EQUIP_SELECT_LOAD_REQ.Unpack(oPacker); } break;
		        case MSG_WANDERING_EQUIP_SELECT_LOAD_RSP: { if (stTMSG_WANDERING_EQUIP_SELECT_LOAD_RSP == null) { stTMSG_WANDERING_EQUIP_SELECT_LOAD_RSP = new TMSG_WANDERING_EQUIP_SELECT_LOAD_RSP(); } stTMSG_WANDERING_EQUIP_SELECT_LOAD_RSP.Unpack(oPacker); } break;
		        case MSG_WANDERING_EQUIP_SELECT_NTF: { if (stTMSG_WANDERING_EQUIP_SELECT_NTF == null) { stTMSG_WANDERING_EQUIP_SELECT_NTF = new TMSG_WANDERING_EQUIP_SELECT_NTF(); } stTMSG_WANDERING_EQUIP_SELECT_NTF.Unpack(oPacker); } break;
		        case MSG_BATTLE_INIT_CONTEXT_NTF: { if (stTMSG_BATTLE_INIT_CONTEXT_NTF == null) { stTMSG_BATTLE_INIT_CONTEXT_NTF = new TMSG_BATTLE_INIT_CONTEXT_NTF(); } stTMSG_BATTLE_INIT_CONTEXT_NTF.Unpack(oPacker); } break;
		        case MSG_BATTLE_INPUT_REQ: { if (stTMSG_BATTLE_INPUT_REQ == null) { stTMSG_BATTLE_INPUT_REQ = new TMSG_BATTLE_INPUT_REQ(); } stTMSG_BATTLE_INPUT_REQ.Unpack(oPacker); } break;
		        case MSG_BATTLE_INPUT_RSP: { if (stTMSG_BATTLE_INPUT_RSP == null) { stTMSG_BATTLE_INPUT_RSP = new TMSG_BATTLE_INPUT_RSP(); } stTMSG_BATTLE_INPUT_RSP.Unpack(oPacker); } break;
		        case MSG_BATTLE_RESULT_NTF: { if (stTMSG_BATTLE_RESULT_NTF == null) { stTMSG_BATTLE_RESULT_NTF = new TMSG_BATTLE_RESULT_NTF(); } stTMSG_BATTLE_RESULT_NTF.Unpack(oPacker); } break;
		        case MSG_BATTLE_ROUND_OVER_NTF: { if (stTMSG_BATTLE_ROUND_OVER_NTF == null) { stTMSG_BATTLE_ROUND_OVER_NTF = new TMSG_BATTLE_ROUND_OVER_NTF(); } stTMSG_BATTLE_ROUND_OVER_NTF.Unpack(oPacker); } break;
		        case MSG_BATTLE_PROP_UPDATED_NTF: { if (stTMSG_BATTLE_PROP_UPDATED_NTF == null) { stTMSG_BATTLE_PROP_UPDATED_NTF = new TMSG_BATTLE_PROP_UPDATED_NTF(); } stTMSG_BATTLE_PROP_UPDATED_NTF.Unpack(oPacker); } break;
		        case MSG_BATTLE_SKILL_UPDATED_NTF: { if (stTMSG_BATTLE_SKILL_UPDATED_NTF == null) { stTMSG_BATTLE_SKILL_UPDATED_NTF = new TMSG_BATTLE_SKILL_UPDATED_NTF(); } stTMSG_BATTLE_SKILL_UPDATED_NTF.Unpack(oPacker); } break;
		        case MSG_BATTLE_ACTION_USE_SKILL_NTF: { if (stTMSG_BATTLE_ACTION_USE_SKILL_NTF == null) { stTMSG_BATTLE_ACTION_USE_SKILL_NTF = new TMSG_BATTLE_ACTION_USE_SKILL_NTF(); } stTMSG_BATTLE_ACTION_USE_SKILL_NTF.Unpack(oPacker); } break;
		        case MSG_BATTLE_ACTION_INJURED_NTF: { if (stTMSG_BATTLE_ACTION_INJURED_NTF == null) { stTMSG_BATTLE_ACTION_INJURED_NTF = new TMSG_BATTLE_ACTION_INJURED_NTF(); } stTMSG_BATTLE_ACTION_INJURED_NTF.Unpack(oPacker); } break;
		        case MSG_BATTLE_ACTION_DEATH_NTF: { if (stTMSG_BATTLE_ACTION_DEATH_NTF == null) { stTMSG_BATTLE_ACTION_DEATH_NTF = new TMSG_BATTLE_ACTION_DEATH_NTF(); } stTMSG_BATTLE_ACTION_DEATH_NTF.Unpack(oPacker); } break;
		        case MSG_BATTLE_CONTEXT_PACK_NTF: { if (stTMSG_BATTLE_CONTEXT_PACK_NTF == null) { stTMSG_BATTLE_CONTEXT_PACK_NTF = new TMSG_BATTLE_CONTEXT_PACK_NTF(); } stTMSG_BATTLE_CONTEXT_PACK_NTF.Unpack(oPacker); } break;
		        case MSG_BATTLE_CONFIRM_RESULT_REQ: { if (stTMSG_BATTLE_CONFIRM_RESULT_REQ == null) { stTMSG_BATTLE_CONFIRM_RESULT_REQ = new TMSG_BATTLE_CONFIRM_RESULT_REQ(); } stTMSG_BATTLE_CONFIRM_RESULT_REQ.Unpack(oPacker); } break;
		        case MSG_BATTLE_CONFIRM_RESULT_RSP: { if (stTMSG_BATTLE_CONFIRM_RESULT_RSP == null) { stTMSG_BATTLE_CONFIRM_RESULT_RSP = new TMSG_BATTLE_CONFIRM_RESULT_RSP(); } stTMSG_BATTLE_CONFIRM_RESULT_RSP.Unpack(oPacker); } break;
		        case MSG_FORMATION_SET_LAYOUT_REQ: { if (stTMSG_FORMATION_SET_LAYOUT_REQ == null) { stTMSG_FORMATION_SET_LAYOUT_REQ = new TMSG_FORMATION_SET_LAYOUT_REQ(); } stTMSG_FORMATION_SET_LAYOUT_REQ.Unpack(oPacker); } break;
		        case MSG_FORMATION_SET_LAYOUT_RSP: { if (stTMSG_FORMATION_SET_LAYOUT_RSP == null) { stTMSG_FORMATION_SET_LAYOUT_RSP = new TMSG_FORMATION_SET_LAYOUT_RSP(); } stTMSG_FORMATION_SET_LAYOUT_RSP.Unpack(oPacker); } break;
		        case MSG_FORMATION_UPDATE_NTF: { if (stTMSG_FORMATION_UPDATE_NTF == null) { stTMSG_FORMATION_UPDATE_NTF = new TMSG_FORMATION_UPDATE_NTF(); } stTMSG_FORMATION_UPDATE_NTF.Unpack(oPacker); } break;
		        case MSG_SEEDING_CREATE_NTF: { if (stTMSG_SEEDING_CREATE_NTF == null) { stTMSG_SEEDING_CREATE_NTF = new TMSG_SEEDING_CREATE_NTF(); } stTMSG_SEEDING_CREATE_NTF.Unpack(oPacker); } break;
		        case MSG_SEEDING_UPDATE_PROP_NTF: { if (stTMSG_SEEDING_UPDATE_PROP_NTF == null) { stTMSG_SEEDING_UPDATE_PROP_NTF = new TMSG_SEEDING_UPDATE_PROP_NTF(); } stTMSG_SEEDING_UPDATE_PROP_NTF.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_CREATE_NTF: { if (stTMSG_DISCIPLE_CREATE_NTF == null) { stTMSG_DISCIPLE_CREATE_NTF = new TMSG_DISCIPLE_CREATE_NTF(); } stTMSG_DISCIPLE_CREATE_NTF.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_UPDATE_PROP_NTF: { if (stTMSG_DISCIPLE_UPDATE_PROP_NTF == null) { stTMSG_DISCIPLE_UPDATE_PROP_NTF = new TMSG_DISCIPLE_UPDATE_PROP_NTF(); } stTMSG_DISCIPLE_UPDATE_PROP_NTF.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_RENAME_REQ: { if (stTMSG_DISCIPLE_RENAME_REQ == null) { stTMSG_DISCIPLE_RENAME_REQ = new TMSG_DISCIPLE_RENAME_REQ(); } stTMSG_DISCIPLE_RENAME_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_RENAME_RSP: { if (stTMSG_DISCIPLE_RENAME_RSP == null) { stTMSG_DISCIPLE_RENAME_RSP = new TMSG_DISCIPLE_RENAME_RSP(); } stTMSG_DISCIPLE_RENAME_RSP.Unpack(oPacker); } break;
		        case MSG_SEEDING_UPGRADE_REQ: { if (stTMSG_SEEDING_UPGRADE_REQ == null) { stTMSG_SEEDING_UPGRADE_REQ = new TMSG_SEEDING_UPGRADE_REQ(); } stTMSG_SEEDING_UPGRADE_REQ.Unpack(oPacker); } break;
		        case MSG_SEEDING_UPGRADE_RSP: { if (stTMSG_SEEDING_UPGRADE_RSP == null) { stTMSG_SEEDING_UPGRADE_RSP = new TMSG_SEEDING_UPGRADE_RSP(); } stTMSG_SEEDING_UPGRADE_RSP.Unpack(oPacker); } break;
		        case MSG_EQUIP_CREATE_NTF: { if (stTMSG_EQUIP_CREATE_NTF == null) { stTMSG_EQUIP_CREATE_NTF = new TMSG_EQUIP_CREATE_NTF(); } stTMSG_EQUIP_CREATE_NTF.Unpack(oPacker); } break;
		        case MSG_EQUIP_UPDATE_PROP_NTF: { if (stTMSG_EQUIP_UPDATE_PROP_NTF == null) { stTMSG_EQUIP_UPDATE_PROP_NTF = new TMSG_EQUIP_UPDATE_PROP_NTF(); } stTMSG_EQUIP_UPDATE_PROP_NTF.Unpack(oPacker); } break;
		        case MSG_EQUIP_DELETE_NTF: { if (stTMSG_EQUIP_DELETE_NTF == null) { stTMSG_EQUIP_DELETE_NTF = new TMSG_EQUIP_DELETE_NTF(); } stTMSG_EQUIP_DELETE_NTF.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_MOVE_EQUIP_REQ: { if (stTMSG_DISCIPLE_MOVE_EQUIP_REQ == null) { stTMSG_DISCIPLE_MOVE_EQUIP_REQ = new TMSG_DISCIPLE_MOVE_EQUIP_REQ(); } stTMSG_DISCIPLE_MOVE_EQUIP_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_MOVE_EQUIP_RSP: { if (stTMSG_DISCIPLE_MOVE_EQUIP_RSP == null) { stTMSG_DISCIPLE_MOVE_EQUIP_RSP = new TMSG_DISCIPLE_MOVE_EQUIP_RSP(); } stTMSG_DISCIPLE_MOVE_EQUIP_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_DELETE_EQUIP_REQ: { if (stTMSG_DISCIPLE_DELETE_EQUIP_REQ == null) { stTMSG_DISCIPLE_DELETE_EQUIP_REQ = new TMSG_DISCIPLE_DELETE_EQUIP_REQ(); } stTMSG_DISCIPLE_DELETE_EQUIP_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_DELETE_EQUIP_RSP: { if (stTMSG_DISCIPLE_DELETE_EQUIP_RSP == null) { stTMSG_DISCIPLE_DELETE_EQUIP_RSP = new TMSG_DISCIPLE_DELETE_EQUIP_RSP(); } stTMSG_DISCIPLE_DELETE_EQUIP_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_COMPOSE_EQUIP_REQ: { if (stTMSG_DISCIPLE_COMPOSE_EQUIP_REQ == null) { stTMSG_DISCIPLE_COMPOSE_EQUIP_REQ = new TMSG_DISCIPLE_COMPOSE_EQUIP_REQ(); } stTMSG_DISCIPLE_COMPOSE_EQUIP_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_COMPOSE_EQUIP_RSP: { if (stTMSG_DISCIPLE_COMPOSE_EQUIP_RSP == null) { stTMSG_DISCIPLE_COMPOSE_EQUIP_RSP = new TMSG_DISCIPLE_COMPOSE_EQUIP_RSP(); } stTMSG_DISCIPLE_COMPOSE_EQUIP_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_EQUIP_ATLAS_REQ: { if (stTMSG_DISCIPLE_EQUIP_ATLAS_REQ == null) { stTMSG_DISCIPLE_EQUIP_ATLAS_REQ = new TMSG_DISCIPLE_EQUIP_ATLAS_REQ(); } stTMSG_DISCIPLE_EQUIP_ATLAS_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_EQUIP_ATLAS_RSP: { if (stTMSG_DISCIPLE_EQUIP_ATLAS_RSP == null) { stTMSG_DISCIPLE_EQUIP_ATLAS_RSP = new TMSG_DISCIPLE_EQUIP_ATLAS_RSP(); } stTMSG_DISCIPLE_EQUIP_ATLAS_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_REFORGE_EQUIP_REQ: { if (stTMSG_DISCIPLE_REFORGE_EQUIP_REQ == null) { stTMSG_DISCIPLE_REFORGE_EQUIP_REQ = new TMSG_DISCIPLE_REFORGE_EQUIP_REQ(); } stTMSG_DISCIPLE_REFORGE_EQUIP_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_REFORGE_EQUIP_RSP: { if (stTMSG_DISCIPLE_REFORGE_EQUIP_RSP == null) { stTMSG_DISCIPLE_REFORGE_EQUIP_RSP = new TMSG_DISCIPLE_REFORGE_EQUIP_RSP(); } stTMSG_DISCIPLE_REFORGE_EQUIP_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_REPLACE_SKILL_REQ: { if (stTMSG_DISCIPLE_REPLACE_SKILL_REQ == null) { stTMSG_DISCIPLE_REPLACE_SKILL_REQ = new TMSG_DISCIPLE_REPLACE_SKILL_REQ(); } stTMSG_DISCIPLE_REPLACE_SKILL_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_REPLACE_SKILL_RSP: { if (stTMSG_DISCIPLE_REPLACE_SKILL_RSP == null) { stTMSG_DISCIPLE_REPLACE_SKILL_RSP = new TMSG_DISCIPLE_REPLACE_SKILL_RSP(); } stTMSG_DISCIPLE_REPLACE_SKILL_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_ADD_ABILITY_NTF: { if (stTMSG_DISCIPLE_ADD_ABILITY_NTF == null) { stTMSG_DISCIPLE_ADD_ABILITY_NTF = new TMSG_DISCIPLE_ADD_ABILITY_NTF(); } stTMSG_DISCIPLE_ADD_ABILITY_NTF.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_REMOVE_ABILITY_NTF: { if (stTMSG_DISCIPLE_REMOVE_ABILITY_NTF == null) { stTMSG_DISCIPLE_REMOVE_ABILITY_NTF = new TMSG_DISCIPLE_REMOVE_ABILITY_NTF(); } stTMSG_DISCIPLE_REMOVE_ABILITY_NTF.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_GRID_HP_UNLOCK_REQ: { if (stTMSG_DISCIPLE_GRID_HP_UNLOCK_REQ == null) { stTMSG_DISCIPLE_GRID_HP_UNLOCK_REQ = new TMSG_DISCIPLE_GRID_HP_UNLOCK_REQ(); } stTMSG_DISCIPLE_GRID_HP_UNLOCK_REQ.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_GRID_HP_UNLOCK_RSP: { if (stTMSG_DISCIPLE_GRID_HP_UNLOCK_RSP == null) { stTMSG_DISCIPLE_GRID_HP_UNLOCK_RSP = new TMSG_DISCIPLE_GRID_HP_UNLOCK_RSP(); } stTMSG_DISCIPLE_GRID_HP_UNLOCK_RSP.Unpack(oPacker); } break;
		        case MSG_DISCIPLE_GRID_UNLOCK_NTF: { if (stTMSG_DISCIPLE_GRID_UNLOCK_NTF == null) { stTMSG_DISCIPLE_GRID_UNLOCK_NTF = new TMSG_DISCIPLE_GRID_UNLOCK_NTF(); } stTMSG_DISCIPLE_GRID_UNLOCK_NTF.Unpack(oPacker); } break;
		        case MSG_SECT_UPGRADE_REQ: { if (stTMSG_SECT_UPGRADE_REQ == null) { stTMSG_SECT_UPGRADE_REQ = new TMSG_SECT_UPGRADE_REQ(); } stTMSG_SECT_UPGRADE_REQ.Unpack(oPacker); } break;
		        case MSG_SECT_UPGRADE_RSP: { if (stTMSG_SECT_UPGRADE_RSP == null) { stTMSG_SECT_UPGRADE_RSP = new TMSG_SECT_UPGRADE_RSP(); } stTMSG_SECT_UPGRADE_RSP.Unpack(oPacker); } break;
		        case MSG_SECT_UPGRADE_NTF: { if (stTMSG_SECT_UPGRADE_NTF == null) { stTMSG_SECT_UPGRADE_NTF = new TMSG_SECT_UPGRADE_NTF(); } stTMSG_SECT_UPGRADE_NTF.Unpack(oPacker); } break;
		        case MSG_ANTIQUE_UPDATE_NTF: { if (stTMSG_ANTIQUE_UPDATE_NTF == null) { stTMSG_ANTIQUE_UPDATE_NTF = new TMSG_ANTIQUE_UPDATE_NTF(); } stTMSG_ANTIQUE_UPDATE_NTF.Unpack(oPacker); } break;
		        case MSG_ANTIQUE_UPGRADE_REQ: { if (stTMSG_ANTIQUE_UPGRADE_REQ == null) { stTMSG_ANTIQUE_UPGRADE_REQ = new TMSG_ANTIQUE_UPGRADE_REQ(); } stTMSG_ANTIQUE_UPGRADE_REQ.Unpack(oPacker); } break;
		        case MSG_ANTIQUE_UPGRADE_RSP: { if (stTMSG_ANTIQUE_UPGRADE_RSP == null) { stTMSG_ANTIQUE_UPGRADE_RSP = new TMSG_ANTIQUE_UPGRADE_RSP(); } stTMSG_ANTIQUE_UPGRADE_RSP.Unpack(oPacker); } break;
		        case MSG_STAMINA_BUY_REQ: { if (stTMSG_STAMINA_BUY_REQ == null) { stTMSG_STAMINA_BUY_REQ = new TMSG_STAMINA_BUY_REQ(); } stTMSG_STAMINA_BUY_REQ.Unpack(oPacker); } break;
		        case MSG_STAMINA_BUY_RSP: { if (stTMSG_STAMINA_BUY_RSP == null) { stTMSG_STAMINA_BUY_RSP = new TMSG_STAMINA_BUY_RSP(); } stTMSG_STAMINA_BUY_RSP.Unpack(oPacker); } break;
		        case MSG_STAMINA_NTF: { if (stTMSG_STAMINA_NTF == null) { stTMSG_STAMINA_NTF = new TMSG_STAMINA_NTF(); } stTMSG_STAMINA_NTF.Unpack(oPacker); } break;
		        case MSG_PERIODPRIZE_ITEM_CHANGED_NTF: { if (stTMSG_PERIODPRIZE_ITEM_CHANGED_NTF == null) { stTMSG_PERIODPRIZE_ITEM_CHANGED_NTF = new TMSG_PERIODPRIZE_ITEM_CHANGED_NTF(); } stTMSG_PERIODPRIZE_ITEM_CHANGED_NTF.Unpack(oPacker); } break;
		        case MSG_PERIODPRIZE_ITEM_PURCHASE_REQ: { if (stTMSG_PERIODPRIZE_ITEM_PURCHASE_REQ == null) { stTMSG_PERIODPRIZE_ITEM_PURCHASE_REQ = new TMSG_PERIODPRIZE_ITEM_PURCHASE_REQ(); } stTMSG_PERIODPRIZE_ITEM_PURCHASE_REQ.Unpack(oPacker); } break;
		        case MSG_PERIODPRIZE_ITEM_PURCHASE_RSP: { if (stTMSG_PERIODPRIZE_ITEM_PURCHASE_RSP == null) { stTMSG_PERIODPRIZE_ITEM_PURCHASE_RSP = new TMSG_PERIODPRIZE_ITEM_PURCHASE_RSP(); } stTMSG_PERIODPRIZE_ITEM_PURCHASE_RSP.Unpack(oPacker); } break;
		        case MSG_CDKEY_WITHDRAW_REQ: { if (stTMSG_CDKEY_WITHDRAW_REQ == null) { stTMSG_CDKEY_WITHDRAW_REQ = new TMSG_CDKEY_WITHDRAW_REQ(); } stTMSG_CDKEY_WITHDRAW_REQ.Unpack(oPacker); } break;
		        case MSG_CDKEY_WITHDRAW_RSP: { if (stTMSG_CDKEY_WITHDRAW_RSP == null) { stTMSG_CDKEY_WITHDRAW_RSP = new TMSG_CDKEY_WITHDRAW_RSP(); } stTMSG_CDKEY_WITHDRAW_RSP.Unpack(oPacker); } break;
		        case MSG_CDKEY_WITHDRAW_NTF: { if (stTMSG_CDKEY_WITHDRAW_NTF == null) { stTMSG_CDKEY_WITHDRAW_NTF = new TMSG_CDKEY_WITHDRAW_NTF(); } stTMSG_CDKEY_WITHDRAW_NTF.Unpack(oPacker); } break;
		        case MSG_ARENA_LOAD_REQ: { if (stTMSG_ARENA_LOAD_REQ == null) { stTMSG_ARENA_LOAD_REQ = new TMSG_ARENA_LOAD_REQ(); } stTMSG_ARENA_LOAD_REQ.Unpack(oPacker); } break;
		        case MSG_ARENA_LOAD_RSP: { if (stTMSG_ARENA_LOAD_RSP == null) { stTMSG_ARENA_LOAD_RSP = new TMSG_ARENA_LOAD_RSP(); } stTMSG_ARENA_LOAD_RSP.Unpack(oPacker); } break;
		        case MSG_ARENA_GET_RANKING_REQ: { if (stTMSG_ARENA_GET_RANKING_REQ == null) { stTMSG_ARENA_GET_RANKING_REQ = new TMSG_ARENA_GET_RANKING_REQ(); } stTMSG_ARENA_GET_RANKING_REQ.Unpack(oPacker); } break;
		        case MSG_ARENA_GET_RANKING_RSP: { if (stTMSG_ARENA_GET_RANKING_RSP == null) { stTMSG_ARENA_GET_RANKING_RSP = new TMSG_ARENA_GET_RANKING_RSP(); } stTMSG_ARENA_GET_RANKING_RSP.Unpack(oPacker); } break;
		        case MSG_ARENA_RANK_CHANGED_NTF: { if (stTMSG_ARENA_RANK_CHANGED_NTF == null) { stTMSG_ARENA_RANK_CHANGED_NTF = new TMSG_ARENA_RANK_CHANGED_NTF(); } stTMSG_ARENA_RANK_CHANGED_NTF.Unpack(oPacker); } break;
		        case MSG_ARENA_REFRESH_OPP_REQ: { if (stTMSG_ARENA_REFRESH_OPP_REQ == null) { stTMSG_ARENA_REFRESH_OPP_REQ = new TMSG_ARENA_REFRESH_OPP_REQ(); } stTMSG_ARENA_REFRESH_OPP_REQ.Unpack(oPacker); } break;
		        case MSG_ARENA_REFRESH_OPP_RSP: { if (stTMSG_ARENA_REFRESH_OPP_RSP == null) { stTMSG_ARENA_REFRESH_OPP_RSP = new TMSG_ARENA_REFRESH_OPP_RSP(); } stTMSG_ARENA_REFRESH_OPP_RSP.Unpack(oPacker); } break;
		        case MSG_ARENA_REFRESH_OPP_NTF: { if (stTMSG_ARENA_REFRESH_OPP_NTF == null) { stTMSG_ARENA_REFRESH_OPP_NTF = new TMSG_ARENA_REFRESH_OPP_NTF(); } stTMSG_ARENA_REFRESH_OPP_NTF.Unpack(oPacker); } break;
		        case MSG_ARENA_CHALLENGE_REQ: { if (stTMSG_ARENA_CHALLENGE_REQ == null) { stTMSG_ARENA_CHALLENGE_REQ = new TMSG_ARENA_CHALLENGE_REQ(); } stTMSG_ARENA_CHALLENGE_REQ.Unpack(oPacker); } break;
		        case MSG_ARENA_CHALLENGE_RSP: { if (stTMSG_ARENA_CHALLENGE_RSP == null) { stTMSG_ARENA_CHALLENGE_RSP = new TMSG_ARENA_CHALLENGE_RSP(); } stTMSG_ARENA_CHALLENGE_RSP.Unpack(oPacker); } break;
		        case MSG_ARENA_1_CHALLENGE_RESULT_NTF: { if (stTMSG_ARENA_1_CHALLENGE_RESULT_NTF == null) { stTMSG_ARENA_1_CHALLENGE_RESULT_NTF = new TMSG_ARENA_1_CHALLENGE_RESULT_NTF(); } stTMSG_ARENA_1_CHALLENGE_RESULT_NTF.Unpack(oPacker); } break;
		        case MSG_ARENA_DISCIPLE_DETAIL_REQ: { if (stTMSG_ARENA_DISCIPLE_DETAIL_REQ == null) { stTMSG_ARENA_DISCIPLE_DETAIL_REQ = new TMSG_ARENA_DISCIPLE_DETAIL_REQ(); } stTMSG_ARENA_DISCIPLE_DETAIL_REQ.Unpack(oPacker); } break;
		        case MSG_ARENA_DISCIPLE_DETAIL_RSP: { if (stTMSG_ARENA_DISCIPLE_DETAIL_RSP == null) { stTMSG_ARENA_DISCIPLE_DETAIL_RSP = new TMSG_ARENA_DISCIPLE_DETAIL_RSP(); } stTMSG_ARENA_DISCIPLE_DETAIL_RSP.Unpack(oPacker); } break;
		        case MSG_GUIDE_SAVE_PROGRESS_REQ: { if (stTMSG_GUIDE_SAVE_PROGRESS_REQ == null) { stTMSG_GUIDE_SAVE_PROGRESS_REQ = new TMSG_GUIDE_SAVE_PROGRESS_REQ(); } stTMSG_GUIDE_SAVE_PROGRESS_REQ.Unpack(oPacker); } break;
		        case MSG_GUIDE_SAVE_PROGRESS_RSP: { if (stTMSG_GUIDE_SAVE_PROGRESS_RSP == null) { stTMSG_GUIDE_SAVE_PROGRESS_RSP = new TMSG_GUIDE_SAVE_PROGRESS_RSP(); } stTMSG_GUIDE_SAVE_PROGRESS_RSP.Unpack(oPacker); } break;
		        case MSG_GUIDE_LAUNCH_NTF: { if (stTMSG_GUIDE_LAUNCH_NTF == null) { stTMSG_GUIDE_LAUNCH_NTF = new TMSG_GUIDE_LAUNCH_NTF(); } stTMSG_GUIDE_LAUNCH_NTF.Unpack(oPacker); } break;
		        case MSG_GUIDE_UPDATE_NTF: { if (stTMSG_GUIDE_UPDATE_NTF == null) { stTMSG_GUIDE_UPDATE_NTF = new TMSG_GUIDE_UPDATE_NTF(); } stTMSG_GUIDE_UPDATE_NTF.Unpack(oPacker); } break;
		        case MSG_GUIDE_SAVE_FREE_BUFF_REQ: { if (stTMSG_GUIDE_SAVE_FREE_BUFF_REQ == null) { stTMSG_GUIDE_SAVE_FREE_BUFF_REQ = new TMSG_GUIDE_SAVE_FREE_BUFF_REQ(); } stTMSG_GUIDE_SAVE_FREE_BUFF_REQ.Unpack(oPacker); } break;
		        case MSG_GUIDE_SAVE_FREE_BUFF_RSP: { if (stTMSG_GUIDE_SAVE_FREE_BUFF_RSP == null) { stTMSG_GUIDE_SAVE_FREE_BUFF_RSP = new TMSG_GUIDE_SAVE_FREE_BUFF_RSP(); } stTMSG_GUIDE_SAVE_FREE_BUFF_RSP.Unpack(oPacker); } break;
		        case MSG_SECTFORM_CHANGE_REQ: { if (stTMSG_SECTFORM_CHANGE_REQ == null) { stTMSG_SECTFORM_CHANGE_REQ = new TMSG_SECTFORM_CHANGE_REQ(); } stTMSG_SECTFORM_CHANGE_REQ.Unpack(oPacker); } break;
		        case MSG_SECTFORM_CHANGE_RSP: { if (stTMSG_SECTFORM_CHANGE_RSP == null) { stTMSG_SECTFORM_CHANGE_RSP = new TMSG_SECTFORM_CHANGE_RSP(); } stTMSG_SECTFORM_CHANGE_RSP.Unpack(oPacker); } break;
		        case MSG_SECTFORM_UPDATE_NTF: { if (stTMSG_SECTFORM_UPDATE_NTF == null) { stTMSG_SECTFORM_UPDATE_NTF = new TMSG_SECTFORM_UPDATE_NTF(); } stTMSG_SECTFORM_UPDATE_NTF.Unpack(oPacker); } break;
		        case MSG_SHOP_RACK_CONTENT_CHANGED_NTF: { if (stTMSG_SHOP_RACK_CONTENT_CHANGED_NTF == null) { stTMSG_SHOP_RACK_CONTENT_CHANGED_NTF = new TMSG_SHOP_RACK_CONTENT_CHANGED_NTF(); } stTMSG_SHOP_RACK_CONTENT_CHANGED_NTF.Unpack(oPacker); } break;
		        case MSG_SHOP_LOAD_GOODS_REQ: { if (stTMSG_SHOP_LOAD_GOODS_REQ == null) { stTMSG_SHOP_LOAD_GOODS_REQ = new TMSG_SHOP_LOAD_GOODS_REQ(); } stTMSG_SHOP_LOAD_GOODS_REQ.Unpack(oPacker); } break;
		        case MSG_SHOP_LOAD_GOODS_RSP: { if (stTMSG_SHOP_LOAD_GOODS_RSP == null) { stTMSG_SHOP_LOAD_GOODS_RSP = new TMSG_SHOP_LOAD_GOODS_RSP(); } stTMSG_SHOP_LOAD_GOODS_RSP.Unpack(oPacker); } break;
		        case MSG_SHOP_BUY_GOODS_REQ: { if (stTMSG_SHOP_BUY_GOODS_REQ == null) { stTMSG_SHOP_BUY_GOODS_REQ = new TMSG_SHOP_BUY_GOODS_REQ(); } stTMSG_SHOP_BUY_GOODS_REQ.Unpack(oPacker); } break;
		        case MSG_SHOP_BUY_GOODS_RSP: { if (stTMSG_SHOP_BUY_GOODS_RSP == null) { stTMSG_SHOP_BUY_GOODS_RSP = new TMSG_SHOP_BUY_GOODS_RSP(); } stTMSG_SHOP_BUY_GOODS_RSP.Unpack(oPacker); } break;
		        case MSG_MAIL_GET_LIST_REQ: { if (stTMSG_MAIL_GET_LIST_REQ == null) { stTMSG_MAIL_GET_LIST_REQ = new TMSG_MAIL_GET_LIST_REQ(); } stTMSG_MAIL_GET_LIST_REQ.Unpack(oPacker); } break;
		        case MSG_MAIL_GET_LIST_RSP: { if (stTMSG_MAIL_GET_LIST_RSP == null) { stTMSG_MAIL_GET_LIST_RSP = new TMSG_MAIL_GET_LIST_RSP(); } stTMSG_MAIL_GET_LIST_RSP.Unpack(oPacker); } break;
		        case MSG_MAIL_OPEN_REQ: { if (stTMSG_MAIL_OPEN_REQ == null) { stTMSG_MAIL_OPEN_REQ = new TMSG_MAIL_OPEN_REQ(); } stTMSG_MAIL_OPEN_REQ.Unpack(oPacker); } break;
		        case MSG_MAIL_OPEN_RSP: { if (stTMSG_MAIL_OPEN_RSP == null) { stTMSG_MAIL_OPEN_RSP = new TMSG_MAIL_OPEN_RSP(); } stTMSG_MAIL_OPEN_RSP.Unpack(oPacker); } break;
		        case MSG_MAIL_DELETE_REQ: { if (stTMSG_MAIL_DELETE_REQ == null) { stTMSG_MAIL_DELETE_REQ = new TMSG_MAIL_DELETE_REQ(); } stTMSG_MAIL_DELETE_REQ.Unpack(oPacker); } break;
		        case MSG_MAIL_DELETE_RSP: { if (stTMSG_MAIL_DELETE_RSP == null) { stTMSG_MAIL_DELETE_RSP = new TMSG_MAIL_DELETE_RSP(); } stTMSG_MAIL_DELETE_RSP.Unpack(oPacker); } break;
		        case MSG_MAIL_GET_ATTACHMENT_REQ: { if (stTMSG_MAIL_GET_ATTACHMENT_REQ == null) { stTMSG_MAIL_GET_ATTACHMENT_REQ = new TMSG_MAIL_GET_ATTACHMENT_REQ(); } stTMSG_MAIL_GET_ATTACHMENT_REQ.Unpack(oPacker); } break;
		        case MSG_MAIL_GET_ATTACHMENT_RSP: { if (stTMSG_MAIL_GET_ATTACHMENT_RSP == null) { stTMSG_MAIL_GET_ATTACHMENT_RSP = new TMSG_MAIL_GET_ATTACHMENT_RSP(); } stTMSG_MAIL_GET_ATTACHMENT_RSP.Unpack(oPacker); } break;
		        case MSG_MAIL_NEW_MAIL_NTF: { if (stTMSG_MAIL_NEW_MAIL_NTF == null) { stTMSG_MAIL_NEW_MAIL_NTF = new TMSG_MAIL_NEW_MAIL_NTF(); } stTMSG_MAIL_NEW_MAIL_NTF.Unpack(oPacker); } break;
		        case MSG_MAIL_DELETE_NTF: { if (stTMSG_MAIL_DELETE_NTF == null) { stTMSG_MAIL_DELETE_NTF = new TMSG_MAIL_DELETE_NTF(); } stTMSG_MAIL_DELETE_NTF.Unpack(oPacker); } break;
		        case MSG_LOOTBOX_UPDATE_NTF: { if (stTMSG_LOOTBOX_UPDATE_NTF == null) { stTMSG_LOOTBOX_UPDATE_NTF = new TMSG_LOOTBOX_UPDATE_NTF(); } stTMSG_LOOTBOX_UPDATE_NTF.Unpack(oPacker); } break;
		        case MSG_LOOTBOX_OPEN_REQ: { if (stTMSG_LOOTBOX_OPEN_REQ == null) { stTMSG_LOOTBOX_OPEN_REQ = new TMSG_LOOTBOX_OPEN_REQ(); } stTMSG_LOOTBOX_OPEN_REQ.Unpack(oPacker); } break;
		        case MSG_LOOTBOX_OPEN_RSP: { if (stTMSG_LOOTBOX_OPEN_RSP == null) { stTMSG_LOOTBOX_OPEN_RSP = new TMSG_LOOTBOX_OPEN_RSP(); } stTMSG_LOOTBOX_OPEN_RSP.Unpack(oPacker); } break;
		default:throw new CPackDataException(CPackDataException.EN_EXCEPTION.UNDEFINE_MSGID);
	    } //switch;
	}   //  Unpack()

	public bool Init(uint _iMsgID) {
		if (stHead == null) { stHead = new TMsgHead(); }
		stHead.set_iMsgID(_iMsgID);
		switch(_iMsgID){
		        case MSG_LOGIN_HANDSHAKE_REQ: { if (stTMSG_LOGIN_HANDSHAKE_REQ == null) { stTMSG_LOGIN_HANDSHAKE_REQ = new TMSG_LOGIN_HANDSHAKE_REQ(); } else { stTMSG_LOGIN_HANDSHAKE_REQ.init(); } } break;
		        case MSG_LOGIN_HANDSHAKE_RSP: { if (stTMSG_LOGIN_HANDSHAKE_RSP == null) { stTMSG_LOGIN_HANDSHAKE_RSP = new TMSG_LOGIN_HANDSHAKE_RSP(); } else { stTMSG_LOGIN_HANDSHAKE_RSP.init(); } } break;
		        case MSG_LOGIN_LOGIN_REQ: { if (stTMSG_LOGIN_LOGIN_REQ == null) { stTMSG_LOGIN_LOGIN_REQ = new TMSG_LOGIN_LOGIN_REQ(); } else { stTMSG_LOGIN_LOGIN_REQ.init(); } } break;
		        case MSG_LOGIN_LOGIN_RSP: { if (stTMSG_LOGIN_LOGIN_RSP == null) { stTMSG_LOGIN_LOGIN_RSP = new TMSG_LOGIN_LOGIN_RSP(); } else { stTMSG_LOGIN_LOGIN_RSP.init(); } } break;
		        case MSG_LOGIN_ERROR_NTF: { if (stTMSG_LOGIN_ERROR_NTF == null) { stTMSG_LOGIN_ERROR_NTF = new TMSG_LOGIN_ERROR_NTF(); } else { stTMSG_LOGIN_ERROR_NTF.init(); } } break;
		        case MSG_LOGIN_NEW_ACCOUNT_NTF: { if (stTMSG_LOGIN_NEW_ACCOUNT_NTF == null) { stTMSG_LOGIN_NEW_ACCOUNT_NTF = new TMSG_LOGIN_NEW_ACCOUNT_NTF(); } else { stTMSG_LOGIN_NEW_ACCOUNT_NTF.init(); } } break;
		        case MSG_LOGIN_BAN_ACCOUNT_NTF: { if (stTMSG_LOGIN_BAN_ACCOUNT_NTF == null) { stTMSG_LOGIN_BAN_ACCOUNT_NTF = new TMSG_LOGIN_BAN_ACCOUNT_NTF(); } else { stTMSG_LOGIN_BAN_ACCOUNT_NTF.init(); } } break;
		        case MSG_LOGIN_AUTO_LOGIN_REQ: { if (stTMSG_LOGIN_AUTO_LOGIN_REQ == null) { stTMSG_LOGIN_AUTO_LOGIN_REQ = new TMSG_LOGIN_AUTO_LOGIN_REQ(); } else { stTMSG_LOGIN_AUTO_LOGIN_REQ.init(); } } break;
		        case MSG_LOGIN_UPDATE_ALSESSION_NTF: { if (stTMSG_LOGIN_UPDATE_ALSESSION_NTF == null) { stTMSG_LOGIN_UPDATE_ALSESSION_NTF = new TMSG_LOGIN_UPDATE_ALSESSION_NTF(); } else { stTMSG_LOGIN_UPDATE_ALSESSION_NTF.init(); } } break;
		        case MSG_LOGIN_KICKOUT_NTF: { if (stTMSG_LOGIN_KICKOUT_NTF == null) { stTMSG_LOGIN_KICKOUT_NTF = new TMSG_LOGIN_KICKOUT_NTF(); } else { stTMSG_LOGIN_KICKOUT_NTF.init(); } } break;
		        case MSG_LOGIN_QUERY_ALL_ROLE_REQ: { if (stTMSG_LOGIN_QUERY_ALL_ROLE_REQ == null) { stTMSG_LOGIN_QUERY_ALL_ROLE_REQ = new TMSG_LOGIN_QUERY_ALL_ROLE_REQ(); } else { stTMSG_LOGIN_QUERY_ALL_ROLE_REQ.init(); } } break;
		        case MSG_LOGIN_QUERY_ALL_ROLE_RSP: { if (stTMSG_LOGIN_QUERY_ALL_ROLE_RSP == null) { stTMSG_LOGIN_QUERY_ALL_ROLE_RSP = new TMSG_LOGIN_QUERY_ALL_ROLE_RSP(); } else { stTMSG_LOGIN_QUERY_ALL_ROLE_RSP.init(); } } break;
		        case MSG_LOGIN_QUERY_ALL_ROLE_NTF: { if (stTMSG_LOGIN_QUERY_ALL_ROLE_NTF == null) { stTMSG_LOGIN_QUERY_ALL_ROLE_NTF = new TMSG_LOGIN_QUERY_ALL_ROLE_NTF(); } else { stTMSG_LOGIN_QUERY_ALL_ROLE_NTF.init(); } } break;
		        case MSG_LOGIN_NOACC_INWORLD_NTF: { if (stTMSG_LOGIN_NOACC_INWORLD_NTF == null) { stTMSG_LOGIN_NOACC_INWORLD_NTF = new TMSG_LOGIN_NOACC_INWORLD_NTF(); } else { stTMSG_LOGIN_NOACC_INWORLD_NTF.init(); } } break;
		        case MSG_LOGIN_CREATE_ACC_INWORLD_REQ: { if (stTMSG_LOGIN_CREATE_ACC_INWORLD_REQ == null) { stTMSG_LOGIN_CREATE_ACC_INWORLD_REQ = new TMSG_LOGIN_CREATE_ACC_INWORLD_REQ(); } else { stTMSG_LOGIN_CREATE_ACC_INWORLD_REQ.init(); } } break;
		        case MSG_LOGIN_CREATE_ACC_INWORLD_RSP: { if (stTMSG_LOGIN_CREATE_ACC_INWORLD_RSP == null) { stTMSG_LOGIN_CREATE_ACC_INWORLD_RSP = new TMSG_LOGIN_CREATE_ACC_INWORLD_RSP(); } else { stTMSG_LOGIN_CREATE_ACC_INWORLD_RSP.init(); } } break;
		        case MSG_LOGIN_GEN_WORLD_ALS_REQ: { if (stTMSG_LOGIN_GEN_WORLD_ALS_REQ == null) { stTMSG_LOGIN_GEN_WORLD_ALS_REQ = new TMSG_LOGIN_GEN_WORLD_ALS_REQ(); } else { stTMSG_LOGIN_GEN_WORLD_ALS_REQ.init(); } } break;
		        case MSG_LOGIN_GEN_WORLD_ALS_RSP: { if (stTMSG_LOGIN_GEN_WORLD_ALS_RSP == null) { stTMSG_LOGIN_GEN_WORLD_ALS_RSP = new TMSG_LOGIN_GEN_WORLD_ALS_RSP(); } else { stTMSG_LOGIN_GEN_WORLD_ALS_RSP.init(); } } break;
		        case MSG_LOGIN_ACCOUNT_UNDELETE_REQ: { if (stTMSG_LOGIN_ACCOUNT_UNDELETE_REQ == null) { stTMSG_LOGIN_ACCOUNT_UNDELETE_REQ = new TMSG_LOGIN_ACCOUNT_UNDELETE_REQ(); } else { stTMSG_LOGIN_ACCOUNT_UNDELETE_REQ.init(); } } break;
		        case MSG_LOGIN_ACCOUNT_UNDELETE_RSP: { if (stTMSG_LOGIN_ACCOUNT_UNDELETE_RSP == null) { stTMSG_LOGIN_ACCOUNT_UNDELETE_RSP = new TMSG_LOGIN_ACCOUNT_UNDELETE_RSP(); } else { stTMSG_LOGIN_ACCOUNT_UNDELETE_RSP.init(); } } break;
		        case MSG_LOGIN_ACCOUNT_DELETE_STATE_NTF: { if (stTMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF == null) { stTMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF = new TMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF(); } else { stTMSG_LOGIN_ACCOUNT_DELETE_STATE_NTF.init(); } } break;
		        case MSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF: { if (stTMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF == null) { stTMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF = new TMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF(); } else { stTMSG_LOGIN_ACCOUNT_ROLE_HAS_GONE_NTF.init(); } } break;
		        case MSG_LOGIN_BANROLE_NTF: { if (stTMSG_LOGIN_BANROLE_NTF == null) { stTMSG_LOGIN_BANROLE_NTF = new TMSG_LOGIN_BANROLE_NTF(); } else { stTMSG_LOGIN_BANROLE_NTF.init(); } } break;
		        case MSG_LOGIN_SERVERMAINTAIN_NTF: { if (stTMSG_LOGIN_SERVERMAINTAIN_NTF == null) { stTMSG_LOGIN_SERVERMAINTAIN_NTF = new TMSG_LOGIN_SERVERMAINTAIN_NTF(); } else { stTMSG_LOGIN_SERVERMAINTAIN_NTF.init(); } } break;
		        case MSG_LOGIN_WORLDOPENDATE_NTF: { if (stTMSG_LOGIN_WORLDOPENDATE_NTF == null) { stTMSG_LOGIN_WORLDOPENDATE_NTF = new TMSG_LOGIN_WORLDOPENDATE_NTF(); } else { stTMSG_LOGIN_WORLDOPENDATE_NTF.init(); } } break;
		        case MSG_LOBBY_ERROR_NTF: { if (stTMSG_LOBBY_ERROR_NTF == null) { stTMSG_LOBBY_ERROR_NTF = new TMSG_LOBBY_ERROR_NTF(); } else { stTMSG_LOBBY_ERROR_NTF.init(); } } break;
		        case MSG_LEECHDOM_USE_REQ: { if (stTMSG_LEECHDOM_USE_REQ == null) { stTMSG_LEECHDOM_USE_REQ = new TMSG_LEECHDOM_USE_REQ(); } else { stTMSG_LEECHDOM_USE_REQ.init(); } } break;
		        case MSG_LEECHDOM_USE_RSP: { if (stTMSG_LEECHDOM_USE_RSP == null) { stTMSG_LEECHDOM_USE_RSP = new TMSG_LEECHDOM_USE_RSP(); } else { stTMSG_LEECHDOM_USE_RSP.init(); } } break;
		        case MSG_ACTION_LUA_REQUEST_REQ: { if (stTMSG_ACTION_LUA_REQUEST_REQ == null) { stTMSG_ACTION_LUA_REQUEST_REQ = new TMSG_ACTION_LUA_REQUEST_REQ(); } else { stTMSG_ACTION_LUA_REQUEST_REQ.init(); } } break;
		        case MSG_ACTION_LUA_REQUEST_RSP: { if (stTMSG_ACTION_LUA_REQUEST_RSP == null) { stTMSG_ACTION_LUA_REQUEST_RSP = new TMSG_ACTION_LUA_REQUEST_RSP(); } else { stTMSG_ACTION_LUA_REQUEST_RSP.init(); } } break;
		        case MSG_ACTION_LUA_SCRIPT_NTF: { if (stTMSG_ACTION_LUA_SCRIPT_NTF == null) { stTMSG_ACTION_LUA_SCRIPT_NTF = new TMSG_ACTION_LUA_SCRIPT_NTF(); } else { stTMSG_ACTION_LUA_SCRIPT_NTF.init(); } } break;
		        case MSG_ACTION_QUERY_TIME_REQ: { if (stTNullStruct == null) { stTNullStruct = new TNullStruct(); } else { stTNullStruct.init(); } } break;
		        case MSG_ACTION_QUERY_TIME_RSP: { if (stTMSG_ACTION_QUERY_TIME_RSP == null) { stTMSG_ACTION_QUERY_TIME_RSP = new TMSG_ACTION_QUERY_TIME_RSP(); } else { stTMSG_ACTION_QUERY_TIME_RSP.init(); } } break;
		        case MSG_ACTION_TESTCASE_NTF: { if (stTMSG_ACTION_TESTCASE_NTF == null) { stTMSG_ACTION_TESTCASE_NTF = new TMSG_ACTION_TESTCASE_NTF(); } else { stTMSG_ACTION_TESTCASE_NTF.init(); } } break;
		        case MSG_ACTION_SYNC_FLAG_NTF: { if (stTMSG_ACTION_SYNC_FLAG_NTF == null) { stTMSG_ACTION_SYNC_FLAG_NTF = new TMSG_ACTION_SYNC_FLAG_NTF(); } else { stTMSG_ACTION_SYNC_FLAG_NTF.init(); } } break;
		        case MSG_ACTION_OUT_OF_SYNC_NTF: { if (stTMSG_ACTION_OUT_OF_SYNC_NTF == null) { stTMSG_ACTION_OUT_OF_SYNC_NTF = new TMSG_ACTION_OUT_OF_SYNC_NTF(); } else { stTMSG_ACTION_OUT_OF_SYNC_NTF.init(); } } break;
		        case MSG_ACTION_SHOW_PRIZE_NTF: { if (stTMSG_ACTION_SHOW_PRIZE_NTF == null) { stTMSG_ACTION_SHOW_PRIZE_NTF = new TMSG_ACTION_SHOW_PRIZE_NTF(); } else { stTMSG_ACTION_SHOW_PRIZE_NTF.init(); } } break;
		        case MSG_ACTION_LUALIKE_SCRIPT_NTF: { if (stTMSG_ACTION_LUALIKE_SCRIPT_NTF == null) { stTMSG_ACTION_LUALIKE_SCRIPT_NTF = new TMSG_ACTION_LUALIKE_SCRIPT_NTF(); } else { stTMSG_ACTION_LUALIKE_SCRIPT_NTF.init(); } } break;
		        case MSG_ENTITY_CREATE_ROLE_NTF: { if (stTMSG_ENTITY_CREATE_ROLE_NTF == null) { stTMSG_ENTITY_CREATE_ROLE_NTF = new TMSG_ENTITY_CREATE_ROLE_NTF(); } else { stTMSG_ENTITY_CREATE_ROLE_NTF.init(); } } break;
		        case MSG_ENTITY_CREATE_ROLE_PART_NTF: { if (stTMSG_ENTITY_CREATE_ROLE_PART_NTF == null) { stTMSG_ENTITY_CREATE_ROLE_PART_NTF = new TMSG_ENTITY_CREATE_ROLE_PART_NTF(); } else { stTMSG_ENTITY_CREATE_ROLE_PART_NTF.init(); } } break;
		        case MSG_ENTITY_CREATE_PERSON_NTF: { if (stTMSG_ENTITY_CREATE_PERSON_NTF == null) { stTMSG_ENTITY_CREATE_PERSON_NTF = new TMSG_ENTITY_CREATE_PERSON_NTF(); } else { stTMSG_ENTITY_CREATE_PERSON_NTF.init(); } } break;
		        case MSG_ENTITY_CREATE_LEECHDOM_NTF: { if (stTMSG_ENTITY_CREATE_LEECHDOM_NTF == null) { stTMSG_ENTITY_CREATE_LEECHDOM_NTF = new TMSG_ENTITY_CREATE_LEECHDOM_NTF(); } else { stTMSG_ENTITY_CREATE_LEECHDOM_NTF.init(); } } break;
		        case MSG_ENTITY_DESTROY_NTF: { if (stTMSG_ENTITY_DESTROY_NTF == null) { stTMSG_ENTITY_DESTROY_NTF = new TMSG_ENTITY_DESTROY_NTF(); } else { stTMSG_ENTITY_DESTROY_NTF.init(); } } break;
		        case MSG_ENTITY_UPDATE_PROP_NTF: { if (stTMSG_ENTITY_UPDATE_PROP_NTF == null) { stTMSG_ENTITY_UPDATE_PROP_NTF = new TMSG_ENTITY_UPDATE_PROP_NTF(); } else { stTMSG_ENTITY_UPDATE_PROP_NTF.init(); } } break;
		        case MSG_ENTITY_SET_PROP_REQ: { if (stTMSG_ENTITY_SET_PROP_REQ == null) { stTMSG_ENTITY_SET_PROP_REQ = new TMSG_ENTITY_SET_PROP_REQ(); } else { stTMSG_ENTITY_SET_PROP_REQ.init(); } } break;
		        case MSG_ENTITY_SET_PROP_RSP: { if (stTMSG_ENTITY_SET_PROP_RSP == null) { stTMSG_ENTITY_SET_PROP_RSP = new TMSG_ENTITY_SET_PROP_RSP(); } else { stTMSG_ENTITY_SET_PROP_RSP.init(); } } break;
		        case MSG_ENTITY_RENAME_REQ: { if (stTMSG_ENTITY_RENAME_REQ == null) { stTMSG_ENTITY_RENAME_REQ = new TMSG_ENTITY_RENAME_REQ(); } else { stTMSG_ENTITY_RENAME_REQ.init(); } } break;
		        case MSG_ENTITY_RENAME_RSP: { if (stTMSG_ENTITY_RENAME_RSP == null) { stTMSG_ENTITY_RENAME_RSP = new TMSG_ENTITY_RENAME_RSP(); } else { stTMSG_ENTITY_RENAME_RSP.init(); } } break;
		        case MSG_CLIENT_LOGIN_OSS_REQ: { if (stTMSG_CLIENT_LOGIN_OSS_REQ == null) { stTMSG_CLIENT_LOGIN_OSS_REQ = new TMSG_CLIENT_LOGIN_OSS_REQ(); } else { stTMSG_CLIENT_LOGIN_OSS_REQ.init(); } } break;
		        case MSG_CLIENT_LOGIN_OSS_RSP: { if (stTMSG_CLIENT_LOGIN_OSS_RSP == null) { stTMSG_CLIENT_LOGIN_OSS_RSP = new TMSG_CLIENT_LOGIN_OSS_RSP(); } else { stTMSG_CLIENT_LOGIN_OSS_RSP.init(); } } break;
		        case MSG_SERVER_TIME_REQ: { if (stTMSG_SERVER_TIME_REQ == null) { stTMSG_SERVER_TIME_REQ = new TMSG_SERVER_TIME_REQ(); } else { stTMSG_SERVER_TIME_REQ.init(); } } break;
		        case MSG_SERVER_TIME_RSP: { if (stTMSG_SERVER_TIME_RSP == null) { stTMSG_SERVER_TIME_RSP = new TMSG_SERVER_TIME_RSP(); } else { stTMSG_SERVER_TIME_RSP.init(); } } break;
		        case MSG_SKEP_CREATE_NTF: { if (stTMSG_SKEP_CREATE_NTF == null) { stTMSG_SKEP_CREATE_NTF = new TMSG_SKEP_CREATE_NTF(); } else { stTMSG_SKEP_CREATE_NTF.init(); } } break;
		        case MSG_SKEP_DESTROY_NTF: { if (stTMSG_SKEP_DESTROY_NTF == null) { stTMSG_SKEP_DESTROY_NTF = new TMSG_SKEP_DESTROY_NTF(); } else { stTMSG_SKEP_DESTROY_NTF.init(); } } break;
		        case MSG_SKEP_ADD_ITEM_NTF: { if (stTMSG_SKEP_ADD_ITEM_NTF == null) { stTMSG_SKEP_ADD_ITEM_NTF = new TMSG_SKEP_ADD_ITEM_NTF(); } else { stTMSG_SKEP_ADD_ITEM_NTF.init(); } } break;
		        case MSG_SKEP_REMOVE_ITEM_NTF: { if (stTMSG_SKEP_REMOVE_ITEM_NTF == null) { stTMSG_SKEP_REMOVE_ITEM_NTF = new TMSG_SKEP_REMOVE_ITEM_NTF(); } else { stTMSG_SKEP_REMOVE_ITEM_NTF.init(); } } break;
		        case MSG_ROOM_USER_ENTER_REQ: { if (stTMSG_ROOM_USER_ENTER_REQ == null) { stTMSG_ROOM_USER_ENTER_REQ = new TMSG_ROOM_USER_ENTER_REQ(); } else { stTMSG_ROOM_USER_ENTER_REQ.init(); } } break;
		        case MSG_ROOM_USER_ENTER_RSP: { if (stTMSG_ROOM_USER_ENTER_RSP == null) { stTMSG_ROOM_USER_ENTER_RSP = new TMSG_ROOM_USER_ENTER_RSP(); } else { stTMSG_ROOM_USER_ENTER_RSP.init(); } } break;
		        case MSG_ROOM_USER_ENTER_NTF: { if (stTMSG_ROOM_USER_ENTER_NTF == null) { stTMSG_ROOM_USER_ENTER_NTF = new TMSG_ROOM_USER_ENTER_NTF(); } else { stTMSG_ROOM_USER_ENTER_NTF.init(); } } break;
		        case MSG_ROOM_USER_LEAVE_REQ: { if (stTMSG_ROOM_USER_LEAVE_REQ == null) { stTMSG_ROOM_USER_LEAVE_REQ = new TMSG_ROOM_USER_LEAVE_REQ(); } else { stTMSG_ROOM_USER_LEAVE_REQ.init(); } } break;
		        case MSG_ROOM_USER_LEAVE_RSP: { if (stTMSG_ROOM_USER_LEAVE_RSP == null) { stTMSG_ROOM_USER_LEAVE_RSP = new TMSG_ROOM_USER_LEAVE_RSP(); } else { stTMSG_ROOM_USER_LEAVE_RSP.init(); } } break;
		        case MSG_ROOM_USER_LEAVE_NTF: { if (stTMSG_ROOM_USER_LEAVE_NTF == null) { stTMSG_ROOM_USER_LEAVE_NTF = new TMSG_ROOM_USER_LEAVE_NTF(); } else { stTMSG_ROOM_USER_LEAVE_NTF.init(); } } break;
		        case MSG_ROOM_USER_ENTER_COMPLETE_NTF: { if (stTMSG_ROOM_USER_ENTER_COMPLETE_NTF == null) { stTMSG_ROOM_USER_ENTER_COMPLETE_NTF = new TMSG_ROOM_USER_ENTER_COMPLETE_NTF(); } else { stTMSG_ROOM_USER_ENTER_COMPLETE_NTF.init(); } } break;
		        case MSG_ROOM_SEARCH_REQ: { if (stTMSG_ROOM_SEARCH_REQ == null) { stTMSG_ROOM_SEARCH_REQ = new TMSG_ROOM_SEARCH_REQ(); } else { stTMSG_ROOM_SEARCH_REQ.init(); } } break;
		        case MSG_ROOM_SEARCH_RSP: { if (stTMSG_ROOM_SEARCH_RSP == null) { stTMSG_ROOM_SEARCH_RSP = new TMSG_ROOM_SEARCH_RSP(); } else { stTMSG_ROOM_SEARCH_RSP.init(); } } break;
		        case MSG_ROOM_GET_ROOMDESC_REQ: { if (stTMSG_ROOM_GET_ROOMDESC_REQ == null) { stTMSG_ROOM_GET_ROOMDESC_REQ = new TMSG_ROOM_GET_ROOMDESC_REQ(); } else { stTMSG_ROOM_GET_ROOMDESC_REQ.init(); } } break;
		        case MSG_ROOM_GET_ROOMDESC_RSP: { if (stTMSG_ROOM_GET_ROOMDESC_RSP == null) { stTMSG_ROOM_GET_ROOMDESC_RSP = new TMSG_ROOM_GET_ROOMDESC_RSP(); } else { stTMSG_ROOM_GET_ROOMDESC_RSP.init(); } } break;
		        case MSG_MINIGAME_SET_PROP_REQ: { if (stTMSG_MINIGAME_SET_PROP_REQ == null) { stTMSG_MINIGAME_SET_PROP_REQ = new TMSG_MINIGAME_SET_PROP_REQ(); } else { stTMSG_MINIGAME_SET_PROP_REQ.init(); } } break;
		        case MSG_MINIGAME_SET_PROP_RSP: { if (stTMSG_MINIGAME_SET_PROP_RSP == null) { stTMSG_MINIGAME_SET_PROP_RSP = new TMSG_MINIGAME_SET_PROP_RSP(); } else { stTMSG_MINIGAME_SET_PROP_RSP.init(); } } break;
		        case MSG_MINIGAME_GET_PROP_REQ: { if (stTMSG_MINIGAME_GET_PROP_REQ == null) { stTMSG_MINIGAME_GET_PROP_REQ = new TMSG_MINIGAME_GET_PROP_REQ(); } else { stTMSG_MINIGAME_GET_PROP_REQ.init(); } } break;
		        case MSG_MINIGAME_GET_PROP_RSP: { if (stTMSG_MINIGAME_GET_PROP_RSP == null) { stTMSG_MINIGAME_GET_PROP_RSP = new TMSG_MINIGAME_GET_PROP_RSP(); } else { stTMSG_MINIGAME_GET_PROP_RSP.init(); } } break;
		        case MSG_MINIGAME_PROP_UPDATED_NTF: { if (stTMSG_MINIGAME_PROP_UPDATED_NTF == null) { stTMSG_MINIGAME_PROP_UPDATED_NTF = new TMSG_MINIGAME_PROP_UPDATED_NTF(); } else { stTMSG_MINIGAME_PROP_UPDATED_NTF.init(); } } break;
		        case MSG_MINIGAME_RESET_ROOM_PROP_REQ: { if (stTMSG_MINIGAME_RESET_ROOM_PROP_REQ == null) { stTMSG_MINIGAME_RESET_ROOM_PROP_REQ = new TMSG_MINIGAME_RESET_ROOM_PROP_REQ(); } else { stTMSG_MINIGAME_RESET_ROOM_PROP_REQ.init(); } } break;
		        case MSG_MINIGAME_RESET_ROOM_PROP_RSP: { if (stTMSG_MINIGAME_RESET_ROOM_PROP_RSP == null) { stTMSG_MINIGAME_RESET_ROOM_PROP_RSP = new TMSG_MINIGAME_RESET_ROOM_PROP_RSP(); } else { stTMSG_MINIGAME_RESET_ROOM_PROP_RSP.init(); } } break;
		        case MSG_MINIGAME_RESET_ROOM_PROP_NTF: { if (stTMSG_MINIGAME_RESET_ROOM_PROP_NTF == null) { stTMSG_MINIGAME_RESET_ROOM_PROP_NTF = new TMSG_MINIGAME_RESET_ROOM_PROP_NTF(); } else { stTMSG_MINIGAME_RESET_ROOM_PROP_NTF.init(); } } break;
		        case MSG_MINIGAME_BROADCAST_MSG_REQ: { if (stTMSG_MINIGAME_BROADCAST_MSG_REQ == null) { stTMSG_MINIGAME_BROADCAST_MSG_REQ = new TMSG_MINIGAME_BROADCAST_MSG_REQ(); } else { stTMSG_MINIGAME_BROADCAST_MSG_REQ.init(); } } break;
		        case MSG_MINIGAME_BROADCAST_MSG_RSP: { if (stTMSG_MINIGAME_BROADCAST_MSG_RSP == null) { stTMSG_MINIGAME_BROADCAST_MSG_RSP = new TMSG_MINIGAME_BROADCAST_MSG_RSP(); } else { stTMSG_MINIGAME_BROADCAST_MSG_RSP.init(); } } break;
		        case MSG_MINIGAME_BROADCAST_MSG_NTF: { if (stTMSG_MINIGAME_BROADCAST_MSG_NTF == null) { stTMSG_MINIGAME_BROADCAST_MSG_NTF = new TMSG_MINIGAME_BROADCAST_MSG_NTF(); } else { stTMSG_MINIGAME_BROADCAST_MSG_NTF.init(); } } break;
		        case MSG_NET_OBJ_CREATE_NTF: { if (stTMSG_NET_OBJ_CREATE_NTF == null) { stTMSG_NET_OBJ_CREATE_NTF = new TMSG_NET_OBJ_CREATE_NTF(); } else { stTMSG_NET_OBJ_CREATE_NTF.init(); } } break;
		        case MSG_NET_OBJ_PROP_CHANGE_REQ: { if (stTMSG_NET_OBJ_PROP_CHANGE_REQ == null) { stTMSG_NET_OBJ_PROP_CHANGE_REQ = new TMSG_NET_OBJ_PROP_CHANGE_REQ(); } else { stTMSG_NET_OBJ_PROP_CHANGE_REQ.init(); } } break;
		        case MSG_NET_OBJ_PROP_UPDATED_NTF: { if (stTMSG_NET_OBJ_PROP_UPDATED_NTF == null) { stTMSG_NET_OBJ_PROP_UPDATED_NTF = new TMSG_NET_OBJ_PROP_UPDATED_NTF(); } else { stTMSG_NET_OBJ_PROP_UPDATED_NTF.init(); } } break;
		        case MSG_NET_OBJ_DESTROY_NTF: { if (stTMSG_NET_OBJ_DESTROY_NTF == null) { stTMSG_NET_OBJ_DESTROY_NTF = new TMSG_NET_OBJ_DESTROY_NTF(); } else { stTMSG_NET_OBJ_DESTROY_NTF.init(); } } break;
		        case MSG_NET_OBJ_SYNC_NTF: { if (stTMSG_NET_OBJ_SYNC_NTF == null) { stTMSG_NET_OBJ_SYNC_NTF = new TMSG_NET_OBJ_SYNC_NTF(); } else { stTMSG_NET_OBJ_SYNC_NTF.init(); } } break;
		        case MSG_NET_OBJ_SYNC_ELEMENT_NTF: { if (stTMSG_NET_OBJ_SYNC_ELEMENT_NTF == null) { stTMSG_NET_OBJ_SYNC_ELEMENT_NTF = new TMSG_NET_OBJ_SYNC_ELEMENT_NTF(); } else { stTMSG_NET_OBJ_SYNC_ELEMENT_NTF.init(); } } break;
		        case MSG_NET_OBJ_DESTROY_BY_ROLE_NTF: { if (stTMSG_NET_OBJ_DESTROY_BY_ROLE_NTF == null) { stTMSG_NET_OBJ_DESTROY_BY_ROLE_NTF = new TMSG_NET_OBJ_DESTROY_BY_ROLE_NTF(); } else { stTMSG_NET_OBJ_DESTROY_BY_ROLE_NTF.init(); } } break;
		        case MSG_DISCIPLE_BUILD_DISCIPLE_REQ: { if (stTMSG_DISCIPLE_BUILD_DISCIPLE_REQ == null) { stTMSG_DISCIPLE_BUILD_DISCIPLE_REQ = new TMSG_DISCIPLE_BUILD_DISCIPLE_REQ(); } else { stTMSG_DISCIPLE_BUILD_DISCIPLE_REQ.init(); } } break;
		        case MSG_DISCIPLE_BUILD_DISCIPLE_RSP: { if (stTMSG_DISCIPLE_BUILD_DISCIPLE_RSP == null) { stTMSG_DISCIPLE_BUILD_DISCIPLE_RSP = new TMSG_DISCIPLE_BUILD_DISCIPLE_RSP(); } else { stTMSG_DISCIPLE_BUILD_DISCIPLE_RSP.init(); } } break;
		        case MSG_DISCIPLE_TUINING_REQ: { if (stTMSG_DISCIPLE_TUINING_REQ == null) { stTMSG_DISCIPLE_TUINING_REQ = new TMSG_DISCIPLE_TUINING_REQ(); } else { stTMSG_DISCIPLE_TUINING_REQ.init(); } } break;
		        case MSG_DISCIPLE_TUINING_RSP: { if (stTMSG_DISCIPLE_TUINING_RSP == null) { stTMSG_DISCIPLE_TUINING_RSP = new TMSG_DISCIPLE_TUINING_RSP(); } else { stTMSG_DISCIPLE_TUINING_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_START_REQ: { if (stTMSG_DISCIPLE_WANDERING_START_REQ == null) { stTMSG_DISCIPLE_WANDERING_START_REQ = new TMSG_DISCIPLE_WANDERING_START_REQ(); } else { stTMSG_DISCIPLE_WANDERING_START_REQ.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_START_RSP: { if (stTMSG_DISCIPLE_WANDERING_START_RSP == null) { stTMSG_DISCIPLE_WANDERING_START_RSP = new TMSG_DISCIPLE_WANDERING_START_RSP(); } else { stTMSG_DISCIPLE_WANDERING_START_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_EVENT_LOG_NTF: { if (stTMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF == null) { stTMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF = new TMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF(); } else { stTMSG_DISCIPLE_WANDERING_EVENT_LOG_NTF.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_FINISH_REQ: { if (stTMSG_DISCIPLE_WANDERING_FINISH_REQ == null) { stTMSG_DISCIPLE_WANDERING_FINISH_REQ = new TMSG_DISCIPLE_WANDERING_FINISH_REQ(); } else { stTMSG_DISCIPLE_WANDERING_FINISH_REQ.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_FINISH_RSP: { if (stTMSG_DISCIPLE_WANDERING_FINISH_RSP == null) { stTMSG_DISCIPLE_WANDERING_FINISH_RSP = new TMSG_DISCIPLE_WANDERING_FINISH_RSP(); } else { stTMSG_DISCIPLE_WANDERING_FINISH_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_WILL_FINISH_NTF: { if (stTMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF == null) { stTMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF = new TMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF(); } else { stTMSG_DISCIPLE_WANDERING_WILL_FINISH_NTF.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ: { if (stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ == null) { stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ = new TMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ(); } else { stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_REQ.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP: { if (stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP == null) { stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP = new TMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP(); } else { stTMSG_DISCIPLE_WANDERING_STAGE_NEXT_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_CHOOSE_REQ: { if (stTMSG_DISCIPLE_WANDERING_CHOOSE_REQ == null) { stTMSG_DISCIPLE_WANDERING_CHOOSE_REQ = new TMSG_DISCIPLE_WANDERING_CHOOSE_REQ(); } else { stTMSG_DISCIPLE_WANDERING_CHOOSE_REQ.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_CHOOSE_RSP: { if (stTMSG_DISCIPLE_WANDERING_CHOOSE_RSP == null) { stTMSG_DISCIPLE_WANDERING_CHOOSE_RSP = new TMSG_DISCIPLE_WANDERING_CHOOSE_RSP(); } else { stTMSG_DISCIPLE_WANDERING_CHOOSE_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_REMOVE_REQ: { if (stTMSG_DISCIPLE_WANDERING_REMOVE_REQ == null) { stTMSG_DISCIPLE_WANDERING_REMOVE_REQ = new TMSG_DISCIPLE_WANDERING_REMOVE_REQ(); } else { stTMSG_DISCIPLE_WANDERING_REMOVE_REQ.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_REMOVE_RSP: { if (stTMSG_DISCIPLE_WANDERING_REMOVE_RSP == null) { stTMSG_DISCIPLE_WANDERING_REMOVE_RSP = new TMSG_DISCIPLE_WANDERING_REMOVE_RSP(); } else { stTMSG_DISCIPLE_WANDERING_REMOVE_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_CLOSE_REQ: { if (stTMSG_DISCIPLE_WANDERING_CLOSE_REQ == null) { stTMSG_DISCIPLE_WANDERING_CLOSE_REQ = new TMSG_DISCIPLE_WANDERING_CLOSE_REQ(); } else { stTMSG_DISCIPLE_WANDERING_CLOSE_REQ.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_CLOSE_RSP: { if (stTMSG_DISCIPLE_WANDERING_CLOSE_RSP == null) { stTMSG_DISCIPLE_WANDERING_CLOSE_RSP = new TMSG_DISCIPLE_WANDERING_CLOSE_RSP(); } else { stTMSG_DISCIPLE_WANDERING_CLOSE_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF: { if (stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF == null) { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF = new TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF(); } else { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_STATE_NTF.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ: { if (stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ == null) { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ = new TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ(); } else { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_REQ.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP: { if (stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP == null) { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP = new TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP(); } else { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_LOAD_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ: { if (stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ == null) { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ = new TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ(); } else { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_REQ.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP: { if (stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP == null) { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP = new TMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP(); } else { stTMSG_DISCIPLE_WANDERING_FORTUNEWHEEL_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_GODEXAM_REQ: { if (stTMSG_DISCIPLE_WANDERING_GODEXAM_REQ == null) { stTMSG_DISCIPLE_WANDERING_GODEXAM_REQ = new TMSG_DISCIPLE_WANDERING_GODEXAM_REQ(); } else { stTMSG_DISCIPLE_WANDERING_GODEXAM_REQ.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_GODEXAM_RSP: { if (stTMSG_DISCIPLE_WANDERING_GODEXAM_RSP == null) { stTMSG_DISCIPLE_WANDERING_GODEXAM_RSP = new TMSG_DISCIPLE_WANDERING_GODEXAM_RSP(); } else { stTMSG_DISCIPLE_WANDERING_GODEXAM_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ(); } else { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_REQ.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP(); } else { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_BUY_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ(); } else { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_REQ.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP(); } else { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_LOAD_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ(); } else { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_REQ.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP(); } else { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_OVER_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ(); } else { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_REQ.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP: { if (stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP == null) { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP = new TMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP(); } else { stTMSG_DISCIPLE_WANDERING_EQUIP_SHOP_REFRESH_RSP.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF: { if (stTMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF == null) { stTMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF = new TMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF(); } else { stTMSG_DISCIPLE_WANDERING_CHANGE_GOOD_NTF.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF: { if (stTMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF == null) { stTMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF = new TMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF(); } else { stTMSG_DISCIPLE_WANDERING_UPDATE_ALL_GOOD_NTF.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF: { if (stTMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF == null) { stTMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF = new TMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF(); } else { stTMSG_DISCIPLE_WANDERING_UPDATE_DIFFICULTY_NTF.init(); } } break;
		        case MSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF: { if (stTMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF == null) { stTMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF = new TMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF(); } else { stTMSG_DISCIPLE_WANDERING_SYSTEM_DATA_NTF.init(); } } break;
		        case MSG_WANDERING_ABILITY_SELECT_NTF: { if (stTMSG_WANDERING_ABILITY_SELECT_NTF == null) { stTMSG_WANDERING_ABILITY_SELECT_NTF = new TMSG_WANDERING_ABILITY_SELECT_NTF(); } else { stTMSG_WANDERING_ABILITY_SELECT_NTF.init(); } } break;
		        case MSG_WANDERING_ABILITY_SELECT_REQ: { if (stTMSG_WANDERING_ABILITY_SELECT_REQ == null) { stTMSG_WANDERING_ABILITY_SELECT_REQ = new TMSG_WANDERING_ABILITY_SELECT_REQ(); } else { stTMSG_WANDERING_ABILITY_SELECT_REQ.init(); } } break;
		        case MSG_WANDERING_ABILITY_SELECT_RSP: { if (stTMSG_WANDERING_ABILITY_SELECT_RSP == null) { stTMSG_WANDERING_ABILITY_SELECT_RSP = new TMSG_WANDERING_ABILITY_SELECT_RSP(); } else { stTMSG_WANDERING_ABILITY_SELECT_RSP.init(); } } break;
		        case MSG_WANDERING_ABILITY_SELECT_LOAD_REQ: { if (stTMSG_WANDERING_ABILITY_SELECT_LOAD_REQ == null) { stTMSG_WANDERING_ABILITY_SELECT_LOAD_REQ = new TMSG_WANDERING_ABILITY_SELECT_LOAD_REQ(); } else { stTMSG_WANDERING_ABILITY_SELECT_LOAD_REQ.init(); } } break;
		        case MSG_WANDERING_ABILITY_SELECT_LOAD_RSP: { if (stTMSG_WANDERING_ABILITY_SELECT_LOAD_RSP == null) { stTMSG_WANDERING_ABILITY_SELECT_LOAD_RSP = new TMSG_WANDERING_ABILITY_SELECT_LOAD_RSP(); } else { stTMSG_WANDERING_ABILITY_SELECT_LOAD_RSP.init(); } } break;
		        case MSG_WANDERING_EQUIP_SELECT_NEXT_REQ: { if (stTMSG_WANDERING_EQUIP_SELECT_NEXT_REQ == null) { stTMSG_WANDERING_EQUIP_SELECT_NEXT_REQ = new TMSG_WANDERING_EQUIP_SELECT_NEXT_REQ(); } else { stTMSG_WANDERING_EQUIP_SELECT_NEXT_REQ.init(); } } break;
		        case MSG_WANDERING_EQUIP_SELECT_NEXT_RSP: { if (stTMSG_WANDERING_EQUIP_SELECT_NEXT_RSP == null) { stTMSG_WANDERING_EQUIP_SELECT_NEXT_RSP = new TMSG_WANDERING_EQUIP_SELECT_NEXT_RSP(); } else { stTMSG_WANDERING_EQUIP_SELECT_NEXT_RSP.init(); } } break;
		        case MSG_WANDERING_EQUIP_SELECT_LOAD_REQ: { if (stTMSG_WANDERING_EQUIP_SELECT_LOAD_REQ == null) { stTMSG_WANDERING_EQUIP_SELECT_LOAD_REQ = new TMSG_WANDERING_EQUIP_SELECT_LOAD_REQ(); } else { stTMSG_WANDERING_EQUIP_SELECT_LOAD_REQ.init(); } } break;
		        case MSG_WANDERING_EQUIP_SELECT_LOAD_RSP: { if (stTMSG_WANDERING_EQUIP_SELECT_LOAD_RSP == null) { stTMSG_WANDERING_EQUIP_SELECT_LOAD_RSP = new TMSG_WANDERING_EQUIP_SELECT_LOAD_RSP(); } else { stTMSG_WANDERING_EQUIP_SELECT_LOAD_RSP.init(); } } break;
		        case MSG_WANDERING_EQUIP_SELECT_NTF: { if (stTMSG_WANDERING_EQUIP_SELECT_NTF == null) { stTMSG_WANDERING_EQUIP_SELECT_NTF = new TMSG_WANDERING_EQUIP_SELECT_NTF(); } else { stTMSG_WANDERING_EQUIP_SELECT_NTF.init(); } } break;
		        case MSG_BATTLE_INIT_CONTEXT_NTF: { if (stTMSG_BATTLE_INIT_CONTEXT_NTF == null) { stTMSG_BATTLE_INIT_CONTEXT_NTF = new TMSG_BATTLE_INIT_CONTEXT_NTF(); } else { stTMSG_BATTLE_INIT_CONTEXT_NTF.init(); } } break;
		        case MSG_BATTLE_INPUT_REQ: { if (stTMSG_BATTLE_INPUT_REQ == null) { stTMSG_BATTLE_INPUT_REQ = new TMSG_BATTLE_INPUT_REQ(); } else { stTMSG_BATTLE_INPUT_REQ.init(); } } break;
		        case MSG_BATTLE_INPUT_RSP: { if (stTMSG_BATTLE_INPUT_RSP == null) { stTMSG_BATTLE_INPUT_RSP = new TMSG_BATTLE_INPUT_RSP(); } else { stTMSG_BATTLE_INPUT_RSP.init(); } } break;
		        case MSG_BATTLE_RESULT_NTF: { if (stTMSG_BATTLE_RESULT_NTF == null) { stTMSG_BATTLE_RESULT_NTF = new TMSG_BATTLE_RESULT_NTF(); } else { stTMSG_BATTLE_RESULT_NTF.init(); } } break;
		        case MSG_BATTLE_ROUND_OVER_NTF: { if (stTMSG_BATTLE_ROUND_OVER_NTF == null) { stTMSG_BATTLE_ROUND_OVER_NTF = new TMSG_BATTLE_ROUND_OVER_NTF(); } else { stTMSG_BATTLE_ROUND_OVER_NTF.init(); } } break;
		        case MSG_BATTLE_PROP_UPDATED_NTF: { if (stTMSG_BATTLE_PROP_UPDATED_NTF == null) { stTMSG_BATTLE_PROP_UPDATED_NTF = new TMSG_BATTLE_PROP_UPDATED_NTF(); } else { stTMSG_BATTLE_PROP_UPDATED_NTF.init(); } } break;
		        case MSG_BATTLE_SKILL_UPDATED_NTF: { if (stTMSG_BATTLE_SKILL_UPDATED_NTF == null) { stTMSG_BATTLE_SKILL_UPDATED_NTF = new TMSG_BATTLE_SKILL_UPDATED_NTF(); } else { stTMSG_BATTLE_SKILL_UPDATED_NTF.init(); } } break;
		        case MSG_BATTLE_ACTION_USE_SKILL_NTF: { if (stTMSG_BATTLE_ACTION_USE_SKILL_NTF == null) { stTMSG_BATTLE_ACTION_USE_SKILL_NTF = new TMSG_BATTLE_ACTION_USE_SKILL_NTF(); } else { stTMSG_BATTLE_ACTION_USE_SKILL_NTF.init(); } } break;
		        case MSG_BATTLE_ACTION_INJURED_NTF: { if (stTMSG_BATTLE_ACTION_INJURED_NTF == null) { stTMSG_BATTLE_ACTION_INJURED_NTF = new TMSG_BATTLE_ACTION_INJURED_NTF(); } else { stTMSG_BATTLE_ACTION_INJURED_NTF.init(); } } break;
		        case MSG_BATTLE_ACTION_DEATH_NTF: { if (stTMSG_BATTLE_ACTION_DEATH_NTF == null) { stTMSG_BATTLE_ACTION_DEATH_NTF = new TMSG_BATTLE_ACTION_DEATH_NTF(); } else { stTMSG_BATTLE_ACTION_DEATH_NTF.init(); } } break;
		        case MSG_BATTLE_CONTEXT_PACK_NTF: { if (stTMSG_BATTLE_CONTEXT_PACK_NTF == null) { stTMSG_BATTLE_CONTEXT_PACK_NTF = new TMSG_BATTLE_CONTEXT_PACK_NTF(); } else { stTMSG_BATTLE_CONTEXT_PACK_NTF.init(); } } break;
		        case MSG_BATTLE_CONFIRM_RESULT_REQ: { if (stTMSG_BATTLE_CONFIRM_RESULT_REQ == null) { stTMSG_BATTLE_CONFIRM_RESULT_REQ = new TMSG_BATTLE_CONFIRM_RESULT_REQ(); } else { stTMSG_BATTLE_CONFIRM_RESULT_REQ.init(); } } break;
		        case MSG_BATTLE_CONFIRM_RESULT_RSP: { if (stTMSG_BATTLE_CONFIRM_RESULT_RSP == null) { stTMSG_BATTLE_CONFIRM_RESULT_RSP = new TMSG_BATTLE_CONFIRM_RESULT_RSP(); } else { stTMSG_BATTLE_CONFIRM_RESULT_RSP.init(); } } break;
		        case MSG_FORMATION_SET_LAYOUT_REQ: { if (stTMSG_FORMATION_SET_LAYOUT_REQ == null) { stTMSG_FORMATION_SET_LAYOUT_REQ = new TMSG_FORMATION_SET_LAYOUT_REQ(); } else { stTMSG_FORMATION_SET_LAYOUT_REQ.init(); } } break;
		        case MSG_FORMATION_SET_LAYOUT_RSP: { if (stTMSG_FORMATION_SET_LAYOUT_RSP == null) { stTMSG_FORMATION_SET_LAYOUT_RSP = new TMSG_FORMATION_SET_LAYOUT_RSP(); } else { stTMSG_FORMATION_SET_LAYOUT_RSP.init(); } } break;
		        case MSG_FORMATION_UPDATE_NTF: { if (stTMSG_FORMATION_UPDATE_NTF == null) { stTMSG_FORMATION_UPDATE_NTF = new TMSG_FORMATION_UPDATE_NTF(); } else { stTMSG_FORMATION_UPDATE_NTF.init(); } } break;
		        case MSG_SEEDING_CREATE_NTF: { if (stTMSG_SEEDING_CREATE_NTF == null) { stTMSG_SEEDING_CREATE_NTF = new TMSG_SEEDING_CREATE_NTF(); } else { stTMSG_SEEDING_CREATE_NTF.init(); } } break;
		        case MSG_SEEDING_UPDATE_PROP_NTF: { if (stTMSG_SEEDING_UPDATE_PROP_NTF == null) { stTMSG_SEEDING_UPDATE_PROP_NTF = new TMSG_SEEDING_UPDATE_PROP_NTF(); } else { stTMSG_SEEDING_UPDATE_PROP_NTF.init(); } } break;
		        case MSG_DISCIPLE_CREATE_NTF: { if (stTMSG_DISCIPLE_CREATE_NTF == null) { stTMSG_DISCIPLE_CREATE_NTF = new TMSG_DISCIPLE_CREATE_NTF(); } else { stTMSG_DISCIPLE_CREATE_NTF.init(); } } break;
		        case MSG_DISCIPLE_UPDATE_PROP_NTF: { if (stTMSG_DISCIPLE_UPDATE_PROP_NTF == null) { stTMSG_DISCIPLE_UPDATE_PROP_NTF = new TMSG_DISCIPLE_UPDATE_PROP_NTF(); } else { stTMSG_DISCIPLE_UPDATE_PROP_NTF.init(); } } break;
		        case MSG_DISCIPLE_RENAME_REQ: { if (stTMSG_DISCIPLE_RENAME_REQ == null) { stTMSG_DISCIPLE_RENAME_REQ = new TMSG_DISCIPLE_RENAME_REQ(); } else { stTMSG_DISCIPLE_RENAME_REQ.init(); } } break;
		        case MSG_DISCIPLE_RENAME_RSP: { if (stTMSG_DISCIPLE_RENAME_RSP == null) { stTMSG_DISCIPLE_RENAME_RSP = new TMSG_DISCIPLE_RENAME_RSP(); } else { stTMSG_DISCIPLE_RENAME_RSP.init(); } } break;
		        case MSG_SEEDING_UPGRADE_REQ: { if (stTMSG_SEEDING_UPGRADE_REQ == null) { stTMSG_SEEDING_UPGRADE_REQ = new TMSG_SEEDING_UPGRADE_REQ(); } else { stTMSG_SEEDING_UPGRADE_REQ.init(); } } break;
		        case MSG_SEEDING_UPGRADE_RSP: { if (stTMSG_SEEDING_UPGRADE_RSP == null) { stTMSG_SEEDING_UPGRADE_RSP = new TMSG_SEEDING_UPGRADE_RSP(); } else { stTMSG_SEEDING_UPGRADE_RSP.init(); } } break;
		        case MSG_EQUIP_CREATE_NTF: { if (stTMSG_EQUIP_CREATE_NTF == null) { stTMSG_EQUIP_CREATE_NTF = new TMSG_EQUIP_CREATE_NTF(); } else { stTMSG_EQUIP_CREATE_NTF.init(); } } break;
		        case MSG_EQUIP_UPDATE_PROP_NTF: { if (stTMSG_EQUIP_UPDATE_PROP_NTF == null) { stTMSG_EQUIP_UPDATE_PROP_NTF = new TMSG_EQUIP_UPDATE_PROP_NTF(); } else { stTMSG_EQUIP_UPDATE_PROP_NTF.init(); } } break;
		        case MSG_EQUIP_DELETE_NTF: { if (stTMSG_EQUIP_DELETE_NTF == null) { stTMSG_EQUIP_DELETE_NTF = new TMSG_EQUIP_DELETE_NTF(); } else { stTMSG_EQUIP_DELETE_NTF.init(); } } break;
		        case MSG_DISCIPLE_MOVE_EQUIP_REQ: { if (stTMSG_DISCIPLE_MOVE_EQUIP_REQ == null) { stTMSG_DISCIPLE_MOVE_EQUIP_REQ = new TMSG_DISCIPLE_MOVE_EQUIP_REQ(); } else { stTMSG_DISCIPLE_MOVE_EQUIP_REQ.init(); } } break;
		        case MSG_DISCIPLE_MOVE_EQUIP_RSP: { if (stTMSG_DISCIPLE_MOVE_EQUIP_RSP == null) { stTMSG_DISCIPLE_MOVE_EQUIP_RSP = new TMSG_DISCIPLE_MOVE_EQUIP_RSP(); } else { stTMSG_DISCIPLE_MOVE_EQUIP_RSP.init(); } } break;
		        case MSG_DISCIPLE_DELETE_EQUIP_REQ: { if (stTMSG_DISCIPLE_DELETE_EQUIP_REQ == null) { stTMSG_DISCIPLE_DELETE_EQUIP_REQ = new TMSG_DISCIPLE_DELETE_EQUIP_REQ(); } else { stTMSG_DISCIPLE_DELETE_EQUIP_REQ.init(); } } break;
		        case MSG_DISCIPLE_DELETE_EQUIP_RSP: { if (stTMSG_DISCIPLE_DELETE_EQUIP_RSP == null) { stTMSG_DISCIPLE_DELETE_EQUIP_RSP = new TMSG_DISCIPLE_DELETE_EQUIP_RSP(); } else { stTMSG_DISCIPLE_DELETE_EQUIP_RSP.init(); } } break;
		        case MSG_DISCIPLE_COMPOSE_EQUIP_REQ: { if (stTMSG_DISCIPLE_COMPOSE_EQUIP_REQ == null) { stTMSG_DISCIPLE_COMPOSE_EQUIP_REQ = new TMSG_DISCIPLE_COMPOSE_EQUIP_REQ(); } else { stTMSG_DISCIPLE_COMPOSE_EQUIP_REQ.init(); } } break;
		        case MSG_DISCIPLE_COMPOSE_EQUIP_RSP: { if (stTMSG_DISCIPLE_COMPOSE_EQUIP_RSP == null) { stTMSG_DISCIPLE_COMPOSE_EQUIP_RSP = new TMSG_DISCIPLE_COMPOSE_EQUIP_RSP(); } else { stTMSG_DISCIPLE_COMPOSE_EQUIP_RSP.init(); } } break;
		        case MSG_DISCIPLE_EQUIP_ATLAS_REQ: { if (stTMSG_DISCIPLE_EQUIP_ATLAS_REQ == null) { stTMSG_DISCIPLE_EQUIP_ATLAS_REQ = new TMSG_DISCIPLE_EQUIP_ATLAS_REQ(); } else { stTMSG_DISCIPLE_EQUIP_ATLAS_REQ.init(); } } break;
		        case MSG_DISCIPLE_EQUIP_ATLAS_RSP: { if (stTMSG_DISCIPLE_EQUIP_ATLAS_RSP == null) { stTMSG_DISCIPLE_EQUIP_ATLAS_RSP = new TMSG_DISCIPLE_EQUIP_ATLAS_RSP(); } else { stTMSG_DISCIPLE_EQUIP_ATLAS_RSP.init(); } } break;
		        case MSG_DISCIPLE_REFORGE_EQUIP_REQ: { if (stTMSG_DISCIPLE_REFORGE_EQUIP_REQ == null) { stTMSG_DISCIPLE_REFORGE_EQUIP_REQ = new TMSG_DISCIPLE_REFORGE_EQUIP_REQ(); } else { stTMSG_DISCIPLE_REFORGE_EQUIP_REQ.init(); } } break;
		        case MSG_DISCIPLE_REFORGE_EQUIP_RSP: { if (stTMSG_DISCIPLE_REFORGE_EQUIP_RSP == null) { stTMSG_DISCIPLE_REFORGE_EQUIP_RSP = new TMSG_DISCIPLE_REFORGE_EQUIP_RSP(); } else { stTMSG_DISCIPLE_REFORGE_EQUIP_RSP.init(); } } break;
		        case MSG_DISCIPLE_REPLACE_SKILL_REQ: { if (stTMSG_DISCIPLE_REPLACE_SKILL_REQ == null) { stTMSG_DISCIPLE_REPLACE_SKILL_REQ = new TMSG_DISCIPLE_REPLACE_SKILL_REQ(); } else { stTMSG_DISCIPLE_REPLACE_SKILL_REQ.init(); } } break;
		        case MSG_DISCIPLE_REPLACE_SKILL_RSP: { if (stTMSG_DISCIPLE_REPLACE_SKILL_RSP == null) { stTMSG_DISCIPLE_REPLACE_SKILL_RSP = new TMSG_DISCIPLE_REPLACE_SKILL_RSP(); } else { stTMSG_DISCIPLE_REPLACE_SKILL_RSP.init(); } } break;
		        case MSG_DISCIPLE_ADD_ABILITY_NTF: { if (stTMSG_DISCIPLE_ADD_ABILITY_NTF == null) { stTMSG_DISCIPLE_ADD_ABILITY_NTF = new TMSG_DISCIPLE_ADD_ABILITY_NTF(); } else { stTMSG_DISCIPLE_ADD_ABILITY_NTF.init(); } } break;
		        case MSG_DISCIPLE_REMOVE_ABILITY_NTF: { if (stTMSG_DISCIPLE_REMOVE_ABILITY_NTF == null) { stTMSG_DISCIPLE_REMOVE_ABILITY_NTF = new TMSG_DISCIPLE_REMOVE_ABILITY_NTF(); } else { stTMSG_DISCIPLE_REMOVE_ABILITY_NTF.init(); } } break;
		        case MSG_DISCIPLE_GRID_HP_UNLOCK_REQ: { if (stTMSG_DISCIPLE_GRID_HP_UNLOCK_REQ == null) { stTMSG_DISCIPLE_GRID_HP_UNLOCK_REQ = new TMSG_DISCIPLE_GRID_HP_UNLOCK_REQ(); } else { stTMSG_DISCIPLE_GRID_HP_UNLOCK_REQ.init(); } } break;
		        case MSG_DISCIPLE_GRID_HP_UNLOCK_RSP: { if (stTMSG_DISCIPLE_GRID_HP_UNLOCK_RSP == null) { stTMSG_DISCIPLE_GRID_HP_UNLOCK_RSP = new TMSG_DISCIPLE_GRID_HP_UNLOCK_RSP(); } else { stTMSG_DISCIPLE_GRID_HP_UNLOCK_RSP.init(); } } break;
		        case MSG_DISCIPLE_GRID_UNLOCK_NTF: { if (stTMSG_DISCIPLE_GRID_UNLOCK_NTF == null) { stTMSG_DISCIPLE_GRID_UNLOCK_NTF = new TMSG_DISCIPLE_GRID_UNLOCK_NTF(); } else { stTMSG_DISCIPLE_GRID_UNLOCK_NTF.init(); } } break;
		        case MSG_SECT_UPGRADE_REQ: { if (stTMSG_SECT_UPGRADE_REQ == null) { stTMSG_SECT_UPGRADE_REQ = new TMSG_SECT_UPGRADE_REQ(); } else { stTMSG_SECT_UPGRADE_REQ.init(); } } break;
		        case MSG_SECT_UPGRADE_RSP: { if (stTMSG_SECT_UPGRADE_RSP == null) { stTMSG_SECT_UPGRADE_RSP = new TMSG_SECT_UPGRADE_RSP(); } else { stTMSG_SECT_UPGRADE_RSP.init(); } } break;
		        case MSG_SECT_UPGRADE_NTF: { if (stTMSG_SECT_UPGRADE_NTF == null) { stTMSG_SECT_UPGRADE_NTF = new TMSG_SECT_UPGRADE_NTF(); } else { stTMSG_SECT_UPGRADE_NTF.init(); } } break;
		        case MSG_ANTIQUE_UPDATE_NTF: { if (stTMSG_ANTIQUE_UPDATE_NTF == null) { stTMSG_ANTIQUE_UPDATE_NTF = new TMSG_ANTIQUE_UPDATE_NTF(); } else { stTMSG_ANTIQUE_UPDATE_NTF.init(); } } break;
		        case MSG_ANTIQUE_UPGRADE_REQ: { if (stTMSG_ANTIQUE_UPGRADE_REQ == null) { stTMSG_ANTIQUE_UPGRADE_REQ = new TMSG_ANTIQUE_UPGRADE_REQ(); } else { stTMSG_ANTIQUE_UPGRADE_REQ.init(); } } break;
		        case MSG_ANTIQUE_UPGRADE_RSP: { if (stTMSG_ANTIQUE_UPGRADE_RSP == null) { stTMSG_ANTIQUE_UPGRADE_RSP = new TMSG_ANTIQUE_UPGRADE_RSP(); } else { stTMSG_ANTIQUE_UPGRADE_RSP.init(); } } break;
		        case MSG_STAMINA_BUY_REQ: { if (stTMSG_STAMINA_BUY_REQ == null) { stTMSG_STAMINA_BUY_REQ = new TMSG_STAMINA_BUY_REQ(); } else { stTMSG_STAMINA_BUY_REQ.init(); } } break;
		        case MSG_STAMINA_BUY_RSP: { if (stTMSG_STAMINA_BUY_RSP == null) { stTMSG_STAMINA_BUY_RSP = new TMSG_STAMINA_BUY_RSP(); } else { stTMSG_STAMINA_BUY_RSP.init(); } } break;
		        case MSG_STAMINA_NTF: { if (stTMSG_STAMINA_NTF == null) { stTMSG_STAMINA_NTF = new TMSG_STAMINA_NTF(); } else { stTMSG_STAMINA_NTF.init(); } } break;
		        case MSG_PERIODPRIZE_ITEM_CHANGED_NTF: { if (stTMSG_PERIODPRIZE_ITEM_CHANGED_NTF == null) { stTMSG_PERIODPRIZE_ITEM_CHANGED_NTF = new TMSG_PERIODPRIZE_ITEM_CHANGED_NTF(); } else { stTMSG_PERIODPRIZE_ITEM_CHANGED_NTF.init(); } } break;
		        case MSG_PERIODPRIZE_ITEM_PURCHASE_REQ: { if (stTMSG_PERIODPRIZE_ITEM_PURCHASE_REQ == null) { stTMSG_PERIODPRIZE_ITEM_PURCHASE_REQ = new TMSG_PERIODPRIZE_ITEM_PURCHASE_REQ(); } else { stTMSG_PERIODPRIZE_ITEM_PURCHASE_REQ.init(); } } break;
		        case MSG_PERIODPRIZE_ITEM_PURCHASE_RSP: { if (stTMSG_PERIODPRIZE_ITEM_PURCHASE_RSP == null) { stTMSG_PERIODPRIZE_ITEM_PURCHASE_RSP = new TMSG_PERIODPRIZE_ITEM_PURCHASE_RSP(); } else { stTMSG_PERIODPRIZE_ITEM_PURCHASE_RSP.init(); } } break;
		        case MSG_CDKEY_WITHDRAW_REQ: { if (stTMSG_CDKEY_WITHDRAW_REQ == null) { stTMSG_CDKEY_WITHDRAW_REQ = new TMSG_CDKEY_WITHDRAW_REQ(); } else { stTMSG_CDKEY_WITHDRAW_REQ.init(); } } break;
		        case MSG_CDKEY_WITHDRAW_RSP: { if (stTMSG_CDKEY_WITHDRAW_RSP == null) { stTMSG_CDKEY_WITHDRAW_RSP = new TMSG_CDKEY_WITHDRAW_RSP(); } else { stTMSG_CDKEY_WITHDRAW_RSP.init(); } } break;
		        case MSG_CDKEY_WITHDRAW_NTF: { if (stTMSG_CDKEY_WITHDRAW_NTF == null) { stTMSG_CDKEY_WITHDRAW_NTF = new TMSG_CDKEY_WITHDRAW_NTF(); } else { stTMSG_CDKEY_WITHDRAW_NTF.init(); } } break;
		        case MSG_ARENA_LOAD_REQ: { if (stTMSG_ARENA_LOAD_REQ == null) { stTMSG_ARENA_LOAD_REQ = new TMSG_ARENA_LOAD_REQ(); } else { stTMSG_ARENA_LOAD_REQ.init(); } } break;
		        case MSG_ARENA_LOAD_RSP: { if (stTMSG_ARENA_LOAD_RSP == null) { stTMSG_ARENA_LOAD_RSP = new TMSG_ARENA_LOAD_RSP(); } else { stTMSG_ARENA_LOAD_RSP.init(); } } break;
		        case MSG_ARENA_GET_RANKING_REQ: { if (stTMSG_ARENA_GET_RANKING_REQ == null) { stTMSG_ARENA_GET_RANKING_REQ = new TMSG_ARENA_GET_RANKING_REQ(); } else { stTMSG_ARENA_GET_RANKING_REQ.init(); } } break;
		        case MSG_ARENA_GET_RANKING_RSP: { if (stTMSG_ARENA_GET_RANKING_RSP == null) { stTMSG_ARENA_GET_RANKING_RSP = new TMSG_ARENA_GET_RANKING_RSP(); } else { stTMSG_ARENA_GET_RANKING_RSP.init(); } } break;
		        case MSG_ARENA_RANK_CHANGED_NTF: { if (stTMSG_ARENA_RANK_CHANGED_NTF == null) { stTMSG_ARENA_RANK_CHANGED_NTF = new TMSG_ARENA_RANK_CHANGED_NTF(); } else { stTMSG_ARENA_RANK_CHANGED_NTF.init(); } } break;
		        case MSG_ARENA_REFRESH_OPP_REQ: { if (stTMSG_ARENA_REFRESH_OPP_REQ == null) { stTMSG_ARENA_REFRESH_OPP_REQ = new TMSG_ARENA_REFRESH_OPP_REQ(); } else { stTMSG_ARENA_REFRESH_OPP_REQ.init(); } } break;
		        case MSG_ARENA_REFRESH_OPP_RSP: { if (stTMSG_ARENA_REFRESH_OPP_RSP == null) { stTMSG_ARENA_REFRESH_OPP_RSP = new TMSG_ARENA_REFRESH_OPP_RSP(); } else { stTMSG_ARENA_REFRESH_OPP_RSP.init(); } } break;
		        case MSG_ARENA_REFRESH_OPP_NTF: { if (stTMSG_ARENA_REFRESH_OPP_NTF == null) { stTMSG_ARENA_REFRESH_OPP_NTF = new TMSG_ARENA_REFRESH_OPP_NTF(); } else { stTMSG_ARENA_REFRESH_OPP_NTF.init(); } } break;
		        case MSG_ARENA_CHALLENGE_REQ: { if (stTMSG_ARENA_CHALLENGE_REQ == null) { stTMSG_ARENA_CHALLENGE_REQ = new TMSG_ARENA_CHALLENGE_REQ(); } else { stTMSG_ARENA_CHALLENGE_REQ.init(); } } break;
		        case MSG_ARENA_CHALLENGE_RSP: { if (stTMSG_ARENA_CHALLENGE_RSP == null) { stTMSG_ARENA_CHALLENGE_RSP = new TMSG_ARENA_CHALLENGE_RSP(); } else { stTMSG_ARENA_CHALLENGE_RSP.init(); } } break;
		        case MSG_ARENA_1_CHALLENGE_RESULT_NTF: { if (stTMSG_ARENA_1_CHALLENGE_RESULT_NTF == null) { stTMSG_ARENA_1_CHALLENGE_RESULT_NTF = new TMSG_ARENA_1_CHALLENGE_RESULT_NTF(); } else { stTMSG_ARENA_1_CHALLENGE_RESULT_NTF.init(); } } break;
		        case MSG_ARENA_DISCIPLE_DETAIL_REQ: { if (stTMSG_ARENA_DISCIPLE_DETAIL_REQ == null) { stTMSG_ARENA_DISCIPLE_DETAIL_REQ = new TMSG_ARENA_DISCIPLE_DETAIL_REQ(); } else { stTMSG_ARENA_DISCIPLE_DETAIL_REQ.init(); } } break;
		        case MSG_ARENA_DISCIPLE_DETAIL_RSP: { if (stTMSG_ARENA_DISCIPLE_DETAIL_RSP == null) { stTMSG_ARENA_DISCIPLE_DETAIL_RSP = new TMSG_ARENA_DISCIPLE_DETAIL_RSP(); } else { stTMSG_ARENA_DISCIPLE_DETAIL_RSP.init(); } } break;
		        case MSG_GUIDE_SAVE_PROGRESS_REQ: { if (stTMSG_GUIDE_SAVE_PROGRESS_REQ == null) { stTMSG_GUIDE_SAVE_PROGRESS_REQ = new TMSG_GUIDE_SAVE_PROGRESS_REQ(); } else { stTMSG_GUIDE_SAVE_PROGRESS_REQ.init(); } } break;
		        case MSG_GUIDE_SAVE_PROGRESS_RSP: { if (stTMSG_GUIDE_SAVE_PROGRESS_RSP == null) { stTMSG_GUIDE_SAVE_PROGRESS_RSP = new TMSG_GUIDE_SAVE_PROGRESS_RSP(); } else { stTMSG_GUIDE_SAVE_PROGRESS_RSP.init(); } } break;
		        case MSG_GUIDE_LAUNCH_NTF: { if (stTMSG_GUIDE_LAUNCH_NTF == null) { stTMSG_GUIDE_LAUNCH_NTF = new TMSG_GUIDE_LAUNCH_NTF(); } else { stTMSG_GUIDE_LAUNCH_NTF.init(); } } break;
		        case MSG_GUIDE_UPDATE_NTF: { if (stTMSG_GUIDE_UPDATE_NTF == null) { stTMSG_GUIDE_UPDATE_NTF = new TMSG_GUIDE_UPDATE_NTF(); } else { stTMSG_GUIDE_UPDATE_NTF.init(); } } break;
		        case MSG_GUIDE_SAVE_FREE_BUFF_REQ: { if (stTMSG_GUIDE_SAVE_FREE_BUFF_REQ == null) { stTMSG_GUIDE_SAVE_FREE_BUFF_REQ = new TMSG_GUIDE_SAVE_FREE_BUFF_REQ(); } else { stTMSG_GUIDE_SAVE_FREE_BUFF_REQ.init(); } } break;
		        case MSG_GUIDE_SAVE_FREE_BUFF_RSP: { if (stTMSG_GUIDE_SAVE_FREE_BUFF_RSP == null) { stTMSG_GUIDE_SAVE_FREE_BUFF_RSP = new TMSG_GUIDE_SAVE_FREE_BUFF_RSP(); } else { stTMSG_GUIDE_SAVE_FREE_BUFF_RSP.init(); } } break;
		        case MSG_SECTFORM_CHANGE_REQ: { if (stTMSG_SECTFORM_CHANGE_REQ == null) { stTMSG_SECTFORM_CHANGE_REQ = new TMSG_SECTFORM_CHANGE_REQ(); } else { stTMSG_SECTFORM_CHANGE_REQ.init(); } } break;
		        case MSG_SECTFORM_CHANGE_RSP: { if (stTMSG_SECTFORM_CHANGE_RSP == null) { stTMSG_SECTFORM_CHANGE_RSP = new TMSG_SECTFORM_CHANGE_RSP(); } else { stTMSG_SECTFORM_CHANGE_RSP.init(); } } break;
		        case MSG_SECTFORM_UPDATE_NTF: { if (stTMSG_SECTFORM_UPDATE_NTF == null) { stTMSG_SECTFORM_UPDATE_NTF = new TMSG_SECTFORM_UPDATE_NTF(); } else { stTMSG_SECTFORM_UPDATE_NTF.init(); } } break;
		        case MSG_SHOP_RACK_CONTENT_CHANGED_NTF: { if (stTMSG_SHOP_RACK_CONTENT_CHANGED_NTF == null) { stTMSG_SHOP_RACK_CONTENT_CHANGED_NTF = new TMSG_SHOP_RACK_CONTENT_CHANGED_NTF(); } else { stTMSG_SHOP_RACK_CONTENT_CHANGED_NTF.init(); } } break;
		        case MSG_SHOP_LOAD_GOODS_REQ: { if (stTMSG_SHOP_LOAD_GOODS_REQ == null) { stTMSG_SHOP_LOAD_GOODS_REQ = new TMSG_SHOP_LOAD_GOODS_REQ(); } else { stTMSG_SHOP_LOAD_GOODS_REQ.init(); } } break;
		        case MSG_SHOP_LOAD_GOODS_RSP: { if (stTMSG_SHOP_LOAD_GOODS_RSP == null) { stTMSG_SHOP_LOAD_GOODS_RSP = new TMSG_SHOP_LOAD_GOODS_RSP(); } else { stTMSG_SHOP_LOAD_GOODS_RSP.init(); } } break;
		        case MSG_SHOP_BUY_GOODS_REQ: { if (stTMSG_SHOP_BUY_GOODS_REQ == null) { stTMSG_SHOP_BUY_GOODS_REQ = new TMSG_SHOP_BUY_GOODS_REQ(); } else { stTMSG_SHOP_BUY_GOODS_REQ.init(); } } break;
		        case MSG_SHOP_BUY_GOODS_RSP: { if (stTMSG_SHOP_BUY_GOODS_RSP == null) { stTMSG_SHOP_BUY_GOODS_RSP = new TMSG_SHOP_BUY_GOODS_RSP(); } else { stTMSG_SHOP_BUY_GOODS_RSP.init(); } } break;
		        case MSG_MAIL_GET_LIST_REQ: { if (stTMSG_MAIL_GET_LIST_REQ == null) { stTMSG_MAIL_GET_LIST_REQ = new TMSG_MAIL_GET_LIST_REQ(); } else { stTMSG_MAIL_GET_LIST_REQ.init(); } } break;
		        case MSG_MAIL_GET_LIST_RSP: { if (stTMSG_MAIL_GET_LIST_RSP == null) { stTMSG_MAIL_GET_LIST_RSP = new TMSG_MAIL_GET_LIST_RSP(); } else { stTMSG_MAIL_GET_LIST_RSP.init(); } } break;
		        case MSG_MAIL_OPEN_REQ: { if (stTMSG_MAIL_OPEN_REQ == null) { stTMSG_MAIL_OPEN_REQ = new TMSG_MAIL_OPEN_REQ(); } else { stTMSG_MAIL_OPEN_REQ.init(); } } break;
		        case MSG_MAIL_OPEN_RSP: { if (stTMSG_MAIL_OPEN_RSP == null) { stTMSG_MAIL_OPEN_RSP = new TMSG_MAIL_OPEN_RSP(); } else { stTMSG_MAIL_OPEN_RSP.init(); } } break;
		        case MSG_MAIL_DELETE_REQ: { if (stTMSG_MAIL_DELETE_REQ == null) { stTMSG_MAIL_DELETE_REQ = new TMSG_MAIL_DELETE_REQ(); } else { stTMSG_MAIL_DELETE_REQ.init(); } } break;
		        case MSG_MAIL_DELETE_RSP: { if (stTMSG_MAIL_DELETE_RSP == null) { stTMSG_MAIL_DELETE_RSP = new TMSG_MAIL_DELETE_RSP(); } else { stTMSG_MAIL_DELETE_RSP.init(); } } break;
		        case MSG_MAIL_GET_ATTACHMENT_REQ: { if (stTMSG_MAIL_GET_ATTACHMENT_REQ == null) { stTMSG_MAIL_GET_ATTACHMENT_REQ = new TMSG_MAIL_GET_ATTACHMENT_REQ(); } else { stTMSG_MAIL_GET_ATTACHMENT_REQ.init(); } } break;
		        case MSG_MAIL_GET_ATTACHMENT_RSP: { if (stTMSG_MAIL_GET_ATTACHMENT_RSP == null) { stTMSG_MAIL_GET_ATTACHMENT_RSP = new TMSG_MAIL_GET_ATTACHMENT_RSP(); } else { stTMSG_MAIL_GET_ATTACHMENT_RSP.init(); } } break;
		        case MSG_MAIL_NEW_MAIL_NTF: { if (stTMSG_MAIL_NEW_MAIL_NTF == null) { stTMSG_MAIL_NEW_MAIL_NTF = new TMSG_MAIL_NEW_MAIL_NTF(); } else { stTMSG_MAIL_NEW_MAIL_NTF.init(); } } break;
		        case MSG_MAIL_DELETE_NTF: { if (stTMSG_MAIL_DELETE_NTF == null) { stTMSG_MAIL_DELETE_NTF = new TMSG_MAIL_DELETE_NTF(); } else { stTMSG_MAIL_DELETE_NTF.init(); } } break;
		        case MSG_LOOTBOX_UPDATE_NTF: { if (stTMSG_LOOTBOX_UPDATE_NTF == null) { stTMSG_LOOTBOX_UPDATE_NTF = new TMSG_LOOTBOX_UPDATE_NTF(); } else { stTMSG_LOOTBOX_UPDATE_NTF.init(); } } break;
		        case MSG_LOOTBOX_OPEN_REQ: { if (stTMSG_LOOTBOX_OPEN_REQ == null) { stTMSG_LOOTBOX_OPEN_REQ = new TMSG_LOOTBOX_OPEN_REQ(); } else { stTMSG_LOOTBOX_OPEN_REQ.init(); } } break;
		        case MSG_LOOTBOX_OPEN_RSP: { if (stTMSG_LOOTBOX_OPEN_RSP == null) { stTMSG_LOOTBOX_OPEN_RSP = new TMSG_LOOTBOX_OPEN_RSP(); } else { stTMSG_LOOTBOX_OPEN_RSP.init(); } } break;
		default:return false;
	    } //switch;
	    return true;
	}   //  Unpack()

	public static bool ExistsMsg(int _iMsgID)
	{
		int nCur = 0, nStart = 0, nEnd = 231 - 1, nDiff = 0;
		while (nStart <= nEnd)
		{
			nCur = (nStart + nEnd) >> 1;
			nDiff = s_arrMsgID[nCur] - _iMsgID;
			if (nDiff == 0) { return true; }
			if (nDiff < 0) { nStart = nCur + 1; } else { nEnd = nCur - 1; }
		}
		return false;
	}

}   // msg group:  TCSMessage


}  //  namespace gamepol
